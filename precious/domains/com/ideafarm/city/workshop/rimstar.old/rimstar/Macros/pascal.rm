/*
** Macro module: pascal.rm - Pascal language support features
**
** Copyright (C) 1993,1994 Brian L. Smith
** Copyright (C) 1993,1994 RimStar Technology, Inc.
** All rights reserved internationally.
** Unlicensed use is a violation of applicable laws.
**
** This source code is provided to licensed users of RimStar's products
** for the purpose of allowing the user to customize and/or enhance RimStar's
** products. The source code remains the property of the copyright holders
** with all rights reserved internationally.
** Any modifications to the source code are considered derivative works and
** all rights thereto are reserved to the copyright holders except
** that the purchaser may use the derivitive work in the same manner
** as permitted by the license governing the unmodified product.
** Distribution in any manner of any part of the original source code,
** whether in source or object form, is expressly prohibited without the
** express written permission of the copyright holders.
**
*/

#include "macro.h"
#include "lang.h"

#define INCL_PASCAL_TEMPLATES
#include "template.h"


/* IndentStyle is an internal variable within the editor
** set it with RSE_FLAGS or on the command line using
** the -Is flag
*/
extern long	IndentStyle;

/* IndentSize is an internal variable within the editor
** set it with RSE_FLAGS or on the command line using
** the -Iwnnn where 'nnn' is size of indent. Default: 3
*/
extern long	IndentSize;

/* regular indent keyboard - created in lang.rm */
extern HKEYBOARD	_r_keymap;

/*
** Special buffer keyboards used for Pascal specific
** indenting and template editing.
*/
HKEYBOARD	_pas_smart, _pas_template, _pas_alt_template;


/*
** Pascal keyword names - for SyntaColor support
*/
PSZ KeywordsPascal[] = {
   "and",          "array",      "begin",          "case",        "const",
   "div",          "do",         "do",             "downto",      "else",
   "end",          "file",       "for",            "forward",     "function",
   "goto",         "if",         "in",             "label",       "mod",
   "nil",          "not",        "or",             "of",          "packed",
   "procedure",    "program",    "record",         "repeat",      "set",
   "then",         "to",         "type",           "until",    	"var",
   "while",        "with",       "xor",
  #if 1
   "absolute",     "asm",        "assembler",      "constructor", "destructor",
   "export",       "exports",    "external",       "far",         "implementation",
   "inline",       "interface",  "interrupt",      "library",     "near",
   "object",       "private",    "shl",            "shr",         "string",
   "unit",         "uses",       "virtual",
  #endif
  #if 0
   "boolean",      "char",       "integer",        "real",        "text"
  #endif
   0
};

HHASH	htKeywordsPascal;	/* Handle to hash table created from above keywords */


/*
**	_pas_init
**
**	 Sets up the language specific features for Pascal and related language
**	 files. Called by LangInit() in lang.rm
*/
void
_pas_init(void) {
	PBUFINFO	pBufInfo;

	/* Set up for SyntaColor */
	if ( pBufInfo = BufInfoQuery(BufQueryCurrentBuffer()) ) {
		pBufInfo->htKeywords   = htKeywordsPascal;
		pBufInfo->ulFlags     |= BI_SYNTACOLOR;
		pBufInfo->syntaRefresh = SyntaColorPascal;
		pBufInfo->syntaUpdate  = SyntaColorUpdatePascal;
		if ( SyntaColorEnabled )
			SyntaColorPascal(-1L, htKeywordsPascal);

		/* Set templates to use if template editing style in effect */
		switch ( IndentStyle ) {
		case 3:		case 4:		case 6:		case 7:
			pBufInfo->pTemplates = pasTemplates;
		}
	}

	/*
	** Make the Pascal keyboard bindings override the regular keyboard
	**	for this buffer. Called by LangInit() in lang.rm
	*/
	switch ( IndentStyle ) {
	case 0:	return;
	case 1:	KbdSetBufferKeyboard(_r_keymap);				break;
	case 2:
	case 5:	KbdSetBufferKeyboard(_pas_smart);			break;
	case 3:
	case 6:	KbdSetBufferKeyboard(_pas_template);		break;
	case 4:
	case 7:	KbdSetBufferKeyboard(_pas_alt_template);	break;
	}
} /* end _pas_init() */


/*
** Pascal extension specific next/previous word functions
*/

void
_pas_next_word(void) {
	long	len;
	len = SrchFwd("([a-zA-Z0-9_]+)|([^ \t\f\na-zA-Z0-9_]+)|([ \t\f\n]+)[ \t\f\n]*", -1, 1, 0);
	if ( len > 0 )
		PosNextChar(len);
} /* end _pas_next_word() */

void
_pas_prev_word(void) {
	__prev_word();
}


/*
** _pasBindKeys is used to define keyboard bindings for the
** various indenting styles supported. A new keyboard has
** usually been made current to just define these keys
** and that keyboard is then made a buffer specific keyboard
** for Pascal files.
*/
void
_pasBindKeys( int template ) {
	char	*enter, *kp_enter, *open, *close, *tab, *expand;

	expand   = "TemplateExpand";
	enter    = "BufNewlineIndent";
	kp_enter = enter;
	if ( template == 2 )
		tab = expand;	/* alternate template - expand on tab key */
	else
		tab = "slide_in";

	if ( template == 1 )	{
		/* regular template editing - expand on space key */
		KbdBind("Space",		expand);
		KbdBind("Ctrl+Space","just_space");
	}
	KbdBind("Enter",			enter);
	KbdBind("Kp_Enter",		kp_enter);
	KbdBind("Shift+Enter",	"BufNewlineIndent");
	KbdBind("Tab",				tab);
	KbdBind("Shift+Tab", 	"slide_out");
} /* end _pasBindKeys() */


void
_init(void) {

	/*
	**	Create keyboards for the keys we need to remap
	**	These keyboards are used as Buffer keyboards which
	**	over-ride and/or supplement the current keyboard
	**	when that buffer is current.
	*/

	/* The regular indenting keyboard ( -Is1 ) is created in lang.rm */

	/* Create smart indenting keyboard ( -Is2 ) */
	KbdPush();
	_pasBindKeys(0);
	_pas_smart = KbdPop();

	/* Create template editing keyboard ( -Is3 ) */
	KbdPush();
	_pasBindKeys(1);
	_pas_template = KbdPop();

	/* Create alternate template editing keyboard ( -Is4 ) */
	KbdPush();
	_pasBindKeys(2);
	_pas_alt_template = KbdPop();

	/* Set up for SyntaColor support */

	/* Create a hash table of the Pascal language keywords */
	/* keyword recognition is case insensitive */
	htKeywordsPascal = LangLoadKeywords(KeywordsPascal, 1);

} /* end _init() */



/*
** End module: pascal.rm
*/

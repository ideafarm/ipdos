
                                                    American Standard Code for Information Interchange (ASCII)


 0    nul  1  ? soh  2  ? stx  3  ? etx  4  ? eot  5  ? enq  6  ? ack  7    bel  8    bs   9    tab  a    lf   b  ? vt   c  ? ff   d    cr   e  ? so   f  ¤ si

 01 ? dle  11 ? dc1  21 ? dc2  31 ? dc3  41 ¶ dc4  51 § nak  61 ? syn  71 ? etb  81 ? can  91 ? em   a1 ? sub  b1 ? esc  c1 ? fs   d1 ? gs   e1 ? rs   f1 ? us

 02        12 !      22 "      32 #      42 $      52 %      62 &      72 '      82 (      92 )      a2 *      b2 +      c2 ,      d2 -      e2 .      f2 /

 03 0      13 1      23 2      33 3      43 4      53 5      63 6      73 7      83 8      93 9      a3 :      b3 ;      c3 <      d3 =      e3 >      f3 ?

 04 @      14 A      24 B      34 C      44 D      54 E      64 F      74 G      84 H      94 I      a4 J      b4 K      c4 L      d4 M      e4 N      f4 O

 05 P      15 Q      25 R      35 S      45 T      55 U      65 V      75 W      85 X      95 Y      a5 Z      b5 [      c5 \      d5 ]      e5 ^      f5 _

 06 `      16 a      26 b      36 c      46 d      56 e      66 f      76 g      86 h      96 i      a6 j      b6 k      c6 l      d6 m      e6 n      f6 o

 07 p      17 q      27 r      37 s      47 t      57 u      67 v      77 w      87 x      97 y      a7 z      b7 {      c7 |      d7 }      e7 ~      f7 ¦

 08 Ç      18 ü      28 é      38 â      48 ä      58 à      68 å      78 ç      88 ê      98 ë      a8 è      b8 ï      c8 î      d8 ì      e8 Ä      f8 Å

 09 É      19 æ      29 Æ      39 ô      49 ö      59 ò      69 û      79 ù      89 ÿ      99 Ö      a9 Ü      b9 ¢      c9 £      d9 ¥      e9 P      f9 ƒ

 0a á      1a í      2a ó      3a ú      4a ñ      5a Ñ      6a ª      7a º      8a ¿      9a ¬      aa ¬      ba ½      ca ¼      da ¡      ea «      fa »

 0b ¦      1b ¦      2b ¦      3b ¦      4b ¦      5b ¦      6b ¦      7b +      8b +      9b ¦      ab ¦      bb +      cb +      db +      eb +      fb +

 0c +      1c -      2c -      3c +      4c -      5c +      6c ¦      7c ¦      8c +      9c +      ac -      bc -      cc ¦      dc -      ec +      fc -

 0d -      1d -      2d -      3d +      4d +      5d +      6d +      7d +      8d +      9d +      ad +      bd ¦      cd _      dd ¦      ed ¦      fd ¯

 0e a      1e ß      2e G      3e p      4e S      5e s      6e µ      7e t      8e F      9e T      ae O      be d      ce 8      de f      ee e      fe n

 0f =      1f ±      2f =      3f =      4f (      5f )      6f ÷      7f ˜      8f °      9f ·      af ·      bf v      cf n      df ²      ef ¦      ff  


C++ Operator Precedence and Associativity
Operator                Name or Meaning                         Associativity 
 
::                      Scope resolution                        None 

.                       Member selection (object)               Left to right 
->                      Member selection (pointer)              Left to right 
[]                      Array subscript                         Left to right 
()                      Function call member initialization     Left to right 
++                      Postfix increment                       Left to right 
--                      Postfix decrement                       Left to right 
typeid()                type name                               Left to right 
const_cast              Type cast (conversion)                  Left to right 
dynamic_cast            Type cast (conversion)                  Left to right 
reinterpret_cast        Type cast (conversion)                  Left to right 
static_cast             Type cast (conversion)                  Left to right 

sizeof                  Size of object or type                  Right to left 
++                      Prefix increment                        Right to left 
--                      Prefix decrement                        Right to left 
~                       One's complement                        Right to left 
!                       Logical not                             Right to left 
-                       Unary minus                             Right to left 
+                       Unary plus                              Right to left 
&                       Address-of                              Right to left 
*                       Indirection                             Right to left 
new                     Create object                           Right to left 
delete                  Destroy object                          Right to left 
()                      Cast                                    Right to left 

.*                      Pointer-to-member (objects)             Left to right 
->*                     Pointer-to-member (pointers)            Left to right 

*                       Multiplication                          Left to right 
/                       Division                                Left to right 
%                       Modulus                                 Left to right 

+                       Addition                                Left to right 
-                       Subtraction                             Left to right 

<<                      Left shift                              Left to right 
>>                      Right shift                             Left to right 

<                       Less than                               Left to right 
>                       Greater than                            Left to right 
<=                      Less than or equal to                   Left to right 
>=                      Greater than or equal to                Left to right 

==                      Equality                                Left to right 
!=                      Inequality                              Left to right 

&                       Bitwise AND                             Left to right 

^                       Bitwise exclusive OR                    Left to right 

|                       Bitwise inclusive OR                    Left to right 

&&                      Logical AND                             Left to right 

||                      Logical OR                              Left to right 

expr1 ? expr2 : expr3   Conditional                             Right to left 

=                       Assignment                              Right to left 
*=                      Multiplication assignment               Right to left 
/=                      Division assignment                     Right to left 
%=                      Modulus assignment                      Right to left 
+=                      Addition assignment                     Right to left 
-=                      Subtraction assignment                  Right to left 
<<=                     Left-shift assignment                   Right to left 
>>=                     Right-shift assignment                  Right to left 
&=                      Bitwise AND assignment                  Right to left 
|=                      Bitwise inclusive OR assignment         Right to left 
^=                      Bitwise exclusive OR assignment         Right to left 

throw expr              throw expression                        Right to left 

,                       Comma                                   Left to right 


The C++ language includes all C operators and adds several new operators.
Operators specify an evaluation to be performed on one of the following: 

One operand (unary operator) 

Two operands (binary operator) 

Three operands (ternary operator) 

Operators follow a strict precedence, which defines the evaluation order of expressions containing these operators.
Operators associate with either the expression on their left or the expression on their right; this is called "associativity."
The following table shows the precedence and associativity of C++ operators (from highest to lowest precedence).
Operators in the same segment of the table have equal precedence and are evaluated in the given order in an expression unless explicitly forced by parentheses.

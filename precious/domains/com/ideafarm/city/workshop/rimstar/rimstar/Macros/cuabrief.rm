/*
** Macro module: cuabrief.rm - CUA Version of Brief(R) keyboard map
**
** Brief is a registered trademark of Borland International
**
** Copyright (C) 1993-1995 Brian L. Smith
** Copyright (C) 1993-1995 RimStar Technology, Inc.
** All rights reserved internationally.
** Unlicensed use is a violation of applicable laws.
**
** This source code is provided to licensed users of RimStar's products
** for the purpose of allowing the user to customize and/or enhance RimStar's
** products. The source code remains the property of the copyright holders
** with all rights reserved internationally.
** Any modifications to the source code are considered derivative works and
** all rights thereto are reserved to the copyright holders except
** that the purchaser may use the derivitive work in the same manner
** as permitted by the license governing the unmodified product.
** Distribution in any manner of any part of the original source code,
** whether in source or object form, is expressly prohibited without the
** express written permission of the copyright holders.
**
*/

/*
** This macro file sets up the editor for a Brief keyboard mapping with
** CUA extensions. To have the editor use this as your default keyboard map:
**  copy cuabrief.* keyboard.*
** This mapping is the default key map for the RimStar Programmer's editor.
*/

#include "macro.h"

extern BOOL CUAMode;
extern BOOL	CUASelActive;
extern BOOL	MouseNoVirtual;
extern void	(*pfnSetDefaultKeymap)(void);	/* defined in startup.rm */

void CUABrief();
static HKEYBOARD hkCUABrief;


void
_init(void) {
	LibAutoload("kbdcua",	"KbdBindCUAAsciiKeys");
	LibAutoload("misc", 		"CharIs", "quote", "Repeat", "next_word", "prev_word",
					 				"delete_next_word", "delete_prev_word",
									"open_line", "toupper", "tolower" );
	LibAutoload("c_smart",	"find_matching_delim");
	LibAutoload("hexedit",	"HexEditBegin");
	LibAutoload("isearch",	"incremental_search");
	LibAutoload("bookmark",	"BookmarkSet", "BookmarkGoto");
} /* end _init() */


void
SetCUABrief() {
	if ( !hkCUABrief ) {
		KbdPush(NULL);
		CUABrief();
		hkCUABrief = KbdPop();
	}
	KbdPop();	/* Remove current kbd */
	KbdPush(hkCUABrief);
	CUAMode = TRUE;
	MouseNoVirtual = FALSE;
	SysSetFlags(SYSTEM_MENUACCEL, 0L);
	MnuSetMenuAccel();
	MsgPrintf("Brief w/CUA key map active");
} /* end SetCUABrief() */


void
KbdBindDefault() {
	/* Enable CUA mouse behavior */
	CUAMode = TRUE;
	/* Allow mouse to leave cursor in virtual space */
	MouseNoVirtual = FALSE;
	/* Enable Alt + mnemonic processing to activate menus (Alt+F, Alt+E, etc.) */
	SysSetFlags(SYSTEM_MENUACCEL, 0L);
	/* Create the keyboard map */
	CUABrief();
	hkCUABrief = KbdQueryCurrentKeyboard();
	pfnSetDefaultKeymap = SetCUABrief;
} /* end KbdBindDefault() */


void
CUABrief() {
	char  *self_insert = "SelfInsert";
	char  *p;

	KbdBindCUAAsciiKeys();	/* Binds all the typable keys & system menu bindings */

	KbdBind("Shift+Alt+E",			"PjtOpen 0");
	KbdBind("Alt+F3",					"PjtClose");
	KbdBind("Shift+F10",				"PjtBuild");
	KbdBind("Ctrl+F10",				"PjtDebugBuild");

	KbdBind("Alt+]", 					p="find_matching_delim");	/* in c_smart.rm */
	KbdBind("Alt+[", 					p);
	KbdBind("Alt+-", 					"BufPrevBuffer");
	KbdBind("Alt+|", 					"BufDeleteWhitespace");
	KbdBind("Alt+?", 					"CharIs");

	KbdBind("Alt+A",					"MarkExclusive");
	KbdBind("Alt+B",					"DlgBufferList");
	KbdBind("Alt+C",					"MarkColumn");
	KbdBind("Alt+D",					"BufDeleteLine");
	KbdBind("Alt+E",					"DlgOpenFile");
	KbdBind("Alt+F",					"SrchFiles");
	KbdBind("Alt+G",					"DlgGotoLine");
	/*
	** Toolkit help for function under cursor
	**
	** NOTE: To use QueryInfHelp you must add the following environment variable
	**	(OS/2) to your config.sys:
	**	 SET RSE_INF=GUIREF20.INF+PMFUN.INF+PMGPI.INF+PMHOK.INF+PMMSG.INF+PMREL.INF+PMWIN.INF+PMWKP.INF
	**  The setting is taken from the combination of the  PROGREF20 and PMREF environment variables
	**  You may add additional .INF files or remove some.
	**
	** (WINDOWS) to your autoexec.bat:
	**	 SET RSE_INF=fully qualified name of a single windows help file,
	**  (eg. SET RSE_INF=c:\msvc20\help\api32.hlp)
	*/
	KbdBind("Alt+H",					"HelpQueryInfHelp");
	KbdBind("Alt+I",					"ToggleInsert");

	KbdBind("Alt+J+1",				"BookmarkGoto 1");
	KbdBind("Alt+J+2",				"BookmarkGoto 2");
	KbdBind("Alt+J+3",				"BookmarkGoto 3");
	KbdBind("Alt+J+4",				"BookmarkGoto 4");
	KbdBind("Alt+J+5",				"BookmarkGoto 5");
	KbdBind("Alt+J+6",				"BookmarkGoto 6");
	KbdBind("Alt+J+7",				"BookmarkGoto 7");
	KbdBind("Alt+J+8",				"BookmarkGoto 8");
	KbdBind("Alt+J+9",				"BookmarkGoto 9");
	KbdBind("Alt+J+0",				"BookmarkGoto 10");

	KbdBind("Alt+K", 					"BufDeleteToEOL");
	KbdBind("Alt+L", 					"MarkLine");
	KbdBind("Alt+M", 					"MarkNormal");
	KbdBind("Alt+N", 					"BufNextBuffer");
	KbdBind("Alt+O", 					"DlgRenameBuffer");
	KbdBind("Alt+P", 					"Print");

	KbdBind("Alt+Q", 					"quote");		/* in misc.rm */

	KbdBind("Alt+R", 					"BufInsertFile");
	KbdBind("Alt+S", 					"SearchSel 1");
	KbdBind("Ctrl+S",					"incremental_search");

	KbdBind("Alt+T", 					"ReplaceForward");
	KbdBind("Alt+U", 					"Undo");
	KbdBind("Alt+V", 					"DlgVersion");
	KbdBind("Alt+W", 					"SaveBuffer");
	KbdBind("Alt+X", 					"ExitEditor");
	KbdBind("Alt+Y", 					"Redo");
  #if 0
	KbdBind("Alt+Z", 					"");  /* Start windowed command interpreter. Use Alt+ESC to start one. */
  #endif

	KbdBind("Alt+1", 					"BookmarkSet 1");
	KbdBind("Alt+2", 					"BookmarkSet 2");
	KbdBind("Alt+3", 					"BookmarkSet 3");
	KbdBind("Alt+4", 					"BookmarkSet 4");
	KbdBind("Alt+5", 					"BookmarkSet 5");
	KbdBind("Alt+6", 					"BookmarkSet 6");
	KbdBind("Alt+7", 					"BookmarkSet 7");
	KbdBind("Alt+8", 					"BookmarkSet 8");
	KbdBind("Alt+9", 					"BookmarkSet 9");
	KbdBind("Alt+0", 					"BookmarkSet 10");

	/*
	**  KP stands for the Key Pad keys.
	**
	**  Alt+ESCAPE, Alt+TAB and Ctrl+ESCAPE are reserved for OS/2 PM's use
	**  do not define these as they will be ignored.
	*/
	KbdBind("BACKSPACE",			  	p="BufBackspace");
	KbdBind("Shift+BACKSPACE",		p);
	KbdBind("Alt+BACKSPACE",	  	"delete_next_word");	/* in misc.rm */
	KbdBind("Ctrl+BACKSPACE",	  	"delete_prev_word");	/* in misc.rm */
	KbdBind("Shift+TAB",			  	"MovPrevTabPos");
	KbdBind("Ctrl+Enter",			p="CUAMov open_line");
	KbdBind("Ctrl+Kp_Enter",		p);
	KbdBind("KP_STAR",			  	"UndoModification");
	KbdBind("Shift+KP_STAR",	  	"RedoModification");
	KbdBind("Shift+Ctrl+KP_STAR",	"UndoAll");
	KbdBind("Shift+Alt +KP_STAR",	"RedoAll");

	KbdBind("F1",			  			"WinNextWindow");
	KbdBind("Shift+F1",				"WinPrevWindow");
	KbdBind("F2",						"WinTileAcross");
	KbdBind("Ctrl+F2",				"WinTileDown");
	KbdBind("Shift+F2",				"WinCascade");
	KbdBind("Alt+F2",					"WinZoom");
	KbdBind("F3",						"WinNewTiledWindow");
	KbdBind("F4",						"WinDeleteCurrentWindow");
	KbdBind("F5",						"SearchForward");
	KbdBind("Alt+F5",					"SearchBackward");
	KbdBind("Shift+F5",				"SearchAgain");
	KbdBind("F6",						"ReplaceForward");
	KbdBind("Alt+F6",					"ReplaceBackward");
	KbdBind("Shift+F6",				"ReplaceAgain");
	KbdBind("F7",						"KbdMacroRecord");  	/* starts/stops keystroke macro recording */
	KbdBind("Alt+F7",					"KbdMacroLoad");  	/* load keystroke macro from disk */
	KbdBind("Shift+F7",				"KbdMacroPause");		/* pause keystroke macro playback */
	KbdBind("F8",						"KbdMacroPlay");		/* plays a recorded keystroke macro */
	KbdBind("Alt+F8",					"KbdMacroSave");	  	/* saves last recorded macro to disk */
	KbdBind("F9",						"DlgLoadMacro");  
	KbdBind("F10",						"LibExecFunction");
	KbdBind("Alt+F10",				"ExecAssoc");
	/*
	** For use in error output buffer - place cursor on error line
	** ALT+F9 jumps to file & line in error, loading the file if needed
	*/
	KbdBind("Alt+F9",					"ErrJumpToError");
	/*
	** NOTE:  Consecutive requests of the Home builtin command and the End builtin
	**		  command support BRIEF's convention. A key assigned to the Home or End
	**		  builtin command will perform three different actions when invoked
	**		  consecutively:
	**
	**		  For the Home builtin command:
	**
	**		  1st time command invoked	  - move to the beginning of the current line
	**		  2nd (consecutive) invocation - move to the beginning of the top line in window
	**		  3rd (consecutive) invocation - move to the beginning of the buffer (file)
	**
	**		  For the End builtin command:
	**
	**		  1st time command invoked - move to end of current line
	**		  2nd (consecutive) invocation - move to end of last line in window
	**		  3rd (consecutive) invocation - move to end of the buffer (file)
	**
	**
	**		  So if the Home builtin command is assigned to the HOME key:
	**
	**		  HOME				moves to the beginning of the current line
	**		  HOME+HOME			moves to the beginning of the top line in window
	**		  HOME+HOME+HOME	moves to the beginning of the file
	**
	**		  and if the End builtin command is assigned to the END key:
	**
	**		  END				moves to the end of the current line
	**		  END+END		moves to the end of the last line in window
	**		  END+END+END	moves to the end of the file
	**
	**		  Any other commands invoked in between will reset the counters.
	**
	**  If you don't want this behavior you can use MovSOL and MovEOL
	**  these commands do only the single action.
	*/
	KbdBind("HOME",					p="CUAMov MovStartBrief");
	KbdBind("KP_HOME",				p);
	KbdBind("Ctrl+HOME",				p="CUAMov MovTopWin");
	KbdBind("Ctrl+KP_HOME",			p);
	KbdBind("END",						p="CUAMov MovEndBrief");
	KbdBind("KP_END",					p);
	KbdBind("Ctrl+KP_END",			p="CUAMov MovBottomWin");
	KbdBind("Ctrl+END",				p);
	KbdBind("PGUP",					p="CUAMov MovPageUp");
	KbdBind("KP_PGUP",				p);
	KbdBind("Ctrl+PGUP",				p="CUAMov MovSOF");
	KbdBind("Ctrl+KP_PGUP",			p);
	KbdBind("PGDN",					p="CUAMov MovPageDown");
	KbdBind("KP_PGDN",				p);
	KbdBind("Ctrl+PGDN",				p="CUAMov MovEOF");
	KbdBind("Ctrl+KP_PGDN",			p);
	KbdBind("UP",						p="CUAMov MovUp");
	KbdBind("KP_UP",					p);
	KbdBind("DOWN",					p="CUAMov MovDown");
	KbdBind("KP_DOWN",				p);
	KbdBind("KP_LEFT",				p="CUAMov MovLeft");
	KbdBind("LEFT",					p);
	KbdBind("Ctrl+LEFT",				p="CUAMov prev_word");	/* in misc.rm */
	KbdBind("Ctrl+KP_LEFT",			p);
	KbdBind("RIGHT",					p="CUAMov MovRight");
	KbdBind("KP_RIGHT",				p);
	KbdBind("Ctrl+RIGHT",			p="CUAMov next_word");	/* in misc.rm */
	KbdBind("Ctrl+KP_RIGHT",		p);

	/* Selection operations */
	KbdBind("Shift+HOME",				p="CUASel MovStartBrief");
	KbdBind("Shift+KP_HOME",			p);
	KbdBind("Shift+Ctrl+HOME",			p="CUASel MovTopWin");
	KbdBind("Shift+Ctrl+KP_HOME",		p);
	KbdBind("Shift+END",					p="CUASel MovEndBrief");
	KbdBind("Shift+KP_END",				p);
	KbdBind("Shift+Ctrl+KP_END",		p="CUASel MovBottomWin");
	KbdBind("Shift+Ctrl+END",			p);
	KbdBind("Shift+PGUP",				p="CUASel MovPageUp");
	KbdBind("Shift+KP_PGUP",			p);
	KbdBind("Shift+Ctrl+PGUP",			p="CUASel MovSOF");
	KbdBind("Shift+Ctrl+KP_PGUP",		p);
	KbdBind("Shift+PGDN",				p="CUASel MovPageDown");
	KbdBind("Shift+KP_PGDN",			p);
	KbdBind("Shift+Ctrl+PGDN",			p="CUASel MovEOF");
	KbdBind("Shift+Ctrl+KP_PGDN",		p);
	KbdBind("Shift+UP",					p="CUASel MovUp");
	KbdBind("Shift+KP_UP",				p);
	KbdBind("Shift+DOWN",				p="CUASel MovDown");
	KbdBind("Shift+KP_DOWN",			p);
	KbdBind("Shift+KP_LEFT",			p="CUASel MovLeft");
	KbdBind("Shift+LEFT",				p);
	KbdBind("Shift+Ctrl+LEFT",			p="CUASel prev_word");	/* in misc.rm */
	KbdBind("Shift+Ctrl+KP_LEFT",		p);
	KbdBind("Shift+RIGHT",				p="CUASel MovRight");
	KbdBind("Shift+KP_RIGHT",			p);
	KbdBind("Shift+Ctrl+RIGHT",		p="CUASel next_word");	/* in misc.rm */
	KbdBind("Shift+Ctrl+KP_RIGHT",	p);
	KbdBind("Ctrl+.",						"CUAToggleSel");
	KbdBind("Ctrl+Shift+.",				"MarkRemoveSel");

	KbdBind("KP_MINUS",				"CutToScrap");
	KbdBind("KP_PLUS",				"CopyToScrap");
	KbdBind("Shift+KP_MINUS",		"CutAppendToScrap");		/* append to current scrap */
	KbdBind("Shift+KP_PLUS",		"CopyAppendToScrap");	/* append to current scrap */
	KbdBind("KP_INSERT",				p="CUAReplace BufPasteScrap");
	KbdBind("INSERT",					p);
	KbdBind("Shift+KpInsert",		p="ImportClipboard");
	KbdBind("Shift+Insert",			p);
	KbdBind("Ctrl+KpInsert",		p="ExportClipboard");
	KbdBind("Ctrl+Insert",			p);
	KbdBind("KP_DELETE",				p="BufDeleteCharOrSelection");
	KbdBind("DELETE",					p);

	KbdBind("Ctrl+-",			  		"BufDeleteCurrentBuffer");
	KbdBind("Shift+Ctrl+-",	  		"WinDeleteWindowAndBuffer");
	KbdBind("Ctrl+A",			  		"MarkSwapSel");
	KbdBind("Ctrl+B",			  		"WinScrollBottom");
	KbdBind("Ctrl+C",			  		p="WinScrollCenter");
	KbdBind("KP_5",			  		p);
	KbdBind("Ctrl+D",			  		"WinScrollDown");
	KbdBind("Ctrl+K",			  		"ExecKillProcess");		/* Kills a program executed on buffer */
	KbdBind("Ctrl+N",			  		"ErrNextError");
	KbdBind("Ctrl+P",			  		"ErrPrevError");
	KbdBind("Ctrl+R",			  		"Repeat");
	KbdBind("Ctrl+T",			  		"WinScrollTop");
	KbdBind("Ctrl+U",			  		"WinScrollUp");
	KbdBind("Ctrl+W",			  		"ToggleBackups");
	KbdBind("Ctrl+X",			  		"SysSaveAndExit");
	KbdBind("Ctrl+Z",					"WinZoom");

	/* Source browser bindings 	*/
	KbdBind("F11",						"SbBrowseSymbolAtCursor");
	KbdBind("Shift+F11",				"SbBrowseDefs");
	KbdBind("Ctrl+F11",				"SbBrowseRefs");
	KbdBind("Alt+F11",				p="SbBrowseSymbolsDefinedInModule");
	KbdBind("Ctrl+G",					p); /* Brief's `routines' assignment */
	KbdBind("F12",						"SbFindNext");
	KbdBind("Shift+F12",				"SbFindPrev");
	KbdBind("Alt+F12",				"SbGotoDef");
	KbdBind("Ctrl+F12",				"SbrFindNextDef");
	KbdBind("Shift+Ctrl+F12",		"SbrFindPrevDef");
	KbdBind("Ctrl+Alt+F12",			"SbJumpBack");

   KbdBind("Ctrl+Shift+D",       "tolower");
   KbdBind("Ctrl+Shift+U",       "toupper");

	/* Change window to Hex mode */
	KbdBind("Shift+Ctrl+H",			"HexEditBegin");

} /* end CUABrief() */


/*
** This function will delete when you are at the start of a line
** joining the line to the end of the previous line.
*/
void
BackspaceWrap(void) {
   if ( BufQueryColumn() == 1L )
      BufDeletePrevChar();
   else
      BufBackspace();
} /* BackspaceWrap() */



/*
** End module: cuabrief.rm
*/

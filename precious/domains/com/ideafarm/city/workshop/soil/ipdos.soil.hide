
{ktr:

    {file: ipdos }

    {flags: noZipHide beep}

    {folder: ///c/ideafarm.home.1/precious/domains/com/ideafarm/city/library/documents/ipdos/ }

    {head:

        <BODY STYLE="background-color:#000 ; color:#ff6" onload="sayMessageDefaultF( 16000 )">
            <STYLE type="text/css">
                A:link
                \{
                    color: #ff6 ;
                    text-decoration: none ;
                    border-style: solid ;
                    border-width: 0px 1px 0px 0px ;
                    border-color: green ;
                \}
                A:visited
                \{
                    color: #ff6 ;
                    text-decoration: none ;
                    border-style: solid ;
                    border-width: 0px 1px 0px 0px ;
                    border-color: red ;
                \} 
                A:hover
                \{
                    color: #ff6 ;
                    text-decoration: none ;
                    border-style: solid ;
                    border-width: 1px 1px 1px 0px ; 
                    border-color: #ff6 ;
                \}
                A:active
                \{
                    color: white ;
                    text-decoration: none ;
                    border-style: solid ;
                    border-width: 1px 1px 1px 0px ;
                    border-color: white ;
                \}
                H3
                \{
                    color: #ff6 ;
                    text-decoration: none ;
                    border-style: solid ;
                    border-width: 1px 8px 1px 8px ;
                    border-color: #ff6 ;
                \}
            </STYLE>

    }

    {tail:

        </BODY>

    }

    {body:



           thus, IPDOS (tm) application code is a hybrid that is neither pure object oriented nor pure procedurally oriented
           application code is procedural code that constructs instances of these classes and also calls member functions of special, preconstructed instances of etherC
           this next layer presents an object oriented programming abstraction
           all of the other C++ classes (i.e. other than thirdC and etherC) together comprise the next layer
           the programming abstraction presented by etherC is, in most senses, procedurally oriented rather than object oriented
           \r(This is, as of this writing, not enforced, and there is a lot of code that does not conform to this restriction.)
           thirdC instances and member functions are only accessible from within the definitions of members of etherC
           the etherC class presents the functionality of the thirdC class using a different programming abstraction
           the etherC class can be thought of as the next layer
           the thirdC class can be thought of as the lowest layer of IPDOS (tm)
           with only minor exceptions, the thirdC class does not alter the programming abstraction presented to the programmer by those third party api's
           the thirdC class represents the functionality of "the machine"
           all code that references Win32, the C library, or any other "third party" code resides as member functions of the thirdC class
          the actual code, as of this writing, substantially conforms to the following architectural decisions
          as of this writing, Open Watcom is used to build IPDOS (tm)
          other than a few assembler modules and a few inline assembler macros, all of the code is in the C++ language
          all source code resides in C:\ideafarm.home.1\precious\domains\com\ideafarm\city\library\dictionary .
         introduction and overview
         this document is written primarily for C++ software craftsmen responsible for developing the source code of IPDOS (tm)
          to modify this document, edit that file and then drop a copy of it into the folder named "///c/ideafarm.home.1/IdeaFarm (tm)/Drop a Copy of SOIL (tm) Text Here"
         the html page that you are now reading was generated by IdeaFarm (tm) P.I.S.S. from an ascii text file named ///c/ideafarm.home.1/precious/domains/com/ideafarm/city/workshop/soil/ipdos.soil .
         all documentation for IPDOS (tm) and for SOIL (tm) resides here, except that which is contained within source code comments
          SOIL (tm) refers to the IdeaFarm (tm) Sentient Object Interface Language, which was developed in conjunction with the development of IPDOS (tm)
         IPDOS (tm) is a general purpose programming environment for the C++ and SOIL (tm) programming languages
        IPDOS (tm): IdeaFarm (tm) Piggyback Distributed Operating System

    }
}

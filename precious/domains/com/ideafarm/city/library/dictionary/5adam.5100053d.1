
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

ether.loafIF( tinP ) ;

sayF( tinP , etThread , 16.0 , 16.0 ) ;
{ sadamCBFT pf = scbF ; } //VERIFY TYPE

TODO

}
    return 1 ;
    wP.baton.ungrabF( tinP ) ;
    if( c8scratchSnippetP.c1 && stInvalidP && idSnipP && psttSnipP && idsP && c8scratchEventP.c1 && bNoDrawP && flagsP && wP.bDoomed ) ;

    }
        }
            break ;
            }
                }
                    }
                        break ;
                        }
                            }
                                break ;
                                //etherP.beeClickF( tinP , 0x100 + ( 0x8 * idRow + idCol ) * 0x10 ) ;
                                sayF( tinP , etherP , idCol , idRow ) ;
                            {
                            case ifcIDtYPEtOOL_MOUSEpOSITION :
                        {
                        switch( idTool )
                    {
                    case ifcIDtYPEaCTION_MOVE :
                {
                switch( idAction )

                thirdC& third = etherP ;
                const countT& idRow    = pcNotesP[ 5 ] ;
                const countT& idCol    = pcNotesP[ 4 ] ;
                const countT& idAction = pcNotesP[ 3 ] ;
                const countT& idTool   = pcNotesP[ 2 ] ;
            {
            if( pcNotesP[ 0 ] == 1 && pcNotesP[ 1 ] == 4 )
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
        }
            break ;
            }
                }
                    }
                        }
                            break ;
                            sayF( tinP , etherP ) ;
                            mHotAngle += PI / 64.0 ;
                        {
                        case ifcIDtYPEtOOL_LESStHAN :
                        }
                            break ;
                            sayF( tinP , etherP ) ;
                            mHotAngle -= PI / 64.0 ;
                        {
                        case ifcIDtYPEtOOL_GREATERtHAN :
                        }
                            break ;
                            else                                                                                etherP.etherFireImpersonateMonitorIF( tinP ) ;
                            if( F(thirdC::third_flagsModeProcess1I_IF( tinP )) & flMODEpROCESS1_IGNOREfIREbYoPERATOR ) thirdC::dosBeepIF( tinP , 0x3800 , TUCK * 0x20 ) ;
                        {
                        case ifcIDtYPEtOOL_ESCAPE :
                    {
                    switch( idTool )
                    ZE( boolT , bFreshFace ) ;
                {
                if( idAction == ifcIDtYPEaCTION_DOWN )

                const countT& idAction = pcNotesP[ 3 ] ;
                const countT& idTool = pcNotesP[ 2 ] ;
            {
            if( pcNotesP[ 0 ] == 1 && pcNotesP[ 1 ] == 2 )
        {
        case ifcIDtYPEsTROKEcALLbACK_KEY :
    {
    switch( idTypeCallP )
    wP.baton.grabF( tinP , TAG( TAGiDnULL ) ) ;
{
boolT scbF( tinS& tinP , etherC& etherP , windowOldC& wP , stackC& stInvalidP , const countT idSnipP , const strokeS* const psttSnipP , const countT idsP , const flagsT flagsP , const boolT bNoDrawP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , count8S& c8scratchEventP , count8S& c8scratchAdamP , count8S& c8scratchSnipP , count8S& c8scratchSnipAdamP , count8S& c8scratchStrokeP )

}
    etherP.strokeF( tinP , psttFoo ) ;
    
    strokeS* psttFoo = tFoo ;
    
    tFoo += T("\r\nThis is the day that the Lord has made.\r\nLet us rejoice and be glad!\r\nFor He is the source of all!\r\n") ;
    for( countT vv = 0xa ; vv <= 0xf ; vv ++ ) tFoo += TF1(vv) ;
    ;
        T("ABCDEFGHIJKLMNOPQRSTUVWXYZ\r\nabcdefghijklmnopqrstuvwxyz\r\n0123456789")
        S2(0x00ffff,scOld_cPUSHcOLOR)+
        S2(CfROM2(1,1),scOld_mmMOVEpELtO)+
        S2(CfROM2(mColFloat+1,mRowFloat+1),scOld_mmLINEpELtO)+
        S2(CfROM2(mColFloat+mColScaleP,mRowFloat+1),scOld_mmLINEpELtO)+
        S2(CfROM2(mColFloat+mColScaleP,mRowFloat+mRowScaleP),scOld_mmLINEpELtO)+
        S2(CfROM2(mColFloat+1,mRowFloat+mRowScaleP),scOld_mmLINEpELtO)+
        S2(CfROM2(mColFloat+1,mRowFloat+1),scOld_mmMOVEpELtO)+
        S2(0x0000ff,scOld_cPUSHcOLOR)+
        S2(mRowScale,scOld_mRENDERrOWsCALEpUSH)+
        S2(mColScale,scOld_mRENDERcOLsCALEpUSH)+
        S2(mSinHotAngle,scOld_mRENDERsINhOTaNGLEpUSH)+
        S2(mCosHotAngle,scOld_mRENDERcOShOTaNGLEpUSH)+
        ,scOld_cRENDERfLAGScONTROLpUSH)+
            flRENDERcONTROL_COLsCALE
            flRENDERcONTROL_ROWsCALE        |
            flRENDERcONTROL_ATaNGLE         |
        S2(
        //SCBA(scbF)+
        T("")+
    tFoo +=
    TN( tFoo , "\f" ) ;

    measureT mRowFloat = wRoot.rCache.mRowFloat ;
    measureT mColFloat = wRoot.rCache.mColFloat ;
    
    measureT mRowBase2 = mRowBase1 + mSinHotAngle * 300.0 ;
    measureT mColBase2 = mColBase1 + mCosHotAngle * 300.0 ;
    measureT mRowBase1 = 0x10 ;
    measureT mColBase1 = 0x10 ;
    
    measureT mSinHotAngle = thirdC::mathSinIF( tinP , mHotAngle ) ;
    measureT mCosHotAngle = thirdC::mathCosIF( tinP , mHotAngle ) ;
    
    countT cRows = R( wRoot.mRows ) % 2 ? R( wRoot.mRows ) - 1 : R( wRoot.mRows ) ;
    countT cCols = R( wRoot.mCols ) % 2 ? R( wRoot.mCols ) - 1 : R( wRoot.mCols ) ;
    windowOldC& wRoot = *thirdC::pWinRootIF() ;

    if( mRowScaleP ) mRowScale = mRowScaleP ;
    if( mColScaleP ) mColScale = mColScaleP ;
{
voidT sayF( tinS& tinP , etherC& etherP , measureT mColScaleP = 0. , measureT mRowScaleP = 0. )

measureT mRowScale = 1.0 ;
measureT mColScale = 1.0 ;
measureT mHotAngle ;

boolT scbF( tinS& tinP , etherC& etherP , windowOldC& wP , stackC& stInvalidP , const countT idSnipP , const strokeS* const psttSnipP , const countT idsP , const flagsT flagsP , const boolT bNoDrawP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , count8S& c8scratchEventP , count8S& c8scratchAdamP , count8S& c8scratchSnipP , count8S& c8scratchSnipAdamP , count8S& c8scratchStrokeP ) ;

/*1*/WAKEhIDE( "example.other.callback.strokes" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//


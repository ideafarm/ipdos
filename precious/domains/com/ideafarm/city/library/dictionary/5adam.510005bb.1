
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//

                            
REST

}
    fooC foo1( tinP , "myFoo" ) ;
{

TODO

}
    tinP.tlsDelF( countTC() ) ;
{
goo2( (                     thirdC::c_strcatIF( tinP , thirdC::c_strcpyIF( tinP , tinP.pbF() , "fooC/goo2/" ) , postNameP ) ) )
goo1( ( tinP.tlsNewF( TUCK ) , thirdC::c_strcatIF( tinP , thirdC::c_strcpyIF( tinP , tinP.pbF() , "fooC/goo1/" ) , postNameP ) ) ) ,
fooC::fooC( tinS& tinP , osTextT* postNameP ) :

;
}
    fooC( tinS& tinP , osTextT* postNameP ) ;

    public :

    gooC        goo2 ;
    gooC        goo1 ;
{
class fooC

}
    CONoUTrAW( "\"\r\n" ) ;
    CONoUTrAW( postNameP ) ;
    CONoUTrAW( "my name is: \"" ) ;
{
gooC::gooC( osTextT* postNameP )

;
}
    gooC( osTextT* postNameP ) ;

    public :
{
class gooC

/*1*/WAKEsHOWtEXT( "example.other.func.12f000f.tinS.newF.technique.building.text.arguments" )/*1*/
/**/
*/
multiple tls allocations can be used by specifying the idP parameter of pbF
there is no memory overhead, since the tls pointer is not stored
this technique can be used at any time that a tinS exists
i demonstrate how text parameters can be built during instance construction using tls rather than relying on textC, which requires poolC
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//



//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


            DONE1
            }                                                                                                                                                       \
                }                                                                                                                                                   \
                    dec02AM( cAllThreads ) ; /* MUST BE THE VERY LAST THING THAT THIS THREAD DOES */                                                                  \
                    if( !bFake ) { DEL( pTaskP ) ; } /* MUST BE AS LATE AS POSSIBLE BECAUSE IT GIVES THE SIGN THAT THE THREAD IS DONE.  THE PROCESS MUST SLEEP AFTER RECEIVING THIS SIGN BEFORE ENDING, SO THAT THIS THREAD CAN COMPLETE */ \
                    if( tinP.monitor.idThread <= ClOWtHREADS ) processGlobal1S::_processGlobal1I_IF().pcPhaseLow[ tinP.monitor.idThread ] = - 1 ;                   \
                    TELL( "DONE0: i am outa here" )                                                                                                                 \
                    ;                                                                                                                                               \
                        : thirdC::os_cAllKidThreadsI_IF( tinP )                                                                                                     \
                        ? thirdC::os_cAllOrphanThreadsI_IF( tinP )                                                                                                  \
                    countT& cAllThreads = bOrphan                                                                                                                   \
                    boolT bFake   = pTaskP ? !!( F(pTaskP->flags) & flTHREADlAUNCH_FAKE   ) : 0 ;                                                                   \
                    boolT bOrphan = pTaskP ? !!( F(pTaskP->flags) & flTHREADlAUNCH_ORPHAN ) : 0 ;                                                                   \
                    TELL( "DONE0: deregistering myself from either cAllOrphanThreadsI or cAllKidThreadsI (my final act)" )                                          \
                    TINSL /*THIS IS NEEDED BECAUSE tinP WAS DELETED IF I AM tmWindowsF */                                                                           \
                {                                                                                                                                                   \
                                                                                                                                                                    \
                }                                                                                                                                                   \
                    }                                                                                                                                               \
                        }                                                                                                                                           \
                            }                                                                                                                                       \
                                pEtThread = 0 ;                                                                                                                     \
                                THREADmODE2rESTORE                                                                                                                  \
                                TINSL                                                                                                                               \
                                delete pEtThread ; /* tinP IS DESTROYED HERE */                                                                                     \
                                THREADmODE2oFF( flTHREADmODE2_DOnOTcaLLdELif )                                                                                      \
                            {                                                                                                                                       \
                            if( *(countT*)&pEtThread )                                                                                                              \
                            DEL( tinP.pEtScratch ) ;                                                                                                                \
                            DEL( tinP.pScoopEtThread ) ; /*CODEsYNC: 0010056 1020171 */                                                                             \
                            TELL( "DONE0: deleting etThread (and tinP)" ) ;                                                                                         \
                            tinP.pEther = 0 ;                                                                                                                       \
                            TELL( "DONE0: testing poolOld" ) ;                                                                                                      \
                                                                                                                                                                    \
                            }                                                                                                                                       \
                                tinP.pEtScratch->delF( tinP , psttThreadFile ) ;                                                                                    \
                                tinP.pEtScratch->boxZapF( tinP , psttThreadFile ) ;                                                                                 \
                                TELL( "DONE0: deleting thread file" ) ;                                                                                             \
                            {                                                                                                                                       \
                            if( psttThreadFile )                                                                                                                    \
                        {                                                                                                                                           \
                        if( pEtThread ) /*THREADS THAT DELETE etThread EARLY: tmWindowsF*/                                                                          \
                        TINSL /*THIS IS NEEDED BECAUSE tinP WAS DELETED IF I AM tmWindowsF */                                                                       \
                    {                                                                                                                                               \
                                                                                                                                                                    \
                    tinP.pSgnUtility = 0 ;                                                                                                                          \
                                                                                                                                                                    \
                    }                                                                                                                                               \
                        }                                                                                                                                           \
                            if( tinP.monitor.idThread <= ClOWtHREADS && !( ++ processGlobal1S::_processGlobal1I_IF().pcPhaseLow[ tinP.monitor.idThread ] ) ) { BLAMMO ; } \
                            if( tinP.idPhase1 < ifcIDpHASEtHREAD_EPILOGnOkIDS ) tinP.idPhase1 = ifcIDpHASEtHREAD_EPILOGnOkIDS ;                                     \
                            }                                                                                                                                       \
                                TELL( "DONE0: destroying all adam objects that remain on the thread stack" ) ;                                                      \
                                }                                                                                                                                   \
                                    while( tinP.cKidThreads ) { ++ s ; thirdC::dosSleepRawIF( tinP , 250 ) ; }                                                      \
                                    sleepC s( tinP , TAG( TAGiDnULL ) ) ; /* WILL BLAMMO IF ANYTHING IS GRABBED (THIS IS DESIRABLE BEHAVIOR) */                     \
                                {                                                                                                                                   \
                                TELL( "DONE0: waiting for my kid threads to end" ) ;                                                                                \
                                                                                                                                                                    \
                                if( F(thirdC::third_flagsModeAdam1I_IF(tinP)) & flADAMmODE1_WHEREaLL && !( F(tinP.flagsThreadMode1) & flTHREADmODE1_NOwHERE ) ) etThread.etherWhereF( tinP , ifcIDaCTIONwHERE_DISABLE ) ; \
                                TELL( "DONE0: conditionally calling etherWhereF" ) ;                                                                                \
                            {                                                                                                                                       \
                            else                                                                                                                                    \
                            if( !pEtThread ) ; /*THIS IS NEEDED BECAUSE tinP WAS DELETED IF I AM tmWindowsF */                                                      \
                                                                                                                                                                    \
                            }                                                                                                                                       \
                                etThread.traceF( tinP , (strokeS*)(const osTextT*)ostoSay , flTRACE_PARAMETERiSoStEXT ) ;                                           \
                                OStEXTC(  ostoSay , tinP.cSpins4 , '0' ) ;                                                                                          \
                                OStEXTAK( ostoSay , "." ) ;                                                                                                         \
                                OStEXTC(  ostoSay , tinP.cSpins3 , '0' ) ;                                                                                          \
                                OStEXTAK( ostoSay , "." ) ;                                                                                                         \
                                OStEXTC(  ostoSay , tinP.cSpins2 , '0' ) ;                                                                                          \
                                OStEXTAK( ostoSay , "." ) ;                                                                                                         \
                                OStEXTC(  ostoSay , tinP.cSpins1 , '0' ) ;                                                                                          \
                                OStEXTAK( ostoSay , "    " ) ;                                                                                                      \
                                OStEXTC(  ostoSay , tinP.pAdamGlobal1->cYieldHighWater , 0 ) ;                                                                      \
                                OStEXTAK( ostoSay , "    " ) ;                                                                                                      \
                                OStEXTC(  ostoSay , tinP.pAdamGlobal1->idAdam , 0 ) ;                                                                               \
                                OStEXTAK( ostoSay , "DONE0     [idAdam,cYieldHighWater,cSpins1,cSpins2,cSpins3,cSpins4]:    " ) ;                                   \
                                OStEXT(   ostoSay , TUCK << 2 ) ;                                                                                                        \
                            {                                                                                                                                       \
                            if( tinP.pAdamGlobal1->cYieldHighWater )                                                                                                \
                                                                                                                                                                    \
                            TELL( "DONE0: after returning from application code" ) ;                                                                                \
                            _OUT_                                                                                                                                   \
                            tinP.idPhase2 = 0 ;                                                                                                                     \
                            if( tinP.idPhase1 < ifcIDpHASEtHREAD_EPILOGkIDS ) tinP.idPhase1 = ifcIDpHASEtHREAD_EPILOGkIDS ;                                         \
                            if( tinP.monitor.idThread <= ClOWtHREADS && !( ++ processGlobal1S::_processGlobal1I_IF().pcPhaseLow[ tinP.monitor.idThread ] ) ) { BLAMMO ; } \
                            TINSL /*THIS IS NEEDED BECAUSE tinP WAS DELETED IF I AM tmWindowsF */                                                                   \
                        {                                                                                                                                           \
                                                                                                                                                                    \
                        etThread.osThreadSwitchingDesireF( tinP , ifcTHREADpRIORITY_PUSHY ) ; /*TO PREVENT LAME DUCK THREADS FROM ACCUMULATING AND CLOGGING SYS*/   \
                                                                                                                                                                    \
                        /*DO NOT CLOSE THE CODE BLOCK HERE BECAUSE KID THREADS MIGHT BE USING OBJECTS THAT WOULD DT HERE*/                                          \
                                                                                                                                                                    \
#define DONE0                                                                                                                                                       \

//INDENTATION SHOULD CORRESPOND TO THAT IN snip.001*.TASK0

//CODEsYNC: 0010055 0010056

/*1*//*DONE0*//*1*/
/**/
*/
it is illegal to refer to this symbol in the definition of an adam
\<A HREF=\"5.11000024.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


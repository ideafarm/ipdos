
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    //CALLER MUST DO THIS: if( pBaton ) pBaton->ungrabF( tinP ) ;
    _OUTsTACKc_

    }
        }
            }
                ppc = ppc->ppU ;
                if( ppc->ppU ) ppcUpP[ ++ cUpP ] = (countT*)( ppc->ppU + 1 ) ;
            {
            while( cUpMax -- && ppc )
            ppc = *p_ppLathRef ;
    
            }
                ppc = ppc->ppD ;
                if( ppc->ppD ) ppcDownP[ ++ cDownP ] = (countT*)( ppc->ppD + 1 ) ;
            {
            while( cDownMax -- && ppc )
            plateS* ppc = *p_ppLathRef ;
    
            ppcUpP[ 0 ] = ppcDownP[ 0 ] = *p_ppLathRef ? (countT*)( *p_ppLathRef + 1 ) : 0 ;
    
            third.c_memsetIF( tinP , (byteT*)ppcUpP   , sizeof( countT ) * ( 1 + cUpMax   ) ) ;
            third.c_memsetIF( tinP , (byteT*)ppcDownP , sizeof( countT ) * ( 1 + cDownMax ) ) ;
        {
        if( ppcDownP && ppcUpP )
        third.newF( tinP , LF , *(countT**)&ppcUpP   , 1 + cUpMax   ) ; ___CT( ppcUpP   ) ;
        third.newF( tinP , LF , *(countT**)&ppcDownP , 1 + cDownMax ) ; ___CT( ppcDownP ) ;

        }
            *p_idLathRef = ppTop ? 1 : 0 ;
            *p_ppLathRef = ppTop ;
        {
        if( !*p_ppLathRef )
    
        LATHrEF

        cUpP = cDownP = 0 ;
        countT cUpMax   = cUpP   < cPlates - 1 ? cUpP   : cPlates - 1 ;
        countT cDownMax = cDownP < cPlates - 1 ? cDownP : cPlates - 1 ;
    {
    else
    if( !cPlates ) cUpP = cDownP = 0 ;

    _INsTACKc_

    else if( osTidOwner != tinP.osTid && !bDying && !( F(flags) & flSTACKc_ALLOWmULTIPLEuNSERIALIZED ) ) BLAMMO ;
    else if( !osTidOwner ) osTidOwner = tinP.osTid ;
    else if( pBaton ) pBaton->grabF( tinP , TAG( TAGiDnULL ) ) ;
    if( bNoGrabP ) ;
    //CODEsYNCH: 115006a 00103a2

    }
        if( third ) return ;
        __NZ( ppcUpP ) ;
        __NZ( ppcDownP ) ;
        if( third ) return ;
    {
    IFbEcAREFUL
    SCOOP
{
/*1*/voidT stackC::grabListF( tinS& tinP , countT**& ppcDownP , countT**& ppcUpP , countT& cDownP , countT& cUpP , const boolT bNoGrabP )/*1*/
/**/
*/
   this parameter is intended for use by switchC and switchStackC
   this is legal only for class member functions which wrap me and provide their own serialization
  it is illegal to specify a value other than 0 in the definition of an adam
 bNoGrabP
   so ppcUpP will point to 1 + cUpP addresses
  after i return, will contain the actual number of plates listed above *p_ppLathRef
  up to cUpP plates will be enumerated
  can be 0
 cUpP
   so ppcDownP will point to 1 + cDownP addresses
  after i return, will contain the actual number of plates listed below *p_ppLathRef
  up to cDownP plates will be enumerated
  can be 0
 cDownP
  offset 2 will contain the next plate, etc.
  offset 1 will contain the address of the plate immediately above *p_ppLathRef
  offset 0 will contain the address of the plate at *p_ppLathRef
  must be 0
 ppcUpP
  offset 2 will contain the next plate, etc.
  offset 1 will contain the address of the plate immediately below *p_ppLathRef
  offset 0 will contain the address of the plate at *p_ppLathRef
  must be 0
 ppcDownP
 tinP
arguments
if !cDownP and !cUpP after calling me, the caller can inspect *ppcDownP (or *ppcUpP) to see whether a *p_ppLathRef plate exists
after calling ungrabF, the caller must not use the lists
the caller -must- call ungrabF after calling me
if *p_ppLathRef is not set then it will be set to the top plate
i grab the stackC and list all or some plates near to the *p_ppLathRef plate
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//


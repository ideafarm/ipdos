
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//

                            
REST

//slabS::slabF().flagsi |= fliSLABs_SHUTDOWN | fliSLABs_QUIT ;

etherC::loafIF( tinP ) ;

etThread.strokeF( tinP , tSay ) ;

;
    S2(0,scOld_POPfRAME)
        //tcButton1+
        T("X")+
    S3(1.0,scOld_mmMOVEcELLS,1.0)+
    S3(9.0,scOld_mmFRAMEcELLS,9.0)+

    T("")+
tSay = 
TN( tSay , "" ) ;

//paperOldC::setBeforeAnimatingIF( tinP , animateCBF , (countT)&tcButton1 ) ;

//tcButtonC tcButton1( tinP , "a comment" , tcButton1CBF , 0 , flTCfEATURE_defaultButton | flTCfEATURE_FLYOVER | flTCfEATURE_DRAGGABLE , 0 , T("cycle: ") , 8 ) ;









            {

            }
                if( tinP.idPhase1 < ifcIDpHASEtHREAD_WORKING ) tinP.idPhase1 = ifcIDpHASEtHREAD_WORKING ;
                    thirdC::third_idPhaseAdam_IF( tinP ) = ifcIDpHASEaDAM_WORKING ;
                if( thirdC::third_idPhaseAdam_IF( tinP ) < ifcIDpHASEaDAM_WORKING )
            {
            if( !( F(tinP.flagsThreadMode1) & flTHREADmODE1_DRIVERaDAM ) )
            (countT&)_stackTop = espAM() ;
            staticC _stackTop( tinP , "appStackTop" , "tin" ) ;
            TELL( "MAINF: entering application code" ) ;
            /*U:{ countT idio = DDNUMB ; if( idio != 0x 4010354 && idio != 0x 4010405 && idio != 0x 40103c1 && idio != 0x 40103d1 ) etThread.ifcPortNewProcessF( tinP ) ; }*/
            /*U:REPLACE THESE HARDCODED idAdam VALUES WITH ifcIDaDAM SYMBOLS*/
            etThread.ifcDatumF( tinP , flDATUM1_CLASStRACEaLWAYShIREdLL , flDATUM2_null , 0 , 0 , 0 , (voidT*)DDNAME ) ;
            etThread.osTimeNowF( tinP , timeBorn.time1 , timeBorn.time2 ) ;
            _INoLD_
            handleC& hDll = pmp->hDll ;
            etherC& etThread = pmp->etThread ;
            timeS timeBorn ;
            etherC& etRock = etherC::etRockIF( tinP ) ;
            etherC& ether = pmp->ether ;
            TELL( "MAINF/+" ) ;
            tinS& tinP = pmp->tin ;
        {
        if( pmp )
        mainS* const& pmp = pMainParametersP ;
    {
    extern "C" countT _export OSF mainF( mainS* const pMainParametersP )

//#define MAINF(countT,OSF)
// MAINF( countT , OSF )  TELLlIFInAME( POSTtHREADnAMEmAIN "/TODO" ) //WITH THIS TAG( TAGiDnULL ) NAME, THIS TAG( TAGiDnULL ) WILL BE SUPPRESSED IN THE GROSS WHERE REPORT UNLESS I AM THE HIGHEST NEST LEVEL
//U::TO FIND A BUG: TODO





#endif

}
    TOUCH( etherP )
    TOUCH( backP )
    tcButton1.setF( tinP , T("")+S3(15.0,scOld_mmFRAMEcELLS,1.0)+TP("",7)+TF1(idCycleP|0xf0000000)+S2(0,scOld_POPfRAME) ) ;
    tcButtonC& tcButton1 = *(tcButtonC*)cArgP ;
{
voidT animateCBF( tinS& tinP , etherC& etherP , backOldC& backP , const countT idCycleP , const countT cArgP )

}
    TOUCH( cArgP  )
    TOUCH( idEventP  )
    TOUCH( pcNotesP )
    TOUCH( pcNotesP )
    TOUCH( flTcStateNewP )
    TOUCH( flTcStateOldP )
    TOUCH( sadamStateP )

    }
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY  : { etherP.beeClickF( tinP ) ; break ; }
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER : { etherP.beeClickF( tinP , TUCK ) ; break ; }
    {
    switch( idTypeCallP )
{
voidT tcButton1CBF( tinS& tinP , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

#if defined( NEVERdEFINED )

/*1*/WAKEsHOW( "scratch" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


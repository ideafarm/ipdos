
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etherC::loafIF( tinP ) ;
etThread.traceF( tinP , T("ok") ) ;

etThread.diskWalkF( tinP , cDirs , cFiles , T("///d/poured.from.cloud.merged/") , /*(countT&)(thirdC&)ether*/bQuit , accumulateCBF , pcArg ) ;
countT pcArg[] = { (countT)&etThread , (countT)&foList } ;
cDirs = cFiles = bQuit = 0 ;
fileC foList( tinP , (strokeS*)T("///d/tmp/desk/traffic.ttt") , ifcOPENaCCESS_W , 0 , flOPENdETAILS_LOCsEQ , ifcOPENhOW_nCeR ) ;

etThread.diskWalkF( tinP , cDirs , cFiles , T("///d/poured.from.cloud.merged/") , /*(countT&)(thirdC&)ether*/bQuit , decompressCBF ) ;
ZE( boolT  , bQuit ) ;
ZE( countT , cFiles ) ;
ZE( countT , cDirs ) ;

TODO

}
    return 0 ;

    }
        etThread.delF( tinP , posti ) ;
        etThread.delF( tinP , psttPath ) ;
        }
            etThread.delF( tinP , psttShort ) ;

            etThread.fileWriteF( tinP , foListP , tSay , tSay.csF( tinP ) ) ;

            TN( tSay , psttPath ) ; tSay += T(posti)+T("\r\n") ;

            etThread.boxGetShadowF( tinP , posti , costi , tFileName ) ; ___( posti ) ;
            ZE( countT   , costi ) ;

            ___( psttShort ) ;
            ___( psttPath ) ;
            etThread.strBisectF( tinP , psttPath , psttShort , tFileName , T("/") , -1 , flSTRbISECT_APPENDdELIMITER ) ;


            ZE( strokeS* , psttShort ) ;
        {
        ZE( osTextT* , posti ) ;
        ZE( strokeS* , psttPath ) ;

        TN( tFileName , ifName ) ;
        ifFileNameC ifName( tinP , etThread , postNameP ) ;

        fileC&  foListP  =  *(fileC*)pcArgP[ 1 ] ;
        etherC& etThread = *(etherC*)pcArgP[ 0 ] ;

        CONoUTrAW( "\r\n" ) ;
        CONoUTrAW( postNameP ) ;
        CONoUTrAW( "log: " ) ;
    {
    if( postLog && postLog - postNameP == costName - 4 && costName < ( TUCK << 1 ) && pcArgP )

    osTextT* postLog = thirdC::c_strstrIF( tinP , postNameP , ".log" ) ;
    countT costName = thirdC::c_strlenIF( tinP , postNameP ) ;
{
boolT accumulateCBF( tinS& tinP , countT& cDirsP , countT& cFilesP , boolT& bQuitP , const osTextT* const postNameP , countT* const pcArgP , const countT* const pModuloDirsP , const countT* const pModuloFilesP )

}
    return 0 ;

    }
        system( postCmd ) ;

        thirdC::c_strcatIF( tinP , postCmd , postNameP ) ;
        thirdC::c_strcpyIF( tinP , postCmd , "gzip -d -q -f " ) ;
        osTextT postCmd[ TUCK << 2 ] ;

        CONoUTrAW( "\r\n" ) ;
        CONoUTrAW( postNameP ) ;
        CONoUTrAW( "compressed: " ) ;
    {
    if( postGz && postGz - postNameP == costName - 3 && costName < ( TUCK << 1 ) )

    osTextT* postGz = thirdC::c_strstrIF( tinP , postNameP , ".gz" ) ;
    countT costName = thirdC::c_strlenIF( tinP , postNameP ) ;
{
boolT decompressCBF( tinS& tinP , countT& cDirsP , countT& cFilesP , boolT& bQuitP , const osTextT* const postNameP , countT* const pcArgP , const countT* const pModuloDirsP , const countT* const pModuloFilesP )

/*1*/WAKEsHOWtEXT( "tool.traffic.decompress.accumulate" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


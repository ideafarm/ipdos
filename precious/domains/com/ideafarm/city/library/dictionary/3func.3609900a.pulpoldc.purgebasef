
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    _OUT_

    if( !( F(flagsP) & flPAPERrESET_NOrESETbACK ) ) x1.back.backResetF( tinP , *this ) ;

    if( stAnimateCbfStrokes ) stAnimateCbfStrokes.purgeF( tinP ) ;

    while( stqr_bWrapUnder             ) { ZE( countT   , cFoo ) ; stqr_bWrapUnder                   >> cFoo ; }
    while( stqr_flagsRenderUnder       ) { ZE( countT   , cFoo ) ; stqr_flagsRenderUnder             >> cFoo ; }
    while( stqr_if                     ) { ZE( countT   , cFoo ) ; stqr_if                           >> cFoo ; } if( !bEmpty ) stqr_if                           << (countT) 1 ;
    while( stqr_notes                  ) { ZE( countT   , cFoo ) ; stqr_notes                        >> cFoo ; }
    while( stqr_m01PadUp_D             ) { ZE( measureT , mFoo ) ; stqr_m01PadUp_D                   >> mFoo ; } if( !bEmpty ) stqr_m01PadUp_D                   << (measureT) PI / 2 ;
    while( stqr_m01PadUp_C             ) { ZE( measureT , mFoo ) ; stqr_m01PadUp_C                   >> mFoo ; } if( !bEmpty ) stqr_m01PadUp_C                   << (measureT) 1.0    ;
    while( stqr_m01PadUp_B             ) { ZE( measureT , mFoo ) ; stqr_m01PadUp_B                   >> mFoo ; } if( !bEmpty ) stqr_m01PadUp_B                   << (measureT) PI / 2 ;
    while( stqr_m01PadUp_A             ) { ZE( measureT , mFoo ) ; stqr_m01PadUp_A                   >> mFoo ; } if( !bEmpty ) stqr_m01PadUp_A                   << (measureT) 1.0    ;
    while( stqr_m01PadUp               ) { ZE( measureT , mFoo ) ; stqr_m01PadUp                     >> mFoo ; } if( !bEmpty ) stqr_m01PadUp                     << (measureT) 0.0f ;
    while( stqr_m01PadRight_D          ) { ZE( measureT , mFoo ) ; stqr_m01PadRight_D                >> mFoo ; } if( !bEmpty ) stqr_m01PadRight_D                << (measureT) PI / 2 ;
    while( stqr_m01PadRight_C          ) { ZE( measureT , mFoo ) ; stqr_m01PadRight_C                >> mFoo ; } if( !bEmpty ) stqr_m01PadRight_C                << (measureT) 1.0    ;
    while( stqr_m01PadRight_B          ) { ZE( measureT , mFoo ) ; stqr_m01PadRight_B                >> mFoo ; } if( !bEmpty ) stqr_m01PadRight_B                << (measureT) PI / 2 ;
    while( stqr_m01PadRight_A          ) { ZE( measureT , mFoo ) ; stqr_m01PadRight_A                >> mFoo ; } if( !bEmpty ) stqr_m01PadRight_A                << (measureT) 1.0    ;
    while( stqr_m01PadRight            ) { ZE( measureT , mFoo ) ; stqr_m01PadRight                  >> mFoo ; } if( !bEmpty ) stqr_m01PadRight                  << (measureT) 0.0f ;
    while( stqr_mVector_D              ) { ZE( measureT , mFoo ) ; stqr_mVector_D                    >> mFoo ; } if( !bEmpty ) stqr_mVector_D                    << (measureT) PI / 2 ;
    while( stqr_mVector_C              ) { ZE( measureT , mFoo ) ; stqr_mVector_C                    >> mFoo ; } if( !bEmpty ) stqr_mVector_C                    << (measureT) 1.0    ;
    while( stqr_mVector_B              ) { ZE( measureT , mFoo ) ; stqr_mVector_B                    >> mFoo ; } if( !bEmpty ) stqr_mVector_B                    << (measureT) PI / 2 ;
    while( stqr_mVector_A              ) { ZE( measureT , mFoo ) ; stqr_mVector_A                    >> mFoo ; } if( !bEmpty ) stqr_mVector_A                    << (measureT) 1.0    ;
    while( stqr_mSinVector             ) { ZE( measureT , mFoo ) ; stqr_mSinVector                   >> mFoo ; } if( !bEmpty ) stqr_mSinVector                   << (measureT) 0.0 ;
    while( stqr_mCosVector             ) { ZE( measureT , mFoo ) ; stqr_mCosVector                   >> mFoo ; } if( !bEmpty ) stqr_mCosVector                   << (measureT) 1.0 ;
    while( stqr_pHandlerFinalTransform ) { ZE( countT   , cFoo ) ; stqr_pHandlerFinalTransform       >> cFoo ; } if( !bEmpty ) stqr_pHandlerFinalTransform       << countTC()      ;
    while( stqr_fRenderCyclingDetail8  ) { ZE( flagsT   , fFoo ) ; stqr_fRenderCyclingDetail8        >> fFoo ; } if( !bEmpty ) stqr_fRenderCyclingDetail8        << flRENDERcYCLINGdETAIL8_null ;
    while( stqr_fRenderCyclingDetail7  ) { ZE( flagsT   , fFoo ) ; stqr_fRenderCyclingDetail7        >> fFoo ; } if( !bEmpty ) stqr_fRenderCyclingDetail7        << flRENDERcYCLINGdETAIL7_null ;
    while( stqr_fRenderCyclingDetail6  ) { ZE( flagsT   , fFoo ) ; stqr_fRenderCyclingDetail6        >> fFoo ; } if( !bEmpty ) stqr_fRenderCyclingDetail6        << flRENDERcYCLINGdETAIL6_null ;
    while( stqr_fRenderCyclingDetail5  ) { ZE( flagsT   , fFoo ) ; stqr_fRenderCyclingDetail5        >> fFoo ; } if( !bEmpty ) stqr_fRenderCyclingDetail5        << flRENDERcYCLINGdETAIL5_null ;
    while( stqr_fRenderCyclingDetail4  ) { ZE( flagsT   , fFoo ) ; stqr_fRenderCyclingDetail4        >> fFoo ; } if( !bEmpty ) stqr_fRenderCyclingDetail4        << flRENDERcYCLINGdETAIL4_null ;
    while( stqr_fRenderCyclingDetail3  ) { ZE( flagsT   , fFoo ) ; stqr_fRenderCyclingDetail3        >> fFoo ; } if( !bEmpty ) stqr_fRenderCyclingDetail3        << flRENDERcYCLINGdETAIL3_null ;
    while( stqr_fRenderCyclingDetail2  ) { ZE( flagsT   , fFoo ) ; stqr_fRenderCyclingDetail2        >> fFoo ; } if( !bEmpty ) stqr_fRenderCyclingDetail2        << flRENDERcYCLINGdETAIL2_null ;
    while( stqr_fRenderCyclingDetail1  ) { ZE( flagsT   , fFoo ) ; stqr_fRenderCyclingDetail1        >> fFoo ; } if( !bEmpty ) stqr_fRenderCyclingDetail1        << flRENDERcYCLINGdETAIL1_null ;
    while( stqr_fRenderCycled          ) { ZE( flagsT   , fFoo ) ; stqr_fRenderCycled                >> fFoo ; } if( !bEmpty ) stqr_fRenderCycled                << flRENDERcYCLED_null  ;
    while( stqr_fRenderControl         ) { ZE( flagsT   , fFoo ) ; stqr_fRenderControl               >> fFoo ; } if( !bEmpty ) stqr_fRenderControl               << flRENDERcONTROL_null ;
    while( stqr_cRowsMarginSadamFrame  ) { ZE( countT   , cFoo ) ; stqr_cRowsMarginSadamFrame        >> cFoo ; } if( !bEmpty ) stqr_cRowsMarginSadamFrame        << (countT)1 ;
    while( stqr_cColsMarginSadamFrame  ) { ZE( countT   , cFoo ) ; stqr_cColsMarginSadamFrame        >> cFoo ; } if( !bEmpty ) stqr_cColsMarginSadamFrame        << (countT)1 ;
    while( stqr_mIdRowHighWater        ) { ZE( measureT , mFoo ) ; stqr_mIdRowHighWater              >> mFoo ; } if( !bEmpty ) stqr_mIdRowHighWater              << (measureT)-MAXmEASUREt ;
    while( stqr_mIdRowLowWater         ) { ZE( measureT , mFoo ) ; stqr_mIdRowLowWater               >> mFoo ; } if( !bEmpty ) stqr_mIdRowLowWater               << (measureT) MAXmEASUREt ;
    while( stqr_mIdColHighWater        ) { ZE( measureT , mFoo ) ; stqr_mIdColHighWater              >> mFoo ; } if( !bEmpty ) stqr_mIdColHighWater              << (measureT)-MAXmEASUREt ;
    while( stqr_mIdColLowWater         ) { ZE( measureT , mFoo ) ; stqr_mIdColLowWater               >> mFoo ; } if( !bEmpty ) stqr_mIdColLowWater               << (measureT) MAXmEASUREt ;
    while( stqr_mIdColWrapOLD             ) { ZE( measureT , mFoo ) ; stqr_mIdColWrapOLD                   >> mFoo ; } if( !bEmpty ) stqr_mIdColWrapOLD                   << (measureT) MAXmEASUREt ;

    while( stqr_cRipples                  ) { ZE( measureT , cFoo ) ; stqr_cRipples                        >> cFoo ; } if( !bEmpty ) stqr_cRipples                        << (countT)-1 ;
    while( stqr_offFrameWrap              ) { ZE( countT   , cFoo ) ; stqr_offFrameWrap                    >> cFoo ; } if( !bEmpty ) stqr_offFrameWrap                    << (countT)0 ;
    while( stqr_offFrame                  ) { ZE( countT   , cFoo ) ; stqr_offFrame                        >> cFoo ; } if( !bEmpty ) stqr_offFrame                        << (countT)0 ;
    while( stqr_idTypePaint               ) { ZE( countT   , cFoo ) ; stqr_idTypePaint                     >> cFoo ; } if( !bEmpty ) stqr_idTypePaint                     << (countT)ifcIDtYPEpAINT_XOR ;
    while( stqr_idObject                  ) { ZE( countT   , cFoo ) ; stqr_idObject                        >> cFoo ; } if( !bEmpty ) stqr_idObject                        << (countT)0 ;
    while( stqr_cPolygonSides             ) { ZE( countT   , cFoo ) ; stqr_cPolygonSides                   >> cFoo ; } if( !bEmpty ) stqr_cPolygonSides                   << (countT)CpOLYGONsIDESdEFAULT ;
    while( stqr_flStyle                   ) { ZE( countT   , cFoo ) ; stqr_flStyle                         >> cFoo ; } if( !bEmpty ) stqr_flStyle                         << (countT)flRENDERsTYLE_null ;

    while( stqr_flagsModeI_                ) { ZE( countT   , cFoo ) ; stqr_flagsModeI_                      >> cFoo ; }

    }
        stqr_strokingFrame << (byteT*)&rf ;
        stqr_strokingFrame << (byteT*)&rf ;
        strokingFrameS rf( flSTROKINGfRAME_null , 1 , 1 , mIdColNow , mIdRowNow , x1.back.mColsF() , x1.back.mRowsF() ) ;
    {
    if( !bEmpty )
    while( stqr_strokingFrame ) { strokingFrameS rf ; byteT* pb_rf = (byteT*)&rf ; stqr_strokingFrame >> pb_rf  ; }

    }
        x1.back.backPositionF( tinP , *this , mIdColNow , mIdRowNow ) ;
        mIdRowNow = 1.0 ;
        mIdColNow = 1.0 ;
    {
    if( !bEmpty )

    }
        }
            hRgnDoomed.osF( ifcIDtYPEhANDLE_DRAWINGtOOL , c5p.c1 ) ;
            handleC hRgnDoomed( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_DRAWINGtOOL ) ;
        {
        if( !bNoDraw )

        stqr_paperOldClip >> pbp ;
        byteT* pbp = (byteT*)&c5p ;
        count5S c5p ;
    {
    while( stqr_paperOldClip )

    while( stqr_paperVars  ) { ZE( strokeS* , psttw ) ; stqr_paperVars  >> psttw ; etherP.delF( tinP , psttw ) ; }
    //U::USE purgeF FOR NEXT 2 LINES (3 IF NOT DRAWING PELS)

    flagsRender       = flPAPERrENDER_null ;
    flagsRenderNoPush = flPAPERrENDERnOpUSH_null ;

    const boolT bNoDraw = F(flagsP) & flPAPERrESET_NOdRAW ;
    const boolT bEmpty  = F(flagsP) & flPAPERrESET_LEAVEeMPTY ;

    _INoLD_
{
/*1*/voidT pulpOldC::purgeBaseF( tinS& tinP , etherC& etherP , const flagsT flagsP )/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


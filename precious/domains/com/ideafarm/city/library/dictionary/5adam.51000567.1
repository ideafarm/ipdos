
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

measureT dd1 = ddF( 1.0 , 1.0 , 1.0 , dd , v1 , v2 , v3 ) ;
//OO POINTS ARE OCCLUDED IFF dd1 dd2 ARE NONZE AND OF DIFFERING SIGNS

measureT dd = v1 * a1 + v2 * a2 + v3 * a3 ;

thumbF( v1 , v2 , v3 , x1 , x2 , x3 , y1 , y2 , y3 ) ;
ZE( measureT , v3 ) ;
ZE( measureT , v2 ) ;
ZE( measureT , v1 ) ;

measureT y3 = c3 - a3 ;
measureT y2 = c2 - a2 ;
measureT y1 = c1 - a1 ;

measureT x3 = b3 - a3 ;
measureT x2 = b2 - a2 ;
measureT x1 = b1 - a1 ;

measureT c3 = 1.0 ;
measureT c2 = 1.0 ;
measureT c1 = 0.0 ;

measureT b3 = 0.0 ;
measureT b2 = 1.0 ;
measureT b1 = 1.0 ;

measureT a3 = 0.0 ;
measureT a2 = 0.0 ;
measureT a1 = 0.0 ;

TODO

}
    return v1P * x1P + v2P * x2P + v3P * x3P - ddP ;
{
measureT ddF( const measureT x1P , const measureT x2P , const measureT x3P , const measureT ddP , const measureT v1P , const measureT v2P , const measureT v3P )

}
    v3P = x1P * y2P - x2P * y1P ;
    v2P = x3P * y1P - x1P * y3P ;
    v1P = x2P * y3P - x3P * y2P ;
{
voidT thumbF( measureT& v1P , measureT& v2P , measureT& v3P , const measureT x1P , const measureT x2P , const measureT x3P , const measureT y1P , const measureT y2P , const measureT y3P )

/*1*/WAKEsHOW( "doodle.occlusion.of.point.behind.plane" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


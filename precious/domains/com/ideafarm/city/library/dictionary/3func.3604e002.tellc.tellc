
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    }
        if( cbd ) thirdC::c_memcpyIF( tinP , pbData + sizeof( tellS ) , pbP , cbd ) ;

        //}
        //    head.ipMe = head.bIda ? idaMe : (countT)&head ;
        //    head.bIda = !!idaMe ;
        //    ap_artmentOldC idaMe( tinP , (byteT*)&head ) ;
        //{
        //else
        //if( !bSynchP ) head.ipMe = head.bIda = 0 ;
        //U::USE aptC AND apartmentsOldC TO REWRITE THIS
        //U::EDIT ap_artmentOldC TO SUPPORT poolC (MULTIPLE ROOT POOLoLDS BREAK THE ASSUMPTION OF ap_artmentOldC CODING)

        //CONoUTrAW3( "W " , head.idTell , "\r\n" ) ; //U::
        //tellS& head = *(tellS*)pbData ;
        new( 0 , tinP , pbData , sizeof( tellS ) ) tellS( tinP , idLineCtP , idiFileCtP , pbBitsCtP , idTypeP , cbd ) ;
    
        countT cbd = cbP ;
    
        if( pbData == pbZombieP    && cbZombieP           < sizeof( tellS ) + cbP ) BLAMMO
        if( !pbData ) BLAMMO
        if( !pbP != !cbP ) BLAMMO
    
        if( !bUseHeap ) { ___( pbData ) ; }
        }
            ;
                    : ( PUSE.newF( tinP , LF , pbFromPool , sizeof( tellS ) + cbP ) , pbFromPool )
                    ? processGlobal3I.heap.newF( tinP , LF , sizeof( tellS ) + cbP )
                : bUseHeap
                ? pbZombieP
            pbData = pbZombieP
            ZE( byteT* , pbFromPool ) ;
        {
    {
    POOPIE

    if( cbP % sizeof( countT ) ) { BLAMMO ; } //ENFORCES CODE CONFORMANCE RULE FOR SPEEDILY WRITEABLE AND READABLE TELEMETRY
{
pTin( &tinP ) //FOR MY DESTRUCTOR
pbData( 0 ) ,
ebp( ebpP ) ,
bUseHeap( /*!tinP.pPoolUse*/ 1 ) ,
/*1*/tellC::tellC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const countT idTypeP , const byteT* const pbP , const countT cbP , byteT* const pbZombieP , const countT cbZombieP , const boolT bSynchP , const countT ebpP ) :/*1*/

//ASSUME: poolOldWork IS GUARANTEED TO EXIST BEFORE ANY CHILD THREADS ARE LAUNCHED AND TO CONTINUE TO EXIST UNTIL AFTER ALL CHILD THREADS END

/**/
*/
 bSynchP
  if pbZombieP then must be >= sizeof( tellS ) + cbP
  if !pbZombieP then can be 0
 cbZombieP
  if 0 then *tinP.pPoolUse or processGlobal3I.heap will be used
  for speed, specify bytes on the thread stack if cbP is known at compile time
  can be 0
 pbZombieP
  for maximum speed, avoid calculating string lengths at run time
  note: do not set cbP to 0 to have me calculate the length of a string; i do not do that
  if 0 then the monitor will only see idTypeP
  can be 0
  the length of the data record
 cbP
  the data record to be emitted to the monitor
 pbP
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/1snip.11200170.ifcIDtYPEtELLsYS!||
 must not be 0
 idTypeP
 tinP
parameters
else i will use the zombie memory area that you specify
if poolOldWork exists then i will use it, and the size of the data is limited only by the unused area of the poolOld
 optional data of a format that can be inferred from the tellS object's value
 wo tellS object
i evaluate to either the length of, or the address of, a memory area that i lay out as follows
i am intended solely to be used as an argument to dosTellMonitorIF
i construct a formatted blob
\<A HREF=\"5.16f0003.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


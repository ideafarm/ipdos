
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


#undef PSTT2
#undef PSTT1

}
    return cWords ;

    dec02AM( offNestLevel ) ;

    emitLaziesF( tinP , *this , soulOutP , stqLazy , flagsP , tBreak ) ;

    }
        }
            delF( tinP , psttp ) ;
            }
                }
                    }
                        //SINCE psttd IS ASSUMED TO NOT CONTAIN tBreak, THERE IS NO NEED TO FLUSH stqLazy HERE IF psttd CONTAINS tBreak
                        stqLazy << psttd ; psttd = 0 ; //A:ASSUME: tBreak IS NOT A DELIMITER

                        cWords ++ ;
                        strSubstringF( tinP , psttd , idfDelim , idlDelim , psttp ) ; ___( psttd ) ;
                        ZE( strokeS* , psttd ) ;
                    {
                    if( bDelimiters )

                    }
                        bLazyIsDelim = 1 ;
                        emitLaziesF( tinP , *this , soulOutP , stqLazy , flagsP , tBreak ) ;
                    {
                    if( !bLazyIsDelim )
                {
                if( idfDelim )

                }
                    }
                        delF( tinP , pstt1p ) ;
                        }
                            }
                                }
                                    stqLazy << psttp ; psttp = 0 ;

                                    strMakeF( tinP , LF , psttp , psttc1 ) ; ___( psttp ) ;
                                    ZE( strokeS* , psttp ) ;
                                {
                                else
                                }
                                    }
                                        stqLazy << psttp ; psttp = 0 ;
                                        emitLaziesF( tinP , *this , soulOutP , stqLazy , flagsP , tBreak ) ;

                                        strMakeF( tinP , LF , psttp , psttc1 ) ; ___( psttp ) ;
                                        ZE( strokeS* , psttp ) ;
                                    {
                                    if( bDelimiters )
                                {
                                if( psttc1[ CSpREFIX ] == sttBreak )
                            {
                            if( psttc1->idAdam )
                        {
                        FORsTRINGSiN1( pstt1p )

                        delF( tinP , psttw3 ) ;
                        strWordsF( tinP , pstt1p , psttw3 , sttq , tBreak , bDelimiters ? flSTRwORDS_DELIMITERS : flSTRwORDS_null ) ; ___( pstt1p ) ;
                        strokeS sttq( 0 , sc_IGNOREqUOTES ) ;
                        ZE( strokeS* , pstt1p ) ;
                    {
                    else
                    if( !strIdF( tinP , tBreak , psttw3 ) ) { stqLazy << psttw3 ; psttw3 = 0 ; }

                    }
                        bLazyIsDelim = 0 ;
                        emitLaziesF( tinP , *this , soulOutP , stqLazy , flagsP , tBreak ) ;
                    {
                    if( bLazyIsDelim )

                    cWords ++ ;                                                                                     // psttw3 IS SNIP READY TO BE PUSHED
                    strReplaceF( tinP , psttw3 , 0 , pstt_sq , pstt_q , 0 , flSTRrEPLACE_IGNOREqUOTES ) ;           // \" -> "

                    delF( tinP , psttw2 ) ;
                    }
                        strMakeF( tinP , LF , psttw3 , psttw2 ) ; ___( psttw3 ) ;
                    {
                    else
                    }
                        }
                            strSubstringF( tinP , psttw3 , idf3 , idl3 , psttw2 ) ; ___( psttw3 ) ;
                            countT idl3 = psttw2->idAdam - 1 ;
                            countT idf3 = 2 ;
                        {
                        else
                        }
                            strMakeF( tinP , LF , psttw3 , T("") ) ; ___( psttw3 ) ;
                        {
                        if( psttw2->idAdam == 2 )
                    {
                    if( sttQuoteP.idCaste != sc_IGNOREqUOTES && psttw2->idAdam > 1 && psttw2[ CSpREFIX ] == sttd && psttw2[ CSpREFIX - 1 + psttw2->idAdam ] == sttd ) // IF SNIP IS QUOTED STRING
                    strokeS sttd = S1C(0x22) ; //0x22 is a double quote
                    ZE( strokeS* , psttw3 ) ;                                                                      // SNIP WITH DOUBLE QUOTES REMOVED
                    strSubstringF( tinP , psttw2 , idfSave , idw , psttp ) ; ___( psttw2 ) ;                         // SNIP BEFORE DELIMITER
                    ZE( strokeS* , psttw2 ) ;
                    if( idw > idfSave ) idw -- ;                                                                     // LATH BEFORE DELIMITER OR, IF NONE, BEGINNING OF DELIMITER
                {
                if( idfSave <= psttp->idAdam && !strIdF( tinP , psttp[ CSpREFIX - 1 + idfSave ] , psttDelimiters ) ) // IF CURSOR IS NOT AT A DELIMITER

                //if( tinP.pc Utility[ 0 ] ) LOGrAW5( "[idfDelim,idlDelim]: " , idfDelim , " " , idlDelim , "\r\n" ) ;

                ;
                        : psttp->idAdam ;
                        ? idf - 1
                    : idf
                    ? 0
                countT idlDelim = !idfDelim
                countT idfDelim = idw ;

                countT idw = strIdAnyF( tinP , 0 , flSTRmATCH_null , idf , sttQuoteP , psttDelimiters , psttp ) ;
                sttQuoteP = sttqSave ; //NEEDED WHEN INPUT CONTAINS AN UNPAIRED QUOTE
                countT idfSave = idf ;
                countT idfSaveReally = idf ;
            {
            while( !POOP && idf )
            countT idf = 1 ;
        {
        if( !POOP )

        }
            strDecodeF( tinP , psttp , pbzEncoded ) ; ___( psttp ) ;
            __( !cbIn ) ;
            __( flagsIn - flSOULiTEM_null ) ;
            __( idTypeIn - ifcIDtYPEsOULiTEM_strokeSptr ) ;
            byteT* pbzEncoded = soulInP.pbFieldF( tinP , idTypeIn , flagsIn , cbIn , idFieldIn ) ;
            ZE( countT , cbIn     ) ;
            ZE( flagsT , flagsIn  ) ;
            ZE( countT , idTypeIn ) ;
        {
        else
        if( F(flagsP) & flSTRwORDS_CONSUMEiNPUT ) { soulInP >> psttp ; ___( psttp ) ; }
        ZE( strokeS* , psttp ) ;

        }
            if( !offNest && !( cRemain % TUCK ) ) traceF( tinP , T("strWordsF / words remaining [cRemain]: ")+TF2(cRemain,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES) ) ;
            countT cRemain = cFieldsIn - idFieldIn ;
        {
        //CONoUTrAW9( "[idFieldIn,cPoolDropDt,cPoolDropCt,stqLazy]: " , idFieldIn , "    " , tinP.cPoolDropCt , "    " , tinP.cPoolDropDt , "    " , stqLazy , "\r\n" ) ;
    {
    for( countT idFieldIn = 1 ; idFieldIn <= cFieldsIn ; idFieldIn ++ )
    ZE( boolT    , bLazyIsDelim ) ;
    staqC stqLazy( tinP ) ;
    countT cFieldsIn = soulInP ;
    ZE( countT , cWords ) ;

    PSTT2( pstt_sq , '\\' , '\"' ) ;
    PSTT1( pstt_q  , '\"' ) ;

    TN( tBreak , "" ) ; tBreak = tBreak+sttBreak ;
    strokeS sttBreak( sa_MARKsYSTEMbREAK , sc_MARKsYSTEM ) ;
    const strokeS* psttDelimiters = psttDelimitersP ? psttDelimitersP : (strokeS*)tWhite ;
    TN( tWhite , TbLACK ) ;
    const strokeS sttqSave = sttQuoteP ;
    boolT bDelimiters = !!( F(flagsP) & flSTRwORDS_DELIMITERS ) ;

    //
    // (THIS MUST BE DONE IF AN ENTIRE WORD MIGHT BE HUGE ENOUGH TO EXHAUST THE POOL)
    // OPTIONALLY, I WILL EMIT EACH ENTIRE WORD IN ITS ORIGINAL PIECES RATHER THAN CONCATENATE THEM FOR A SINGLE EMISSION
    // 
    // TO HANDLE THIS, ALL INPUT IS BUFFERED INTO stqLazy AND ALL OUTPUT IS OBTAINED FROM stqLazy.
    // INPUT soulInP IS TREATED AS A STREAM, WHICH MEANS THAT AN ENTIRE WORD OR AN ENTIRE DELIMITER MIGHT BE BROKEN INTO PIECES WITHIN soulInP.
    // I PUSH ENTIRE WORDS INTO soulOutP.
    //

    tinP.cPoolDropDt = tinP.cPoolDropCt = 0 ; //U::TO FIND A BUG

    _IO_

    countT offNest = incv02AM( offNestLevel ) ;
    static countT offNestLevel ; //U::THIS IS ONLY USED TO CONTROL traceF ; IF MULTIPLE THREADS CALL ME, ONLY WO THREAD WILL RECEIVE TRACING

    }
        if( POOP ) return 0 ;
        __Z( soulInP ) ;
        FV( flSTRwORDS , flagsP )
        //__NZ( soulOutP ) ;
        if( POOP ) return 0 ;
    {
    IFbEcAREFUL
    SCOOP
{
/*1*/countT etherC::strWordsF( tinS& tinP , soulC& soulOutP , soulC& soulInP , strokeS& sttQuoteP , const strokeS* psttDelimitersP , const flagsT flagsP )/*1*/

}
    }
        }
            }
                ether.strWordsF( tinP , soulOutP , soulLazy , sttq , tBreakP , flagsNest ) ;
                strokeS sttq( 0 , sc_IGNOREqUOTES ) ;

                ;
                    : flSTRwORDS_CONSUMEiNPUT
                    ? flSTRwORDS_CONSUMEiNPUT | flSTRwORDS_DELIMITERS

                flagsT flagsNest = F(flagsP) & flSTRwORDS_DELIMITERS

                stqLazyP.purgeF( tinP ) ;        
                }
                    ether.delF( tinP , psttl ) ;
                    soulLazy << psttl ;
                    strokeS*& psttl = *(strokeS**)&stqLazyP[ idLazy ] ;
                {
                for( countT idLazy = cLazy ; idLazy ; idLazy -- )

                soulC soulLazy( tinP , TAG( TAGiDnULL ) , flSOUL_null , F(flagsP) & flSTRwORDS_USEjOT ? "soul.lazy" : (osTextT*)0 ) ;
            {
            else
            if( !bBroken ) emitConcatenationF( tinP , ether , soulOutP , stqLazyP ) ;
        
            }
                }
                    break ;
                    //CONoUTrAW( T("is broken: \"")+T(psttl)+T("\"\r\n") ) ;
                    bBroken = 1 ;
                {
                if( !bBroken && ether.strIdF( tinP , tBreakP , psttl ) )
                strokeS*& psttl = *(strokeS**)&stqLazyP[ idLazy ] ;
            {
            for( countT idLazy = cLazy ; idLazy ; idLazy -- )
            ZE( boolT , bBroken ) ;
        {
        else  // CONCATENATE BUT SPLIT AT BREAKS (I DO THIS BY CALLING MYSELF RECURSIVELY, SPECIFYING tBreakP AS THE DELIMITER STRING)
        else if( !( F(flagsP) & flSTRwORDS_SPLITaTmARK ) ) emitConcatenationF( tinP , ether , soulOutP , stqLazyP ) ;
        }
            stqLazyP.purgeF( tinP ) ;
            }
                ether.delF( tinP , psttl ) ;
                //CONoUTrAW( T("2 emitted \"")+T(psttl)+T("\"\r\n") ) ;
                soulOutP << psttl ;
                //CONoUTrAW( T("emit without concatenating:  \"")+T(psttl)+T("\"\r\n") ) ;
                strokeS*& psttl = *(strokeS**)&stqLazyP[ idLazy ] ;
            {
            for( countT idLazy = cLazy ; idLazy ; idLazy -- )
        {
        if( F(flagsP) & flSTRwORDS_DOnOTcONCATENATEwORDpIECES )
    {
    if( cLazy )

    countT cLazy = stqLazyP ;
{
voidT emitLaziesF( tinS& tinP , etherC& ether , soulC& soulOutP , staqC& stqLazyP , const flagsT flagsP , textC& tBreakP )

}
    ether.delF( tinP , psttLazies ) ;
    //CONoUTrAW( T("1 emitted \"")+T(psttLazies)+T("\"\r\n") ) ;
    soulOutP << psttLazies ;
    //CONoUTrAW( T("emit concatenation: \"")+T(psttLazies)+T("\"\r\n") ) ;
    stqLazyP.purgeF( tinP ) ;
    }
        ether.delF( tinP , psttl ) ;
        ether.strFuseF( tinP , psttLazies , psttl ) ;
        //CONoUTrAW( T("concatenation piece: \"")+T(psttl)+T("\"\r\n") ) ;
        strokeS*& psttl = *(strokeS**)&stqLazyP[ idLazy ] ;
    {
    for( countT idLazy = cLazy ; idLazy ; idLazy -- )
    ether.strMakeF( tinP , LF , psttLazies , 0 , csttl ) ; ___( psttLazies ) ;
    ZE( strokeS* , psttLazies ) ;

    for( countT idLazy = cLazy ; idLazy ; idLazy -- ) csttl += ( (strokeS*)stqLazyP[ idLazy ] )->idAdam ;
    ZE( countT , csttl ) ;

    countT cLazy = stqLazyP ;
{
voidT emitConcatenationF( tinS& tinP , etherC& ether , soulC& soulOutP , staqC& stqLazyP )

    aNameP[ CSpREFIX + 1 ] = ost2P ;
    aNameP[ CSpREFIX ] = ost1P ;                                                        \
    SETpREFIX( aNameP , 2 , 0 ) ;                                                       \
    strokeS aNameP[ CSpREFIX + 2 ] ;                                                    \
                                                                                        \
#define PSTT2(aNameP,ost1P,ost2P)                                                       \

    aNameP[ CSpREFIX ] = ost1P ;                                                        \
    SETpREFIX( aNameP , 1 , 0 ) ;                                                       \
    strokeS aNameP[ CSpREFIX + 1 ] ;                                                    \
                                                                                        \
#define PSTT1(aNameP,ost1P)                                                             \

/**/
*/
see my other overload
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


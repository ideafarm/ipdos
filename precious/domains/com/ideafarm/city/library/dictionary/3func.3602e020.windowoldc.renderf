
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}

    tinP.pAdamGlobal5->frPaper.grab.ungrabF( tinP ) ;

    }
        if( cTraceOn == 1 && sttP.idCaste == scOld_DEBUG && !bRetainTrace ) cTraceOn = 0 ;

        if( cTraceOn && sttP.idCaste != sc_cADAM && processGlobal2I.ostLathLog != '\n' ) { LOGrAW( "                " ) ; winPulp.logStrokeF( tinP , sttP ) ; LOGrAW( "\r\n" ) ; }

        }
            }
                }
                    break ;

                    bDebug = !bDebug ;

                    //LOGrAWtID2( "bDebugOn is now " , bDebugOn ) ;
                    bDebugOn = !bDebugOn ;

                    strokingFrameS& sf = *(strokingFrameS*)&winPulp.stqr_strokingFrame[ 1 + winPulp.rCache.offFrame ] ;
                {
                case scOld_DEBUG : //THIS IS JUST FOR DEBUG CONVENIENCE
                case scOld_CALCoP2fORMATcOUNT : { winPulp.flagsRenderCalcNoPush |= F(flPAPERrENDERcALCnOpUSH_COUNT2)   ; break ; }
                case scOld_CALCoP1fORMATcOUNT : { winPulp.flagsRenderCalcNoPush |= F(flPAPERrENDERcALCnOpUSH_COUNT1)   ; break ; }
                case scOld_CALCfORMATcOUNT :    { winPulp.flagsRenderCalcNoPush |= F(flPAPERrENDERcALCnOpUSH_COUNT)    ; break ; }
                case scOld_CALCoP2rAM :         { winPulp.flagsRenderCalcNoPush |= F(flPAPERrENDERcALCnOpUSH_RAM2)     ; break ; }
                case scOld_CALCoP2lITERAL :     { winPulp.flagsRenderCalcNoPush |= F(flPAPERrENDERcALCnOpUSH_LITERAL2) ; break ; }
                case scOld_CALCoP1rAM :         { winPulp.flagsRenderCalcNoPush |= F(flPAPERrENDERcALCnOpUSH_RAM1)     ; break ; }
                case scOld_CALCoP1lITERAL :     { winPulp.flagsRenderCalcNoPush |= F(flPAPERrENDERcALCnOpUSH_LITERAL1) ; break ; }
                }
                    break ;
                    }
                        ether.delF( tinP , pcElts ) ;

                        }
                            if( cTraceOn ) { TN( tSay , "" ) ; tSay = T("there are ")+TF1(winPulp.stqr_notes)+T(" notes after i pushed ")+TF1(cElts+1) ; LOGrAW( tSay ) ; }

                            winPulp.stqr_notes << cElts ; //NUMBER OF PLATES PUSHED
                            for( countT off = cElts ; off ; off -- ) winPulp.stqr_notes << pcElts[ off ] ;

                            const countT cElts = pcElts[ 0 ] ;
                        {
                        if( F(winPulp.flagsRender) & flPAPERrENDER_NOTES )

                        winPulp.stqRam >> *(countT*)&pcElts ;
                        ZE( countT* , pcElts ) ;
                    {
                    if( winPulp.stqRam )
                {
                case scOld_CALCpOPrAMlAYER :
                }
                    break ;

                    }
                        winPulp.stqRam << (countT)pcElts ;
                        pcElts[ 0 ] = sttP.idAdam ;
                    {
                    if( pcElts )
                    ether.newF( tinP , LF , pcElts , 1 + sttP.idAdam ) ; ___( pcElts ) ;
                    ZE( countT* , pcElts ) ;
                {
                case scOld_cCALCpUSHrAMlAYER : //U:: allocates idAdam countT objects, accessed using 1-based indexing; index 0 contains number of elements allocated
                }
                    break ;
                    ether.beeClickF( tinP , hz ) ;
                    countT hz = sttP.idAdam ? sttP.idAdam : TUCK ;
                {
                case scOld_cBEEP :
                }
                    break ;
                    backScratchBitmapPopF( tinP , pulpP , sttP.idAdam ) ;
                {
                case scOld_cSCRATCHbITMAPpOP :
                }
                    break ;
                    backDrawOnNullDeviceF( tinP , pulpP ) ;
                {
                case scOld_DRAWoNnULLdEVICE :
                }
                    break ;
                    backDrawOnScratchDeviceF( tinP , pulpP ) ;
                {
                case scOld_DRAWoNsCRATCHdEVICE :
                }
                    break ;
                    backDrawOnNormalDeviceF( tinP , pulpP ) ;
                {
                case scOld_DRAWoNnORMALdEVICE :
                }
                    break ;
                {
                case scOld_PELSpUSHeNDbACK :
                }
                    break ;
                {
                case scOld_PELSpUSHeND :
                }
                    break ;
                {
                case scOld_PELSpUSHbEGIN :
                }
                    break ;
                    }
                        }
                            thirdC::winBitBltIF( tinP , ifcIDtYPEpAINT_XOR , *winPulp.pHndDrawBitmap , bitmap , cCols , cRows , mIdColOrigin + winPulp.mIdColNow , mIdRowOrigin + winPulp.mIdRowNow , 1.0 , 1.0 ) ; //THIS LINE MIGHT HIT THE ROW ABOVE AND/OR THE COL TO THE RIGHT OF THE CURRENT STROKING FRAME, BECAUSE THE RENDERED STROKING FRAMES CAN VARY IN SIZE DUE TO ROUNDING
                
                            countT cRows = ((HANDLEaPPnOTEScOUNTcLASS&)(handleC&)bitmap).c2 ;
                            countT cCols = ((HANDLEaPPnOTEScOUNTcLASS&)(handleC&)bitmap).c1 ;
                
                            bitmapOldC& bitmap = *(bitmapOldC*)&(*pStq)[ idPlate ] ;
                        {
                        if( pStq && idPlate <= *pStq )
                        staqC* pStq = sttP.idCaste == scOld_cPELSdRAW ? &winPulp.stqPelsPaper : &stqPelsBack ;
                    {
                    if( !( F(winPulp.flagsMode) & flPULPmODE_SUPPRESSpELcOLORcHANGES ) )
                    countT idPlate = sttP.idAdam ? sttP.idAdam : 1 ;
                {
                case scOld_cPELSdRAWbACK :
                case scOld_cPELSdRAW :
                }
                    break ;
                    }
                        }
                            DELzOMBIE( pBitmap ) ;
                            bitmapOldC* pBitmap = (bitmapOldC*)pbBitmap ;
                
                            *pStq >> pbBitmap ;
                            byteT pbBitmap[ sizeof( bitmapOldC ) ] ;
                        {
                        if( pStq && *pStq )
                        staqC* pStq = sttP.idCaste == scOld_PELSpOP ? &winPulp.stqPelsPaper : &stqPelsBack ;
                    {
                    if( !( F(winPulp.flagsMode) & flPULPmODE_SUPPRESSpELcOLORcHANGES ) )
                {
                case scOld_PELSpOPbACK :
                case scOld_PELSpOP :
                }
                    break ;

                    }
                        thirdC::winBitBltIF( tinP , ifcIDtYPEpAINT_OPAQUE , bitmap , *winPulp.pHndDrawBitmap , cCols , cRows , 1.0 , 1.0 , mColDevice , mRowDevice ) ;
                        const measureT mRowDevice = mIdRowOrigin + idRowFrom ;
                        const measureT mColDevice = mIdColOrigin + idColFrom ;
                        bitmapOldC& bitmap = *(bitmapOldC*)&(*pStq)[ 1 ] ;
                
                        else                                      new( 0 , tinP , (byteT*)&(*pStq)[ 1 ] , sizeof( bitmapOldC ) ) bitmapOldC( tinP , ether , hDrawWindow , cCols , cRows ) ;
                        if( F(flagsd) & flDRAW_MONOCHROMEbITMAP ) new( 0 , tinP , (byteT*)&(*pStq)[ 1 ] , sizeof( bitmapOldC ) ) bitmapOldC( tinP , ether               , cCols , cRows ) ;
                
                        *pStq << (byteT*)0 ;
                
                        staqC* pStq    = sttP.idCaste == scOld_PELSpUSH ? &winPulp.stqPelsPaper : &stqPelsBack ;
                    {
                    if( !( F(flagsd) & flDRAW_SUPPRESSpELcOLORcHANGES ) )
                    if( sttP.idCaste == scOld_MONOCHROMEpELSpUSH || sttP.idCaste == scOld_MONOCHROMEpELSpUSHbACK ) flagsd |= flDRAW_MONOCHROMEbITMAP ;
                    flagsT flagsd = F(winPulp.flagsMode) & flPULPmODE_SUPPRESSpELcOLORcHANGES ? flDRAW_SUPPRESSpELcOLORcHANGES : flDRAW_null ;

                    }
                        if( cTraceOn ) { TN( tSay , "" ) ; tSay = T("pushing (")+TF1(cCols)+T(",")+TF1(cRows)+T(") (cols,rows) starting at (")+TF1(idColFrom)+T(",")+TF1(idRowFrom)+T(") ; there are ")+TF1(winPulp.stqr_notes)+T(" notes after i pushed 7 ; ") ; LOGrAW( tSay ) ; }

                        /*.1.*/ winPulp.stqr_notes << (measureT)6 ; //NUMBER OF PLATES PUSHED
                        /*.2.*/ winPulp.stqr_notes << (measureT)idColFrom ;
                        /*.3.*/ winPulp.stqr_notes << (measureT)idRowFrom ;
                        /*.4.*/ winPulp.stqr_notes << (measureT)( idColFrom - 1 + cCols ) ;
                        /*.5.*/ winPulp.stqr_notes << (measureT)( idRowFrom - 1 + cRows ) ;
                        /*.6.*/ winPulp.stqr_notes << (measureT)cCols ;
                        /*.7.*/ winPulp.stqr_notes << (measureT)cRows ;
                    {
                    if( F(winPulp.flagsRender) & flPAPERrENDER_NOTES )
        
                    }
                        cRows = 1 + idRowTo - idRowFrom ;
                        cCols = 1 + idColTo - idColFrom ;
                        idRowFrom = R( sf.mIdRow ) ;
                        idColFrom = R( sf.mIdCol ) ;

                        countT idRowTo   = R( mIdRowTo  ) ;
                        countT idColTo   = R( mIdColTo  ) ;
                        measureT mIdRowTo = sf.mIdRow - 1.0 + sf.mRows ;
                        measureT mIdColTo = sf.mIdCol - 1.0 + sf.mCols ;
                        strokingFrameS& sf = *(strokingFrameS*)&winPulp.stqr_strokingFrame[ 1 + winPulp.rCache.offFrame ] ;
                    {
                    countT cRows     ;
                    countT cCols     ;
                    countT idRowFrom ;
                    countT idColFrom ;
                    //INTENTIONALLY UNINITIALIZED, FOR SPEED
                {
                case scOld_MONOCHROMEpELSpUSHbACK :
                case scOld_MONOCHROMEpELSpUSH :
                case scOld_PELSpUSHbACK :
                case scOld_PELSpUSH :
                }
                    break ;
                    tinP.pAdamGlobal1->_pulpOldC_.flagsMode &= ~( F(flPAPERmODEi_SUPPRESStABfRESH) ) ;
                    winPulp.stqr_flagsModeI_ << tinP.pAdamGlobal1->_pulpOldC_.flagsMode ;
                {
                case scOld_PUSHtABfRESHoN :
                }
                    break ;
                    tinP.pAdamGlobal1->_pulpOldC_.flagsMode |= flPAPERmODEi_SUPPRESStABfRESH ;
                    winPulp.stqr_flagsModeI_ << tinP.pAdamGlobal1->_pulpOldC_.flagsMode ;
                {
                case scOld_PUSHtABfRESHoFF :
                }
                    break ;
                    }
                        winPulp.stqr_flagsModeI_ >> tinP.pAdamGlobal1->_pulpOldC_.flagsMode ;
                        tinP.pAdamGlobal1->_pulpOldC_.flagsMode = 0 ;
                    {
                    if( winPulp.stqr_flagsModeI_ )
                {
                case scOld_POPtABfRESH :
                }
                    break ;

                    //LOGrAW( tSay ) ;
                    //TN( tSay , "" ) ; tSay = T("scOld_cLOGsTROKINGfRAME (offFrame,cFrames,mIdCol,mIdRow,mCols,mRows,mIdColTo,mIdRowTo): ")+TF1(winPulp.rCache.offFrame)+T(" ")+TF1(winPulp.stqr_strokingFrame)+T(" ")+TF1(sf.mIdCol)+T(" ")+TF1(sf.mIdRow)+T(" ")+TF1(sf.mCols)+T(" ")+TF1(sf.mRows)+T(" ")+TF1(mIdColTo)+T(" ")+TF1(mIdRowTo)+T(" ")+T(" \"")+T((osTextT*)sttP.idAdam)+T("\"\r\n") ;
                    measureT mIdRowTo = sf.mIdRow - 1.0 + sf.mRows ;
                    measureT mIdColTo = sf.mIdCol - 1.0 + sf.mCols ;
                    strokingFrameS& sf = *(strokingFrameS*)&winPulp.stqr_strokingFrame[ 1 + winPulp.rCache.offFrame ] ;
                {
                case scOld_cLOGsTROKINGfRAME :
                }
                    break ;
                    //LOGrAW( tSay ) ;
                    //TN( tSay , "" ) ; tSay = T("scOld_cLOGwINDOWpOSITION (mIdCol,mIdRow): ")+TF1(winPulp.mIdColNow)+T(" ")+TF1(winPulp.mIdRowNow)+T(" \"")+T((osTextT*)sttP.idAdam)+T("\"\r\n") ;
                {
                case scOld_cLOGwINDOWpOSITION :
                }
                    break ;
                    //LOGrAW( tSay ) ;
                    //TN( tSay , "" ) ; tSay = T("\"")+T((osTextT*)sttP.idAdam)+T("\"\r\n") ;
                {
                case scOld_cLOGrENDER :
                }
                    break ;
                    bIf = !bIf ;
                    boolT& bIf = winPulp.stqr_if[ 1 ] ;
                {
                case scOld_ELSE :
                }
                    break ;
                    if( winPulp.stqr_if > 1 ) { ZE( countT , cFoo ) ; winPulp.stqr_if >> cFoo ; }
                {
                case scOld_POPiF :
                }
                    break ;
                    if( winPulp.stqr_flagsRenderUnder ) { winPulp.flagsRender = 0 ; winPulp.stqr_flagsRenderUnder >> winPulp.flagsRender ; }
                {
                case scOld_POPnOTESoNoFF :
                case scOld_POPfRAMEdETACH :
                //SEPARATE case CLAUSE FOR EACH CMD VALUE THAT PUSHES TO winPulp.stqr_flagsRenderUnder (I.E. EACH flPAPERrENDER_ FLAG)
                }
                    break ;
        
                    }
                        }
                            winPulp.stqr_notes >> cnu ;
                            ZE( countT , cnu ) ;
                        {
                        while( cPlatesSet -- )
                    {
                    if( cPlates && cPlatesSet <= cPlates )

                        { TN( tSay , "" ) ; tSay = T("there are ")+TF1(cPlates)+T(" notes before i discard ")+TF1(cPlatesSet) ; LOGrAW( tSay ) ; }
                    if( cTraceOn )

                    countT cPlatesSet = !cPlates ? 0 : 1 + (countT)*(measureT*)&winPulp.stqr_notes[ 1 ] ;
                    countT cPlates    = winPulp.stqr_notes ;
                {
                case scOld_DISCARDnOTEsET :
                }
                    break ;
                    else                            winPulp.flagsRender &= ~( F(flPAPERrENDER_NOTES) ) ;
                    if( sttP.idCaste == scOld_NOTESoN ) winPulp.flagsRender |=      flPAPERrENDER_NOTES ;

                    winPulp.stqr_flagsRenderUnder << winPulp.flagsRender ;
                {
                case scOld_NOTESoFF :
                case scOld_NOTESoN :
                }
                    break ;
                    LOGrAW( "\r\n" ) ;
                    cTraceOn -- ;
                {
                case scOld_TRACEoFF :
                }
                    break ;
                    TRACEiF
                    TRACEtITLEiF
                    cTraceOn ++ ;
                {
                case scOld_TRACEoN :
                }
                    break ;
                    popPaperDrawOverrideF( tinP , pulpP , F(winPulp.flagsMode) & flPULPmODE_SUPPRESSpELcOLORcHANGES ? flDRAW_SUPPRESSpELcOLORcHANGES : flDRAW_null ) ;
                {
                case scOld_POPpAPERoVERRIDE :
                }
                    break ;
                    
                    }
                        }
                            c3c.c2 = 0 ;
                            BOSpOOP
                            BOS( WHATgbo , BOSoK , DeleteObject( HPEN( c3c.c2 ) ) )
                            if( oshOldVerify != c3c.c2 ) { BLAMMO ; } //U::O: COMMENT THIS OUT IN PRODUCTION
                            countT oshOldVerify = tinP.brcRaw ;
                            BOSdOnOTtEST( WHATgbo , SelectObject( (HDC)winPulp.pHndDrawBitmap->osF( ifcIDtYPEhANDLE_DRAWpRIVATE ) , HPEN( c3c.c1 ) ) )
                        {
                        if( !( F(winPulp.flagsMode) & flPULPmODE_SUPPRESSpELcOLORcHANGES ) )
                        winPulp.stqr_color >> pbc ;
                        byteT* pbc = (byteT*)&c3c ;
                        count3S c3c ;
                    {
                    if( winPulp.stqr_color )
                {
                case scOld_POPcOLOR :
                }
                    break ;
                    }
                        }
                            }
                                BOSdOnOTtEST( WHATgbo , ExtSelectClipRgn( (HDC)winPulp.pHndDrawBitmap->osF( ifcIDtYPEhANDLE_DRAWpRIVATE ) , HRGN( c5p.c1 ) , RGN_AND ) )
                                count5S& c5p = *(count5S*)&winPulp.stqr_paperOldClip[ ids ] ;
                            {
                            for( countT ids = 1 ; ids <= cElts ; ids ++ )
                            countT cElts = winPulp.stqr_paperOldClip ;
                    
                            BOSdOnOTtEST( WHATgbo , ExtSelectClipRgn( (HDC)winPulp.pHndDrawBitmap->osF( ifcIDtYPEhANDLE_DRAWpRIVATE ) , 0 , RGN_COPY ) )
                    
                            }
                                BOSpOOP
                                BOS( WHATgbo , BOSoK , DeleteObject( HRGN( c5p.c1 ) ) )
                                winPulp.stqr_paperOldClip >> pbp ;
                                byteT* pbp = (byteT*)&c5p ;
                                count5S c5p ;
                            {
                        {
                        if( winPulp.stqr_paperOldClip )
                    {
                    if( !( F(winPulp.flagsMode) & flPULPmODE_SUPPRESSpELcOLORcHANGES ) )
                {
                case scOld_POPcLIP :
                }
                    break ;
                    if( cTraceOn ) cTraceOn -- ;
                    renderF( tinP , pulpP , psttw , phCloneP ) ;
                    if( cTraceOn ) cTraceOn ++ ;

                    psttw[ CSpREFIX ] = S3(mCols,scOld_mmMOVEpEL,mRows) ;
                    SETpREFIX( psttw , 1 , 0 ) ;
                    strokeS psttw[ CSpREFIX + 1 ] ;
        
                    }
                        }
                            case scOld_mMOVEpADuP    : { mRows =   winPulp.rCache.mPadUp    * mScale ; break ; }
                            case scOld_mMOVEpADdOWN  : { mRows = - winPulp.rCache.mPadUp    * mScale ; break ; }
                            case scOld_mMOVEpADrIGHT : { mCols =   winPulp.rCache.mPadRight * mScale ; break ; }
                            case scOld_mMOVEpADlEFT  : { mCols = - winPulp.rCache.mPadRight * mScale ; break ; }
                        {
                        switch( sttP.idCaste )
                    {
                    else
                    }
                        }
                            case scOld_mMOVEpADuP    : { mRows =   winPulp.rCache.mPadUp    ; break ; }
                            case scOld_mMOVEpADdOWN  : { mRows = - winPulp.rCache.mPadUp    ; break ; }
                            case scOld_mMOVEpADrIGHT : { mCols =   winPulp.rCache.mPadRight ; break ; }
                            case scOld_mMOVEpADlEFT  : { mCols = - winPulp.rCache.mPadRight ; break ; }
                        {
                        switch( sttP.idCaste )
                    {
                    if( !mScale )
                    measureT mScale = *(measureT*)&sttP.idAdam ;
                    ZE( measureT , mRows ) ;
                    ZE( measureT , mCols ) ;
                {
                case scOld_mMOVEpADuP :
                case scOld_mMOVEpADdOWN :
                case scOld_mMOVEpADrIGHT :
                case scOld_mMOVEpADlEFT :
                }
                    break ;
                    if( cTraceOn ) cTraceOn -- ;
                    renderF( tinP , pulpP , psttw , phCloneP ) ;
                    if( cTraceOn ) cTraceOn ++ ;

                    psttw[ CSpREFIX ] = S3(mCols,scOld_mmMOVEpEL,mRows) ;
                    SETpREFIX( psttw , 1 , 0 ) ;
                    strokeS psttw[ CSpREFIX + 1 ] ;
        
                    }
                        case scOld_MOVEdOWNlEFTfORaDAMfRAME  : { mCols = -( 1.0 + winPulp.rCache.mColsMarginSadamFrame ) ; mRows = -( 1.0 + winPulp.rCache.mRowsMarginSadamFrame ) ; break ; }
                        case scOld_MOVEuPlEFTfORaDAMfRAME    : { mCols = -( 1.0 + winPulp.rCache.mColsMarginSadamFrame ) ; mRows =  ( 1.0 + winPulp.rCache.mRowsMarginSadamFrame ) ; break ; }
                        case scOld_MOVEdOWNrIGHTfORaDAMfRAME : { mCols =  ( 1.0 + winPulp.rCache.mColsMarginSadamFrame ) ; mRows = -( 1.0 + winPulp.rCache.mRowsMarginSadamFrame ) ; break ; }
                        case scOld_MOVEuPrIGHTfORaDAMfRAME   : { mCols =  ( 1.0 + winPulp.rCache.mColsMarginSadamFrame ) ; mRows =  ( 1.0 + winPulp.rCache.mRowsMarginSadamFrame ) ; break ; }
                    {
                    switch( sttP.idCaste )
                    ZE( measureT , mRows ) ;
                    ZE( measureT , mCols ) ;
                {
                case scOld_MOVEdOWNlEFTfORaDAMfRAME :
                case scOld_MOVEuPlEFTfORaDAMfRAME :
                case scOld_MOVEdOWNrIGHTfORaDAMfRAME :
                case scOld_MOVEuPrIGHTfORaDAMfRAME :
                case scOld_OLDCMDpUSHlEFTwATER  : { winPulp.stqr_mIdColLowWater   << (measureT) MAXmEASUREt ; break ; }
                case scOld_OLDCMDpUSHrIGHTwATER : { winPulp.stqr_mIdColHighWater  << (measureT)-MAXmEASUREt ; break ; }
                case scOld_OLDCMDpUSHlOWwATER   : { winPulp.stqr_mIdRowLowWater   << (measureT) MAXmEASUREt ; break ; }
                case scOld_OLDCMDpUSHhIGHwATER  : { winPulp.stqr_mIdRowHighWater  << (measureT)-MAXmEASUREt ; break ; }
                }
                    break ;
                    else                                 winPulp.flagsRender &= ~( F(flPAPERrENDER_FRAMEdETACHED) ) ;
                    if( sttP.idCaste == scOld_FRAMEdETACH ) winPulp.flagsRender |=      flPAPERrENDER_FRAMEdETACHED ;

                    winPulp.stqr_flagsRenderUnder << winPulp.flagsRender ;
                {
                case scOld_FRAMEdETACH :
                case scOld_FRAMEaTTACH :
                }
                    break ;
                    }
                        else               winPulp.flagsMode &= ~( F(flPULPmODE_RIPPLESoNLY) ) ;
                        if( bRipplesOnly ) winPulp.flagsMode |=      flPULPmODE_RIPPLESoNLY    ;
                        winPulp.stqr_bRipplesOnlyUnder >> bRipplesOnly ;
                        ZE( boolT , bRipplesOnly ) ;
                    {
                    if( winPulp.stqr_bRipplesOnlyUnder )
                {
                case scOld_POPrIPPLESoNLYoFFoN :
                }
                    break ;
                    else                                       winPulp.flagsMode &= ~( F(flPULPmODE_RIPPLESoNLY) ) ;
                    if( sttP.idCaste == scOld_PUSHrIPPLESoNLYoN ) winPulp.flagsMode |=      flPULPmODE_RIPPLESoNLY    ;
                    winPulp.stqr_bRipplesOnlyUnder << bRipplesOnly ;

                    boolT bRipplesOnly = !!( F(winPulp.flagsMode) & flPULPmODE_RIPPLESoNLY ) ;
                {
                case scOld_PUSHrIPPLESoNLYoFF :
                case scOld_PUSHrIPPLESoNLYoN :
                }
                    break ;
                    winPulp.cacheF( tinP , scOld_PEEwHILEmOVINGoN ) ;
                    else                                      sfd.bPeeWhileMoving -- ;
                    if( sttP.idCaste == scOld_PEEwHILEmOVINGoN ) sfd.bPeeWhileMoving ++ ;
                    strokingFrameS& sfd = *(strokingFrameS*)&winPulp.stqr_strokingFrame[ 2 + winPulp.rCache.offFrame + winPulp.rCache.offFrameWrap ] ;
                {
                case scOld_PEEwHILEmOVINGoFF :
                case scOld_PEEwHILEmOVINGoN :
                }
                    break ;
                    }
                        sfd.bWrap = 0 ; winPulp.stqr_bWrapUnder >> sfd.bWrap ;
                        strokingFrameS& sfd = *(strokingFrameS*)&winPulp.stqr_strokingFrame[ 2 + winPulp.rCache.offFrame + winPulp.rCache.offFrameWrap ] ;
                    {
                    if( winPulp.stqr_bWrapUnder )
                {
                case scOld_POPwRAPoFFoN :
                }
                    break ;
                    else if( sfd.bWrap )                               sfd.bWrap -- ;
                    if( sttP.idCaste == scOld_WRAPoN && sfd.bWrap < - 1 ) sfd.bWrap ++ ;
                    winPulp.stqr_bWrapUnder << sfd.bWrap ;
                    strokingFrameS& sfd = *(strokingFrameS*)&winPulp.stqr_strokingFrame[ 2 + winPulp.rCache.offFrame + winPulp.rCache.offFrameWrap ] ;
                {
                case scOld_WRAPoFF :
                case scOld_WRAPoN :
                }
                    break ;
                    }
                        winPulp.positionPaperBackF( tinP ) ;
                        winPulp.cacheF( tinP , scOld_POPfRAME ) ;
        
                        //}
                        //    LOGrAW( tSay ) ;
                        //    TN( tSay , "" ) ; tSay = TP(tinP.postThreadName,0x10)+T(" new:")+TF1(winPulp.stqr_strokingFrame)+T(": POPPED TO FRAME AT COL ")+TF1(sf.mIdCol)+T("\r\n") ;
                        //    strokingFrameS& sf  = *(strokingFrameS*)&winPulp.stqr_strokingFrame[ 1 + winPulp.rCache.offFrame ] ;
                        //{
                        //if( bLog3302e )
        
                        winPulp.stqr_strokingFrame >> pbsf ;
                        byteT* pbsf = (byteT*)&sf ;
                        strokingFrameS sf ;
                    {
                    if(  winPulp.stqr_strokingFrame > 1 )
                {
                case scOld_POPfRAME :
                }
                    break ;
                    }
                        winPulp.stqr_mIdColWrapOLD >> mFoo ;
                        ZE( measureT , mFoo ) ;
                    {
                    if(  winPulp.stqr_mIdColWrapOLD > 1 )
                {
                case scOld_OLDCMDpOPwRAPtRAP :
                }
                    break ;
                    winPulp.stqr_mIdColWrapOLD << winPulp.mIdColNow ;
                {
                case scOld_OLDCMDpUSHwRAPtRAP :
                }
                    break ;
                    winPulp.stqr_strokeOverride << pb_sttcr ;
                    byteT* pb_sttcr = (byteT*)&sttcr ;
                    strokeS sttcr( winPulp.mIdColNow , scOld_ccRENDERstROKEoVERRIDEuSEmYvALUES , winPulp.mIdRowNow ) ;
                {
                case scOld_PUSHoVERRIDEcOLrOW :
                }
                    break ;
                    winPulp.stqr_strokeOverrideIdPlate.purgeF( tinP ) ;
                    winPulp.stqr_strokeOverride.purgeF( tinP ) ;
                {
                case scOld_RENDERsTROKEoVERRIDEpURGE :
                case scOld_RESTORE                   : { winPulp.snapF( tinP , ether , 1 ) ; break ; }
                case scOld_SNAP                      : { winPulp.snapF( tinP , ether ) ; break ; }
                }
                    break ;

                    if( cTraceOn ) { TN( tSay , "" ) ; tSay = TF1(ido) ; LOGrAW( tSay ) ; }

                    backDupOriginF( ido ) ;

                    countT ido = sttP.idAdam ;
                {
                case scOld_cDUPoRIGIN :
                }
                    break ;
                    backPopOriginF() ;
                {
                case scOld_POPoRIGIN :
                }
                    break ;

                    }
                        LOGrAW( tSay ) ;
                        TN( tSay , "" ) ; tSay = T(mColOrigin>=0.0f?"+":"-")+TF1(idColO)+T(" , ")+T(mRowOrigin>=0.0f?"+":"-")+TF1(idRowO) ;
                        countT idRowO = mRowOrigin >= 0 ? mRowOrigin : - mRowOrigin ;
                        countT idColO = mColOrigin >= 0 ? mColOrigin : - mColOrigin ;
                    {
                    if( cTraceOn )

                    backPushOriginF( mColOrigin , mRowOrigin ) ;

                    }
                        mRowOrigin *= - 1 ;
                        mColOrigin *= - 1 ;
                    {
                    if( F(flags) & flPUSHoRIGIN_MIRROR )
                    }
                        mRowOrigin -- ;
                        mColOrigin -- ;
                    {
                    if( F(flags) & flPUSHoRIGIN_WOwO )
                    measureT mRowOrigin = winPulp.mIdRowNow ;
                    measureT mColOrigin = winPulp.mIdColNow ;

                    flagsT flags = sttP.idAdam ;
                {
                case scOld_cPUSHoRIGIN :
                }
                    break ;
                    }
                        ((thirdC&)ether).winSetPaintTypeF( tinP , *winPulp.pHndDrawBitmap  , winPulp.rCache.idTypePaint ) ;
                    {
                    if( !( F(winPulp.flagsMode) & flPULPmODE_SUPPRESSpELcOLORcHANGES ) )
                    popF( tinP , winPulp.stqr_idTypePaint , scOld_POPiDtYPEpAINT , 0 , winPulp ) ;
                {
                case scOld_POPiDtYPEpAINT :
                }
                    break ;
                    popF( tinP , winPulp.stqr_idObject , scOld_POPiDoBJECT , 0 , winPulp ) ;
                    countT idObjectOld = winPulp.rCache.idObject ;
                {
                case scOld_POPiDoBJECT :
                POP( scOld_RENDERpADuPcDpOP                 , winPulp.stqr_m01PadUp_D               )
                POP( scOld_RENDERpADuPcCpOP                 , winPulp.stqr_m01PadUp_C               )
                POP( scOld_RENDERpADuPcBpOP                 , winPulp.stqr_m01PadUp_B               )
                POP( scOld_RENDERpADuPcApOP                 , winPulp.stqr_m01PadUp_A               )
                POP( scOld_RENDERpADuPpOP                   , winPulp.stqr_m01PadUp                 )
                POP( scOld_RENDERpADrIGHTcDpOP              , winPulp.stqr_m01PadRight_D            )
                POP( scOld_RENDERpADrIGHTcCpOP              , winPulp.stqr_m01PadRight_C            )
                POP( scOld_RENDERpADrIGHTcBpOP              , winPulp.stqr_m01PadRight_B            )
                POP( scOld_RENDERpADrIGHTcApOP              , winPulp.stqr_m01PadRight_A            )
                POP( scOld_RENDERpADrIGHTpOP                , winPulp.stqr_m01PadRight              )
                POP( scOld_RENDERvECTORcDpOP                , winPulp.stqr_mVector_D                )
                POP( scOld_RENDERvECTORcCpOP                , winPulp.stqr_mVector_C                )
                POP( scOld_RENDERvECTORcBpOP                , winPulp.stqr_mVector_B                )
                POP( scOld_RENDERvECTORcApOP                , winPulp.stqr_mVector_A                )
                POP( scOld_RENDERsINvECTORpOP               , winPulp.stqr_mSinVector               )
                POP( scOld_RENDERcOSvECTORpOP               , winPulp.stqr_mCosVector               )
                POP( scOld_RENDERrOWsHEAR3cDpOP             , winPulp.stqr_mRowShear3_D             )
                POP( scOld_RENDERrOWsHEAR3cCpOP             , winPulp.stqr_mRowShear3_C             )
                POP( scOld_RENDERrOWsHEAR3cBpOP             , winPulp.stqr_mRowShear3_B             )
                POP( scOld_RENDERrOWsHEAR3cApOP             , winPulp.stqr_mRowShear3_A             )
                POP( scOld_RENDERrOWsHEAR3pOP               , winPulp.stqr_mRowShear3               )
                POP( scOld_RENDERrOWsHEAR2cDpOP             , winPulp.stqr_mRowShear2_D             )
                POP( scOld_RENDERrOWsHEAR2cCpOP             , winPulp.stqr_mRowShear2_C             )
                POP( scOld_RENDERrOWsHEAR2cBpOP             , winPulp.stqr_mRowShear2_B             )
                POP( scOld_RENDERrOWsHEAR2cApOP             , winPulp.stqr_mRowShear2_A             )
                POP( scOld_RENDERrOWsHEAR2pOP               , winPulp.stqr_mRowShear2               )
                POP( scOld_RENDERrOWsHEAR1cDpOP             , winPulp.stqr_mRowShear1_D             )
                POP( scOld_RENDERrOWsHEAR1cCpOP             , winPulp.stqr_mRowShear1_C             )
                POP( scOld_RENDERrOWsHEAR1cBpOP             , winPulp.stqr_mRowShear1_B             )
                POP( scOld_RENDERrOWsHEAR1cApOP             , winPulp.stqr_mRowShear1_A             )
                POP( scOld_RENDERrOWsHEAR1pOP               , winPulp.stqr_mRowShear1               )
                POP( scOld_RENDERcOLsHEAR3cDpOP             , winPulp.stqr_mColShear3_D             )
                POP( scOld_RENDERcOLsHEAR3cCpOP             , winPulp.stqr_mColShear3_C             )
                POP( scOld_RENDERcOLsHEAR3cBpOP             , winPulp.stqr_mColShear3_B             )
                POP( scOld_RENDERcOLsHEAR3cApOP             , winPulp.stqr_mColShear3_A             )
                POP( scOld_RENDERcOLsHEAR3pOP               , winPulp.stqr_mColShear3               )
                POP( scOld_RENDERcOLsHEAR2cDpOP             , winPulp.stqr_mColShear2_D             )
                POP( scOld_RENDERcOLsHEAR2cCpOP             , winPulp.stqr_mColShear2_C             )
                POP( scOld_RENDERcOLsHEAR2cBpOP             , winPulp.stqr_mColShear2_B             )
                POP( scOld_RENDERcOLsHEAR2cApOP             , winPulp.stqr_mColShear2_A             )
                POP( scOld_RENDERcOLsHEAR2pOP               , winPulp.stqr_mColShear2               )
                POP( scOld_RENDERcOLsHEAR1cDpOP             , winPulp.stqr_mColShear1_D             )
                POP( scOld_RENDERcOLsHEAR1cCpOP             , winPulp.stqr_mColShear1_C             )
                POP( scOld_RENDERcOLsHEAR1cBpOP             , winPulp.stqr_mColShear1_B             )
                POP( scOld_RENDERcOLsHEAR1cApOP             , winPulp.stqr_mColShear1_A             )
                POP( scOld_RENDERcOLsHEAR1pOP               , winPulp.stqr_mColShear1               )
                POP( scOld_RENDERrOWsCALEcDpOP              , winPulp.stqr_mRowScale_D              )
                POP( scOld_RENDERrOWsCALEcCpOP              , winPulp.stqr_mRowScale_C              )
                POP( scOld_RENDERrOWsCALEcBpOP              , winPulp.stqr_mRowScale_B              )
                POP( scOld_RENDERrOWsCALEcApOP              , winPulp.stqr_mRowScale_A              )
                POP( scOld_RENDERrOWsCALEpOP                , winPulp.stqr_mRowScale                )
                POP( scOld_RENDERcOLsCALEcDpOP              , winPulp.stqr_mColScale_D              )
                POP( scOld_RENDERcOLsCALEcCpOP              , winPulp.stqr_mColScale_C              )
                POP( scOld_RENDERcOLsCALEcBpOP              , winPulp.stqr_mColScale_B              )
                POP( scOld_RENDERcOLsCALEcApOP              , winPulp.stqr_mColScale_A              )
                POP( scOld_RENDERcOLsCALEpOP                , winPulp.stqr_mColScale                )
                POP( scOld_RENDERmIRRORaNGLEcDpOP           , winPulp.stqr_mMirrorAngle_D           )
                POP( scOld_RENDERmIRRORaNGLEcCpOP           , winPulp.stqr_mMirrorAngle_C           )
                POP( scOld_RENDERmIRRORaNGLEcBpOP           , winPulp.stqr_mMirrorAngle_B           )
                POP( scOld_RENDERmIRRORaNGLEcApOP           , winPulp.stqr_mMirrorAngle_A           )
                POP( scOld_RENDERsINmIRRORaNGLEpOP          , winPulp.stqr_mSinMirrorAngle          )
                POP( scOld_RENDERcOSmIRRORaNGLEpOP          , winPulp.stqr_mCosMirrorAngle          )
                POP( scOld_RENDER01ROWmIRRORpOINTcDpOP      , winPulp.stqr_m01RowMirrorPoint_D      )
                POP( scOld_RENDER01ROWmIRRORpOINTcCpOP      , winPulp.stqr_m01RowMirrorPoint_C      )
                POP( scOld_RENDER01ROWmIRRORpOINTcBpOP      , winPulp.stqr_m01RowMirrorPoint_B      )
                POP( scOld_RENDER01ROWmIRRORpOINTcApOP      , winPulp.stqr_m01RowMirrorPoint_A      )
                POP( scOld_RENDER01ROWmIRRORpOINTpOP        , winPulp.stqr_m01RowMirrorPoint        )
                POP( scOld_RENDER01COLmIRRORpOINTcDpOP      , winPulp.stqr_m01ColMirrorPoint_D      )
                POP( scOld_RENDER01COLmIRRORpOINTcCpOP      , winPulp.stqr_m01ColMirrorPoint_C      )
                POP( scOld_RENDER01COLmIRRORpOINTcBpOP      , winPulp.stqr_m01ColMirrorPoint_B      )
                POP( scOld_RENDER01COLmIRRORpOINTcApOP      , winPulp.stqr_m01ColMirrorPoint_A      )
                POP( scOld_RENDER01COLmIRRORpOINTpOP        , winPulp.stqr_m01ColMirrorPoint        )
                POP( scOld_RENDERhOTaNGLEcDpOP              , winPulp.stqr_mHotAngle_D              )
                POP( scOld_RENDERhOTaNGLEcCpOP              , winPulp.stqr_mHotAngle_C              )
                POP( scOld_RENDERhOTaNGLEcBpOP              , winPulp.stqr_mHotAngle_B              )
                POP( scOld_RENDERhOTaNGLEcApOP              , winPulp.stqr_mHotAngle_A              )
                POP( scOld_RENDERsINhOTaNGLEpOP             , winPulp.stqr_mSinHotAngle             )
                POP( scOld_RENDERcOShOTaNGLEpOP             , winPulp.stqr_mCosHotAngle             )
                POP( scOld_RENDER01ROWhOTpOINTcDpOP         , winPulp.stqr_m01RowHotPoint_D         )
                POP( scOld_RENDER01ROWhOTpOINTcCpOP         , winPulp.stqr_m01RowHotPoint_C         )
                POP( scOld_RENDER01ROWhOTpOINTcBpOP         , winPulp.stqr_m01RowHotPoint_B         )
                POP( scOld_RENDER01ROWhOTpOINTcApOP         , winPulp.stqr_m01RowHotPoint_A         )
                POP( scOld_RENDER01ROWhOTpOINTpOP           , winPulp.stqr_m01RowHotPoint           )
                POP( scOld_RENDER01COLhOTpOINTcDpOP         , winPulp.stqr_m01ColHotPoint_D         )
                POP( scOld_RENDER01COLhOTpOINTcCpOP         , winPulp.stqr_m01ColHotPoint_C         )
                POP( scOld_RENDER01COLhOTpOINTcBpOP         , winPulp.stqr_m01ColHotPoint_B         )
                POP( scOld_RENDER01COLhOTpOINTcApOP         , winPulp.stqr_m01ColHotPoint_A         )
                POP( scOld_RENDER01COLhOTpOINTpOP           , winPulp.stqr_m01ColHotPoint           )
                POP( scOld_RENDERfLOATuPcDpOP               , winPulp.stqr_m01FloatUp_D             )
                POP( scOld_RENDERfLOATuPcCpOP               , winPulp.stqr_m01FloatUp_C             )
                POP( scOld_RENDERfLOATuPcBpOP               , winPulp.stqr_m01FloatUp_B             )
                POP( scOld_RENDERfLOATuPcApOP               , winPulp.stqr_m01FloatUp_A             )
                POP( scOld_RENDERfLOATuPpOP                 , winPulp.stqr_m01FloatUp               )
                POP( scOld_RENDERfLOATrIGHTcDpOP            , winPulp.stqr_m01FloatRight_D          )
                POP( scOld_RENDERfLOATrIGHTcCpOP            , winPulp.stqr_m01FloatRight_C          )
                POP( scOld_RENDERfLOATrIGHTcBpOP            , winPulp.stqr_m01FloatRight_B          )
                POP( scOld_RENDERfLOATrIGHTcApOP            , winPulp.stqr_m01FloatRight_A          )
                POP( scOld_RENDERfLOATrIGHTpOP              , winPulp.stqr_m01FloatRight            )
                POP( scOld_RENDERhANDLERfINALtRANSFORMpOP   , winPulp.stqr_pHandlerFinalTransform   )
                POP( scOld_RENDERfLAGScYCLINGdETAIL8pOP     , winPulp.stqr_fRenderCyclingDetail8    )
                POP( scOld_RENDERfLAGScYCLINGdETAIL7pOP     , winPulp.stqr_fRenderCyclingDetail7    )
                POP( scOld_RENDERfLAGScYCLINGdETAIL6pOP     , winPulp.stqr_fRenderCyclingDetail6    )
                POP( scOld_RENDERfLAGScYCLINGdETAIL5pOP     , winPulp.stqr_fRenderCyclingDetail5    )
                POP( scOld_RENDERfLAGScYCLINGdETAIL4pOP     , winPulp.stqr_fRenderCyclingDetail4    )
                POP( scOld_RENDERfLAGScYCLINGdETAIL3pOP     , winPulp.stqr_fRenderCyclingDetail3    )
                POP( scOld_RENDERfLAGScYCLINGdETAIL2pOP     , winPulp.stqr_fRenderCyclingDetail2    )
                POP( scOld_RENDERfLAGScYCLINGdETAIL1pOP     , winPulp.stqr_fRenderCyclingDetail1    )
                POP( scOld_RENDERfLAGScYCLEDpOP             , winPulp.stqr_fRenderCycled            )
                POP( scOld_ROWmARGINsADAMfRAMEpOP           , winPulp.stqr_cRowsMarginSadamFrame    )
                POP( scOld_COLmARGINsADAMfRAMEpOP           , winPulp.stqr_cColsMarginSadamFrame    )
                POP( scOld_RENDERfLAGScONTROLpOP            , winPulp.stqr_fRenderControl           )
                POP( scOld_OLDCMDpOPlEFTwATER               , winPulp.stqr_mIdColLowWater           )
                POP( scOld_OLDCMDpOPrIGHTwATER              , winPulp.stqr_mIdColHighWater          )
                POP( scOld_OLDCMDpOPlOWwATER                , winPulp.stqr_mIdRowLowWater           )
                POP( scOld_OLDCMDpOPhIGHwATER               , winPulp.stqr_mIdRowHighWater          )
                POP( scOld_POPoFFfRAMEwRAP                  , winPulp.stqr_offFrameWrap             )
                POP( scOld_POPoFFfRAME                      , winPulp.stqr_offFrame                 )
                POP( scOld_POPsIDES                         , winPulp.stqr_cPolygonSides            )
                POP( scOld_POPsTYLE                         , winPulp.stqr_flStyle                  )
                POP( scOld_POPrIPPLES                       , winPulp.stqr_cRipples                 )
                POPbIG( scOld_POPrENDERsTROKEoVERRIDE       , winPulp.stqr_strokeOverride , sizeof( strokeS ) )

                //}
                //    break ;
                //    LOGrAW5( "renderF: sc_NULL " , sttP.idAdam , " at x:" ,  R( sf.mIdCol ) , "\r\n" ) ;
                //    strokingFrameS& sf = *(strokingFrameS*)&winPulp.stqr_strokingFrame[ 1 + winPulp.rCache.offFrame ] ;
                //{
                //case sc_NULL :
                }
                    break ;
                    winPulp.flagsRenderCalcNoPush = flPAPERrENDERcALCnOpUSH_null ;

                    }
                        /*.1.*/ winPulp.stqr_notes << (measureT)1 ; //NUMBER OF PLATES PUSHED
                        /*.2.*/ winPulp.stqr_notes << cValue ;

                        }
                            }
                                break ;
                                }
                                    case scOld_ccCALCaTAN : { *(measureT*)&cValue = thirdC::mathAtanIF( tinP , *(measureT*)&cOp1 , *(measureT*)&cOp2 ) ; break ; }
                                    case scOld_ccCALCsQRT : { *(measureT*)&cValue = thirdC::mathSqrtIF( tinP , *(measureT*)&cOp1 ) ; break ; }
                                    case scOld_ccCALCsIN  : { *(measureT*)&cValue = thirdC::mathSinIF( tinP ,  *(measureT*)&cOp1 ) ; break ; }
                                    case scOld_ccCALCcOS  : { *(measureT*)&cValue = thirdC::mathCosIF( tinP ,  *(measureT*)&cOp1 ) ; break ; }
                                    case scOld_ccCALCeXP  : { *(measureT*)&cValue = thirdC::mathExpIF( tinP ,  *(measureT*)&cOp1 ) ; break ; }
                                    case scOld_ccCALClOG  : { *(measureT*)&cValue = thirdC::mathLog2IF( tinP ,  *(measureT*)&cOp1 ) ; break ; }
                                    case scOld_ccCALCmOD  : { *(measureT*)&cValue = (countT)*(measureT*)&cOp1 % (countT)*(measureT*)&cOp2 ; break ; }
                                    case scOld_ccCALCdIV  : { *(measureT*)&cValue = *(measureT*)&cOp1 / *(measureT*)&cOp2 ; break ; }
                                    case scOld_ccCALCmUL  : { *(measureT*)&cValue = *(measureT*)&cOp1 * *(measureT*)&cOp2 ; break ; }
                                    case scOld_ccCALCsUB  : { *(measureT*)&cValue = *(measureT*)&cOp1 - *(measureT*)&cOp2 ; break ; }
                                    case scOld_ccCALCaDD  : { *(measureT*)&cValue = *(measureT*)&cOp1 + *(measureT*)&cOp2 ; break ; }
                                {
                                switch( sttP.idCaste )
                            {
                            case flPAPERrENDERcALCnOpUSH_null :
                            }
                                break ;
                                }
                                    case scOld_ccCALCaTAN : { *(measureT*)&cValue = thirdC::mathAtanIF( tinP , *(measureT*)&cOp1 , cOp2 ) ; break ; }
                                    case scOld_ccCALCsQRT : { *(measureT*)&cValue = thirdC::mathSqrtIF( tinP , *(measureT*)&cOp1 ) ; break ; }
                                    case scOld_ccCALCsIN  : { *(measureT*)&cValue = thirdC::mathSinIF( tinP ,  *(measureT*)&cOp1 ) ; break ; }
                                    case scOld_ccCALCcOS  : { *(measureT*)&cValue = thirdC::mathCosIF( tinP ,  *(measureT*)&cOp1 ) ; break ; }
                                    case scOld_ccCALCeXP  : { *(measureT*)&cValue = thirdC::mathExpIF( tinP ,  *(measureT*)&cOp1 ) ; break ; }
                                    case scOld_ccCALClOG  : { *(measureT*)&cValue = thirdC::mathLog2IF( tinP ,  *(measureT*)&cOp1 ) ; break ; }
                                    case scOld_ccCALCmOD  : { *(measureT*)&cValue = (countT)*(measureT*)&cOp1 % cOp2 ; break ; }
                                    case scOld_ccCALCdIV  : { *(measureT*)&cValue = *(measureT*)&cOp1 / cOp2 ; break ; }
                                    case scOld_ccCALCmUL  : { *(measureT*)&cValue = *(measureT*)&cOp1 * cOp2 ; break ; }
                                    case scOld_ccCALCsUB  : { *(measureT*)&cValue = *(measureT*)&cOp1 - cOp2 ; break ; }
                                    case scOld_ccCALCaDD  : { *(measureT*)&cValue = *(measureT*)&cOp1 + cOp2 ; break ; }
                                {
                                switch( sttP.idCaste )
                            {
                            case flPAPERrENDERcALCnOpUSH_COUNT2 :
                            }
                                break ;
                                }
                                    case scOld_ccCALCaTAN : { *(measureT*)&cValue = thirdC::mathAtanIF( tinP , cOp1 , *(measureT*)&cOp2 ) ; break ; }
                                    case scOld_ccCALCsQRT : { *(measureT*)&cValue = thirdC::mathSqrtIF( tinP , cOp1 ) ; break ; }
                                    case scOld_ccCALCsIN  : { *(measureT*)&cValue = thirdC::mathSinIF( tinP ,  cOp1 ) ; break ; }
                                    case scOld_ccCALCcOS  : { *(measureT*)&cValue = thirdC::mathCosIF( tinP ,  cOp1 ) ; break ; }
                                    case scOld_ccCALCeXP  : { *(measureT*)&cValue = thirdC::mathExpIF( tinP ,  cOp1 ) ; break ; }
                                    case scOld_ccCALClOG  : { *(measureT*)&cValue = thirdC::mathLog2IF( tinP ,  cOp1 ) ; break ; }
                                    case scOld_ccCALCmOD  : { *(measureT*)&cValue = cOp1 % (countT)*(measureT*)&cOp2 ; break ; }
                                    case scOld_ccCALCdIV  : { *(measureT*)&cValue = cOp1 / *(measureT*)&cOp2 ; break ; }
                                    case scOld_ccCALCmUL  : { *(measureT*)&cValue = cOp1 * *(measureT*)&cOp2 ; break ; }
                                    case scOld_ccCALCsUB  : { *(measureT*)&cValue = cOp1 - *(measureT*)&cOp2 ; break ; }
                                    case scOld_ccCALCaDD  : { *(measureT*)&cValue = cOp1 + *(measureT*)&cOp2 ; break ; }
                                {
                                switch( sttP.idCaste )
                            {
                            case flPAPERrENDERcALCnOpUSH_COUNT1 :
                            }
                                break ;
                                }
                                    case scOld_ccCALCaTAN : { *(measureT*)&cValue = thirdC::mathAtanIF( tinP , cOp1 , cOp2 ) ; break ; }
                                    case scOld_ccCALCsQRT : { *(measureT*)&cValue = thirdC::mathSqrtIF( tinP , cOp1 ) ; break ; }
                                    case scOld_ccCALCsIN  : { *(measureT*)&cValue = thirdC::mathSinIF( tinP ,  cOp1 ) ; break ; }
                                    case scOld_ccCALCcOS  : { *(measureT*)&cValue = thirdC::mathCosIF( tinP ,  cOp1 ) ; break ; }
                                    case scOld_ccCALCeXP  : { *(measureT*)&cValue = thirdC::mathExpIF( tinP ,  cOp1 ) ; break ; }
                                    case scOld_ccCALClOG  : { *(measureT*)&cValue = thirdC::mathLog2IF( tinP ,  cOp1 ) ; break ; }
                                    case scOld_ccCALCmOD  : { *(measureT*)&cValue = cOp1 % cOp2 ; break ; }
                                    case scOld_ccCALCdIV  : { *(measureT*)&cValue = cOp1 / cOp2 ; break ; }
                                    case scOld_ccCALCmUL  : { *(measureT*)&cValue = cOp1 * cOp2 ; break ; }
                                    case scOld_ccCALCsUB  : { *(measureT*)&cValue = cOp1 - cOp2 ; break ; }
                                    case scOld_ccCALCaDD  : { *(measureT*)&cValue = cOp1 + cOp2 ; break ; }
                                {
                                switch( sttP.idCaste )
                            {
                            case flPAPERrENDERcALCnOpUSH_COUNT1 | flPAPERrENDERcALCnOpUSH_COUNT2 :
                            }
                                break ;
                                }
                                    case scOld_ccCALCaTAN : { cValue = thirdC::mathAtanIF( tinP , *(measureT*)&cOp1 , *(measureT*)&cOp2 ) ; break ; }
                                    case scOld_ccCALCsQRT : { cValue = thirdC::mathSqrtIF( tinP , *(measureT*)&cOp1 ) ; break ; }
                                    case scOld_ccCALCsIN  : { cValue = thirdC::mathSinIF( tinP ,  *(measureT*)&cOp1 ) ; break ; }
                                    case scOld_ccCALCcOS  : { cValue = thirdC::mathCosIF( tinP ,  *(measureT*)&cOp1 ) ; break ; }
                                    case scOld_ccCALCeXP  : { cValue = thirdC::mathExpIF( tinP ,  *(measureT*)&cOp1 ) ; break ; }
                                    case scOld_ccCALClOG  : { cValue = thirdC::mathLog2IF( tinP ,  *(measureT*)&cOp1 ) ; break ; }
                                    case scOld_ccCALCmOD  : { cValue = (countT)*(measureT*)&cOp1 % (countT)*(measureT*)&cOp2 ; break ; }
                                    case scOld_ccCALCdIV  : { cValue = *(measureT*)&cOp1 / *(measureT*)&cOp2 ; break ; }
                                    case scOld_ccCALCmUL  : { cValue = *(measureT*)&cOp1 * *(measureT*)&cOp2 ; break ; }
                                    case scOld_ccCALCsUB  : { cValue = *(measureT*)&cOp1 - *(measureT*)&cOp2 ; break ; }
                                    case scOld_ccCALCaDD  : { cValue = *(measureT*)&cOp1 + *(measureT*)&cOp2 ; break ; }
                                {
                                switch( sttP.idCaste )
                            {
                            case flPAPERrENDERcALCnOpUSH_COUNT :
                            }
                                break ;
                                }
                                    case scOld_ccCALCaTAN : { cValue = thirdC::mathAtanIF( tinP , *(measureT*)&cOp1 , cOp2 ) ; break ; }
                                    case scOld_ccCALCsQRT : { cValue = thirdC::mathSqrtIF( tinP , *(measureT*)&cOp1 ) ; break ; }
                                    case scOld_ccCALCsIN  : { cValue = thirdC::mathSinIF( tinP ,  *(measureT*)&cOp1 ) ; break ; }
                                    case scOld_ccCALCcOS  : { cValue = thirdC::mathCosIF( tinP ,  *(measureT*)&cOp1 ) ; break ; }
                                    case scOld_ccCALCeXP  : { cValue = thirdC::mathExpIF( tinP ,  *(measureT*)&cOp1 ) ; break ; }
                                    case scOld_ccCALClOG  : { cValue = thirdC::mathLog2IF( tinP ,  *(measureT*)&cOp1 ) ; break ; }
                                    case scOld_ccCALCmOD  : { cValue = (countT)*(measureT*)&cOp1 % cOp2 ; break ; }
                                    case scOld_ccCALCdIV  : { cValue = *(measureT*)&cOp1 / cOp2 ; break ; }
                                    case scOld_ccCALCmUL  : { cValue = *(measureT*)&cOp1 * cOp2 ; break ; }
                                    case scOld_ccCALCsUB  : { cValue = *(measureT*)&cOp1 - cOp2 ; break ; }
                                    case scOld_ccCALCaDD  : { cValue = *(measureT*)&cOp1 + cOp2 ; break ; }
                                {
                                switch( sttP.idCaste )
                            {
                            case flPAPERrENDERcALCnOpUSH_COUNT | flPAPERrENDERcALCnOpUSH_COUNT2 :
                            }
                                break ;
                                }
                                    case scOld_ccCALCaTAN : { cValue = thirdC::mathAtanIF( tinP , cOp1 , *(measureT*)&cOp2 ) ; break ; }
                                    case scOld_ccCALCsQRT : { cValue = thirdC::mathSqrtIF( tinP , cOp1 ) ; break ; }
                                    case scOld_ccCALCsIN  : { cValue = thirdC::mathSinIF( tinP ,  cOp1 ) ; break ; }
                                    case scOld_ccCALCcOS  : { cValue = thirdC::mathCosIF( tinP ,  cOp1 ) ; break ; }
                                    case scOld_ccCALCeXP  : { cValue = thirdC::mathExpIF( tinP ,  cOp1 ) ; break ; }
                                    case scOld_ccCALClOG  : { cValue = thirdC::mathLog2IF( tinP ,  cOp1 ) ; break ; }
                                    case scOld_ccCALCmOD  : { cValue = cOp1 % (countT)*(measureT*)&cOp2 ; break ; }
                                    case scOld_ccCALCdIV  : { cValue = cOp1 / *(measureT*)&cOp2 ; break ; }
                                    case scOld_ccCALCmUL  : { cValue = cOp1 * *(measureT*)&cOp2 ; break ; }
                                    case scOld_ccCALCsUB  : { cValue = cOp1 - *(measureT*)&cOp2 ; break ; }
                                    case scOld_ccCALCaDD  : { cValue = cOp1 + *(measureT*)&cOp2 ; break ; }
                                {
                                switch( sttP.idCaste )
                            {
                            case flPAPERrENDERcALCnOpUSH_COUNT | flPAPERrENDERcALCnOpUSH_COUNT1 :
                            }
                                break ;
                                }
                                    case scOld_ccCALCaTAN : { cValue = thirdC::mathAtanIF( tinP , cOp1 , cOp2 ) ; break ; }
                                    case scOld_ccCALCsQRT : { cValue = thirdC::mathSqrtIF( tinP , cOp1 ) ; break ; }
                                    case scOld_ccCALCsIN  : { cValue = thirdC::mathSinIF( tinP ,  cOp1 ) ; break ; }
                                    case scOld_ccCALCcOS  : { cValue = thirdC::mathCosIF( tinP ,  cOp1 ) ; break ; }
                                    case scOld_ccCALCeXP  : { cValue = thirdC::mathExpIF( tinP ,  cOp1 ) ; break ; }
                                    case scOld_ccCALClOG  : { cValue = thirdC::mathLog2IF( tinP ,  cOp1 ) ; break ; }
                                    case scOld_ccCALCmOD  : { cValue = cOp1 % cOp2 ; break ; }
                                    case scOld_ccCALCdIV  : { cValue = cOp1 / cOp2 ; break ; }
                                    case scOld_ccCALCmUL  : { cValue = cOp1 * cOp2 ; break ; }
                                    case scOld_ccCALCsUB  : { cValue = cOp1 - cOp2 ; break ; }
                                    case scOld_ccCALCaDD  : { cValue = cOp1 + cOp2 ; break ; }
                                {
                                switch( sttP.idCaste )
                            {
                            case flPAPERrENDERcALCnOpUSH_COUNT | flPAPERrENDERcALCnOpUSH_COUNT1 | flPAPERrENDERcALCnOpUSH_COUNT2 :
                        {
                        switch( flagsType )

                        flagsT flagsType = winPulp.flagsRenderCalcNoPush & ( flPAPERrENDERcALCnOpUSH_COUNT | flPAPERrENDERcALCnOpUSH_COUNT1 | flPAPERrENDERcALCnOpUSH_COUNT2 ) ;
                    {
                    if( !bAbort )

                    }
                        else bAbort |= 1 ;
                        else if( sttP.cNote <= winPulp.stqr_notes ) cOp2 = winPulp.stqr_notes[ sttP.cNote ] ;
                        }
                            }
                                else                                      cOp2 = pcElts[ sttP.cNote ] ;
                                if( !pcElts || pcElts[ 0 ] < sttP.cNote ) bAbort = 1 ;
                                countT* pcElts = (countT*)winPulp.stqRam[ 1 ] ;
                            {
                            else
                            if( !winPulp.stqRam ) bAbort = 1 ;
                        {
                        else if( F(winPulp.flagsRenderCalcNoPush) & flPAPERrENDERcALCnOpUSH_RAM2 )
                        if( F(winPulp.flagsRenderCalcNoPush) & flPAPERrENDERcALCnOpUSH_LITERAL2 ) cOp2 = sttP.cNote ;
        
                        else bAbort |= 1 ;
                        else if( sttP.idAdam <= winPulp.stqr_notes ) cOp1 = winPulp.stqr_notes[ sttP.idAdam ] ;
                        }
                            }
                                else                                       cOp1 = pcElts[ sttP.idAdam ] ;
                                if( !pcElts || pcElts[ 0 ] < sttP.idAdam ) bAbort = 1 ;
                                countT* pcElts = (countT*)winPulp.stqRam[ 1 ] ;
                            {
                            else
                            if( !winPulp.stqRam ) bAbort = 1 ;
                        {
                        else if( F(winPulp.flagsRenderCalcNoPush) & flPAPERrENDERcALCnOpUSH_RAM1 )
                        if( F(winPulp.flagsRenderCalcNoPush) & flPAPERrENDERcALCnOpUSH_LITERAL1 ) cOp1 = sttP.idAdam ;
                    {
                    else
                    if( bAbort ) winPulp.flagsRender &= ~( F(flPAPERrENDER_NOTES) ) ;

                    ZE( countT , cValue ) ;
                    ZE( countT , cOp2 ) ;
                    ZE( countT , cOp1 ) ;
                    boolT bAbort = !!( F(winPulp.flagsRender) & flPAPERrENDER_NOTES ) ;
                {
                case scOld_ccCALCaTAN :
                case scOld_ccCALCsQRT :
                case scOld_ccCALCsIN  :
                case scOld_ccCALCcOS  :
                case scOld_ccCALCeXP  :
                case scOld_ccCALClOG  :
                case scOld_ccCALCmOD  :
                case scOld_ccCALCdIV  :
                case scOld_ccCALCmUL  :
                case scOld_ccCALCsUB  :
                case scOld_ccCALCaDD  :

                }
                    break ;
                    backScratchBitmapMonochromePushF( tinP , pulpP , cCols , cRows ) ;
                    //LOGrAWtID4( "scOld_ccSCRATCHbITMAPpUSH (cCols,cRows): " , cCols , " " , cRows )

                    countT cRows = sttw.cNote ;
                    countT cCols = sttw.idAdam ;

                    winPulp.overrideF( tinP , sttw ) ;
                    strokeS sttw = sttP ; //O: AVOID MAKING THIS COPY (NEEDED ONLY IF OVERRIDING)
                {
                case scOld_ccSCRATCHbITMAPmONOCHROMEpUSH :
                }
                    break ;
                    backScratchBitmapPushF( tinP , pulpP , cCols , cRows ) ;
                    //LOGrAWtID4( "scOld_ccSCRATCHbITMAPpUSH (cCols,cRows): " , cCols , " " , cRows )

                    countT cRows = sttw.cNote ;
                    countT cCols = sttw.idAdam ;

                    winPulp.overrideF( tinP , sttw ) ;
                    strokeS sttw = sttP ; //O: AVOID MAKING THIS COPY (NEEDED ONLY IF OVERRIDING)
                {
                case scOld_ccSCRATCHbITMAPpUSH :
                }
                    break ;

                    }
                        thirdC::winFloodIF( tinP , *winPulp.pHndDrawBitmap , mIdColOrigin + winPulp.mIdColNow , mIdRowOrigin + winPulp.mIdRowNow , rgbTest , winPulp.colorF() , flagsf ) ;
                    {
                    if( !( F(flagsf) & flDRAW_SUPPRESSpELcOLORcHANGES ) )

                    if( F(winPulp.flagsMode) & flPULPmODE_SUPPRESSpELcOLORcHANGES ) flagsf |= flDRAW_SUPPRESSpELcOLORcHANGES ;

                    //LOGrAWtID4( "paperOldC::renderF/scOld_ccFLOOD (rgbTest,flagsf): " , rgbTest , " "  , flagsf ) ;

                    flagsT flagsf  = sttP.cNote ;
                    countT rgbTest = sttP.idAdam ;
                {
                case scOld_ccFLOOD :
                }
                    break ;
                    }
                        else winPulp.stAnimateCbfStrokes.sinkF( tinP , countTC() , sttP.idAdam , flSTACKsINK_UNIQUE ) ;
                        }
                            winPulp.stAnimateCbfStrokes.extractF( 0 , tinP ) ;
                            (*(animateCBFT)sttP.idAdam)( tinP , ether  , 0 , tinP.pAdamGlobal1->_pulpOldC_.cAnimateArg ) ;
                        {
                        if( sttP.idAdam && winPulp.stAnimateCbfStrokes( sttP.idAdam ) )
                    {
                    if( !( F(winPulp.flagsMode) & flPULPmODE_SUPPRESSpELcOLORcHANGES ) )
                {
                case scOld_cANIMATEcBF :
                }
                    break ;
                        }
                            case scOld_mmIFlITERALlITERALnOTlESStHAN : { winPulp.stqr_if << (boolT)( v1 >= v2 ) ; break ; }
                            case scOld_mmIFlITERALlITERALlESStHAN    : { winPulp.stqr_if << (boolT)( v1 <  v2 ) ; break ; }
                            case scOld_mmIFlITERALlITERALeQUALS      : { winPulp.stqr_if << (boolT)( v1 == v2 ) ; break ; }
                        {
                        switch( sttP.idCaste )
                        measureT v2 = *(measureT*)&sttP.cNote ;
                        measureT v1 = *(measureT*)&sttP.idAdam ;
                {
                case scOld_mmIFlITERALlITERALnOTlESStHAN :
                case scOld_mmIFlITERALlITERALlESStHAN :
                case scOld_mmIFlITERALlITERALeQUALS :
                }
                    break ;
                    else winPulp.stqr_if << (countT)0 ;
                    }
                        }
                            case scOld_cmIFnOTElITERALnOTlESStHAN : { winPulp.stqr_if << (boolT)( v1 >= v2 ) ; break ; }
                            case scOld_cmIFnOTElITERALlESStHAN    : { winPulp.stqr_if << (boolT)( v1 <  v2 ) ; break ; }
                            case scOld_cmIFnOTElITERALeQUALS      : { winPulp.stqr_if << (boolT)( v1 == v2 ) ; break ; }
                        {
                        switch( sttP.idCaste )
                        measureT v2 = *(measureT*)&sttP.cNote ;
                        measureT v1 = *(measureT*)&winPulp.stqr_notes[ sttP.idAdam ] ;
                    {
                    if( sttP.idAdam <= winPulp.stqr_notes )
                {
                case scOld_cmIFnOTElITERALnOTlESStHAN :
                case scOld_cmIFnOTElITERALlESStHAN :
                case scOld_cmIFnOTElITERALeQUALS :
                }
                    break ;
                    else winPulp.stqr_if << (countT)0 ;
                    }
                        }
                            case scOld_mcIFlITERALnOTEnOTlESStHAN : { winPulp.stqr_if << (boolT)( v1 >= v2 ) ; break ; }
                            case scOld_mcIFlITERALnOTElESStHAN    : { winPulp.stqr_if << (boolT)( v1 <  v2 ) ; break ; }
                            case scOld_mcIFlITERALnOTEeQUALS      : { winPulp.stqr_if << (boolT)( v1 == v2 ) ; break ; }
                        {
                        switch( sttP.idCaste )
                        measureT v2 = *(measureT*)&winPulp.stqr_notes[ sttP.cNote  ] ;
                        measureT v1 = *(measureT*)&sttP.idAdam ;
                    {
                    if( sttP.cNote <= winPulp.stqr_notes )
                {
                case scOld_mcIFlITERALnOTEnOTlESStHAN :
                case scOld_mcIFlITERALnOTElESStHAN :
                case scOld_mcIFlITERALnOTEeQUALS :
                }
                    break ;
                    else winPulp.stqr_if << (countT)0 ;
                    }
                        }
                            case scOld_ccIFnOTEnOTEnOTlESStHAN : { winPulp.stqr_if << (boolT)( v1 >= v2 ) ; break ; }
                            case scOld_ccIFnOTEnOTElESStHAN    : { winPulp.stqr_if << (boolT)( v1 <  v2 ) ; break ; }
                            case scOld_ccIFnOTEnOTEeQUALS      : { winPulp.stqr_if << (boolT)( v1 == v2 ) ; break ; }
                        {
                        switch( sttP.idCaste )
                        measureT v2 = *(measureT*)&winPulp.stqr_notes[ sttP.cNote  ] ;
                        measureT v1 = *(measureT*)&winPulp.stqr_notes[ sttP.idAdam ] ;
                    {
                    if( sttP.idAdam <= winPulp.stqr_notes && sttP.cNote <= winPulp.stqr_notes )
                {
                case scOld_ccIFnOTEnOTEnOTlESStHAN :
                case scOld_ccIFnOTEnOTElESStHAN :
                case scOld_ccIFnOTEnOTEeQUALS :
                }
                    break ;
                    }
                        winPulp.stqr_strokeOverride << pb_sttcr ;
                        byteT* pb_sttcr = (byteT*)&sttcr ;
                        strokeS sttcr( sttP.idAdam , scOld_ccRENDERstROKEoVERRIDEuSEmYvALUES , winPulp.stqr_notes[ sttP.cNote ] ) ;
                    {
                    if( sttP.cNote <= winPulp.stqr_notes )
                {
                case scOld_xcPUSHoVERRIDElITERALnOTE :
                }
                    break ;
                    }
                        winPulp.stqr_strokeOverride << pb_sttcr ;
                        byteT* pb_sttcr = (byteT*)&sttcr ;
                        strokeS sttcr( winPulp.stqr_notes[ sttP.idAdam ] , scOld_ccRENDERstROKEoVERRIDEuSEmYvALUES , sttP.cNote ) ;
                    {
                    if( sttP.idAdam <= winPulp.stqr_notes )
                {
                case scOld_cxPUSHoVERRIDEnOTElITERAL :
                }
                    break ;
                    }
                        winPulp.stqr_strokeOverride << pb_sttcr ;
                        byteT* pb_sttcr = (byteT*)&sttcr ;
                        strokeS sttcr( winPulp.stqr_notes[ sttP.idAdam ] , scOld_ccRENDERstROKEoVERRIDEuSEmYvALUES , winPulp.stqr_notes[ sttP.cNote ] ) ;
                    {
                    if( sttP.idAdam <= winPulp.stqr_notes && sttP.cNote <= winPulp.stqr_notes )
                {
                case scOld_ccPUSHoVERRIDEnOTEnOTE :
                }
                    break ;
                    winPulp.stqr_strokeOverride << pb_sttcr ;
                    byteT* pb_sttcr = (byteT*)&sttcr ;

                    sttcr.cNote  = *(countT*)&mIdRow ;
                    sttcr.idAdam = *(countT*)&mIdCol ;
                    winPulp.mColRowF( mIdCol , mIdRow , scOld_mmMOVEtO , scOld_mmMOVE , sttcr ) ;
                    ZE( measureT , mIdRow ) ;
                    ZE( measureT , mIdCol ) ;
                    strokeS sttcr( sttP.idAdam , scOld_ccRENDERstROKEoVERRIDEuSEmYvALUES , sttP.cNote ) ;
                {
                case scOld_mmPUSHoVERRIDElITERALlITERALcOLrOWrELATIVE :
                }
                    break ;
                    winPulp.stqr_strokeOverride << pb_sttcr ;
                    byteT* pb_sttcr = (byteT*)&sttcr ;
                    strokeS sttcr( sttP.idAdam , scOld_ccRENDERstROKEoVERRIDEuSEmYvALUES , sttP.cNote ) ;
                {
                case scOld_xxPUSHoVERRIDElITERALlITERAL :
                }
                    break ;
                    }
                        if( cTraceOn ) { TN( tSay , "" ) ; tSay = T("there are ")+TF1(winPulp.stqr_notes)+T(" notes after i pushed 6") ; LOGrAW( tSay ) ; }

                        /*.1.*/ winPulp.stqr_notes << (measureT)5 ; //NUMBER OF PLATES PUSHED
                        /*.2.*/ winPulp.stqr_notes << musx0 ;
                        /*.3.*/ winPulp.stqr_notes << musy0 ;
                        /*.4.*/ winPulp.stqr_notes << musx1 ;
                        /*.5.*/ winPulp.stqr_notes << musy1 ;
                        /*.6.*/ winPulp.stqr_notes << (measureT)cCorners ;
                    {
                    if( F(winPulp.flagsRender) & flPAPERrENDER_NOTES )
        
                    M2( musx0 , musy0 ) L2( musx1 , musy1 )
                    ZE( measureT , mIdRowWork ) ;
                    ZE( measureT , mIdColWork ) ;
        
                    measureT musy0 = musy1 * ( 1.0 - mReach ) + 0.5 * mReach ;
                    measureT musx0 = musx1 * ( 1.0 - mReach ) + 0.5 * mReach ;
        
                    musy1 = ( musy1 + 1.0 ) / 2.0 ;
                    musx1 = ( musx1 + 1.0 ) / 2.0 ;
                    countT cCorners = usF( tinP , musx1 , musy1 , mAngle ) ;
                    ZE( measureT , musy1 ) ;
                    ZE( measureT , musx1 ) ;
        
                    measureT mReach = *(measureT*)&sttP.cNote ;
                    measureT mAngle = *(measureT*)&sttP.idAdam ;
                {
                case scOld_mmRADIAL :
                }
                    break ;
                    winPulp.stqr_strokeOverrideIdPlate << sttP.idAdam ;
                    winPulp.flagsRenderNoPush |= flPAPERrENDERnOpUSH_OVERRIDEnEXTsTROKE ;
        
                    if( cTraceOn ) { LOGrAW3( "" , sttP.idAdam , "" ) ; }
                {
                case scOld_cOVERRIDEnEXTsTROKE :
                }
                    break ;
        
                    winPulp.flagsMode = _saveMode ;
                    }
                        if( !bExpand ) pmt = pmts = pmtExpandRef ;
        
                        }
                            winPulp.positionStrokingFrameIfF( tinP ) ;
                            }
                                thirdC::winMoveIF( tinP , *winPulp.pHndDrawBitmap , mColDevice , mRowDevice ) ;
                                const measureT mRowDevice = mIdRowOrigin + winPulp.mIdRowNow ;
                                const measureT mColDevice = mIdColOrigin + winPulp.mIdColNow ;
                            {
                            if( !( F(winPulp.flagsMode) & flPULPmODE_SUPPRESSpELcOLORcHANGES ) )
                            if( winPulp.rCache.bPeeWhileMoving ) winPulp.newWaterF( winPulp.mIdColNow , winPulp.mIdRowNow ) ;
                            winPulp.mIdRowNow = mIdRowSave ;
                            else                                                       winPulp.mIdColNow = mIdColSave + sf.mCols + winPulp.rCache.mPadRight ;
                            if( F(winPulp.flagsRender) & flPAPERrENDER_FRAMEdETACHED ) winPulp.mIdColNow = mIdColSave                                       ;
                            //if( bLog3302e ) { TN( tSay , "" ) ; tSay = T("alpha1: winPulp.mIdRowNow: ")+TF1(winPulp.mIdRowNow)+T(" -> ")+TF1(mIdRowSave)+T("\r\n") ; LOGrAW( tSay ) ; }
                            //if( bLog3302e ) { TN( tSay , "" ) ; tSay = T("alpha1: winPulp.mIdColNow: ")+TF1(winPulp.mIdColNow)+T(" -> ")+TF1(mIdColSave+sf.mCols+winPulp.rCache.mPadRight)+T("\r\n") ; LOGrAW( tSay ) ; }
                            strokingFrameS& sf = *(strokingFrameS*)&winPulp.stqr_strokingFrame[ 1 + winPulp.rCache.offFrame ] ;
                        {
                        if( bUseSavedPosition )
        
                        winPulp.rCache.bPeeWhileMoving = _bPeeSave ;
        
                        }
                            }
                                break ;
        
                                }
                                    }
                                        }
                                            value >>= 1 ;
                                            L2(pmt[1],winPulp.rCache.pmrb[off])
                                            else          { M2(pmt[2],winPulp.rCache.pmrb[off]) }
                                            if( value&1 ) { M2(pmt[5],winPulp.rCache.pmrb[off]) }
                                        {
                                        for( countT off = 1 ; off <= winPulp.rCache.cBits ; off ++ )
                                    {
                                    else
                                    if( !value ) { M2(pmt[2],pmt[1]) L2(pmt[1],pmt[1]) }
                                    M2(pmt[1],pmt[1]) LE2(pmt[1],pmt[5])
                                {
                                if( winPulp.rCache.pmrb )
        
                                }
                                    if( winPulp.rCache.pmrb ) for( countT off = 0 ; off <= winPulp.rCache.cBits ; off ++ ) winPulp.rCache.pmrb[ off ] = pmt[1] + (measureT)off / (measureT)winPulp.rCache.cBits * pmt[5] ;
                                    ether.newF( tinP , LF , winPulp.rCache.pmrb , 1 + winPulp.rCache.cBits ) ; ___( winPulp.rCache.pmrb ) ;
                                    winPulp.rCache.cBits = cBits ;
                                    ether.delF( tinP , winPulp.rCache.pmrb ) ;
                                {
                                if( cBits != winPulp.rCache.cBits )
                                countT cBits = 1 + ( sttP.idAdam >> 0x10 & 0xf ) ;
                                countT value = sttP.idAdam & 0xffff ;
                                //ASSUME: sizeof( countT ) == 8
                                //U::REF: case '7'  : { M2(pmt[1],pmt[5]) LE2(pmt[1],pmt[1]) M2(pmt[5],pmt[2]) L2(pmt[1],pmt[2]) M2(pmt[5],pmt[3]) L2(pmt[1],pmt[3]) M2(pmt[5],pmt[4]) L2(pmt[1],pmt[4]) M2(pmt[2],pmt[5]) L2(pmt[1],pmt[5]) break ; }
                            {
                            case sscDIGIT : // NUMERIC SYMBOLS (ALL 01 OF THEM) //CONJ: THIS SUPPORTS ALL RADIXES UP TO 00001
                            }
                                break ;
                                }
                                    }
                                        break ;
                                        winPulp.newWaterF( ( winPulp.rCache.msAc - 1.0 ) + winPulp.rCache.msBc , ( winPulp.rCache.msAr - 1.0 ) + winPulp.rCache.msBr ) ;
                                        winPulp.newWaterF(                         winPulp.rCache.msBc ,                         winPulp.rCache.msBr ) ;
                                    {
                                    case saA1_HARDbLANKfILLEDwITHpEE :
                                    case saA1_COPYrIGHT : { M2(pmt[1],pmt[1]) L2(pmt[1],pmt[4]) L2(pmt[5],pmt[4]) L2(pmt[5],pmt[1]) L2(pmt[1],pmt[1]) M2(pmt[4],pmt[2]) L2(pmt[2],pmt[2]) L2(pmt[2],pmt[3]) LE2(pmt[4],pmt[3]) break ; }
                                    case saA1_TRADEmARK : { M2(pmt[1],pmt[5]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[1]) L2(pmt[2],pmt[5]) M2(pmt[3],pmt[1]) L2(pmt[3],pmt[4]) L2(pmt[5],pmt[4]) LE2(pmt[5],pmt[1]) M2(pmt[4],pmt[1]) L2(pmt[4],pmt[4]) break ; }
        
                                    case saA1_HD45 : { M2(pmt[1],pmt[4]) LE2(pmt[5],pmt[5]) break ; }
                                    case saA1_HD35 : { M2(pmt[1],pmt[3]) LE2(pmt[5],pmt[5]) break ; }
                                    case saA1_HD34 : { M2(pmt[1],pmt[3]) LE2(pmt[5],pmt[4]) break ; }
                                    case saA1_HD25 : { M2(pmt[1],pmt[2]) LE2(pmt[5],pmt[5]) break ; }
                                    case saA1_HD24 : { M2(pmt[1],pmt[2]) LE2(pmt[5],pmt[4]) break ; }
                                    case saA1_HD23 : { M2(pmt[1],pmt[2]) LE2(pmt[5],pmt[3]) break ; }
                                    case saA1_HD15 : { M2(pmt[1],pmt[1]) LE2(pmt[5],pmt[5]) break ; }
                                    case saA1_HD14 : { M2(pmt[1],pmt[1]) LE2(pmt[5],pmt[4]) break ; }
                                    case saA1_HD13 : { M2(pmt[1],pmt[1]) LE2(pmt[5],pmt[3]) break ; }
                                    case saA1_HD12 : { M2(pmt[1],pmt[1]) LE2(pmt[5],pmt[2]) break ; }
                                    case saA1_HU45 : { M2(pmt[1],pmt[4]) LE2(pmt[5],pmt[5]) break ; }
                                    case saA1_HU35 : { M2(pmt[1],pmt[3]) LE2(pmt[5],pmt[5]) break ; }
                                    case saA1_HU34 : { M2(pmt[1],pmt[3]) LE2(pmt[5],pmt[4]) break ; }
                                    case saA1_HU25 : { M2(pmt[1],pmt[2]) LE2(pmt[5],pmt[5]) break ; }
                                    case saA1_HU24 : { M2(pmt[1],pmt[2]) LE2(pmt[5],pmt[4]) break ; }
                                    case saA1_HU23 : { M2(pmt[1],pmt[2]) LE2(pmt[5],pmt[3]) break ; }
                                    case saA1_HU15 : { M2(pmt[1],pmt[1]) LE2(pmt[5],pmt[5]) break ; }
                                    case saA1_HU14 : { M2(pmt[1],pmt[1]) LE2(pmt[5],pmt[4]) break ; }
                                    case saA1_HU13 : { M2(pmt[1],pmt[1]) LE2(pmt[5],pmt[3]) break ; }
                                    case saA1_HU12 : { M2(pmt[1],pmt[1]) LE2(pmt[5],pmt[2]) break ; }
                                    case saA1_VD45 : { M2(pmt[4],pmt[5]) LE2(pmt[5],pmt[1]) break ; }
                                    case saA1_VD35 : { M2(pmt[3],pmt[5]) LE2(pmt[5],pmt[1]) break ; }
                                    case saA1_VD34 : { M2(pmt[3],pmt[5]) LE2(pmt[4],pmt[1]) break ; }
                                    case saA1_VD25 : { M2(pmt[2],pmt[5]) LE2(pmt[5],pmt[1]) break ; }
                                    case saA1_VD24 : { M2(pmt[2],pmt[5]) LE2(pmt[4],pmt[1]) break ; }
                                    case saA1_VD23 : { M2(pmt[2],pmt[5]) LE2(pmt[3],pmt[1]) break ; }
                                    case saA1_VD15 : { M2(pmt[1],pmt[5]) LE2(pmt[5],pmt[1]) break ; }
                                    case saA1_VD14 : { M2(pmt[1],pmt[5]) LE2(pmt[4],pmt[1]) break ; }
                                    case saA1_VD13 : { M2(pmt[1],pmt[5]) LE2(pmt[3],pmt[1]) break ; }
                                    case saA1_VD12 : { M2(pmt[1],pmt[5]) LE2(pmt[2],pmt[1]) break ; }
                                    case saA1_VU45 : { M2(pmt[4],pmt[1]) LE2(pmt[5],pmt[5]) break ; }
                                    case saA1_VU35 : { M2(pmt[3],pmt[1]) LE2(pmt[5],pmt[5]) break ; }
                                    case saA1_VU34 : { M2(pmt[3],pmt[1]) LE2(pmt[4],pmt[5]) break ; }
                                    case saA1_VU25 : { M2(pmt[2],pmt[1]) LE2(pmt[5],pmt[5]) break ; }
                                    case saA1_VU24 : { M2(pmt[2],pmt[1]) LE2(pmt[4],pmt[5]) break ; }
                                    case saA1_VU23 : { M2(pmt[2],pmt[1]) LE2(pmt[3],pmt[5]) break ; }
                                    case saA1_VU15 : { M2(pmt[1],pmt[1]) LE2(pmt[5],pmt[5]) break ; }
                                    case saA1_VU14 : { M2(pmt[1],pmt[1]) LE2(pmt[4],pmt[5]) break ; }
                                    case saA1_VU13 : { M2(pmt[1],pmt[1]) LE2(pmt[3],pmt[5]) break ; }
                                    case saA1_VU12 : { M2(pmt[1],pmt[1]) LE2(pmt[2],pmt[5]) break ; }
                                    case saA1_H5 : { M2(pmt[1],pmt[5]) LE2(pmt[5],pmt[5]) break ; }
                                    case saA1_H4 : { M2(pmt[1],pmt[4]) LE2(pmt[5],pmt[4]) break ; }
                                    case saA1_H3 : { M2(pmt[1],pmt[3]) LE2(pmt[5],pmt[3]) break ; }
                                    case saA1_H2 : { M2(pmt[1],pmt[2]) LE2(pmt[5],pmt[2]) break ; }
                                    case saA1_H1 : { M2(pmt[1],pmt[1]) LE2(pmt[5],pmt[1]) break ; }
                                    case saA1_V5 : { M2(pmt[5],pmt[1]) LE2(pmt[5],pmt[5]) break ; }
                                    case saA1_V4 : { M2(pmt[4],pmt[1]) LE2(pmt[4],pmt[5]) break ; }
                                    case saA1_V3 : { M2(pmt[3],pmt[1]) LE2(pmt[3],pmt[5]) break ; }
                                    case saA1_V2 : { M2(pmt[2],pmt[1]) LE2(pmt[2],pmt[5]) break ; }
                                    case saA1_V1 : { M2(pmt[1],pmt[1]) LE2(pmt[1],pmt[5]) break ; }
        
                                    case saA1_TOOLend                                : { break ; }
                                    case saA1_TOOLx7End                              : { break ; }
                                    case saA1_TOOLJOY2pOSITION                       : { M2(pmt[2],pmt[1]) L2(pmt[1],pmt[2]) L2(pmt[1],pmt[5]) L2(pmt[5],pmt[5]) L2(pmt[5],pmt[1]) L2(pmt[2],pmt[1]) M2(pmt[2],pmt[3]) LE2(pmt[4],pmt[3]) M2(pmt[3],pmt[2]) LE2(pmt[3],pmt[4]) break ; }
                                    case saA1_TOOLJOY1pOSITION                       : { M2(pmt[1],pmt[1]) L2(pmt[1],pmt[5]) L2(pmt[5],pmt[5]) L2(pmt[5],pmt[2]) L2(pmt[4],pmt[1]) L2(pmt[1],pmt[1]) M2(pmt[2],pmt[3]) LE2(pmt[4],pmt[3]) M2(pmt[3],pmt[2]) LE2(pmt[3],pmt[4]) break ; }
                                    case saA1_TOOLx7Begin                            : { break ; }
                                    case saA1_TOOLx2End                              : { break ; }
                                    case saA1_TOOLMOUSEpOSITION                      : { M2(pmt[1],pmt[1]) L2(pmt[1],pmt[5]) L2(pmt[5],pmt[5]) L2(pmt[5],pmt[1]) L2(pmt[1],pmt[1]) M2(pmt[1],pmt[3]) L2(pmt[5],pmt[3]) M2(pmt[3],pmt[5]) L2(pmt[3],pmt[3]) break ; }
                                    case saA1_TOOLx2Begin                            : { break ; }
        
        
                                    case saA1_TOOLJOY2bUTTON02                       : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[2]) L2(pmt[2],pmt[1]) L2(pmt[5],pmt[1]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[3],pmt[2]) LE2(pmt[3],pmt[5]) M2(pmt[4],pmt[2]) LE2(pmt[4],pmt[5]) break ; }
                                    case saA1_TOOLJOY2bUTTONf1                       : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[2]) L2(pmt[2],pmt[1]) L2(pmt[5],pmt[1]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[3],pmt[2]) LE2(pmt[3],pmt[5]) M2(pmt[4],pmt[5]) L2(pmt[2],pmt[5]) M2(pmt[4],pmt[4]) L2(pmt[2],pmt[4]) M2(pmt[4],pmt[3]) L2(pmt[2],pmt[3]) M2(pmt[4],pmt[2]) L2(pmt[2],pmt[2]) break ; }
                                    case saA1_TOOLJOY2bUTTONe1                       : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[2]) L2(pmt[2],pmt[1]) L2(pmt[5],pmt[1]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[3],pmt[2]) LE2(pmt[3],pmt[5]) M2(pmt[4],pmt[5]) L2(pmt[2],pmt[5]) M2(pmt[4],pmt[4]) L2(pmt[2],pmt[4]) M2(pmt[4],pmt[3]) L2(pmt[2],pmt[3]) break ; }
                                    case saA1_TOOLJOY2bUTTONd1                       : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[2]) L2(pmt[2],pmt[1]) L2(pmt[5],pmt[1]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[3],pmt[2]) LE2(pmt[3],pmt[5]) M2(pmt[4],pmt[5]) L2(pmt[2],pmt[5]) M2(pmt[4],pmt[4]) L2(pmt[2],pmt[4]) M2(pmt[4],pmt[2]) L2(pmt[2],pmt[2]) break ; }
                                    case saA1_TOOLJOY2bUTTONc1                       : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[2]) L2(pmt[2],pmt[1]) L2(pmt[5],pmt[1]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[3],pmt[2]) LE2(pmt[3],pmt[5]) M2(pmt[4],pmt[5]) L2(pmt[2],pmt[5]) M2(pmt[4],pmt[4]) L2(pmt[2],pmt[4]) break ; }
                                    case saA1_TOOLJOY2bUTTONb1                       : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[2]) L2(pmt[2],pmt[1]) L2(pmt[5],pmt[1]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[3],pmt[2]) LE2(pmt[3],pmt[5]) M2(pmt[4],pmt[5]) L2(pmt[2],pmt[5]) M2(pmt[4],pmt[3]) L2(pmt[2],pmt[3]) M2(pmt[4],pmt[2]) L2(pmt[2],pmt[2]) break ; }
                                    case saA1_TOOLJOY2bUTTONa1                       : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[2]) L2(pmt[2],pmt[1]) L2(pmt[5],pmt[1]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[3],pmt[2]) LE2(pmt[3],pmt[5]) M2(pmt[4],pmt[5]) L2(pmt[2],pmt[5]) M2(pmt[4],pmt[3]) L2(pmt[2],pmt[3]) break ; }
                                    case saA1_TOOLJOY2bUTTON91                       : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[2]) L2(pmt[2],pmt[1]) L2(pmt[5],pmt[1]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[3],pmt[2]) LE2(pmt[3],pmt[5]) M2(pmt[4],pmt[5]) L2(pmt[2],pmt[5]) M2(pmt[4],pmt[2]) L2(pmt[2],pmt[2]) break ; }
                                    case saA1_TOOLJOY2bUTTON81                       : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[2]) L2(pmt[2],pmt[1]) L2(pmt[5],pmt[1]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[3],pmt[2]) LE2(pmt[3],pmt[5]) M2(pmt[4],pmt[5]) L2(pmt[2],pmt[5]) break ; }
                                    case saA1_TOOLJOY2bUTTON71                       : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[2]) L2(pmt[2],pmt[1]) L2(pmt[5],pmt[1]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[3],pmt[2]) LE2(pmt[3],pmt[5]) M2(pmt[4],pmt[4]) L2(pmt[2],pmt[4]) M2(pmt[4],pmt[3]) L2(pmt[2],pmt[3]) M2(pmt[4],pmt[2]) L2(pmt[2],pmt[2]) break ; }
                                    case saA1_TOOLJOY2bUTTON61                       : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[2]) L2(pmt[2],pmt[1]) L2(pmt[5],pmt[1]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[3],pmt[2]) LE2(pmt[3],pmt[5]) M2(pmt[4],pmt[4]) L2(pmt[2],pmt[4]) M2(pmt[4],pmt[3]) L2(pmt[2],pmt[3]) break ; }
                                    case saA1_TOOLJOY2bUTTON51                       : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[2]) L2(pmt[2],pmt[1]) L2(pmt[5],pmt[1]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[3],pmt[2]) LE2(pmt[3],pmt[5]) M2(pmt[4],pmt[4]) L2(pmt[2],pmt[4]) M2(pmt[4],pmt[2]) L2(pmt[2],pmt[2]) break ; }
                                    case saA1_TOOLJOY2bUTTON41                       : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[2]) L2(pmt[2],pmt[1]) L2(pmt[5],pmt[1]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[3],pmt[2]) LE2(pmt[3],pmt[5]) M2(pmt[4],pmt[4]) L2(pmt[2],pmt[4]) break ; }
                                    case saA1_TOOLJOY2bUTTON31                       : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[2]) L2(pmt[2],pmt[1]) L2(pmt[5],pmt[1]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[3],pmt[2]) LE2(pmt[3],pmt[5]) M2(pmt[4],pmt[3]) L2(pmt[2],pmt[3]) M2(pmt[4],pmt[2]) L2(pmt[2],pmt[2]) break ; }
                                    case saA1_TOOLJOY2bUTTON21                       : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[2]) L2(pmt[2],pmt[1]) L2(pmt[5],pmt[1]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[3],pmt[2]) LE2(pmt[3],pmt[5]) M2(pmt[4],pmt[3]) L2(pmt[2],pmt[3]) break ; }
                                    case saA1_TOOLJOY2bUTTON11                       : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[2]) L2(pmt[2],pmt[1]) L2(pmt[5],pmt[1]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[3],pmt[2]) LE2(pmt[3],pmt[5]) M2(pmt[4],pmt[2]) L2(pmt[2],pmt[2]) break ; }
                                    case saA1_TOOLJOY2bUTTON01                       : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[2]) L2(pmt[2],pmt[1]) L2(pmt[5],pmt[1]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[3],pmt[2]) LE2(pmt[3],pmt[5]) break ; }
                                    case saA1_TOOLJOY2bUTTONf                        : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[2]) L2(pmt[2],pmt[1]) L2(pmt[5],pmt[1]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[4],pmt[5]) L2(pmt[2],pmt[5]) M2(pmt[4],pmt[4]) L2(pmt[2],pmt[4]) M2(pmt[4],pmt[3]) L2(pmt[2],pmt[3]) M2(pmt[4],pmt[2]) L2(pmt[2],pmt[2]) break ; }
                                    case saA1_TOOLJOY2bUTTONe                        : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[2]) L2(pmt[2],pmt[1]) L2(pmt[5],pmt[1]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[4],pmt[5]) L2(pmt[2],pmt[5]) M2(pmt[4],pmt[4]) L2(pmt[2],pmt[4]) M2(pmt[4],pmt[3]) L2(pmt[2],pmt[3]) break ; }
                                    case saA1_TOOLJOY2bUTTONd                        : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[2]) L2(pmt[2],pmt[1]) L2(pmt[5],pmt[1]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[4],pmt[5]) L2(pmt[2],pmt[5]) M2(pmt[4],pmt[4]) L2(pmt[2],pmt[4]) M2(pmt[4],pmt[2]) L2(pmt[2],pmt[2]) break ; }
                                    case saA1_TOOLJOY2bUTTONc                        : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[2]) L2(pmt[2],pmt[1]) L2(pmt[5],pmt[1]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[4],pmt[5]) L2(pmt[2],pmt[5]) M2(pmt[4],pmt[4]) L2(pmt[2],pmt[4]) break ; }
                                    case saA1_TOOLJOY2bUTTONb                        : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[2]) L2(pmt[2],pmt[1]) L2(pmt[5],pmt[1]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[4],pmt[5]) L2(pmt[2],pmt[5]) M2(pmt[4],pmt[3]) L2(pmt[2],pmt[3]) M2(pmt[4],pmt[2]) L2(pmt[2],pmt[2]) break ; }
                                    case saA1_TOOLJOY2bUTTONa                        : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[2]) L2(pmt[2],pmt[1]) L2(pmt[5],pmt[1]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[4],pmt[5]) L2(pmt[2],pmt[5]) M2(pmt[4],pmt[3]) L2(pmt[2],pmt[3]) break ; }
                                    case saA1_TOOLJOY2bUTTON9                        : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[2]) L2(pmt[2],pmt[1]) L2(pmt[5],pmt[1]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[4],pmt[5]) L2(pmt[2],pmt[5]) M2(pmt[4],pmt[2]) L2(pmt[2],pmt[2]) break ; }
                                    case saA1_TOOLJOY2bUTTON8                        : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[2]) L2(pmt[2],pmt[1]) L2(pmt[5],pmt[1]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[4],pmt[5]) L2(pmt[2],pmt[5]) break ; }
                                    case saA1_TOOLJOY2bUTTON7                        : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[2]) L2(pmt[2],pmt[1]) L2(pmt[5],pmt[1]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[4],pmt[4]) L2(pmt[2],pmt[4]) M2(pmt[4],pmt[3]) L2(pmt[2],pmt[3]) M2(pmt[4],pmt[2]) L2(pmt[2],pmt[2]) break ; }
                                    case saA1_TOOLJOY2bUTTON6                        : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[2]) L2(pmt[2],pmt[1]) L2(pmt[5],pmt[1]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[4],pmt[4]) L2(pmt[2],pmt[4]) M2(pmt[4],pmt[3]) L2(pmt[2],pmt[3]) break ; }
                                    case saA1_TOOLJOY2bUTTON5                        : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[2]) L2(pmt[2],pmt[1]) L2(pmt[5],pmt[1]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[4],pmt[4]) L2(pmt[2],pmt[4]) M2(pmt[4],pmt[2]) L2(pmt[2],pmt[2]) break ; }
                                    case saA1_TOOLJOY2bUTTON4                        : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[2]) L2(pmt[2],pmt[1]) L2(pmt[5],pmt[1]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[4],pmt[4]) L2(pmt[2],pmt[4]) break ; }
                                    case saA1_TOOLJOY2bUTTON3                        : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[2]) L2(pmt[2],pmt[1]) L2(pmt[5],pmt[1]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[4],pmt[3]) L2(pmt[2],pmt[3]) M2(pmt[4],pmt[2]) L2(pmt[2],pmt[2]) break ; }
                                    case saA1_TOOLJOY2bUTTON2                        : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[2]) L2(pmt[2],pmt[1]) L2(pmt[5],pmt[1]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[4],pmt[3]) L2(pmt[2],pmt[3]) break ; }
                                    case saA1_TOOLJOY2bUTTON1                        : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[2]) L2(pmt[2],pmt[1]) L2(pmt[5],pmt[1]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[4],pmt[2]) L2(pmt[2],pmt[2]) break ; }
        
                                    case saA1_TOOLJOY1bUTTON02                       : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[1]) L2(pmt[4],pmt[1]) L2(pmt[5],pmt[2]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[3],pmt[2]) LE2(pmt[3],pmt[5]) M2(pmt[4],pmt[2]) LE2(pmt[4],pmt[5]) break ; }
                                    case saA1_TOOLJOY1bUTTONf1                       : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[1]) L2(pmt[4],pmt[1]) L2(pmt[5],pmt[2]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[3],pmt[2]) LE2(pmt[3],pmt[5]) M2(pmt[4],pmt[5]) L2(pmt[2],pmt[5]) M2(pmt[4],pmt[4]) L2(pmt[2],pmt[4]) M2(pmt[4],pmt[3]) L2(pmt[2],pmt[3]) M2(pmt[4],pmt[2]) L2(pmt[2],pmt[2]) break ; }
                                    case saA1_TOOLJOY1bUTTONe1                       : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[1]) L2(pmt[4],pmt[1]) L2(pmt[5],pmt[2]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[3],pmt[2]) LE2(pmt[3],pmt[5]) M2(pmt[4],pmt[5]) L2(pmt[2],pmt[5]) M2(pmt[4],pmt[4]) L2(pmt[2],pmt[4]) M2(pmt[4],pmt[3]) L2(pmt[2],pmt[3]) break ; }
                                    case saA1_TOOLJOY1bUTTONd1                       : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[1]) L2(pmt[4],pmt[1]) L2(pmt[5],pmt[2]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[3],pmt[2]) LE2(pmt[3],pmt[5]) M2(pmt[4],pmt[5]) L2(pmt[2],pmt[5]) M2(pmt[4],pmt[4]) L2(pmt[2],pmt[4]) M2(pmt[4],pmt[2]) L2(pmt[2],pmt[2]) break ; }
                                    case saA1_TOOLJOY1bUTTONc1                       : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[1]) L2(pmt[4],pmt[1]) L2(pmt[5],pmt[2]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[3],pmt[2]) LE2(pmt[3],pmt[5]) M2(pmt[4],pmt[5]) L2(pmt[2],pmt[5]) M2(pmt[4],pmt[4]) L2(pmt[2],pmt[4]) break ; }
                                    case saA1_TOOLJOY1bUTTONb1                       : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[1]) L2(pmt[4],pmt[1]) L2(pmt[5],pmt[2]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[3],pmt[2]) LE2(pmt[3],pmt[5]) M2(pmt[4],pmt[5]) L2(pmt[2],pmt[5]) M2(pmt[4],pmt[3]) L2(pmt[2],pmt[3]) M2(pmt[4],pmt[2]) L2(pmt[2],pmt[2]) break ; }
                                    case saA1_TOOLJOY1bUTTONa1                       : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[1]) L2(pmt[4],pmt[1]) L2(pmt[5],pmt[2]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[3],pmt[2]) LE2(pmt[3],pmt[5]) M2(pmt[4],pmt[5]) L2(pmt[2],pmt[5]) M2(pmt[4],pmt[3]) L2(pmt[2],pmt[3]) break ; }
                                    case saA1_TOOLJOY1bUTTON91                       : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[1]) L2(pmt[4],pmt[1]) L2(pmt[5],pmt[2]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[3],pmt[2]) LE2(pmt[3],pmt[5]) M2(pmt[4],pmt[5]) L2(pmt[2],pmt[5]) M2(pmt[4],pmt[2]) L2(pmt[2],pmt[2]) break ; }
                                    case saA1_TOOLJOY1bUTTON81                       : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[1]) L2(pmt[4],pmt[1]) L2(pmt[5],pmt[2]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[3],pmt[2]) LE2(pmt[3],pmt[5]) M2(pmt[4],pmt[5]) L2(pmt[2],pmt[5]) break ; }
                                    case saA1_TOOLJOY1bUTTON71                       : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[1]) L2(pmt[4],pmt[1]) L2(pmt[5],pmt[2]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[3],pmt[2]) LE2(pmt[3],pmt[5]) M2(pmt[4],pmt[4]) L2(pmt[2],pmt[4]) M2(pmt[4],pmt[3]) L2(pmt[2],pmt[3]) M2(pmt[4],pmt[2]) L2(pmt[2],pmt[2]) break ; }
                                    case saA1_TOOLJOY1bUTTON61                       : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[1]) L2(pmt[4],pmt[1]) L2(pmt[5],pmt[2]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[3],pmt[2]) LE2(pmt[3],pmt[5]) M2(pmt[4],pmt[4]) L2(pmt[2],pmt[4]) M2(pmt[4],pmt[3]) L2(pmt[2],pmt[3]) break ; }
                                    case saA1_TOOLJOY1bUTTON51                       : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[1]) L2(pmt[4],pmt[1]) L2(pmt[5],pmt[2]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[3],pmt[2]) LE2(pmt[3],pmt[5]) M2(pmt[4],pmt[4]) L2(pmt[2],pmt[4]) M2(pmt[4],pmt[2]) L2(pmt[2],pmt[2]) break ; }
                                    case saA1_TOOLJOY1bUTTON41                       : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[1]) L2(pmt[4],pmt[1]) L2(pmt[5],pmt[2]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[3],pmt[2]) LE2(pmt[3],pmt[5]) M2(pmt[4],pmt[4]) L2(pmt[2],pmt[4]) break ; }
                                    case saA1_TOOLJOY1bUTTON31                       : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[1]) L2(pmt[4],pmt[1]) L2(pmt[5],pmt[2]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[3],pmt[2]) LE2(pmt[3],pmt[5]) M2(pmt[4],pmt[3]) L2(pmt[2],pmt[3]) M2(pmt[4],pmt[2]) L2(pmt[2],pmt[2]) break ; }
                                    case saA1_TOOLJOY1bUTTON21                       : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[1]) L2(pmt[4],pmt[1]) L2(pmt[5],pmt[2]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[3],pmt[2]) LE2(pmt[3],pmt[5]) M2(pmt[4],pmt[3]) L2(pmt[2],pmt[3]) break ; }
                                    case saA1_TOOLJOY1bUTTON11                       : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[1]) L2(pmt[4],pmt[1]) L2(pmt[5],pmt[2]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[3],pmt[2]) LE2(pmt[3],pmt[5]) M2(pmt[4],pmt[2]) L2(pmt[2],pmt[2]) break ; }
                                    case saA1_TOOLJOY1bUTTON01                       : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[1]) L2(pmt[4],pmt[1]) L2(pmt[5],pmt[2]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[3],pmt[2]) LE2(pmt[3],pmt[5]) break ; }
                                    case saA1_TOOLJOY1bUTTONf                        : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[1]) L2(pmt[4],pmt[1]) L2(pmt[5],pmt[2]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[4],pmt[5]) L2(pmt[2],pmt[5]) M2(pmt[4],pmt[4]) L2(pmt[2],pmt[4]) M2(pmt[4],pmt[3]) L2(pmt[2],pmt[3]) M2(pmt[4],pmt[2]) L2(pmt[2],pmt[2]) break ; }
                                    case saA1_TOOLJOY1bUTTONe                        : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[1]) L2(pmt[4],pmt[1]) L2(pmt[5],pmt[2]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[4],pmt[5]) L2(pmt[2],pmt[5]) M2(pmt[4],pmt[4]) L2(pmt[2],pmt[4]) M2(pmt[4],pmt[3]) L2(pmt[2],pmt[3]) break ; }
                                    case saA1_TOOLJOY1bUTTONd                        : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[1]) L2(pmt[4],pmt[1]) L2(pmt[5],pmt[2]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[4],pmt[5]) L2(pmt[2],pmt[5]) M2(pmt[4],pmt[4]) L2(pmt[2],pmt[4]) M2(pmt[4],pmt[2]) L2(pmt[2],pmt[2]) break ; }
                                    case saA1_TOOLJOY1bUTTONc                        : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[1]) L2(pmt[4],pmt[1]) L2(pmt[5],pmt[2]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[4],pmt[5]) L2(pmt[2],pmt[5]) M2(pmt[4],pmt[4]) L2(pmt[2],pmt[4]) break ; }
                                    case saA1_TOOLJOY1bUTTONb                        : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[1]) L2(pmt[4],pmt[1]) L2(pmt[5],pmt[2]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[4],pmt[5]) L2(pmt[2],pmt[5]) M2(pmt[4],pmt[3]) L2(pmt[2],pmt[3]) M2(pmt[4],pmt[2]) L2(pmt[2],pmt[2]) break ; }
                                    case saA1_TOOLJOY1bUTTONa                        : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[1]) L2(pmt[4],pmt[1]) L2(pmt[5],pmt[2]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[4],pmt[5]) L2(pmt[2],pmt[5]) M2(pmt[4],pmt[3]) L2(pmt[2],pmt[3]) break ; }
                                    case saA1_TOOLJOY1bUTTON9                        : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[1]) L2(pmt[4],pmt[1]) L2(pmt[5],pmt[2]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[4],pmt[5]) L2(pmt[2],pmt[5]) M2(pmt[4],pmt[2]) L2(pmt[2],pmt[2]) break ; }
                                    case saA1_TOOLJOY1bUTTON8                        : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[1]) L2(pmt[4],pmt[1]) L2(pmt[5],pmt[2]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[4],pmt[5]) L2(pmt[2],pmt[5]) break ; }
                                    case saA1_TOOLJOY1bUTTON7                        : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[1]) L2(pmt[4],pmt[1]) L2(pmt[5],pmt[2]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[4],pmt[4]) L2(pmt[2],pmt[4]) M2(pmt[4],pmt[3]) L2(pmt[2],pmt[3]) M2(pmt[4],pmt[2]) L2(pmt[2],pmt[2]) break ; }
                                    case saA1_TOOLJOY1bUTTON6                        : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[1]) L2(pmt[4],pmt[1]) L2(pmt[5],pmt[2]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[4],pmt[4]) L2(pmt[2],pmt[4]) M2(pmt[4],pmt[3]) L2(pmt[2],pmt[3]) break ; }
                                    case saA1_TOOLJOY1bUTTON5                        : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[1]) L2(pmt[4],pmt[1]) L2(pmt[5],pmt[2]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[4],pmt[4]) L2(pmt[2],pmt[4]) M2(pmt[4],pmt[2]) L2(pmt[2],pmt[2]) break ; }
                                    case saA1_TOOLJOY1bUTTON4                        : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[1]) L2(pmt[4],pmt[1]) L2(pmt[5],pmt[2]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[4],pmt[4]) L2(pmt[2],pmt[4]) break ; }
                                    case saA1_TOOLJOY1bUTTON3                        : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[1]) L2(pmt[4],pmt[1]) L2(pmt[5],pmt[2]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[4],pmt[3]) L2(pmt[2],pmt[3]) M2(pmt[4],pmt[2]) L2(pmt[2],pmt[2]) break ; }
                                    case saA1_TOOLJOY1bUTTON2                        : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[1]) L2(pmt[4],pmt[1]) L2(pmt[5],pmt[2]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[4],pmt[3]) L2(pmt[2],pmt[3]) break ; }
                                    case saA1_TOOLJOY1bUTTON1                        : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[1]) L2(pmt[4],pmt[1]) L2(pmt[5],pmt[2]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[2]) LE2(pmt[2],pmt[5]) M2(pmt[4],pmt[2]) L2(pmt[2],pmt[2]) break ; }
        
                                    case saA1_TOOLMOUSEbUTTONrIGHT                   : { M2(pmt[1],pmt[1]) L2(pmt[1],pmt[5]) L2(pmt[5],pmt[5]) L2(pmt[5],pmt[1]) L2(pmt[1],pmt[1]) M2(pmt[1],pmt[3]) L2(pmt[5],pmt[3]) M2(pmt[3],pmt[5]) L2(pmt[3],pmt[3]) M2(pmt[5],pmt[5]) L2(pmt[3],pmt[3]) break ; }
                                    case saA1_TOOLMOUSEbUTTONcENTER                  : { M2(pmt[1],pmt[1]) L2(pmt[1],pmt[5]) L2(pmt[5],pmt[5]) L2(pmt[5],pmt[1]) L2(pmt[1],pmt[1]) M2(pmt[1],pmt[3]) L2(pmt[5],pmt[3]) M2(pmt[3],pmt[5]) L2(pmt[3],pmt[3]) M2(pmt[2],pmt[4]) L2(pmt[4],pmt[4]) break ; }
                                    case saA1_TOOLMOUSEbUTTONlEFT                    : { M2(pmt[1],pmt[1]) L2(pmt[1],pmt[5]) L2(pmt[5],pmt[5]) L2(pmt[5],pmt[1]) L2(pmt[1],pmt[1]) M2(pmt[1],pmt[3]) L2(pmt[5],pmt[3]) M2(pmt[3],pmt[5]) L2(pmt[3],pmt[3]) M2(pmt[1],pmt[5]) L2(pmt[3],pmt[3]) break ; }
                                    case saA1_TOOLCONTROLeND                         : { M2(pmt[5],pmt[1]) L2(pmt[1],pmt[1]) L2(pmt[1],pmt[5]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[3]) LE2(pmt[4],pmt[3]) break ; }
                                    case saA1_TOOLUPnUM                              : { M2(pmt[1],pmt[3]) L2(pmt[3],pmt[5]) L2(pmt[5],pmt[3]) L2(pmt[1],pmt[3]) M2(pmt[3],pmt[1]) L2(pmt[3],pmt[3]) break ; }
                                    case saA1_TOOLUP                                 :
                                    case saA1_TOOLTABbACK                            : { M2(pmt[1],pmt[5]) LE2(pmt[3],pmt[5]) M2(pmt[2],pmt[1]) L2(pmt[2],pmt[5]) M2(pmt[3],pmt[1]) L2(pmt[4],pmt[5]) LE2(pmt[5],pmt[1]) break ; }
                                    case saA1_TOOLTAB                                :
                                    case saA1_TOOLSHIFTrIGHT                         : { M2(pmt[1],pmt[1]) L2(pmt[3],pmt[1]) L2(pmt[3],pmt[3]) L2(pmt[1],pmt[3]) L2(pmt[1],pmt[5]) LE2(pmt[3],pmt[5]) M2(pmt[4],pmt[1]) LE2(pmt[4],pmt[5]) M2(pmt[5],pmt[1]) LE2(pmt[5],pmt[5]) M2(pmt[4],pmt[3]) L2(pmt[5],pmt[3]) break ; }
                                    case saA1_TOOLSHIFT                              :
                                    case saA1_TOOLRIGHTnUM                           : { M2(pmt[3],pmt[1]) L2(pmt[5],pmt[3]) L2(pmt[3],pmt[5]) L2(pmt[3],pmt[1]) M2(pmt[1],pmt[3]) L2(pmt[3],pmt[3]) break ; }
                                    case saA1_TOOLRIGHT                              :
                                    case saA1_TOOLPAUSE                              : { M2(pmt[1],pmt[3]) L2(pmt[5],pmt[3]) M2(pmt[5],pmt[1]) LE2(pmt[5],pmt[5]) break ; }
                                    case saA1_TOOLBREAK                              : { M2(pmt[1],pmt[3]) L2(pmt[4],pmt[3]) M2(pmt[5],pmt[1]) LE2(pmt[5],pmt[5]) M2(pmt[4],pmt[1]) LE2(pmt[4],pmt[5]) break ; }
                                    case saA1_TOOLPAGEuPnUM                          : { M2(pmt[1],pmt[3]) L2(pmt[3],pmt[5]) L2(pmt[5],pmt[3]) L2(pmt[1],pmt[3]) M2(pmt[1],pmt[1]) L2(pmt[1],pmt[2]) L2(pmt[5],pmt[2]) L2(pmt[5],pmt[1]) L2(pmt[1],pmt[1]) M2(pmt[3],pmt[2]) L2(pmt[3],pmt[3]) break ; }
                                    case saA1_TOOLPAGEuP                             :
                                    case saA1_TOOLPAGEdOWNnUM                        : { M2(pmt[1],pmt[3]) L2(pmt[3],pmt[1]) L2(pmt[5],pmt[3]) L2(pmt[1],pmt[3]) M2(pmt[1],pmt[5]) L2(pmt[1],pmt[4]) L2(pmt[5],pmt[4]) L2(pmt[5],pmt[5]) L2(pmt[1],pmt[5]) M2(pmt[3],pmt[4]) L2(pmt[3],pmt[3]) break ; }
                                    case saA1_TOOLPAGEdOWN                           :
                                    case saA1_TOOLNULLnUM                            : { M2(pmt[2],pmt[2]) L2(pmt[2],pmt[4]) L2(pmt[4],pmt[4]) L2(pmt[4],pmt[2]) L2(pmt[2],pmt[2]) break ; }
                                    case saA1_TOOLLOCKsCROLL                         : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[1]) LE2(pmt[5],pmt[1]) M2(pmt[2],pmt[2]) L2(pmt[5],pmt[2]) L2(pmt[5],pmt[4]) L2(pmt[2],pmt[4]) L2(pmt[2],pmt[5]) LE2(pmt[5],pmt[5]) break ; }
                                    case saA1_TOOLLOCKnUM                            : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[1]) LE2(pmt[5],pmt[1]) M2(pmt[2],pmt[2]) L2(pmt[2],pmt[5]) L2(pmt[5],pmt[2]) LE2(pmt[5],pmt[5]) break ; }
                                    case saA1_TOOLLOCKcAPS                           : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[1]) LE2(pmt[5],pmt[1]) M2(pmt[5],pmt[2]) L2(pmt[2],pmt[2]) L2(pmt[2],pmt[5]) L2(pmt[5],pmt[5]) break ; }
                                    case saA1_TOOLLEFTnUM                            : { M2(pmt[3],pmt[1]) L2(pmt[1],pmt[3]) L2(pmt[3],pmt[5]) L2(pmt[3],pmt[1]) M2(pmt[5],pmt[3]) L2(pmt[3],pmt[3]) break ; }
                                    case saA1_TOOLLEFT                               :
                                    case saA1_TOOLINSERTnUM                          : { M2(pmt[2],pmt[2]) L2(pmt[2],pmt[4]) L2(pmt[4],pmt[4]) L2(pmt[4],pmt[2]) L2(pmt[2],pmt[2]) M2(pmt[1],pmt[1]) L2(pmt[2],pmt[2]) M2(pmt[5],pmt[5]) L2(pmt[4],pmt[4]) M2(pmt[1],pmt[5]) L2(pmt[2],pmt[4]) M2(pmt[5],pmt[1]) L2(pmt[4],pmt[2]) break ; }
                                    case saA1_TOOLINSERT                             :
                                    case saA1_TOOLHOMEnUM                            : { M2(pmt[1],pmt[3]) L2(pmt[3],pmt[5]) L2(pmt[5],pmt[3]) L2(pmt[1],pmt[3]) M2(pmt[3],pmt[1]) L2(pmt[3],pmt[3]) M2(pmt[1],pmt[5]) LE2(pmt[5],pmt[5]) break ; }
                                    case saA1_TOOLHOME                               :
                                    case saA1_TOOLF12                                : { M2(pmt[1],pmt[5]) L2(pmt[2],pmt[5]) LE2(pmt[2],pmt[1]) M2(pmt[1],pmt[3]) L2(pmt[2],pmt[3]) M2(pmt[3],pmt[1]) LE2(pmt[3],pmt[5]) M2(pmt[5],pmt[5]) L2(pmt[3],pmt[5]) M2(pmt[5],pmt[4]) L2(pmt[3],pmt[4]) break ; }
                                    case saA1_TOOLF11                                : { M2(pmt[1],pmt[5]) L2(pmt[2],pmt[5]) LE2(pmt[2],pmt[1]) M2(pmt[1],pmt[3]) L2(pmt[2],pmt[3]) M2(pmt[3],pmt[1]) LE2(pmt[3],pmt[5]) M2(pmt[5],pmt[5]) L2(pmt[3],pmt[5]) M2(pmt[5],pmt[3]) L2(pmt[3],pmt[3]) M2(pmt[5],pmt[2]) L2(pmt[3],pmt[2]) break ; }
                                    case saA1_TOOLF10                                : { M2(pmt[1],pmt[5]) L2(pmt[2],pmt[5]) LE2(pmt[2],pmt[1]) M2(pmt[1],pmt[3]) L2(pmt[2],pmt[3]) M2(pmt[3],pmt[1]) LE2(pmt[3],pmt[5]) M2(pmt[5],pmt[5]) L2(pmt[3],pmt[5]) M2(pmt[5],pmt[3]) L2(pmt[3],pmt[3]) break ; }
                                    case saA1_TOOLF9                                 : { M2(pmt[1],pmt[5]) L2(pmt[2],pmt[5]) LE2(pmt[2],pmt[1]) M2(pmt[1],pmt[3]) L2(pmt[2],pmt[3]) M2(pmt[3],pmt[1]) LE2(pmt[3],pmt[5]) M2(pmt[5],pmt[5]) L2(pmt[3],pmt[5]) M2(pmt[5],pmt[2]) L2(pmt[3],pmt[2]) break ; }
                                    case saA1_TOOLF8                                 : { M2(pmt[1],pmt[5]) L2(pmt[2],pmt[5]) LE2(pmt[2],pmt[1]) M2(pmt[1],pmt[3]) L2(pmt[2],pmt[3]) M2(pmt[3],pmt[1]) LE2(pmt[3],pmt[5]) M2(pmt[5],pmt[5]) L2(pmt[3],pmt[5]) break ; }
                                    case saA1_TOOLF7                                 : { M2(pmt[1],pmt[5]) L2(pmt[2],pmt[5]) LE2(pmt[2],pmt[1]) M2(pmt[1],pmt[3]) L2(pmt[2],pmt[3]) M2(pmt[3],pmt[1]) LE2(pmt[3],pmt[5]) M2(pmt[5],pmt[4]) L2(pmt[3],pmt[4]) M2(pmt[5],pmt[3]) L2(pmt[3],pmt[3]) M2(pmt[5],pmt[2]) L2(pmt[3],pmt[2]) break ; }
                                    case saA1_TOOLF6                                 : { M2(pmt[1],pmt[5]) L2(pmt[2],pmt[5]) LE2(pmt[2],pmt[1]) M2(pmt[1],pmt[3]) L2(pmt[2],pmt[3]) M2(pmt[3],pmt[1]) LE2(pmt[3],pmt[5]) M2(pmt[5],pmt[4]) L2(pmt[3],pmt[4]) M2(pmt[5],pmt[3]) L2(pmt[3],pmt[3]) break ; }
                                    case saA1_TOOLF5                                 : { M2(pmt[1],pmt[5]) L2(pmt[2],pmt[5]) LE2(pmt[2],pmt[1]) M2(pmt[1],pmt[3]) L2(pmt[2],pmt[3]) M2(pmt[3],pmt[1]) LE2(pmt[3],pmt[5]) M2(pmt[5],pmt[4]) L2(pmt[3],pmt[4]) M2(pmt[5],pmt[2]) L2(pmt[3],pmt[2]) break ; }
                                    case saA1_TOOLF4                                 : { M2(pmt[1],pmt[5]) L2(pmt[2],pmt[5]) LE2(pmt[2],pmt[1]) M2(pmt[1],pmt[3]) L2(pmt[2],pmt[3]) M2(pmt[3],pmt[1]) LE2(pmt[3],pmt[5]) M2(pmt[5],pmt[4]) L2(pmt[3],pmt[4]) break ; }
                                    case saA1_TOOLF3                                 : { M2(pmt[1],pmt[5]) L2(pmt[2],pmt[5]) LE2(pmt[2],pmt[1]) M2(pmt[1],pmt[3]) L2(pmt[2],pmt[3]) M2(pmt[3],pmt[1]) LE2(pmt[3],pmt[5]) M2(pmt[5],pmt[2]) L2(pmt[3],pmt[2]) M2(pmt[5],pmt[3]) L2(pmt[3],pmt[3]) break ; }
                                    case saA1_TOOLF2                                 : { M2(pmt[1],pmt[5]) L2(pmt[2],pmt[5]) LE2(pmt[2],pmt[1]) M2(pmt[1],pmt[3]) L2(pmt[2],pmt[3]) M2(pmt[3],pmt[1]) LE2(pmt[3],pmt[5]) M2(pmt[5],pmt[3]) L2(pmt[3],pmt[3]) break ; }
                                    case saA1_TOOLF1                                 : { M2(pmt[1],pmt[5]) L2(pmt[2],pmt[5]) LE2(pmt[2],pmt[1]) M2(pmt[1],pmt[3]) L2(pmt[2],pmt[3]) M2(pmt[3],pmt[1]) LE2(pmt[3],pmt[5]) M2(pmt[5],pmt[2]) L2(pmt[3],pmt[2]) break ; }
                                    case saA1_TOOLESCAPE                             : { M2(pmt[1],pmt[1]) L2(pmt[1],pmt[5]) L2(pmt[5],pmt[5]) L2(pmt[5],pmt[1]) L2(pmt[1],pmt[1]) M2(pmt[2],pmt[2]) L2(pmt[3],pmt[3]) LE2(pmt[4],pmt[2]) M2(pmt[2],pmt[4]) L2(pmt[2],pmt[3]) L2(pmt[3],pmt[4]) L2(pmt[2],pmt[4]) M2(pmt[4],pmt[4]) L2(pmt[4],pmt[3]) L2(pmt[3],pmt[4]) L2(pmt[4],pmt[4]) break ; }
                                    case saA1_TOOLENTERnUM                           : { M2(pmt[5],pmt[1]) L2(pmt[1],pmt[1]) L2(pmt[1],pmt[5]) LE2(pmt[5],pmt[5]) M2(pmt[2],pmt[3]) LE2(pmt[5],pmt[3]) break ; }
                                    case saA1_TOOLENTER                              :
                                    case saA1_TOOLENDnUM                             : { M2(pmt[1],pmt[3]) L2(pmt[3],pmt[1]) L2(pmt[5],pmt[3]) L2(pmt[1],pmt[3]) M2(pmt[3],pmt[5]) L2(pmt[3],pmt[3]) M2(pmt[1],pmt[1]) LE2(pmt[5],pmt[1]) break ; }
                                    case saA1_TOOLEND                                :
                                    case saA1_TOOLDOWNnUM                            : { M2(pmt[1],pmt[3]) L2(pmt[3],pmt[1]) L2(pmt[5],pmt[3]) L2(pmt[1],pmt[3]) M2(pmt[3],pmt[5]) L2(pmt[3],pmt[3]) break ; }
                                    case saA1_TOOLDOWN                               :
                                    case saA1_TOOLDELETEnUM                          : { M2(pmt[1],pmt[1]) L2(pmt[1],pmt[5]) L2(pmt[5],pmt[5]) L2(pmt[5],pmt[1]) L2(pmt[1],pmt[1]) M2(pmt[1],pmt[1]) L2(pmt[5],pmt[5]) M2(pmt[5],pmt[1]) L2(pmt[1],pmt[5]) break ; }
                                    case saA1_TOOLDELETE                             :
                                    case saA1_TOOLCONTROLrIGHT                       : { M2(pmt[5],pmt[1]) L2(pmt[1],pmt[1]) L2(pmt[1],pmt[2]) LE2(pmt[5],pmt[2]) M2(pmt[1],pmt[5]) LE2(pmt[5],pmt[5]) M2(pmt[3],pmt[3]) L2(pmt[3],pmt[5]) break ; }
                                    case saA1_TOOLCONTROL                            :
                                    case saA1_TOOLBASEoSrIGHT                        : { M2(pmt[1],pmt[3]) L2(pmt[3],pmt[3]) L2(pmt[3],pmt[5]) L2(pmt[1],pmt[5]) L2(pmt[1],pmt[1]) L2(pmt[3],pmt[1]) L2(pmt[3],pmt[3]) M2(pmt[5],pmt[1]) L2(pmt[4],pmt[1]) L2(pmt[4],pmt[5]) L2(pmt[5],pmt[5]) L2(pmt[5],pmt[1]) break ; }
                                    case saA1_TOOLBASEoSlEFT                         :
                                    case saA1_TOOLBASEoScELLlIST                     : { M2(pmt[1],pmt[1]) L2(pmt[5],pmt[1]) L2(pmt[5],pmt[2]) L2(pmt[1],pmt[2]) L2(pmt[1],pmt[1]) M2(pmt[1],pmt[4]) L2(pmt[5],pmt[4]) L2(pmt[5],pmt[5]) L2(pmt[1],pmt[5]) L2(pmt[1],pmt[4]) M2(pmt[1],pmt[3]) LE2(pmt[5],pmt[3]) break ; }
                                    case saA1_TOOLBACKSPACE                          : { M2(pmt[1],pmt[1]) L2(pmt[1],pmt[5]) L2(pmt[5],pmt[5]) L2(pmt[5],pmt[1]) L2(pmt[1],pmt[1]) M2(pmt[1],pmt[1]) L2(pmt[3],pmt[5]) M2(pmt[3],pmt[1]) L2(pmt[1],pmt[5]) M2(pmt[2],pmt[3]) LE2(pmt[4],pmt[3]) break ; }
                                    case saA1_TOOLALTrIGHT                           : { M2(pmt[1],pmt[1]) L2(pmt[3],pmt[5]) LE2(pmt[3],pmt[1]) M2(pmt[4],pmt[5]) L2(pmt[4],pmt[1]) LE2(pmt[5],pmt[1]) break ; }
                                    case saA1_TOOLALT                                :
                                    case saA1_TOOLCONTROLbEGIN                       : { M2(pmt[5],pmt[1]) L2(pmt[1],pmt[1]) L2(pmt[1],pmt[5]) LE2(pmt[5],pmt[5]) M2(pmt[3],pmt[2]) LE2(pmt[3],pmt[4]) M2(pmt[2],pmt[3]) LE2(pmt[4],pmt[3]) break ; }
        
                                    case saA1_TOOLUNDERSCORE                         : {  break ; }
                                    case saA1_TOOLTILDE                              :
                                    case saA1_TOOLSQUAREoPEN                         :
                                    case saA1_TOOLSQUAREcLOSE                        :
                                    case saA1_TOOLSPACE                              :
                                    case saA1_TOOLSEMICOLON                          :
                                    case saA1_TOOLQUOTEsINGLE                        :
                                    case saA1_TOOLQUOTEdOUBLE                        :
                                    case saA1_TOOLQUESTION                           :
                                    case saA1_TOOLPOUND                              :
                                    case saA1_TOOLPLUSnUM                            :
                                    case saA1_TOOLPLUS                               :
                                    case saA1_TOOLPERIODnUM                          :
                                    case saA1_TOOLPERIOD                             :
                                    case saA1_TOOLPERCENT                            :
                                    case saA1_TOOLPARENoPEN                          :
                                    case saA1_TOOLPARENcLOSE                         :
                                    case saA1_TOOLOR                                 :
                                    case saA1_TOOLMULTIPLYnUM                        :
                                    case saA1_TOOLMULTIPLY                           :
                                    case saA1_TOOLMINUSnUM                           :
                                    case saA1_TOOLMINUS                              :
                                    case saA1_TOOLLESStHAN                           :
                                    case saA1_TOOLGREATERtHAN                        :
                                    case saA1_TOOLEXCLAIM                            :
                                    case saA1_TOOLEQUALS                             :
                                    case saA1_TOOLDOLLAR                             :
                                    case saA1_TOOLDIVIDEnUM                          :
                                    case saA1_TOOLDIVIDE                             :
                                    case saA1_TOOLCURLEYoPEN                         :
                                    case saA1_TOOLCURLEYcLOSE                        :
                                    case saA1_TOOLCOMMA                              :
                                    case saA1_TOOLCOLON                              :
                                    case saA1_TOOLCARET                              :
                                    case saA1_TOOLBACKsLASH                          :
                                    case saA1_TOOLAT                                 :
                                    case saA1_TOOLAND                                :
                                    case saA1_TOOLACCENT                             :
                                    case saA1_TOOLPAD9                               :
                                    case saA1_TOOLPAD8                               :
                                    case saA1_TOOLPAD7                               :
                                    case saA1_TOOLPAD6                               :
                                    case saA1_TOOLPAD5                               :
                                    case saA1_TOOLPAD4                               :
                                    case saA1_TOOLPAD3                               :
                                    case saA1_TOOLPAD2                               :
                                    case saA1_TOOLPAD1                               :
                                    case saA1_TOOLPAD0                               :
                                    case saA1_TOOL9                                  :
                                    case saA1_TOOL8                                  :
                                    case saA1_TOOL7                                  :
                                    case saA1_TOOL6                                  :
                                    case saA1_TOOL5                                  :
                                    case saA1_TOOL4                                  :
                                    case saA1_TOOL3                                  :
                                    case saA1_TOOL2                                  :
                                    case saA1_TOOL1                                  :
                                    case saA1_TOOL0                                  :
                                    case saA1_TOOLZ                                  :
                                    case saA1_TOOLY                                  :
                                    case saA1_TOOLX                                  :
                                    case saA1_TOOLW                                  :
                                    case saA1_TOOLV                                  :
                                    case saA1_TOOLU                                  :
                                    case saA1_TOOLT                                  :
                                    case saA1_TOOLS                                  :
                                    case saA1_TOOLR                                  :
                                    case saA1_TOOLQ                                  :
                                    case saA1_TOOLP                                  :
                                    case saA1_TOOLO                                  :
                                    case saA1_TOOLN                                  :
                                    case saA1_TOOLM                                  :
                                    case saA1_TOOLL                                  :
                                    case saA1_TOOLK                                  :
                                    case saA1_TOOLJ                                  :
                                    case saA1_TOOLI                                  :
                                    case saA1_TOOLH                                  :
                                    case saA1_TOOLG                                  :
                                    case saA1_TOOLF                                  :
                                    case saA1_TOOLE                                  :
                                    case saA1_TOOLD                                  :
                                    case saA1_TOOLC                                  :
                                    case saA1_TOOLB                                  :
                                    case saA1_TOOLA                                  :
                                    case saA1_TOOLz                                  :
                                    case saA1_TOOLy                                  :
                                    case saA1_TOOLx                                  :
                                    case saA1_TOOLw                                  :
                                    case saA1_TOOLv                                  :
                                    case saA1_TOOLu                                  :
                                    case saA1_TOOLt                                  :
                                    case saA1_TOOLs                                  :
                                    case saA1_TOOLr                                  :
                                    case saA1_TOOLq                                  :
                                    case saA1_TOOLp                                  :
                                    case saA1_TOOLo                                  :
                                    case saA1_TOOLn                                  :
                                    case saA1_TOOLm                                  :
                                    case saA1_TOOLl                                  :
                                    case saA1_TOOLk                                  :
                                    case saA1_TOOLj                                  :
                                    case saA1_TOOLi                                  :
                                    case saA1_TOOLh                                  :
                                    case saA1_TOOLg                                  :
                                    case saA1_TOOLf                                  :
                                    case saA1_TOOLe                                  :
                                    case saA1_TOOLd                                  :
                                    case saA1_TOOLc                                  :
                                    case saA1_TOOLb                                  :
                                    case saA1_TOOLa                                  :
                                    case saA1_TOOLbegin                              :
        
                                    }
                                        break ;
        
                                        winPulp.positionStrokingFrameIfF( tinP ) ;
                                        }
                                            thirdC::winMoveIF( tinP , *winPulp.pHndDrawBitmap , mColDevice , mRowDevice ) ;
                                            const measureT mRowDevice = mIdRowOrigin + winPulp.mIdRowNow ;
                                            const measureT mColDevice = mIdColOrigin + winPulp.mIdColNow ;
                                        {
                                        if( !( F(winPulp.flagsMode) & flPULPmODE_SUPPRESSpELcOLORcHANGES ) )
                                        if( winPulp.rCache.bPeeWhileMoving ) winPulp.newWaterF( winPulp.mIdColNow , winPulp.mIdRowNow ) ;
                                        ;
                                            : sfd.mIdRowHighWater + 1.0 + winPulp.rCache.mPadUp
                                            ? sfd.mIdRow
                                        winPulp.mIdRowNow = - MAXmEASUREt == sfd.mIdRowHighWater
                                        winPulp.mIdColNow = mIdColSave ;
                                        //if( bLog3302e ) { TN( tSay , "" ) ; tSay = T("lf: winPulp.mIdRowNow: ")+TF1(winPulp.mIdRowNow)+T(" -> ")+TF1((measureT)(-MAXmEASUREt==sfd.mIdRowHighWater?sfd.mIdRow:sfd.mIdRowHighWater+1.0+winPulp.rCache.mPadUp))+T("\r\n") ; LOGrAW( tSay ) ; }
                                        strokingFrameS& sfd = *(strokingFrameS*)&winPulp.stqr_strokingFrame[ 2 + winPulp.rCache.offFrame + winPulp.rCache.offFrameWrap ] ;
                                        bUseSavedPosition = 0 ;
                                    {
                                    case '\n' :
                                    }
                                        break ;
        
                                        winPulp.positionStrokingFrameIfF( tinP ) ;
                                        }
                                            thirdC::winMoveIF( tinP , *winPulp.pHndDrawBitmap , mColDevice , mRowDevice ) ;
                                            const measureT mRowDevice = mIdRowOrigin + winPulp.mIdRowNow ;
                                            const measureT mColDevice = mIdColOrigin + winPulp.mIdColNow ;
                                        {
                                        if( !( F(winPulp.flagsMode) & flPULPmODE_SUPPRESSpELcOLORcHANGES ) )
                                        if( winPulp.rCache.bPeeWhileMoving ) winPulp.newWaterF( winPulp.mIdColNow , winPulp.mIdRowNow ) ;
                                        winPulp.mIdRowNow = mIdRowSave ;
                                        winPulp.mIdColNow = sfd.mIdCol ;
                                        strokingFrameS& sfd = *(strokingFrameS*)&winPulp.stqr_strokingFrame[ 2 + winPulp.rCache.offFrame + winPulp.rCache.offFrameWrap ] ;
        
                                        bUseSavedPosition = 0 ;
                                    {
                                    case '\r' :
                                    //DUPLICATED CODE
        
                                    case '?'  : { M2(pmt[1],pmt[5]) L2(pmt[5],pmt[5]) L2(pmt[5],pmt[4]) L2(pmt[3],pmt[4]) LE2(pmt[3],pmt[2]) M2(pmt[2],pmt[1]) LE2(pmt[4],pmt[1]) break ; }
                                    case '/'  : { M2(pmt[1],pmt[1]) LE2(pmt[5],pmt[5]) break ; }
                                    case '>'  : { M2(pmt[1],pmt[1]) L2(pmt[5],pmt[3]) LE2(pmt[1],pmt[5]) break ; }
                                    case '.'  : { M2(pmt[1],pmt[2]) L2(pmt[1],pmt[1]) LE2(pmt[2],pmt[1]) break ; }
                                    case '<'  : { M2(pmt[5],pmt[1]) L2(pmt[1],pmt[3]) LE2(pmt[5],pmt[5]) break ; }
                                    case ','  : { M2(pmt[1],pmt[1]) LE2(pmt[2],pmt[2]) break ; }
                                    case '"'  : { M2(pmt[2],pmt[5]) LE2(pmt[2],pmt[4]) M2(pmt[4],pmt[4]) LE2(pmt[4],pmt[5]) break ; }
                                    case '\'' : { M2(pmt[3],pmt[5]) LE2(pmt[3],pmt[4]) break ; }
                                    case ':'  : { M2(pmt[1],pmts[2]) L2(pmt[2],pmts[2]) L2(pmt[2],pmts[3]) LE2(pmt[1],pmts[3]) break ; }
                                    case ';'  : { M2(pmt[1],pmt[1]) L2(pmt[2],pmt[2]) LE2(pmt[1],pmt[2]) break ; }
                                    case '|'  : { M2(pmt[3],pmt[1]) LE2(pmt[3],pmt[5]) break ; }
                                    case '\\' : { M2(pmt[1],pmt[5]) LE2(pmt[5],pmt[1]) break ; }
                                    case '}'  : { M2(pmt[1],pmt[2]) L2(pmt[1],pmt[1]) L2(pmt[2],pmt[1]) L2(pmt[2],pmt[5]) L2(pmt[1],pmt[5]) LE2(pmt[1],pmt[4]) break ; }
                                    case ']'  : { M2(pmt[1],pmt[1]) L2(pmt[2],pmt[1]) L2(pmt[2],pmt[5]) LE2(pmt[1],pmt[5]) break ; }
                                    case '{'  : { M2(pmt[5],pmt[2]) L2(pmt[5],pmt[1]) L2(pmt[4],pmt[1]) L2(pmt[4],pmt[5]) L2(pmt[5],pmt[5]) LE2(pmt[5],pmt[4]) break ; }
                                    case '['  : { M2(pmt[5],pmt[1]) L2(pmt[4],pmt[1]) L2(pmt[4],pmt[5]) LE2(pmt[5],pmt[5]) break ; }
                                    case '+'  : { M2(pmt[1],pmt[3]) LE2(pmt[5],pmt[3]) M2(pmt[3],pmt[1]) LE2(pmt[3],pmt[5]) break ; }
                                    case '='  : { M2(pmt[2],pmt[2]) LE2(pmt[4],pmt[2]) M2(pmt[4],pmt[3]) LE2(pmt[2],pmt[3]) break ; }
                                    case '_'  : { M2(pmt[1],pmt[1]) LE2(pmt[5],pmt[1]) break ; }
                                    case '-'  : { M2(pmt[2],pmt[3]) LE2(pmt[4],pmt[3]) break ; }
                                    case ')'  : { M2(pmt[1],pmt[1]) L2(pmt[2],pmt[2]) L2(pmt[2],pmt[4]) LE2(pmt[1],pmt[5]) break ; }
                                    case '('  : { M2(pmt[5],pmt[1]) L2(pmt[4],pmt[2]) L2(pmt[4],pmt[4]) LE2(pmt[5],pmt[5]) break ; }
                                    case '*'  : { M2(pmt[1],pmt[1]) LE2(pmt[5],pmt[5]) M2(pmt[1],pmt[3]) LE2(pmt[5],pmt[3]) M2(pmt[1],pmt[5]) LE2(pmt[5],pmt[1]) break ; }
                                    case '&'  : { M2(pmt[5],pmt[1]) L2(pmt[1],pmt[2]) L2(pmt[5],pmt[3]) L2(pmt[1],pmt[4]) LE2(pmt[5],pmt[5]) break ; }
                                    case '^'  : { M2(pmt[1],pmt[4]) L2(pmt[3],pmt[5]) LE2(pmt[5],pmt[4]) break ; }
                                    case '%'  : { M2(pmt[1],pmt[1]) LE2(pmt[5],pmt[5]) M2(pmt[1],pmt[4]) LE2(pmt[2],pmt[4]) M2(pmt[4],pmt[2]) LE2(pmt[5],pmt[2]) break ; }
                                    case '$'  : { M2(pmt[1],pmt[1]) L2(pmt[5],pmt[2]) L2(pmt[1],pmt[4]) LE2(pmt[5],pmt[5]) M2(pmt[3],pmt[1]) LE2(pmt[3],pmt[5]) break ; }
                                    case '#'  : { M2(pmt[2],pmt[1]) LE2(pmt[2],pmt[5]) M2(pmt[4],pmt[1]) LE2(pmt[4],pmt[5]) M2(pmt[1],pmt[2]) LE2(pmt[5],pmt[2]) M2(pmt[1],pmt[4]) LE2(pmt[5],pmt[4]) break ; }
                                    case '@'  : { M2(pmt[5],pmt[1]) L2(pmt[1],pmt[1]) L2(pmt[1],pmt[5]) L2(pmt[5],pmt[5]) L2(pmt[5],pmt[2]) L2(pmt[2],pmt[2]) L2(pmt[2],pmt[4]) LE2(pmt[4],pmt[4]) break ; }
                                    case '!'  : { M2(pmt[3],pmt[5]) LE2(pmt[3],pmt[2]) M2(pmt[2],pmt[1]) LE2(pmt[4],pmt[1]) break ; }
                                    case '~'  : { M2(pmt[1],pmt[4]) L2(pmt[2],pmt[5]) L2(pmt[4],pmt[4]) LE2(pmt[5],pmt[5]) break ; }
                                    case '`'  : { M2(pmt[2],pmt[5]) LE2(pmt[4],pmt[4]) break ; }
                                    case ' '  : { break ; }
        
                                    case '0'  : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[1]) LE2(pmt[2],pmt[1]) break ; }
                                    case '9'  : { M2(pmt[1],pmt[5]) LE2(pmt[1],pmt[1]) M2(pmt[5],pmt[2]) L2(pmt[1],pmt[2]) M2(pmt[2],pmt[3]) L2(pmt[1],pmt[3]) M2(pmt[2],pmt[4]) L2(pmt[1],pmt[4]) M2(pmt[5],pmt[5]) L2(pmt[1],pmt[5]) break ; }
                                    case '8'  : { M2(pmt[1],pmt[5]) LE2(pmt[1],pmt[1]) M2(pmt[2],pmt[2]) L2(pmt[1],pmt[2]) M2(pmt[2],pmt[3]) L2(pmt[1],pmt[3]) M2(pmt[2],pmt[4]) L2(pmt[1],pmt[4]) M2(pmt[5],pmt[5]) L2(pmt[1],pmt[5]) break ; }
                                    case '7'  : { M2(pmt[1],pmt[5]) LE2(pmt[1],pmt[1]) M2(pmt[5],pmt[2]) L2(pmt[1],pmt[2]) M2(pmt[5],pmt[3]) L2(pmt[1],pmt[3]) M2(pmt[5],pmt[4]) L2(pmt[1],pmt[4]) M2(pmt[2],pmt[5]) L2(pmt[1],pmt[5]) break ; }
                                    case '6'  : { M2(pmt[1],pmt[5]) LE2(pmt[1],pmt[1]) M2(pmt[2],pmt[2]) L2(pmt[1],pmt[2]) M2(pmt[5],pmt[3]) L2(pmt[1],pmt[3]) M2(pmt[5],pmt[4]) L2(pmt[1],pmt[4]) M2(pmt[2],pmt[5]) L2(pmt[1],pmt[5]) break ; }
                                    case '5'  : { M2(pmt[1],pmt[5]) LE2(pmt[1],pmt[1]) M2(pmt[5],pmt[2]) L2(pmt[1],pmt[2]) M2(pmt[2],pmt[3]) L2(pmt[1],pmt[3]) M2(pmt[5],pmt[4]) L2(pmt[1],pmt[4]) M2(pmt[2],pmt[5]) L2(pmt[1],pmt[5]) break ; }
                                    case '4'  : { M2(pmt[1],pmt[5]) LE2(pmt[1],pmt[1]) M2(pmt[2],pmt[2]) L2(pmt[1],pmt[2]) M2(pmt[2],pmt[3]) L2(pmt[1],pmt[3]) M2(pmt[5],pmt[4]) L2(pmt[1],pmt[4]) M2(pmt[2],pmt[5]) L2(pmt[1],pmt[5]) break ; }
                                    case '3'  : { M2(pmt[1],pmt[5]) LE2(pmt[1],pmt[1]) M2(pmt[5],pmt[2]) L2(pmt[1],pmt[2]) M2(pmt[5],pmt[3]) L2(pmt[1],pmt[3]) M2(pmt[2],pmt[4]) L2(pmt[1],pmt[4]) M2(pmt[2],pmt[5]) L2(pmt[1],pmt[5]) break ; }
                                    case '2'  : { M2(pmt[1],pmt[5]) LE2(pmt[1],pmt[1]) M2(pmt[2],pmt[2]) L2(pmt[1],pmt[2]) M2(pmt[5],pmt[3]) L2(pmt[1],pmt[3]) M2(pmt[2],pmt[4]) L2(pmt[1],pmt[4]) M2(pmt[2],pmt[5]) L2(pmt[1],pmt[5]) break ; }
                                    case '1'  : { M2(pmt[1],pmt[5]) LE2(pmt[1],pmt[1]) M2(pmt[5],pmt[2]) L2(pmt[1],pmt[2]) M2(pmt[2],pmt[3]) L2(pmt[1],pmt[3]) M2(pmt[2],pmt[4]) L2(pmt[1],pmt[4]) M2(pmt[2],pmt[5]) L2(pmt[1],pmt[5]) break ; }
        
                                    case 'Z'  : { M2(pmt[1],pmt[5]) L2(pmt[5],pmt[5]) L2(pmt[1],pmt[1]) LE2(pmt[5],pmt[1]) break ; }
                                    case 'Y'  : { M2(pmt[1],pmt[5]) L2(pmt[3],pmt[3]) LE2(pmt[5],pmt[5]) M2(pmt[3],pmt[1]) L2(pmt[3],pmt[3]) break ; }
                                    case 'X'  : { M2(pmt[1],pmt[1]) LE2(pmt[5],pmt[5]) M2(pmt[1],pmt[5]) LE2(pmt[5],pmt[1]) break ; }
                                    case 'W'  : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[1]) L2(pmt[5],pmt[1]) L2(pmt[5],pmt[5]) M2(pmt[3],pmt[3]) L2(pmt[3],pmt[1]) break ; }
                                    case 'V'  : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[2]) L2(pmt[3],pmt[1]) L2(pmt[5],pmt[2]) LE2(pmt[5],pmt[5]) break ; }
                                    case 'U'  : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[1]) L2(pmt[5],pmt[1]) LE2(pmt[5],pmt[5]) break ; }
                                    case 'T'  : { M2(pmt[3],pmt[1]) L2(pmt[3],pmt[5]) M2(pmt[1],pmt[5]) LE2(pmt[5],pmt[5]) break ; }
                                    case 'S'  : { M2(pmt[1],pmt[1]) L2(pmt[5],pmt[2]) L2(pmt[1],pmt[4]) LE2(pmt[5],pmt[5]) break ; }
                                    case 'R'  : { M2(pmt[1],pmt[1]) L2(pmt[1],pmt[5]) L2(pmt[5],pmt[5]) L2(pmt[5],pmt[3]) LE2(pmt[1],pmt[3]) LE2(pmt[5],pmt[1]) break ; }
                                    case 'Q'  : { M2(pmt[4],pmt[2]) L2(pmt[5],pmt[1]) L2(pmt[5],pmt[5]) L2(pmt[1],pmt[5]) L2(pmt[1],pmt[1]) L2(pmt[4],pmt[1]) break ; }
                                    case 'P'  : { M2(pmt[1],pmt[1]) L2(pmt[1],pmt[5]) L2(pmt[5],pmt[5]) L2(pmt[5],pmt[3]) L2(pmt[1],pmt[3]) break ; }




                                    //case 'O'  : { M2(pmt[1],pmt[1]) L2(pmt[5],pmt[1]) L2(pmt[5],pmt[5]) L2(pmt[1],pmt[5]) L2(pmt[1],pmt[1]) break ; }
                                    }
                                        break ;
                                        //LOGrAWtID( "---- 'O' END ----" ) ;
                                        M2(pmt[1],pmt[1]) L2(pmt[5],pmt[1]) L2(pmt[5],pmt[5]) L2(pmt[1],pmt[5]) L2(pmt[1],pmt[1])
                                        //LOGrAWtID( "---- 'O' BEGIN ----" ) ;
                                    {
                                    case 'O'  :




                                    case 'N'  : { M2(pmt[1],pmt[1]) L2(pmt[1],pmt[5]) L2(pmt[5],pmt[1]) LE2(pmt[5],pmt[5]) break ; }
                                    case 'M'  : { M2(pmt[1],pmt[1]) L2(pmt[1],pmt[5]) L2(pmt[3],pmt[3]) L2(pmt[5],pmt[5]) LE2(pmt[5],pmt[1]) break ; }
                                    case 'L'  : { M2(pmt[1],pmt[5]) L2(pmt[1],pmt[1]) LE2(pmt[5],pmt[1]) break ; }
                                    case 'K'  : { M2(pmt[1],pmt[1]) LE2(pmt[1],pmt[5]) M2(pmt[5],pmt[1]) LE2(pmt[1],pmt[3]) LE2(pmt[5],pmt[5]) break ; }
                                    case 'J'  : { M2(pmt[1],pmt[2]) L2(pmt[1],pmt[1]) L2(pmt[5],pmt[1]) LE2(pmt[5],pmt[5]) break ; }
                                    case 'I'  : { M2(pmt[3],pmt[5]) LE2(pmt[3],pmt[1]) M2(pmt[1],pmt[1]) LE2(pmt[5],pmt[1]) M2(pmt[1],pmt[5]) LE2(pmt[5],pmt[5]) break ; }
                                    case 'H'  : { M2(pmt[1],pmt[1]) LE2(pmt[1],pmt[5]) M2(pmt[1],pmt[3]) LE2(pmt[5],pmt[3]) M2(pmt[5],pmt[5]) LE2(pmt[5],pmt[1]) break ; }
                                    case 'G'  : { M2(pmt[4],pmt[2]) L2(pmt[5],pmt[2]) L2(pmt[5],pmt[1]) L2(pmt[1],pmt[1]) L2(pmt[1],pmt[5]) LE2(pmt[5],pmt[5]) break ; }
                                    case 'F'  : { M2(pmt[1],pmt[1]) L2(pmt[1],pmt[5]) LE2(pmt[5],pmt[5]) M2(pmt[5],pmt[3]) L2(pmt[1],pmt[3]) break ; }
                                    case 'E'  : { M2(pmt[5],pmt[1]) L2(pmt[1],pmt[1]) L2(pmt[1],pmt[5]) LE2(pmt[5],pmt[5]) M2(pmt[5],pmt[3]) L2(pmt[1],pmt[3]) break ; }
                                    case 'D'  : { M2(pmt[1],pmt[1]) L2(pmt[5],pmt[2]) L2(pmt[5],pmt[4]) L2(pmt[1],pmt[5]) L2(pmt[1],pmt[1]) break ; }
                                    case 'C'  : { M2(pmt[5],pmt[2]) L2(pmt[1],pmt[1]) L2(pmt[1],pmt[5]) LE2(pmt[5],pmt[4]) break ; }




                                    //case 'B'  : { M2(pmt[1],pmt[1]) L2(pmt[5],pmt[2]) LE2(pmt[1],pmt[3]) L2(pmt[5],pmt[4]) L2(pmt[1],pmt[5]) L2(pmt[1],pmt[1]) break ; }




                                    }
                                        break ;
                                        L2(pmt[1],pmt[1])
                                        L2(pmt[1],pmt[5])
                                        L2(pmt[5],pmt[4])
                                        LE2(pmt[1],pmt[3])
                                        L2(pmt[5],pmt[2])




                                        //M2(pmt[1],pmt[1])




                                        }
                                            moveOrLineTransformedF( tinP , winPulp ) ;
                                            winPulp.idLineType = 0 ;
                                            winPulp.mIdRowNow  = (pmt[1]) * ( winPulp.rCache.msAr - 1.0 ) + winPulp.rCache.msBr ;
                                            winPulp.mIdColNow  = (pmt[1]) * ( winPulp.rCache.msAc - 1.0 ) + winPulp.rCache.msBc ;
                                            winPulp.mIdRowLag = winPulp.mIdRowNow ;
                                            winPulp.mIdColLag = winPulp.mIdColNow ;
                                        {




                                    {
                                    case 'B'  :




                                    case 'A'  : { M2(pmt[1],pmt[1]) L2(pmt[1],pmt[5]) L2(pmt[5],pmt[5]) LE2(pmt[5],pmt[1]) M2(pmt[2],pmt[2]) LE2(pmt[4],pmt[2]) break ; }
        
                                    case 'z'  : { M2(pmt[1],pmts[4]) L2(pmt[5],pmts[4]) L2(pmt[1],pmts[2]) LE2(pmt[5],pmts[2]) break ; }
                                    case 'y'  : { M2(pmt[1],pmt[1]) L2(pmt[5],pmt[1]) LE2(pmt[5],pmts[4]) M2(pmt[1],pmts[4]) L2(pmt[1],pmts[2]) L2(pmt[5],pmts[2]) break ; }
                                    case 'x'  : { M2(pmt[1],pmts[2]) LE2(pmt[5],pmts[4]) M2(pmt[1],pmts[4]) LE2(pmt[5],pmts[2]) break ; }
                                    case 'w'  : { M2(pmt[1],pmts[4]) L2(pmt[1],pmts[2]) L2(pmt[5],pmts[2]) LE2(pmt[5],pmts[4]) M2(pmt[3],pmts[3]) L2(pmt[3],pmts[2]) break ; }
                                    case 'v'  : { M2(pmt[1],pmts[4]) L2(pmt[1],pmts[3]) L2(pmt[3],pmts[2]) L2(pmt[5],pmts[3]) LE2(pmt[5],pmts[4]) break ; }
                                    case 'u'  : { M2(pmt[1],pmts[4]) L2(pmt[1],pmts[2]) L2(pmt[5],pmts[2]) LE2(pmt[5],pmts[4]) break ; }
                                    case 't'  : { M2(pmt[3],pmts[5]) L2(pmt[3],pmts[2]) LE2(pmt[4],pmts[2]) M2(pmt[1],pmts[4]) LE2(pmt[5],pmts[4]) break ; }
                                    case 's'  : { M2(pmt[1],pmts[2]) L2(pmt[5],pmts[2]) L2(pmt[5],pmts[3]) L2(pmt[1],pmts[3]) L2(pmt[1],pmts[4]) LE2(pmt[5],pmts[4]) break ; }
                                    case 'r'  : { M2(pmt[1],pmts[2]) L2(pmt[1],pmts[4]) LE2(pmt[5],pmts[4]) break ; }
                                    case 'q'  : { M2(pmt[5],pmt[1]) L2(pmt[5],pmts[4]) L2(pmt[1],pmts[4]) L2(pmt[1],pmts[2]) L2(pmt[5],pmts[2]) break ; }
                                    case 'p'  : { M2(pmt[1],pmt[1]) L2(pmt[1],pmts[4]) L2(pmt[5],pmts[4]) L2(pmt[5],pmts[2]) L2(pmt[1],pmts[2]) break ; }
                                    case 'o'  : { M2(pmt[1],pmts[2]) L2(pmt[1],pmts[4]) L2(pmt[5],pmts[4]) L2(pmt[5],pmts[2]) L2(pmt[1],pmts[2]) break ; }
                                    case 'n'  : { M2(pmt[1],pmts[2]) L2(pmt[1],pmts[4]) L2(pmt[5],pmts[4]) LE2(pmt[5],pmts[2]) break ; }
                                    case 'm'  : { M2(pmt[1],pmts[2]) L2(pmt[1],pmts[4]) L2(pmt[5],pmts[4]) LE2(pmt[5],pmts[2]) M2(pmt[3],pmts[2]) L2(pmt[3],pmts[4]) break ; }
                                    case 'l'  : { M2(pmt[5],pmts[2]) L2(pmt[3],pmts[2]) L2(pmt[3],pmts[5]) LE2(pmt[1],pmts[5]) break ; }
                                    case 'k'  : { M2(pmt[1],pmts[2]) LE2(pmt[1],pmts[5]) M2(pmt[5],pmts[2]) LE2(pmt[1],pmts[3]) LE2(pmt[5],pmts[4]) break ; }
                                    case 'j'  : { M2(pmt[1],pmts[2]) L2(pmt[3],pmts[2]) L2(pmt[3],pmts[4]) LE2(pmt[5],pmts[4]) M2(pmt[3],pmts[5]) LE2(pmt[3],pmts[5]) break ; }
                                    case 'i'  : { M2(pmt[5],pmts[2]) L2(pmt[3],pmts[2]) L2(pmt[3],pmts[4]) LE2(pmt[1],pmts[4]) M2(pmt[3],pmts[5]) LE2(pmt[3],pmts[5]) break ; }
                                    case 'h'  : { M2(pmt[1],pmts[2]) LE2(pmt[1],pmts[5]) M2(pmt[5],pmts[2]) L2(pmt[5],pmts[4]) L2(pmt[1],pmts[4]) break ; }
                                    case 'g'  : { M2(pmt[1],pmt[1]) L2(pmt[5],pmt[1]) L2(pmt[5],pmts[4]) L2(pmt[1],pmts[4]) L2(pmt[1],pmts[2]) L2(pmt[5],pmts[2]) break ; }
                                    case 'f'  : { M2(pmt[3],pmts[2]) L2(pmt[3],pmts[5]) LE2(pmt[4],pmts[5]) M2(pmt[1],pmts[4]) LE2(pmt[5],pmts[4]) break ; }
                                    case 'e'  : { M2(pmt[5],pmts[2]) L2(pmt[1],pmts[2]) L2(pmt[1],pmts[4]) L2(pmt[5],pmts[4]) L2(pmt[5],pmts[3]) L2(pmt[1],pmts[3]) break ; }
                                    case 'd'  : { M2(pmt[5],pmts[5]) L2(pmt[5],pmts[2]) L2(pmt[1],pmts[2]) L2(pmt[1],pmts[4]) L2(pmt[5],pmts[4]) break ; }
                                    case 'c'  : { M2(pmt[5],pmts[2]) L2(pmt[1],pmts[2]) L2(pmt[1],pmts[4]) LE2(pmt[5],pmts[4]) break ; }
                                    case 'b'  : { M2(pmt[1],pmts[5]) L2(pmt[1],pmts[2]) L2(pmt[5],pmts[2]) L2(pmt[5],pmts[4]) L2(pmt[1],pmts[4]) break ; }
                                    case 'a'  : { M2(pmt[1],pmts[4]) L2(pmt[5],pmts[4]) L2(pmt[5],pmts[2]) L2(pmt[1],pmts[2]) L2(pmt[1],pmts[3]) L2(pmt[5],pmts[3]) break ; }
                                    //ABCDEFGHIJKLMNOPQRSTUVWXYZ
                                    //abcdefghijklmnopqrstuvwxyz
                                {
                                switch( sttP.idAdam & 0xffff )
                            {
                            case sscDEFAULT : // US KEYBOARD
                        {
                        switch( sttP.idAdam & 0xff000000 )
                        //else                     { LOGrAW( T("sc_cALPHABET1: '")+sttP+T("' (")+TF1(sttP.idAdam)+T(")\r\n") ) ; }
                        if( cTraceOn ) { TN( tSay , "" ) ; tSay = T("'")+sttP+T("' \"")+T(processGlobal4I.mapTool(sttP.idToolF(tinP)))+T("\"") ; LOGrAW( tSay ) ; }
                        boolT bUseSavedPosition = 1 ;
        
                        if( !bExpand ) pmt = pmts = pmtRef ;
        
                        if( F(flStyle) & flRENDERsTYLE_STRIKEbOTTOMuP  ) { bExpand = 0 ; M2(pmt[3],pmt[0]) LE2(pmt[3],pmt[6]) }
                        if( F(flStyle) & flRENDERsTYLE_STRIKElEFTrIGHT ) { bExpand = 0 ; M2(pmt[0],pmt[3]) LE2(pmt[6],pmt[3]) }
                        if( F(flStyle) & flRENDERsTYLE_STRIKEuP        ) { bExpand = 0 ; M2(pmt[0],pmt[0]) LE2(pmt[6],pmt[6]) }
                        if( F(flStyle) & flRENDERsTYLE_STRIKEdOWN      ) { bExpand = 0 ; M2(pmt[0],pmt[6]) LE2(pmt[6],pmt[0]) }
                        if( F(flStyle) & flRENDERsTYLE_SCORErIGHT      ) { bExpand = 0 ; M2(pmt[6],pmt[0]) LE2(pmt[6],pmt[6]) }
                        if( F(flStyle) & flRENDERsTYLE_SCORElEFT       ) { bExpand = 0 ; M2(pmt[0],pmt[0]) LE2(pmt[0],pmt[6]) }
                        if( F(flStyle) & flRENDERsTYLE_SCOREoVER       ) { bExpand = 0 ; M2(pmt[0],pmt[6]) LE2(pmt[6],pmt[6]) }
                        if( F(flStyle) & flRENDERsTYLE_SCOREuNDER      ) { bExpand = 0 ; M2(pmt[0],pmt[0]) LE2(pmt[6],pmt[0]) }
                        boolT bExpand = 1 ;
                        ZE( measureT , mIdRowWork ) ;
                        ZE( measureT , mIdColWork ) ;
                        measureT mIdRowSave = winPulp.mIdRowNow ;
                        measureT mIdColSave = winPulp.mIdColNow ;
                        winPulp.rCache.bPeeWhileMoving = 1 ;
                        const boolT _bPeeSave = winPulp.rCache.bPeeWhileMoving ;
                        // IT IS ILLEGAL TO REFER TO mcq mcm mrq mrm ABOVE THIS LINE (NOT ENFORCED FOR MAX SPEED)
                        //U::THE FOLLOWING COMMENT IS OBSOLETED BY MIGRATION TO pmt[1]-pmt[5]
                        //U::ALL OF THE OLD ALPHA CELL VALUES IN CACHE ARE OBSOLETED BY MIGRATION TO pmt[1]-pmt[5]
        
                        }
                            winPulp.mSinHotAngle = *(measureT*)&winPulp.stqr_mSinHotAngle[ 1 ] ;
                            winPulp.mCosHotAngle = *(measureT*)&winPulp.stqr_mCosHotAngle[ 1 ] ;
                            winPulp.flagsMode |= flPULPmODE_TRANSFORMaTaNGLE ;
                        {
                        if( winPulp.rCache.bHotAngle )
        
                        winPulp.mIdRowTransformAnchor = winPulp.mIdRowNow + winPulp.rCache.mr1 - 1.0 + winPulp.rCache.mRowHotPoint ;
                        winPulp.mIdColTransformAnchor = winPulp.mIdColNow + winPulp.rCache.mc1 - 1.0 + winPulp.rCache.mColHotPoint ;
                    {
                    if( winPulp.rCache.mCol > 0.5 && winPulp.rCache.mRow > 0.5 )
        
                    }
                        winPulp.positionStrokingFrameIfF( tinP ) ;
                        }
                            thirdC::winMoveIF( tinP , *winPulp.pHndDrawBitmap , mColDevice , mRowDevice ) ;
                            const measureT mRowDevice = mIdRowOrigin + winPulp.mIdRowNow ;
                            const measureT mColDevice = mIdColOrigin + winPulp.mIdColNow ;
                        {
                        if( !( F(winPulp.flagsMode) & flPULPmODE_SUPPRESSpELcOLORcHANGES ) )
                        if( winPulp.rCache.bPeeWhileMoving ) winPulp.newWaterF( winPulp.mIdColNow , winPulp.mIdRowNow ) ;
                    {
                    if( bMove )
                    if( tinP.pAdamGlobal1->_etherC_.pIfcRenderingHandlerF ) bMove = (*tinP.pAdamGlobal1->_etherC_.pIfcRenderingHandlerF)( tinP , ether , *this  , tinP.pAdamGlobal1->_etherC_.cIfcRenderingHandlerInfo ) ;
                    ZE( boolT , bMove ) ;
        
                    //U::VALIDATE WHEN PUSHED
                    flagsT flStyle = winPulp.stqr_flStyle[ 1 ] ;
                    const flagsT _saveMode = winPulp.flagsMode ;
                {
                case sc_cALPHABET1 :
                }
                    break ;

                    }
                        if( sad.pStrike && !( F(rowBack.ro.flagsPaperBackMode) & flPAPERbACKmODE_ABSENT ) ) sad.doF( tinP , ether , ifcIDtYPEsTROKEcALLbACK_WAKE , idEvent , 0 , phCloneP ) ;
                
                        if( cTraceOn ) cTraceOn -- ;
                        sad.doF( tinP , ether , ifcIDtYPEsTROKEcALLbACK_STRIKE , idEvent , count2S( (countT)&winPulp.paper , (countT)&sttP ) , phCloneP ) ;
                        backNotifyBeforeSadamF( tinP , pulpP , sttP , F(winPulp.flagsMode) & flPULPmODE_SUPPRESSpELcOLORcHANGES ? flDRAW_SUPPRESSpELcOLORcHANGES : flDRAW_null ) ;
                        const countT idEvent = 1 + incv02AM( tinP.pAdamGlobal1->idEventSadamsLath ) ;
                        if( cTraceOn ) cTraceOn ++ ;
                        if( cTraceOn ) { LOGrAW3( "[idAdam]:" , sttP.idAdam , "\r\n" ) ; }
            
                        if( features.fc.idAdam != sttP.idAdam ) { BLAMMO ; }
                        featuresS& features = *(featuresS*)&(const featuresS&)sad ;
                        sadamC& sad = (*pSadams)( tinP , sttP.idAdam , phCloneP ) ;
                    {
                    if( pSadams )
                    sadamsC* pSadams = sadamsC::pSadamsIF( tinP ) ;

                    //CODEsYNC: DUPLICATED CODE 1020187 10301bf
                    //   ... UPDATE wP
                    // THE CALLBACK FUNCTION MUST...
                    // THE RECOMMENDED SCHEME IS TO DO NOTHING EXCEPT WHEN ids P IS 1, SO THAT THE REMAINING STROKES CAN BE USED AS PARAMETERS
                    // psttc1 AND ids P ARE PROVIDED SO THAT THE CALLbACK FUNCTION CAN IMPLEMENT PARAMETER PASSING
                    //CALLBACK PROTOCOL
                {
                case sc_cADAM :
                }
                    break ;
                    //}
                    //    LOGrAW( tSay ) ;
                    //    TN( tSay , "" ) ; tSay = T("new ")+TF1(winPulp.stqr_strokingFrame)+T(": ")+TF1(sf.mIdCol)+T(" - ")+TF1(sf.mIdCol-(measureT)1.0+sf.mCols) ;
                    //    strokingFrameS& sf  = *(strokingFrameS*)&winPulp.stqr_strokingFrame[ 1 + winPulp.rCache.offFrame ] ;
                    //{
                    //if( sttP.idCaste == scOld_mmFRAMEcELLS )
        
                    winPulp.positionStrokingFrameIfF( tinP ) ;
                    winPulp.cacheF( tinP , scOld_mmFRAME ) ;
                    winPulp.stqr_strokingFrame << (byteT*)&sfn ;
                    strokingFrameS sfn( sf.flags , sf.cStrokingFramesPadRight , sf.cStrokingFramesPadUp , winPulp.mIdColNow , winPulp.mIdRowNow , mIdColTo - winPulp.mIdColNow + 1 , mIdRowTo - winPulp.mIdRowNow + 1 ) ;
        
                    }
                        mIdRowTo = save ;
                        winPulp.mIdRowNow = mIdRowTo ;
                        measureT save = winPulp.mIdRowNow ;
                    {
                    if( winPulp.mIdRowNow > mIdRowTo )
        
                    }
                        mIdColTo = save ;
                        winPulp.mIdColNow = mIdColTo ;
                        measureT save = winPulp.mIdColNow ;
                    {
                    if( winPulp.mIdColNow > mIdColTo )
        
                    //}
                    //    LOGrAW( tSay ) ;
                    //    TN( tSay , "" ) ; tSay = T("\r\nold ")+TF1(winPulp.stqr_strokingFrame)+T(": ")+TF1(sf.mIdCol)+T(" - ")+TF1(sf.mIdCol-(measureT)1.0+sf.mCols)+T("\r\n") ;
                    //    strokingFrameS& sf  = *(strokingFrameS*)&winPulp.stqr_strokingFrame[ 1 + winPulp.rCache.offFrame ] ;
                    //{
                    //if( sttP.idCaste == scOld_mmFRAMEcELLS )
                    //if( bLog3302e )
        
                    winPulp.mColRowF( mIdColTo , mIdRowTo , sttP.idCaste , scOld_mmFRAME , sttw ) ;
                    ZE( measureT , mIdRowTo ) ;
                    ZE( measureT , mIdColTo ) ;
                    //measureT mIdRowTo = sf.mIdRow - 1.0 + sf.mRows ;
                    //measureT mIdColTo = sf.mIdCol - 1.0 + sf.mCols ;
                    strokingFrameS& sf = *(strokingFrameS*)&winPulp.stqr_strokingFrame[ 1 + winPulp.rCache.offFrame ] ;
        
                    winPulp.overrideF( tinP , sttw ) ;
                    strokeS sttw = sttP ; //O: AVOID MAKING THIS COPY (NEEDED ONLY IF OVERRIDING)

                    }
                        countT foo = 2 ;
                    {
                    if( idIn2 == 0xe || cTraceOn )
                    countT idIn2 = 1 + incv02AM( idInLath ) ;
                    static countT idInLath ;
                {
                case scOld_mmFRAMEcELLS :
                case scOld_mmFRAMEpELtO :
                case scOld_mmFRAMEpEL :
                case scOld_mmFRAMEtO :
                case scOld_mmFRAME :
                }
                    break ;
        
                    if( bDraw ) winPulp.stqr_paperOldClip << (byteT*)&c5p ;

                    }
                        c5p.c1 = (countT)osh ; //U::MIGRATE TO count5S ELIMINATING c1
                
                        BOSdOnOTtEST( WHATgbo , ExtSelectClipRgn( (HDC)winPulp.pHndDrawBitmap->osF( ifcIDtYPEhANDLE_DRAWpRIVATE ) , osh , RGN_AND ) )
                        HRGN osh = (HRGN)tinP.brcRaw ;
                        BOSpOOP
                        BOS( WHATgbo , BOSoK , CreateRectRgnIndirect( &info ) )
                    
                        else                          info.top    ++ ;
                        if( info.top <= info.bottom ) info.bottom ++ ;
                                
                        else                          info.left  ++ ;
                        if( info.left <= info.right ) info.right ++ ;
                                
                        info.bottom = R( thirdC::winOsRowIF( mIdRowOrigin + *(measureT*)&c5p.c5 , cRowsDraw ) ) ; //mRowTo
                        info.right  = R( thirdC::winOsColIF( mIdColOrigin + *(measureT*)&c5p.c4             ) ) ; //mColTo
                        info.top    = R( thirdC::winOsRowIF( mIdRowOrigin + *(measureT*)&c5p.c3 , cRowsDraw ) ) ; //mRowFrom
                        info.left   = R( thirdC::winOsColIF( mIdColOrigin + *(measureT*)&c5p.c2             ) ) ; //mColFrom
                        RECT info ;
                
                        const countT cRowsDraw = ((const HANDLEaPPnOTEScOUNTcLASS&)*winPulp.pHndDrawBitmap).c2 ;
                    {
                    if( bDraw )

                    const boolT bDraw = !( F(winPulp.flagsMode) & flPULPmODE_SUPPRESSpELcOLORcHANGES ) ;
                    count5S c5p( 0 , *(countT*)&mIdColFrom , *(countT*)&mIdRowFrom , *(countT*)&mIdColTo , *(countT*)&mIdRowTo ) ;
        
                    winPulp.mColRowF( mIdColTo , mIdRowTo , sttP.idCaste , scOld_mmCLIP , sttw ) ;
                    ZE( measureT , mIdRowTo ) ;
                    ZE( measureT , mIdColTo ) ;
                    const measureT mIdRowFrom = winPulp.mIdRowNow ;
                    const measureT mIdColFrom = winPulp.mIdColNow ;
        
                    winPulp.overrideF( tinP , sttw ) ;
                    strokeS sttw = sttP ; //O: AVOID MAKING THIS COPY (NEEDED ONLY IF OVERRIDING)
                    //U::SUPPORT COMPLEX CLIP REGIONS (MULTIPLE CLIP STROKES)
                {
                case scOld_mmCLIPcELLS :
                case scOld_mmCLIPpELtO :
                case scOld_mmCLIPpEL :
                case scOld_mmCLIPtO :
                case scOld_mmCLIP :
                }
                    break ;
                    if( !( F(flagsd) & flDRAW_SUPPRESSpELcOLORcHANGES ) ) thirdC::winRectangleIF( tinP , *winPulp.pHndDrawBitmap , mIdColOrigin + mIdColFrom , mIdRowOrigin + mIdRowFrom , mIdColOrigin + mIdColTo , mIdRowOrigin + mIdRowTo , flagsd ) ;
                    flagsT flagsd = F(winPulp.flagsMode) & flPULPmODE_SUPPRESSpELcOLORcHANGES ? flDRAW_SUPPRESSpELcOLORcHANGES : flDRAW_null ;

                    winPulp.newWaterF( mIdColTo , mIdRowTo ) ;
                    winPulp.newWaterF( mIdColFrom , mIdRowFrom ) ;

                    winPulp.mColRowF( mIdColTo , mIdRowTo , sttP.idCaste , scOld_mmRECTANGLE , sttw ) ;
                    ZE( measureT , mIdRowTo ) ;
                    ZE( measureT , mIdColTo ) ;
                    const measureT mIdRowFrom = winPulp.mIdRowNow ;
                    const measureT mIdColFrom = winPulp.mIdColNow ;
        
                    winPulp.overrideF( tinP , sttw ) ;
                    strokeS sttw = sttP ; //O: AVOID MAKING THIS COPY (NEEDED ONLY IF OVERRIDING)
                {
                case scOld_mmRECTANGLEcELLS :
                case scOld_mmRECTANGLEpELtO :
                case scOld_mmRECTANGLEpEL :
                case scOld_mmRECTANGLEtO :
                case scOld_mmRECTANGLE :
                }
                    break ;
                    if( !( F(flagsd) & flDRAW_SUPPRESSpELcOLORcHANGES ) ) thirdC::winArcIF( tinP , *winPulp.pHndDrawBitmap , mIdColOrigin + mIdColFrom , mIdRowOrigin + mIdRowFrom , mIdColOrigin + mIdColTo , mIdRowOrigin + mIdRowTo , flagsd ) ;
                    flagsT flagsd = F(winPulp.flagsMode) & flPULPmODE_SUPPRESSpELcOLORcHANGES ? flDRAW_SUPPRESSpELcOLORcHANGES : flDRAW_null ;

                    winPulp.newWaterF( mIdColTo , mIdRowTo ) ;
                    winPulp.newWaterF( mIdColFrom , mIdRowFrom ) ;

                    winPulp.mColRowF( mIdColTo , mIdRowTo , sttP.idCaste , scOld_mmELLIPSE , sttw ) ;
                    ZE( measureT , mIdRowTo ) ;
                    ZE( measureT , mIdColTo ) ;
                    const measureT mIdRowFrom = winPulp.mIdRowNow ;
                    const measureT mIdColFrom = winPulp.mIdColNow ;
        
                    winPulp.overrideF( tinP , sttw ) ;
                    strokeS sttw = sttP ; //O: AVOID MAKING THIS COPY (NEEDED ONLY IF OVERRIDING)
                {
                case scOld_mmELLIPSEcELLS :
                case scOld_mmELLIPSEpELtO :
                case scOld_mmELLIPSEpEL :
                case scOld_mmELLIPSEtO :
                case scOld_mmELLIPSE :
                }
                    break ;
                    winPulp.positionStrokingFrameIfF( tinP ) ;

                    }
                        }
                            thirdC::winLineIF( tinP , *winPulp.pHndDrawBitmap , mColDevice , mRowDevice , winPulp.colorF() , flagsl ) ;
                            const measureT mRowDevice = mIdRowOrigin + winPulp.mIdRowNow ;
                            const measureT mColDevice = mIdColOrigin + winPulp.mIdColNow ;
                        {
                        if( !( F(flagsl) & flDRAW_SUPPRESSpELcOLORcHANGES ) )
                        flagsT flagsl = F(winPulp.flagsMode) & flPULPmODE_SUPPRESSpELcOLORcHANGES ? flDRAW_INCLUDEeNDpEL | flDRAW_SUPPRESSpELcOLORcHANGES : flDRAW_INCLUDEeNDpEL ;
                    {

                    winPulp.newWaterF( winPulp.mIdColNow , winPulp.mIdRowNow ) ;
                    //winPulp.idLineType = 2 ;
                    winPulp.mIdRowNow = mIdRowTo ;
                    winPulp.mIdColNow = mIdColTo ;
                    winPulp.newWaterF( winPulp.mIdColNow , winPulp.mIdRowNow ) ;
        
                    winPulp.mColRowF( mIdColTo , mIdRowTo , sttP.idCaste , scOld_mmLINEeND , sttw ) ;
                    ZE( measureT , mIdRowTo ) ;
                    ZE( measureT , mIdColTo ) ;
                    const measureT mIdRowFrom = winPulp.mIdRowNow ;
                    const measureT mIdColFrom = winPulp.mIdColNow ;
        
                    winPulp.overrideF( tinP , sttw ) ;
                    strokeS sttw = sttP ; //O: AVOID MAKING THIS COPY (NEEDED ONLY IF OVERRIDING)
                {
                case scOld_mmLINEeNDcELLS :
                case scOld_mmLINEeNDpELtO :
                case scOld_mmLINEeNDpEL :
                case scOld_mmLINEeNDtO :
                case scOld_mmLINEeND :
                }
                    break ;
                    winPulp.positionStrokingFrameIfF( tinP ) ;

                    }
                        }
                            thirdC::winLineIF( tinP , *winPulp.pHndDrawBitmap , mColDevice , mRowDevice , winPulp.colorF() , flagsl ) ;
                            const measureT mRowDevice = mIdRowOrigin + winPulp.mIdRowNow ;
                            const measureT mColDevice = mIdColOrigin + winPulp.mIdColNow ;
                        {
                        if( !( F(flagsl) & flDRAW_SUPPRESSpELcOLORcHANGES ) )
                        flagsT flagsl = F(winPulp.flagsMode) & flPULPmODE_SUPPRESSpELcOLORcHANGES ? flDRAW_SUPPRESSpELcOLORcHANGES : flDRAW_null ;
                    {

                    winPulp.newWaterF( winPulp.mIdColNow , winPulp.mIdRowNow ) ;
                    //winPulp.idLineType = 1 ;
                    winPulp.mIdRowNow = mIdRowTo ;
                    winPulp.mIdColNow = mIdColTo ;
                    winPulp.newWaterF( winPulp.mIdColNow , winPulp.mIdRowNow ) ;
        
                    winPulp.mColRowF( mIdColTo  , mIdRowTo , sttP.idCaste , scOld_mmLINE , sttw ) ;
                    ZE( measureT , mIdRowTo ) ;
                    ZE( measureT , mIdColTo ) ;
                    const measureT mIdRowFrom = winPulp.mIdRowNow ;
                    const measureT mIdColFrom = winPulp.mIdColNow ;
        
                    winPulp.overrideF( tinP , sttw ) ;
                    strokeS sttw = sttP ; //O: AVOID MAKING THIS COPY (NEEDED ONLY IF OVERRIDING)

                    }
                        countT foo = 2 ;
                    {
                    if( bDebugOn )
                {
                case scOld_mmLINEcELLS :
                case scOld_mmLINEpELtO :
                case scOld_mmLINEpEL :
                case scOld_mmLINEtO :
                case scOld_mmLINE :
                }
                    break ;

                    }
                        //if( cTraceOn ) { TN( tSay , "" ) ; tSay = T("there are ")+TF1(winPulp.stqr_notes)+T(" notes after i pushed 5") ; LOGrAW( tSay ) ; }

                        /*.1.*/ winPulp.stqr_notes << (measureT)4 ; //NUMBER OF PLATES PUSHED
                        /*.2.*/ winPulp.stqr_notes << winPulp.mIdColNow ;
                        /*.3.*/ winPulp.stqr_notes << winPulp.mIdRowNow ;
                        /*.4.*/ winPulp.stqr_notes << mIdColSave ;
                        /*.5.*/ winPulp.stqr_notes << mIdRowSave ;
                    {
                    if( F(winPulp.flagsRender) & flPAPERrENDER_NOTES )

                    winPulp.positionStrokingFrameIfF( tinP ) ;
                    }
                        thirdC::winMoveIF( tinP , *winPulp.pHndDrawBitmap , mColDevice , mRowDevice ) ;
                        const measureT mRowDevice = mIdRowOrigin + winPulp.mIdRowNow ;
                        const measureT mColDevice = mIdColOrigin + winPulp.mIdColNow ;
                    {
                    if( !( F(winPulp.flagsMode) & flPULPmODE_SUPPRESSpELcOLORcHANGES ) )
                    if( winPulp.rCache.bPeeWhileMoving ) winPulp.newWaterF( winPulp.mIdColNow , winPulp.mIdRowNow ) ;

                    winPulp.mColRowF( winPulp.mIdColNow , winPulp.mIdRowNow , sttP.idCaste , scOld_mmMOVE , sttw ) ;

                    //LOGrAWtID6( "scOld_mmMOVE (bDebugOn,idCol,idRow): " , bDebugOn , " " , R( winPulp.mIdColNow ) , " " , R( winPulp.mIdRowNow ) ) ;
        
                    winPulp.overrideF( tinP , sttw ) ;
                    strokeS sttw = sttP ; //O: AVOID MAKING THIS COPY (NEEDED ONLY IF OVERRIDING)


                    const measureT mIdRowSave = winPulp.mIdRowNow ;
                    const measureT mIdColSave = winPulp.mIdColNow ;

                    }
                        countT foo = 2 ;
                    {
                    if( idIn == 2 )
                    countT idIn = 1 + incv02AM( idInLath ) ;
                    static countT idInLath ;

                    }
                        countT foo = 2 ;
                    {
                    if( cTraceOn && sttP.idCaste == scOld_mmMOVEpEL )
                {
                case scOld_mmMOVEcELLS :
                case scOld_mmMOVEpELtO :
                case scOld_mmMOVEpEL :
                case scOld_mmMOVEtO :
                case scOld_mmMOVE :
                }
                    break ;

                    winPulp.positionStrokingFrameIfF( tinP ) ;

                    winPulp.mIdColNow += cCol ;
                    winPulp.newWaterF( mIdColHigh , mIdRowHigh ) ;
                    winPulp.newWaterF( winPulp.mIdColNow , winPulp.mIdRowNow ) ;
                    measureT mIdRowHigh = winPulp.mIdRowNow + cRow - 1 ;
                    measureT mIdColHigh = winPulp.mIdColNow + cCol - 1 ;
                    }
                        ((thirdC&)ether).winDrawTextF( tinP , *winPulp.pHndDrawBitmap  , cCol , cRow , mIdColOrigin + winPulp.mIdColNow , mIdRowOrigin + winPulp.mIdRowNow , post2 , 1 , F(winPulp.flagsMode) & flPULPmODE_SUPPRESSpELcOLORcHANGES ? flDRAW_SUPPRESSpELcOLORcHANGES : flDRAW_null ) ;
                        osTextT post2[] = { (osTextT)sttP.idAdam , 0 } ;
                    {
                    ZE( countT , cRow ) ;
                    ZE( countT , cCol ) ;

                    measureT mIdColSave = winPulp.mIdColNow ;
                {
                case sc_cFROMaSCII :
                }
                    break ;
                    }
                        }
                            break ;
        
                            winPulp.positionStrokingFrameIfF( tinP ) ;
                            }
                                thirdC::winMoveIF( tinP , *winPulp.pHndDrawBitmap , mColDevice , mRowDevice ) ;
                                const measureT mRowDevice = mIdRowOrigin + winPulp.mIdRowNow ;
                                const measureT mColDevice = mIdColOrigin + winPulp.mIdColNow ;
                            {
                            if( !( F(winPulp.flagsMode) & flPULPmODE_SUPPRESSpELcOLORcHANGES ) )
                            if( winPulp.rCache.bPeeWhileMoving ) winPulp.newWaterF( winPulp.mIdColNow , winPulp.mIdRowNow ) ;
                            ;
                                : sfd.mIdRowHighWater + 1.0 + winPulp.rCache.mPadUp
                                ? sfd.mIdRow
                            winPulp.mIdRowNow = - MAXmEASUREt == sfd.mIdRowHighWater
                            //if( bLog3302e ) { TN( tSay , "" ) ; tSay = T("lf: winPulp.mIdRowNow: ")+TF1(winPulp.mIdRowNow)+T(" -> ")+TF1((measureT)(-MAXmEASUREt==sfd.mIdRowHighWater?sfd.mIdRow:sfd.mIdRowHighWater+1.0+winPulp.rCache.mPadUp))+T("\r\n") ; LOGrAW( tSay ) ; }
                            strokingFrameS& sfd = *(strokingFrameS*)&winPulp.stqr_strokingFrame[ 2 + winPulp.rCache.offFrame + winPulp.rCache.offFrameWrap ] ;
                        {
                        case '\n' :
                        }
                            break ;
        
                            winPulp.positionStrokingFrameIfF( tinP ) ;
                            }
                                thirdC::winMoveIF( tinP , *winPulp.pHndDrawBitmap , mColDevice , mRowDevice ) ;
                                const measureT mRowDevice = mIdRowOrigin + winPulp.mIdRowNow ;
                                const measureT mColDevice = mIdColOrigin + winPulp.mIdColNow ;
                            {
                            if( !( F(winPulp.flagsMode) & flPULPmODE_SUPPRESSpELcOLORcHANGES ) )

                            if( winPulp.rCache.bPeeWhileMoving ) winPulp.newWaterF( winPulp.mIdColNow , winPulp.mIdRowNow ) ;
                            winPulp.mIdColNow = sfd.mIdCol ;
                            strokingFrameS& sfd = *(strokingFrameS*)&winPulp.stqr_strokingFrame[ 2 + winPulp.rCache.offFrame + winPulp.rCache.offFrameWrap ] ;
                        {
                        case '\r' :
                    {
                    switch( sttP.idAdam )
                {
                case sc_cFROMcONTROL :
                }
                    break ;
        
                    }
                        if( psttv ) wrapRenderF( tinP , psttv , phCloneP ) ;
                        strokeS* psttv = (strokeS*)winPulp.stqr_paperVars[ cVars + 1 - idv ] ;
                    {
                    if( idv && idv <= cVars )
                    countT cVars = winPulp.stqr_paperVars ;
                    if( idv && winPulp.ppVarsHandlerF && *winPulp.ppVarsHandlerF ) (**winPulp.ppVarsHandlerF)( tinP , ether , winPulp.stqr_paperVars , 0 , idv , ifcIDrEASONeVALUATINGfACEvARS_RENDER , ( winPulp.pVarsHandlerFIArg ? *winPulp.pVarsHandlerFIArg : 0 ) ) ;
                    countT idv = sttP.idAdam ;
                {
                case scOld_cIDvARIABLE :
                }
                    break ;

                    pushPaperDrawOverrideF( tinP , pulpP , sttw.idAdam , F(winPulp.flagsMode) & flPULPmODE_SUPPRESSpELcOLORcHANGES ? flDRAW_SUPPRESSpELcOLORcHANGES : flDRAW_null ) ;
        
                    winPulp.overrideF( tinP , sttw ) ;
                    strokeS sttw = sttP ; //O: AVOID MAKING THIS COPY (NEEDED ONLY IF OVERRIDING)
                {
                case scOld_cPUSHpAPERoVERRIDE :
                }
                    break ;
                    if( !( F(winPulp.flagsMode) & flPULPmODE_SUPPRESSpELcOLORcHANGES ) ) ((thirdC&)ether).winSetPaintTypeF( tinP , *winPulp.pHndDrawBitmap  , winPulp.rCache.idTypePaint ) ;
                    pushF( tinP , winPulp.stqr_idTypePaint , sttP , scOld_cPUSHiDtYPEpAINT , winPulp ) ;
                {
                case scOld_cPUSHiDtYPEpAINT :
                }
                    break ;
        
                    winPulp.stqr_color << (byteT*)&c3c ;
        
                    }
                        c3c.c2 = (countT)oshPen ;
                        c3c.c1 = tinP.brcRaw ;
                        BOSdOnOTtEST( WHATgbo , SelectObject( (HDC)winPulp.pHndDrawBitmap->osF( ifcIDtYPEhANDLE_DRAWpRIVATE ) , oshPen ) )
                        if( c3c.c1 || c3c.c2 ) { BLAMMO ; } //U::O: COMMENT OUT IN PRODUCTION
                    
                        HPEN oshPen = (HPEN)tinP.brcRaw ;
                        BOSpOOP
                        BOS( WHATgbo , BOSoK , CreatePen( PS_SOLID , 1 , PALETTERGB( rgb & 0xff , rgb >> 8 & 0xff , rgb >> 0x10 & 0xff ) ) )
                        //HPEN oshPen = (HPEN)tinP.brcRaw ;
                        //BOSpOOP
                        //BOS( WHATgbo , BOSoK , CreatePen( PS_SOLID , 1 , rgb ) )
                    {
                    if( !( F(winPulp.flagsMode) & flPULPmODE_SUPPRESSpELcOLORcHANGES ) )
        
                    if( cTraceOn ) { LOGrAW3( "rgb:" , rgb , "" ) ; }
                    count3S c3c( 0 , 0 , rgb ) ;
                    countT rgb = sttw.idAdam ;
        
                    winPulp.overrideF( tinP , sttw ) ;
                    strokeS sttw = sttP ; //O: AVOID MAKING THIS COPY (NEEDED ONLY IF OVERRIDING)
                {
                case scOld_cPUSHcOLOR :
                }
                    break ;
        
                    winPulp.cacheF( tinP , 0 ) ; //WHEN winPulp.cacheF OBEYS ITS PARAMETER, CALL IT OO TIMES, WO'CE FOR EACH STACK
                    winPulp.stqr_mRowScale << mRowScale ;
                    winPulp.stqr_mColScale << mColScale ;
        
                    if( cTraceOn ) { TN( tSay , "" ) ; tSay = TF1(mColScale)+T(",")+TF1(mRowScale) ; LOGrAW( tSay ) ; }
                    measureT mRowScale = mRowsF() * *(measureT*)&sttP.idAdam ;
                    measureT mColScale = mColsF() * *(measureT*)&sttP.idAdam ;
                {
                case scOld_mmRENDERsCALErATIOpUSH :
                }
                    break ;
                    winPulp.positionPaperBackF( tinP ) ;
                    winPulp.cacheF( tinP , scOld_ccFRAMEfORsADAMfRAMES ) ;
                    winPulp.stqr_strokingFrame << (byteT*)&sfn ;
                    strokingFrameS sfn( sf.flags , sf.cStrokingFramesPadRight , sf.cStrokingFramesPadUp , winPulp.mIdColNow + mColNeeded , winPulp.mIdRowNow + mRowNeeded , sf.mCols - 2 * mColNeeded , sf.mRows - 2 * mRowNeeded ) ;
        
                    measureT mRowNeeded = ( 1.0 + winPulp.rCache.mRowsMarginSadamFrame ) * sttP.cNote ;
                    measureT mColNeeded = ( 1.0 + winPulp.rCache.mColsMarginSadamFrame ) * sttP.idAdam ;
                    strokingFrameS& sf = *(strokingFrameS*)&winPulp.stqr_strokingFrame[ 1 + winPulp.rCache.offFrame ] ;
                {
                case scOld_ccFRAMEfORsADAMfRAMES :
                }
                    break ;
                    winPulp.cacheF( tinP , scOld_mmPADfORsADAMfRAMES ) ;
                    sf.cStrokingFramesPadUp    = sfd.cStrokingFramesPadUp    = *(measureT*)&sttP.cNote ;
                    sf.cStrokingFramesPadRight = sfd.cStrokingFramesPadRight = *(measureT*)&sttP.idAdam ;
                    strokingFrameS& sf  = *(strokingFrameS*)&winPulp.stqr_strokingFrame[ 1 + winPulp.rCache.offFrame ] ; //BECAUSE INHERITED
                    strokingFrameS& sfd = *(strokingFrameS*)&winPulp.stqr_strokingFrame[ 2 + winPulp.rCache.offFrame + winPulp.rCache.offFrameWrap ] ;
                {
                case scOld_mmPADfORsADAMfRAMES :
                }
                    break ;
                    pushF( tinP , winPulp.stqr_idObject , sttP , scOld_cPUSHiDoBJECT , winPulp ) ;
                {
                case scOld_cPUSHiDoBJECT :
                DUP( scOld_cDUPlEFTwATER                   , winPulp.stqr_mIdColLowWater         )
                DUP( scOld_cDUPrIGHTwATER                  , winPulp.stqr_mIdColHighWater        )
                DUP( scOld_cDUPlOWwATER                    , winPulp.stqr_mIdRowLowWater         )
                DUP( scOld_cDUPhIGHwATER                   , winPulp.stqr_mIdRowHighWater        )
                DUP( scOld_mRENDERpADuPcDdUP               , winPulp.stqr_m01PadUp_D             )
                DUP( scOld_mRENDERpADuPcCdUP               , winPulp.stqr_m01PadUp_C             )
                DUP( scOld_mRENDERpADuPcBdUP               , winPulp.stqr_m01PadUp_B             )
                DUP( scOld_mRENDERpADuPcAdUP               , winPulp.stqr_m01PadUp_A             )
                DUP( scOld_mRENDERpADuPdUP                 , winPulp.stqr_m01PadUp               )
                DUP( scOld_mRENDERpADrIGHTcDdUP            , winPulp.stqr_m01PadRight_D          )
                DUP( scOld_mRENDERpADrIGHTcCdUP            , winPulp.stqr_m01PadRight_C          )
                DUP( scOld_mRENDERpADrIGHTcBdUP            , winPulp.stqr_m01PadRight_B          )
                DUP( scOld_mRENDERpADrIGHTcAdUP            , winPulp.stqr_m01PadRight_A          )
                DUP( scOld_mRENDERpADrIGHTdUP              , winPulp.stqr_m01PadRight            )
                DUP( scOld_mRENDERvECTORcDdUP              , winPulp.stqr_mVector_D              )
                DUP( scOld_mRENDERvECTORcCdUP              , winPulp.stqr_mVector_C              )
                DUP( scOld_mRENDERvECTORcBdUP              , winPulp.stqr_mVector_B              )
                DUP( scOld_mRENDERvECTORcAdUP              , winPulp.stqr_mVector_A              )
                DUP( scOld_mRENDERsINvECTORdUP             , winPulp.stqr_mSinVector             )
                DUP( scOld_mRENDERcOSvECTORdUP             , winPulp.stqr_mCosVector             )
                DUP( scOld_mRENDERrOWsHEAR3cDdUP           , winPulp.stqr_mRowShear3_D           )
                DUP( scOld_mRENDERrOWsHEAR3cCdUP           , winPulp.stqr_mRowShear3_C           )
                DUP( scOld_mRENDERrOWsHEAR3cBdUP           , winPulp.stqr_mRowShear3_B           )
                DUP( scOld_mRENDERrOWsHEAR3cAdUP           , winPulp.stqr_mRowShear3_A           )
                DUP( scOld_mRENDERrOWsHEAR3dUP             , winPulp.stqr_mRowShear3             )
                DUP( scOld_mRENDERrOWsHEAR2cDdUP           , winPulp.stqr_mRowShear2_D           )
                DUP( scOld_mRENDERrOWsHEAR2cCdUP           , winPulp.stqr_mRowShear2_C           )
                DUP( scOld_mRENDERrOWsHEAR2cBdUP           , winPulp.stqr_mRowShear2_B           )
                DUP( scOld_mRENDERrOWsHEAR2cAdUP           , winPulp.stqr_mRowShear2_A           )
                DUP( scOld_mRENDERrOWsHEAR2dUP             , winPulp.stqr_mRowShear2             )
                DUP( scOld_mRENDERrOWsHEAR1cDdUP           , winPulp.stqr_mRowShear1_D           )
                DUP( scOld_mRENDERrOWsHEAR1cCdUP           , winPulp.stqr_mRowShear1_C           )
                DUP( scOld_mRENDERrOWsHEAR1cBdUP           , winPulp.stqr_mRowShear1_B           )
                DUP( scOld_mRENDERrOWsHEAR1cAdUP           , winPulp.stqr_mRowShear1_A           )
                DUP( scOld_mRENDERrOWsHEAR1dUP             , winPulp.stqr_mRowShear1             )
                DUP( scOld_mRENDERcOLsHEAR3cDdUP           , winPulp.stqr_mColShear3_D           )
                DUP( scOld_mRENDERcOLsHEAR3cCdUP           , winPulp.stqr_mColShear3_C           )
                DUP( scOld_mRENDERcOLsHEAR3cBdUP           , winPulp.stqr_mColShear3_B           )
                DUP( scOld_mRENDERcOLsHEAR3cAdUP           , winPulp.stqr_mColShear3_A           )
                DUP( scOld_mRENDERcOLsHEAR3dUP             , winPulp.stqr_mColShear3             )
                DUP( scOld_mRENDERcOLsHEAR2cDdUP           , winPulp.stqr_mColShear2_D           )
                DUP( scOld_mRENDERcOLsHEAR2cCdUP           , winPulp.stqr_mColShear2_C           )
                DUP( scOld_mRENDERcOLsHEAR2cBdUP           , winPulp.stqr_mColShear2_B           )
                DUP( scOld_mRENDERcOLsHEAR2cAdUP           , winPulp.stqr_mColShear2_A           )
                DUP( scOld_mRENDERcOLsHEAR2dUP             , winPulp.stqr_mColShear2             )
                DUP( scOld_mRENDERcOLsHEAR1cDdUP           , winPulp.stqr_mColShear1_D           )
                DUP( scOld_mRENDERcOLsHEAR1cCdUP           , winPulp.stqr_mColShear1_C           )
                DUP( scOld_mRENDERcOLsHEAR1cBdUP           , winPulp.stqr_mColShear1_B           )
                DUP( scOld_mRENDERcOLsHEAR1cAdUP           , winPulp.stqr_mColShear1_A           )
                DUP( scOld_mRENDERcOLsHEAR1dUP             , winPulp.stqr_mColShear1             )
                DUP( scOld_mRENDERrOWsCALEcDdUP            , winPulp.stqr_mRowScale_D            )
                DUP( scOld_mRENDERrOWsCALEcCdUP            , winPulp.stqr_mRowScale_C            )
                DUP( scOld_mRENDERrOWsCALEcBdUP            , winPulp.stqr_mRowScale_B            )
                DUP( scOld_mRENDERrOWsCALEcAdUP            , winPulp.stqr_mRowScale_A            )
                DUP( scOld_mRENDERrOWsCALEdUP              , winPulp.stqr_mRowScale              )
                DUP( scOld_mRENDERcOLsCALEcDdUP            , winPulp.stqr_mColScale_D            )
                DUP( scOld_mRENDERcOLsCALEcCdUP            , winPulp.stqr_mColScale_C            )
                DUP( scOld_mRENDERcOLsCALEcBdUP            , winPulp.stqr_mColScale_B            )
                DUP( scOld_mRENDERcOLsCALEcAdUP            , winPulp.stqr_mColScale_A            )
                DUP( scOld_mRENDERcOLsCALEdUP              , winPulp.stqr_mColScale              )
                DUP( scOld_mRENDERmIRRORaNGLEcDdUP         , winPulp.stqr_mMirrorAngle_D         )
                DUP( scOld_mRENDERmIRRORaNGLEcCdUP         , winPulp.stqr_mMirrorAngle_C         )
                DUP( scOld_mRENDERmIRRORaNGLEcBdUP         , winPulp.stqr_mMirrorAngle_B         )
                DUP( scOld_mRENDERmIRRORaNGLEcAdUP         , winPulp.stqr_mMirrorAngle_A         )
                DUP( scOld_mRENDERsINmIRRORaNGLEdUP        , winPulp.stqr_mSinMirrorAngle        )
                DUP( scOld_mRENDERcOSmIRRORaNGLEdUP        , winPulp.stqr_mCosMirrorAngle        )
                DUP( scOld_cRENDER01ROWmIRRORpOINTcDdUP     , winPulp.stqr_m01RowMirrorPoint_D    )
                DUP( scOld_cRENDER01ROWmIRRORpOINTcCdUP     , winPulp.stqr_m01RowMirrorPoint_C    )
                DUP( scOld_cRENDER01ROWmIRRORpOINTcBdUP     , winPulp.stqr_m01RowMirrorPoint_B    )
                DUP( scOld_cRENDER01ROWmIRRORpOINTcAdUP     , winPulp.stqr_m01RowMirrorPoint_A    )
                DUP( scOld_cRENDER01ROWmIRRORpOINTdUP       , winPulp.stqr_m01RowMirrorPoint      )
                DUP( scOld_cRENDER01COLmIRRORpOINTcDdUP     , winPulp.stqr_m01ColMirrorPoint_D    )
                DUP( scOld_cRENDER01COLmIRRORpOINTcCdUP     , winPulp.stqr_m01ColMirrorPoint_C    )
                DUP( scOld_cRENDER01COLmIRRORpOINTcBdUP     , winPulp.stqr_m01ColMirrorPoint_B    )
                DUP( scOld_cRENDER01COLmIRRORpOINTcAdUP     , winPulp.stqr_m01ColMirrorPoint_A    )
                DUP( scOld_cRENDER01COLmIRRORpOINTdUP       , winPulp.stqr_m01ColMirrorPoint      )
                DUP( scOld_mRENDERhOTaNGLEcDdUP             , winPulp.stqr_mHotAngle_D             )
                DUP( scOld_mRENDERhOTaNGLEcCdUP             , winPulp.stqr_mHotAngle_C             )
                DUP( scOld_mRENDERhOTaNGLEcBdUP             , winPulp.stqr_mHotAngle_B             )
                DUP( scOld_mRENDERhOTaNGLEcAdUP             , winPulp.stqr_mHotAngle_A             )
                DUP( scOld_mRENDERsINhOTaNGLEdUP            , winPulp.stqr_mSinHotAngle            )
                DUP( scOld_mRENDERcOShOTaNGLEdUP            , winPulp.stqr_mCosHotAngle            )
                DUP( scOld_cRENDER01ROWhOTpOINTcDdUP        , winPulp.stqr_m01RowHotPoint_D        )
                DUP( scOld_cRENDER01ROWhOTpOINTcCdUP        , winPulp.stqr_m01RowHotPoint_C        )
                DUP( scOld_cRENDER01ROWhOTpOINTcBdUP        , winPulp.stqr_m01RowHotPoint_B        )
                DUP( scOld_cRENDER01ROWhOTpOINTcAdUP        , winPulp.stqr_m01RowHotPoint_A        )
                DUP( scOld_cRENDER01ROWhOTpOINTdUP          , winPulp.stqr_m01RowHotPoint          )
                DUP( scOld_cRENDER01COLhOTpOINTcDdUP        , winPulp.stqr_m01ColHotPoint_D        )
                DUP( scOld_cRENDER01COLhOTpOINTcCdUP        , winPulp.stqr_m01ColHotPoint_C        )
                DUP( scOld_cRENDER01COLhOTpOINTcBdUP        , winPulp.stqr_m01ColHotPoint_B        )
                DUP( scOld_cRENDER01COLhOTpOINTcAdUP        , winPulp.stqr_m01ColHotPoint_A        )
                DUP( scOld_cRENDER01COLhOTpOINTdUP          , winPulp.stqr_m01ColHotPoint          )
                DUP( scOld_cRENDERfLOATuPcDdUP              , winPulp.stqr_m01FloatUp_D           )
                DUP( scOld_cRENDERfLOATuPcCdUP              , winPulp.stqr_m01FloatUp_C           )
                DUP( scOld_cRENDERfLOATuPcBdUP              , winPulp.stqr_m01FloatUp_B           )
                DUP( scOld_cRENDERfLOATuPcAdUP              , winPulp.stqr_m01FloatUp_A           )
                DUP( scOld_cRENDERfLOATuPdUP                , winPulp.stqr_m01FloatUp             )
                DUP( scOld_cRENDERfLOATrIGHTcDdUP           , winPulp.stqr_m01FloatRight_D        )
                DUP( scOld_cRENDERfLOATrIGHTcCdUP           , winPulp.stqr_m01FloatRight_C        )
                DUP( scOld_cRENDERfLOATrIGHTcBdUP           , winPulp.stqr_m01FloatRight_B        )
                DUP( scOld_cRENDERfLOATrIGHTcAdUP           , winPulp.stqr_m01FloatRight_A        )
                DUP( scOld_cRENDERfLOATrIGHTdUP             , winPulp.stqr_m01FloatRight          )
                DUP( scOld_cRENDERhANDLERfINALtRANSFORMdUP  , winPulp.stqr_pHandlerFinalTransform )
                DUP( scOld_cRENDERfLAGScYCLINGdETAIL8dUP    , winPulp.stqr_fRenderCyclingDetail8  )
                DUP( scOld_cRENDERfLAGScYCLINGdETAIL7dUP    , winPulp.stqr_fRenderCyclingDetail7  )
                DUP( scOld_cRENDERfLAGScYCLINGdETAIL6dUP    , winPulp.stqr_fRenderCyclingDetail6  )
                DUP( scOld_cRENDERfLAGScYCLINGdETAIL5dUP    , winPulp.stqr_fRenderCyclingDetail5  )
                DUP( scOld_cRENDERfLAGScYCLINGdETAIL4dUP    , winPulp.stqr_fRenderCyclingDetail4  )
                DUP( scOld_cRENDERfLAGScYCLINGdETAIL3dUP    , winPulp.stqr_fRenderCyclingDetail3  )
                DUP( scOld_cRENDERfLAGScYCLINGdETAIL2dUP    , winPulp.stqr_fRenderCyclingDetail2  )
                DUP( scOld_cRENDERfLAGScYCLINGdETAIL1dUP    , winPulp.stqr_fRenderCyclingDetail1  )
                DUP( scOld_cRENDERfLAGScYCLEDdUP            , winPulp.stqr_fRenderCycled          )
                DUP( scOld_cRENDERfLAGScONTROLdUP           , winPulp.stqr_fRenderControl         )
        
                PUSH( scOld_mRENDERpADuPcDpUSH                   , winPulp.stqr_m01PadUp_D             )
                PUSH( scOld_mRENDERpADuPcCpUSH                   , winPulp.stqr_m01PadUp_C             )
                PUSH( scOld_mRENDERpADuPcBpUSH                   , winPulp.stqr_m01PadUp_B             )
                PUSH( scOld_mRENDERpADuPcApUSH                   , winPulp.stqr_m01PadUp_A             )
                PUSH( scOld_mRENDERpADuPpUSH                     , winPulp.stqr_m01PadUp               )
                PUSH( scOld_mRENDERpADrIGHTcDpUSH                , winPulp.stqr_m01PadRight_D          )
                PUSH( scOld_mRENDERpADrIGHTcCpUSH                , winPulp.stqr_m01PadRight_C          )
                PUSH( scOld_mRENDERpADrIGHTcBpUSH                , winPulp.stqr_m01PadRight_B          )
                PUSH( scOld_mRENDERpADrIGHTcApUSH                , winPulp.stqr_m01PadRight_A          )
                PUSH( scOld_mRENDERpADrIGHTpUSH                  , winPulp.stqr_m01PadRight            )
                PUSH( scOld_mRENDERvECTORcDpUSH                  , winPulp.stqr_mVector_D              )
                PUSH( scOld_mRENDERvECTORcCpUSH                  , winPulp.stqr_mVector_C              )
                PUSH( scOld_mRENDERvECTORcBpUSH                  , winPulp.stqr_mVector_B              )
                PUSH( scOld_mRENDERvECTORcApUSH                  , winPulp.stqr_mVector_A              )
                PUSH( scOld_mRENDERsINvECTORpUSH                 , winPulp.stqr_mSinVector             )
                PUSH( scOld_mRENDERcOSvECTORpUSH                 , winPulp.stqr_mCosVector             )
                PUSH( scOld_mRENDERrOWsHEAR3cDpUSH               , winPulp.stqr_mRowShear3_D           )
                PUSH( scOld_mRENDERrOWsHEAR3cCpUSH               , winPulp.stqr_mRowShear3_C           )
                PUSH( scOld_mRENDERrOWsHEAR3cBpUSH               , winPulp.stqr_mRowShear3_B           )
                PUSH( scOld_mRENDERrOWsHEAR3cApUSH               , winPulp.stqr_mRowShear3_A           )
                PUSH( scOld_mRENDERrOWsHEAR3pUSH                 , winPulp.stqr_mRowShear3             )
                PUSH( scOld_mRENDERrOWsHEAR2cDpUSH               , winPulp.stqr_mRowShear2_D           )
                PUSH( scOld_mRENDERrOWsHEAR2cCpUSH               , winPulp.stqr_mRowShear2_C           )
                PUSH( scOld_mRENDERrOWsHEAR2cBpUSH               , winPulp.stqr_mRowShear2_B           )
                PUSH( scOld_mRENDERrOWsHEAR2cApUSH               , winPulp.stqr_mRowShear2_A           )
                PUSH( scOld_mRENDERrOWsHEAR2pUSH                 , winPulp.stqr_mRowShear2             )
                PUSH( scOld_mRENDERrOWsHEAR1cDpUSH               , winPulp.stqr_mRowShear1_D           )
                PUSH( scOld_mRENDERrOWsHEAR1cCpUSH               , winPulp.stqr_mRowShear1_C           )
                PUSH( scOld_mRENDERrOWsHEAR1cBpUSH               , winPulp.stqr_mRowShear1_B           )
                PUSH( scOld_mRENDERrOWsHEAR1cApUSH               , winPulp.stqr_mRowShear1_A           )
                PUSH( scOld_mRENDERrOWsHEAR1pUSH                 , winPulp.stqr_mRowShear1             )
                PUSH( scOld_mRENDERcOLsHEAR3cDpUSH               , winPulp.stqr_mColShear3_D           )
                PUSH( scOld_mRENDERcOLsHEAR3cCpUSH               , winPulp.stqr_mColShear3_C           )
                PUSH( scOld_mRENDERcOLsHEAR3cBpUSH               , winPulp.stqr_mColShear3_B           )
                PUSH( scOld_mRENDERcOLsHEAR3cApUSH               , winPulp.stqr_mColShear3_A           )
                PUSH( scOld_mRENDERcOLsHEAR3pUSH                 , winPulp.stqr_mColShear3             )
                PUSH( scOld_mRENDERcOLsHEAR2cDpUSH               , winPulp.stqr_mColShear2_D           )
                PUSH( scOld_mRENDERcOLsHEAR2cCpUSH               , winPulp.stqr_mColShear2_C           )
                PUSH( scOld_mRENDERcOLsHEAR2cBpUSH               , winPulp.stqr_mColShear2_B           )
                PUSH( scOld_mRENDERcOLsHEAR2cApUSH               , winPulp.stqr_mColShear2_A           )
                PUSH( scOld_mRENDERcOLsHEAR2pUSH                 , winPulp.stqr_mColShear2             )
                PUSH( scOld_mRENDERcOLsHEAR1cDpUSH               , winPulp.stqr_mColShear1_D           )
                PUSH( scOld_mRENDERcOLsHEAR1cCpUSH               , winPulp.stqr_mColShear1_C           )
                PUSH( scOld_mRENDERcOLsHEAR1cBpUSH               , winPulp.stqr_mColShear1_B           )
                PUSH( scOld_mRENDERcOLsHEAR1cApUSH               , winPulp.stqr_mColShear1_A           )
                PUSH( scOld_mRENDERcOLsHEAR1pUSH                 , winPulp.stqr_mColShear1             )
                PUSH( scOld_mRENDERrOWsCALEcDpUSH                , winPulp.stqr_mRowScale_D            )
                PUSH( scOld_mRENDERrOWsCALEcCpUSH                , winPulp.stqr_mRowScale_C            )
                PUSH( scOld_mRENDERrOWsCALEcBpUSH                , winPulp.stqr_mRowScale_B            )
                PUSH( scOld_mRENDERrOWsCALEcApUSH                , winPulp.stqr_mRowScale_A            )
                PUSH( scOld_mRENDERrOWsCALEpUSH                  , winPulp.stqr_mRowScale              )
                PUSH( scOld_mRENDERcOLsCALEcDpUSH                , winPulp.stqr_mColScale_D            )
                PUSH( scOld_mRENDERcOLsCALEcCpUSH                , winPulp.stqr_mColScale_C            )
                PUSH( scOld_mRENDERcOLsCALEcBpUSH                , winPulp.stqr_mColScale_B            )
                PUSH( scOld_mRENDERcOLsCALEcApUSH                , winPulp.stqr_mColScale_A            )
                PUSH( scOld_mRENDERcOLsCALEpUSH                  , winPulp.stqr_mColScale              )
                PUSH( scOld_mRENDERmIRRORaNGLEcDpUSH             , winPulp.stqr_mMirrorAngle_D         )
                PUSH( scOld_mRENDERmIRRORaNGLEcCpUSH             , winPulp.stqr_mMirrorAngle_C         )
                PUSH( scOld_mRENDERmIRRORaNGLEcBpUSH             , winPulp.stqr_mMirrorAngle_B         )
                PUSH( scOld_mRENDERmIRRORaNGLEcApUSH             , winPulp.stqr_mMirrorAngle_A         )
                PUSH( scOld_mRENDERsINmIRRORaNGLEpUSH            , winPulp.stqr_mSinMirrorAngle        )
                PUSH( scOld_mRENDERcOSmIRRORaNGLEpUSH            , winPulp.stqr_mCosMirrorAngle        )
                PUSH( scOld_cRENDER01ROWmIRRORpOINTcDpUSH        , winPulp.stqr_m01RowMirrorPoint_D    )
                PUSH( scOld_cRENDER01ROWmIRRORpOINTcCpUSH        , winPulp.stqr_m01RowMirrorPoint_C    )
                PUSH( scOld_cRENDER01ROWmIRRORpOINTcBpUSH        , winPulp.stqr_m01RowMirrorPoint_B    )
                PUSH( scOld_cRENDER01ROWmIRRORpOINTcApUSH        , winPulp.stqr_m01RowMirrorPoint_A    )
                PUSH( scOld_cRENDER01ROWmIRRORpOINTpUSH          , winPulp.stqr_m01RowMirrorPoint      )
                PUSH( scOld_cRENDER01COLmIRRORpOINTcDpUSH        , winPulp.stqr_m01ColMirrorPoint_D    )
                PUSH( scOld_cRENDER01COLmIRRORpOINTcCpUSH        , winPulp.stqr_m01ColMirrorPoint_C    )
                PUSH( scOld_cRENDER01COLmIRRORpOINTcBpUSH        , winPulp.stqr_m01ColMirrorPoint_B    )
                PUSH( scOld_cRENDER01COLmIRRORpOINTcApUSH        , winPulp.stqr_m01ColMirrorPoint_A    )
                PUSH( scOld_cRENDER01COLmIRRORpOINTpUSH          , winPulp.stqr_m01ColMirrorPoint      )
                PUSH( scOld_mRENDERhOTaNGLEcDpUSH                , winPulp.stqr_mHotAngle_D             )
                PUSH( scOld_mRENDERhOTaNGLEcCpUSH                , winPulp.stqr_mHotAngle_C             )
                PUSH( scOld_mRENDERhOTaNGLEcBpUSH                , winPulp.stqr_mHotAngle_B             )
                PUSH( scOld_mRENDERhOTaNGLEcApUSH                , winPulp.stqr_mHotAngle_A             )
                PUSH( scOld_mRENDERsINhOTaNGLEpUSH               , winPulp.stqr_mSinHotAngle            )
                PUSH( scOld_mRENDERcOShOTaNGLEpUSH               , winPulp.stqr_mCosHotAngle            )
                PUSH( scOld_cRENDER01ROWhOTpOINTcDpUSH           , winPulp.stqr_m01RowHotPoint_D        )
                PUSH( scOld_cRENDER01ROWhOTpOINTcCpUSH           , winPulp.stqr_m01RowHotPoint_C        )
                PUSH( scOld_cRENDER01ROWhOTpOINTcBpUSH           , winPulp.stqr_m01RowHotPoint_B        )
                PUSH( scOld_cRENDER01ROWhOTpOINTcApUSH           , winPulp.stqr_m01RowHotPoint_A        )
                PUSH( scOld_cRENDER01ROWhOTpOINTpUSH             , winPulp.stqr_m01RowHotPoint          )
                PUSH( scOld_cRENDER01COLhOTpOINTcDpUSH           , winPulp.stqr_m01ColHotPoint_D        )
                PUSH( scOld_cRENDER01COLhOTpOINTcCpUSH           , winPulp.stqr_m01ColHotPoint_C        )
                PUSH( scOld_cRENDER01COLhOTpOINTcBpUSH           , winPulp.stqr_m01ColHotPoint_B        )
                PUSH( scOld_cRENDER01COLhOTpOINTcApUSH           , winPulp.stqr_m01ColHotPoint_A        )
                PUSH( scOld_cRENDER01COLhOTpOINTpUSH             , winPulp.stqr_m01ColHotPoint          )
        
                PUSH( scOld_cRENDERfLOATuPcDpUSH                 , winPulp.stqr_m01FloatUp_D           )
                PUSH( scOld_cRENDERfLOATuPcCpUSH                 , winPulp.stqr_m01FloatUp_C           )
                PUSH( scOld_cRENDERfLOATuPcBpUSH                 , winPulp.stqr_m01FloatUp_B           )
                PUSH( scOld_cRENDERfLOATuPcApUSH                 , winPulp.stqr_m01FloatUp_A           )
                PUSH( scOld_cRENDERfLOATuPpUSH                   , winPulp.stqr_m01FloatUp             )
                PUSH( scOld_cRENDERfLOATrIGHTcDpUSH              , winPulp.stqr_m01FloatRight_D        )
                PUSH( scOld_cRENDERfLOATrIGHTcCpUSH              , winPulp.stqr_m01FloatRight_C        )
                PUSH( scOld_cRENDERfLOATrIGHTcBpUSH              , winPulp.stqr_m01FloatRight_B        )
                PUSH( scOld_cRENDERfLOATrIGHTcApUSH              , winPulp.stqr_m01FloatRight_A        )
                PUSH( scOld_cRENDERfLOATrIGHTpUSH                , winPulp.stqr_m01FloatRight          )
        
                PUSH( scOld_cRENDERhANDLERfINALtRANSFORMpUSH , winPulp.stqr_pHandlerFinalTransform )
                PUSH( scOld_cRENDERfLAGScYCLINGdETAIL8pUSH   , winPulp.stqr_fRenderCyclingDetail8  )
                PUSH( scOld_cRENDERfLAGScYCLINGdETAIL7pUSH   , winPulp.stqr_fRenderCyclingDetail7  )
                PUSH( scOld_cRENDERfLAGScYCLINGdETAIL6pUSH   , winPulp.stqr_fRenderCyclingDetail6  )
                PUSH( scOld_cRENDERfLAGScYCLINGdETAIL5pUSH   , winPulp.stqr_fRenderCyclingDetail5  )
                PUSH( scOld_cRENDERfLAGScYCLINGdETAIL4pUSH   , winPulp.stqr_fRenderCyclingDetail4  )
                PUSH( scOld_cRENDERfLAGScYCLINGdETAIL3pUSH   , winPulp.stqr_fRenderCyclingDetail3  )
                PUSH( scOld_cRENDERfLAGScYCLINGdETAIL2pUSH   , winPulp.stqr_fRenderCyclingDetail2  )
                PUSH( scOld_cRENDERfLAGScYCLINGdETAIL1pUSH   , winPulp.stqr_fRenderCyclingDetail1  )
                PUSH( scOld_cRENDERfLAGScYCLEDpUSH           , winPulp.stqr_fRenderCycled          )
                PUSH( scOld_cRENDERfLAGScONTROLpUSH          , winPulp.stqr_fRenderControl         )
                PUSH( scOld_cROWmARGINsADAMfRAMEpUSH         , winPulp.stqr_cRowsMarginSadamFrame  )
                PUSH( scOld_cCOLmARGINsADAMfRAMEpUSH         , winPulp.stqr_cColsMarginSadamFrame  )
                PUSH( scOld_cPUSHoFFfRAMEwRAP                , winPulp.stqr_offFrameWrap           )
                PUSH( scOld_cPUSHoFFfRAME                    , winPulp.stqr_offFrame               )
                PUSH( scOld_cPUSHsIDES                       , winPulp.stqr_cPolygonSides          )
                PUSH( scOld_cPUSHsTYLE                       , winPulp.stqr_flStyle                )
                PUSH( scOld_cPUSHrIPPLES                     , winPulp.stqr_cRipples               )
            {
            switch( sttP.idCaste )


            if( winPulp.cNestIfSkipped ) winPulp.cNestIfSkipped = 0 ;
        {
        if( bDo )

        }
            case scOld_mmIFlITERALlITERALnOTlESStHAN : { winPulp.cNestIfSkipped ++ ; break ; }
            case scOld_mmIFlITERALlITERALlESStHAN    :
            case scOld_mmIFlITERALlITERALeQUALS      :
            case scOld_cmIFnOTElITERALnOTlESStHAN    :
            case scOld_cmIFnOTElITERALlESStHAN       :
            case scOld_cmIFnOTElITERALeQUALS         :
            case scOld_mcIFlITERALnOTEnOTlESStHAN    :
            case scOld_mcIFlITERALnOTElESStHAN       :
            case scOld_mcIFlITERALnOTEeQUALS         :
            case scOld_ccIFnOTEnOTEnOTlESStHAN       :
            case scOld_ccIFnOTEnOTElESStHAN          :
            case scOld_ccIFnOTEnOTEeQUALS            :
        {
        if( !bDo ) switch( sttP.idCaste )
        boolT bDo = winPulp.stqr_if[ 1 ] ;

        TRACEiF

        TRACEtITLEiF

        //if( cTraceOn > 1 ) { LOGrAW( "\r\n" ) ; } //IF I AM CALLED RECURSIVELY

        if( !cTraceOn && sttP.idCaste == scOld_DEBUG ) bRetainTrace = cTraceOn = 1 ;
        ZE( boolT , bRetainTrace ) ;

        //if( !cTraceOn ) cTraceOn = backIdTypeF() == ifcIDtYPEpAPERbACK_eyeOldC ;
        //if( !cTraceOn && sttP.idCaste == scOld_cPUSHpAPERoVERRIDE ) cTraceOn = 1 ;
        //cTraceOn = sttP.idCaste == sc_cALPHABET1 && sttP.idAdam >= 'a' && sttP.idAdam <= 'z' ;
        //cTraceOn = 1 ;

        static boolT bTraceTitleWritten ;

        strokeS& sttP = psttP[ CSpREFIX - 1 + idAdam ] ;
    {
    for( countT idAdam = 1 ; idAdam <= psttP->idAdam ; idAdam ++ )

    tinP.pAdamGlobal5->frPaper.grab.grabF( tinP , TAG( TAGiDnULL ) ) ;
    static boolT bDebugOn ;

    countT idIn = 1 + incv02AM( idInLath ) ;
    static countT idInLath ;
    winPulpOldC& winPulp = *(winPulpOldC*)&pulpP ;

{
/*1*/voidT windowOldC::renderF( tinS& tinP , pulpOldC& pulpP , const strokeS* const psttP , const handleC* const phCloneP )/*1*/

    }
        LOGrAW( tSay ) ;                                                                                                                                        \
                                                                                                                                                                \
        ;                                                                                                                                                       \
                                                                                                                                                                \
            : /*TF3((countT)&pulpP,flFORMAT_null,LW)+T(" ")+TF3(idIn,flFORMAT_null,LW)+T(backIdTypeF()==ifcIDtYPEpAPERbACK_eyeOldC?" eye   ":"       ")*//*+(idPaperDrawDefault?TF3(idPaperDrawDefault,flFORMAT_null,LW+1):TP("",LW+1))*//*+TF3(papers.idPaperF(papers.selectF(tinP,ifcIDcMDpAPERsELECT_QUERYsHOW)),flFORMAT_null,LW+1)+TF3(papers.idPaperF(papers.selectF(tinP,ifcIDcMDpAPERsELECT_QUERYrENDER)),flFORMAT_null,LW+1)*//*+(pPaperDrawDefault?TF3((countT)pPaperDrawDefault,flFORMAT_null,LW+1):TP("",LW+1))*//*+TF3((countT)&papers.selectF(tinP,ifcIDcMDpAPERsELECT_QUERYsHOW),flFORMAT_null,LW+1)+TF3((countT)&papers.selectF(tinP,ifcIDcMDpAPERsELECT_QUERYrENDER),flFORMAT_null,LW+1)+TF3(winPulp.rCache.mPadRight,flFORMAT_null,LW)+T(" ")+*/TF3(R(winPulp.mIdColNow),flFORMAT_null,LW)+T(" ")+TF3(R(winPulp.mIdRowNow),flFORMAT_null,LW)+T(" ")+TF3(R(sf.mIdCol),flFORMAT_null,LW)+T(" ")+TF3(R(sf.mIdRow),flFORMAT_null,LW)+T(" ")+TF3(R(sf.mIdCol-(measureT)1+sf.mCols),flFORMAT_null,LW)+T(" ")+TF3(R(sf.mIdRow-(measureT)1+sf.mRows),flFORMAT_null,LW)+T(" ")+TF3(R(sf.mCols),flFORMAT_null,LW)+T(" ")+TF3(R(sf.mRows),flFORMAT_null,LW)/*+T(" ")+TP(tinP.postThreadName,0xa)*/+tPadNest+TP(processGlobal4I.mapCaste(sttP.idCaste),costm-tPadNest.csF(tinP)-0xd)+T(" ")+TF3(winPulp.flagsMode,flFORMAT_UNSIGNED,LW)+T(" | ") \
            ? /*TF3((countT)&pulpP,flFORMAT_null,LW)+T(" ")+TF3(idIn,flFORMAT_null,LW)+T(backIdTypeF()==ifcIDtYPEpAPERbACK_eyeOldC?" eye   ":"       ")*//*+(idPaperDrawDefault?TF3(idPaperDrawDefault,flFORMAT_null,LW+1):TP("",LW+1))*//*+TF3(papers.idPaperF(papers.selectF(tinP,ifcIDcMDpAPERsELECT_QUERYsHOW)),flFORMAT_null,LW+1)+TF3(papers.idPaperF(papers.selectF(tinP,ifcIDcMDpAPERsELECT_QUERYrENDER)),flFORMAT_null,LW+1)*//*+(pPaperDrawDefault?TF3((countT)pPaperDrawDefault,flFORMAT_null,LW+1):TP("",LW+1))*//*+TF3((countT)&papers.selectF(tinP,ifcIDcMDpAPERsELECT_QUERYsHOW),flFORMAT_null,LW+1)+TF3((countT)&papers.selectF(tinP,ifcIDcMDpAPERsELECT_QUERYrENDER),flFORMAT_null,LW+1)+TF3(winPulp.rCache.mPadRight,flFORMAT_null,LW)+T(" ")+*/TP("",2*LW+2)                                                                                      +TF3(R(sf.mIdCol),flFORMAT_null,LW)+T(" ")+TF3(R(sf.mIdRow),flFORMAT_null,LW)+T(" ")+TF3(R(sf.mIdCol-(measureT)1+sf.mCols),flFORMAT_null,LW)+T(" ")+TF3(R(sf.mIdRow-(measureT)1+sf.mRows),flFORMAT_null,LW)+T(" ")+TF3(R(sf.mCols),flFORMAT_null,LW)+T(" ")+TF3(R(sf.mRows),flFORMAT_null,LW)/*+T(" ")+TP(tinP.postThreadName,0xa)*/+tPadNest+TP(processGlobal4I.mapCaste(sttP.idCaste),costm-tPadNest.csF(tinP)-0xd)+T(" ")+TF3(winPulp.flagsMode,flFORMAT_UNSIGNED,LW)+T(" | ") \
                                                                                                                                                                \
        TN( tSay , "" ) ; tSay = winPulp.mIdColNow == sf.mIdCol && winPulp.mIdRowNow == sf.mIdRow                                                               \
                                                                                                                                                                \
        while( cToDo -- ) tPadNest += tPadEach ;                                                                                                                \
        countT cToDo = cTraceOn - 1 ;                                                                                                                           \
        TN( tPadEach , "| " ) ;                                                                                                                                 \
        TN( tPadNest , " " ) ;                                                                                                                                  \
                                                                                                                                                                \
        /*}                                                                                                                                                   */\
        /*    }                                                                                                                                               */\
        /*        idPaperDrawDefault = papers.swPaper( *(countT*)pPaperDrawDefault ) ;                                                                        */\
        /*        pPaperDrawDefault  = (const paperOldC*)papers.stq_pPaperDrawUnder[ cUnder ] ;                                                                  */\
        /*    {                                                                                                                                               */\
        /*    if( cUnder )                                                                                                                                    */\
        /*    countT cUnder = papers.stq_pPaperDrawUnder ;                                                                                                    */\
        /*{                                                                                                                                                   */\
        /*if( papers.stq_pPaperDrawUnder )                                                                                                                    */\
        /*ZE( countT , idPaperDrawDefault ) ;                                                                                                               */\
        /*ZE( const paperOldC* , pPaperDrawDefault ) ;                                                                                                         */\
                                                                                                                                                                \
        static countT costm = 5 + 8/*ALLOWANCE FOR cTraceOn UP TO 8*/ + processGlobal4I.mapAdam.costMaxF() ;                                                    \
                                                                                                                                                                \
        strokingFrameS& sf = *(strokingFrameS*)&winPulp.stqr_strokingFrame[ 1 + winPulp.rCache.offFrame ] ;                                                     \
    {                                                                                                                                                           \
    if( cTraceOn )                                                                                                                                              \
                                                                                                                                                                \
#define TRACEiF                                                                                                                                                 \

    }
        LOGrAW( tSay ) ;                                            \
        TN( tSay , "" ) ; tSay = /*TPS("pPulp",LW,sttd)+T(" ")+TPS("idIn",LW,sttd)+T(" ")+TPS("e/w",5,sttd)*//*+T(" ")+TPS("idPaperO",LW,sttd)*//*+T(" ")+TPS("idPaperS",LW,sttd)+T(" ")+TPS("idPaperD",LW,sttd)*//*+T(" ")+TPS("pPaperO",LW,sttd)*//*+T(" ")+TPS("pPaperS",LW,sttd)+T(" ")+TPS("pPaperD",LW,sttd)+T(" ")+TPS("mPadR",LW,sttd)+T(" ")+*/TPS("col",LW,sttd)+T(" ")+TPS("row",LW,sttd)+T(" ")+TPS("sfColMin",LW,sttd)+T(" ")+TPS("sfRowMin",LW,sttd)+T(" ")+TPS("sfColMax",LW,sttd)+T(" ")+TPS("sfRowMax",LW,sttd)+T(" ")+TPS("sfCols",LW,sttd)+T(" ")+TPS("sfRows",LW,sttd)/*+T(" ")+TPS("thread",0xa,sttd)*/+T(" ")+TPS("caste",0xc+processGlobal4I.mapAdam.costMaxF()-0xd,sttd)+T(" ")+TPS("flags",LW,sttd)+T(" comments--------\r\n") ; \
        strokeS sttd( '-' , sc_cALPHABET1 , 0 ) ;                   \
        bTraceTitleWritten = 1 ;                                    \
    {                                                               \
    if( cTraceOn && !bTraceTitleWritten )                           \
                                                                    \
#define TRACEtITLEiF                                                \

#define LWM (9)
#define LW (8)

//  
//  IF A CAST IS TO SUPPORT INTEGRAL VALUES BEYOND THE RANGE OF measureT, AN EXCEPTION WILL NEED TO BE MADE AND DOCUMENTED
//  THIS IS SO THAT APPLICATION WRITERS DO NOT NEED TO REMEMBER WHICH CASTES TAKE WHICH TYPE OF ARGUMENTS
//  EVEN IF ONLY INTEGRAL VALUES ARE MEANINGFUL, THE IMAGE IS INTERPRETED AS A measureT IMAGE
//  THE ONLY EXCEPTIONS ARE THE GLYPH CASTES SUCH AS sc_cALPHABET1 sc_cFROMaSCII ETC
//  MOST CASTES INTERPRET idAdam cNote AS measureT IMAGES
//  
// SPECS

boolT bLog3302e = 1 ; //FOR DEBUGGING CONVENIENCE; SET TO 0 IN PRODUCTION

/**/
*/
/*

    }
        break ;                                                   \
        popF( tinP , staqP , caseP , cbP , winPulp ) ;            \
    {                                                             \
    case caseP :                                                  \
                                                                  \
#define POPbIG(caseP,staqP,cbP)                                   \

    }
        break ;                                                   \
        popF( tinP , staqP , caseP , 0 , winPulp ) ;              \
    {                                                             \
    case caseP :                                                  \
                                                                  \
#define POP(caseP,staqP)                                          \

    }
        break ;                                                   \
        duplicateF( tinP , staqP , sttP , caseP , winPulp ) ;     \
    {                                                             \
    case caseP :                                                  \
                                                                  \
#define DUP(caseP,staqP)                                          \

    }
        break ;                                                   \
        pushF( tinP , staqP , sttP , caseP , winPulp ) ;          \
    {                                                             \
    case caseP :                                                  \
                                                                  \
#define PUSH(caseP,staqP)                                         \

#define LE4(cP,rP,cAdjP,rAdjP) { winPulp.mIdColLag = winPulp.mIdColNow ; winPulp.mIdRowLag = winPulp.mIdRowNow ; mIdColWork = (cP) * ( winPulp.rCache.msAc - 1.0 ) + winPulp.rCache.msBc + (cAdjP) ; mIdRowWork = (rP) * ( winPulp.rCache.msAr - 1.0 ) + winPulp.rCache.msBr + (rAdjP) ; winPulp.mIdColNow = mIdColWork ; winPulp.mIdRowNow = mIdRowWork ; winPulp.idLineType = 2 ; moveOrLineTransformedF( tinP , winPulp ) ; }
#define L4(cP,rP,cAdjP,rAdjP)  { winPulp.mIdColLag = winPulp.mIdColNow ; winPulp.mIdRowLag = winPulp.mIdRowNow ; mIdColWork = (cP) * ( winPulp.rCache.msAc - 1.0 ) + winPulp.rCache.msBc + (cAdjP) ; mIdRowWork = (rP) * ( winPulp.rCache.msAr - 1.0 ) + winPulp.rCache.msBr + (rAdjP) ; winPulp.mIdColNow = mIdColWork ; winPulp.mIdRowNow = mIdRowWork ; winPulp.idLineType = 1 ; moveOrLineTransformedF( tinP , winPulp ) ; }
#define M4(cP,rP,cAdjP,rAdjP)  { winPulp.mIdColLag = winPulp.mIdColNow ; winPulp.mIdRowLag = winPulp.mIdRowNow ; winPulp.mIdColNow  = (cP) * ( winPulp.rCache.msAc - 1.0 ) + winPulp.rCache.msBc + (cAdjP) ; winPulp.mIdRowNow  = (rP) * ( winPulp.rCache.msAr - 1.0 ) + winPulp.rCache.msBr + (rAdjP) ; winPulp.idLineType = 0 ; moveOrLineTransformedF( tinP , winPulp ) ; }

#define LE2(cP,rP) { winPulp.mIdColLag = winPulp.mIdColNow ; winPulp.mIdRowLag = winPulp.mIdRowNow ; mIdColWork = (cP) * ( winPulp.rCache.msAc - 1.0 ) + winPulp.rCache.msBc ; mIdRowWork = (rP) * ( winPulp.rCache.msAr - 1.0 ) + winPulp.rCache.msBr ; winPulp.mIdColNow = mIdColWork ; winPulp.mIdRowNow = mIdRowWork ; winPulp.idLineType = 2 ; moveOrLineTransformedF( tinP , winPulp ) ; }
#define L2(cP,rP)  { winPulp.mIdColLag = winPulp.mIdColNow ; winPulp.mIdRowLag = winPulp.mIdRowNow ; mIdColWork = (cP) * ( winPulp.rCache.msAc - 1.0 ) + winPulp.rCache.msBc ; mIdRowWork = (rP) * ( winPulp.rCache.msAr - 1.0 ) + winPulp.rCache.msBr ; winPulp.mIdColNow = mIdColWork ; winPulp.mIdRowNow = mIdRowWork ; winPulp.idLineType = 1 ; moveOrLineTransformedF( tinP , winPulp ) ; }
#define M2(cP,rP)  { winPulp.mIdColLag = winPulp.mIdColNow ; winPulp.mIdRowLag = winPulp.mIdRowNow ; winPulp.mIdColNow  = (cP) * ( winPulp.rCache.msAc - 1.0 ) + winPulp.rCache.msBc ; winPulp.mIdRowNow  = (rP) * ( winPulp.rCache.msAr - 1.0 ) + winPulp.rCache.msBr ; winPulp.idLineType = 0 ; moveOrLineTransformedF( tinP , winPulp ) ; }

const measureT* pmts = pmtExpandRef ;
const measureT* pmt  = pmtExpandRef ;

const measureT pmtExpandRef[ 7 ] = { 0.00 , 0.0     , 1.0/4.0 , 2.0/4.0 , 3.0/4.0 , 1.0     , 1.0 } ;
const measureT pmtRef[       7 ] = { 0.00 , 1.0/6.0 , 2.0/6.0 , 3.0/6.0 , 4.0/6.0 , 5.0/6.0 , 1.0 } ;

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//


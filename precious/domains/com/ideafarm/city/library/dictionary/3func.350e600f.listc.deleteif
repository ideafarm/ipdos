
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return flagsRC ;

    UNGRABtINaRGS( ifcIDtYPEtINaRGiNuSE_LIST )
    }
        { puseC puseat( tinP , ifcIDpOOL_ADAMtEMP ) ; PUSE( tinP , *(byteT**)&pczWalk ) ; }

        POPtINaRGS
        flagsRC |= walkIF( tinP , pczWalk , flLISToPEN_IFeXISTS , idGrabLayerP ) ;
        tinP.ta.pushed.u.listWalk.util.pcP[ 2 ] = (countT)&flagsRC ;
        tinP.ta.pushed.u.listWalk.util.pcP[ 1 ] = flagsP ;
        tinP.ta.pushed.u.listWalk.util.pcP[ 0 ] = cDoomed ;
        tinP.ta.pushed.u.listWalk.walk.flagsWalkP = flLISTwALK_null ;
        tinP.ta.pushed.u.listWalk.walk.pListWalkCBFP = listWalkDeleteListCBF ;
        PUSHtINaRGS

        }
            pczWalk[ ccWalk ] = 0 ;
            thirdC::c_memcpyIF( tinP , (byteT*)pczWalk , (byteT*)pczNameP , sizeof( countT ) * ccWalk ) ;
            PUSE.newF( tinP , LF , *(byteT**)&pczWalk , sizeof( countT ) * ( ccWalk + 1 ) ) ; ___( pczWalk ) ;
            puseC puseat( tinP , ifcIDpOOL_ADAMtEMP ) ;

            ;
                : ( cDoomed = pczNameP[ ccKeep ] , ccKeep )
                ?                                  ccName
            ccWalk = !ccKeep
            ZE( countT , ccWalk ) ;
            countT ccKeep = ccName - 1 ;
            countT ccName = thirdC::c_strlenIF( tinP , pczNameP ) ;
        {
        ZE( countT  , cDoomed ) ;
        ZE( countT* , pczWalk ) ;
    {
    else
    }
        }
            THREADmODE2rESTORE
            DEL( pd ) ;
            THREADmODE2oN( flTHREADmODE2_ALLOWdESTRUCTIONoFlISTINGc ) ;
        {
        if( aptRoot.resetF() )
        listingC* pd = &APT( listingC , aptRoot ) ;
        aptC& aptRoot = PUSE.aptListRootF() ;

        deleteIF( tinP , pcz1 , flLISTdELETE_null , idGrabLayerP ) ;    //20180507@1727: ADDED WITHOUT ANALYSIS
        deleteIF( tinP , pcz2 , flLISTdELETE_null , idGrabLayerP ) ;
        deleteIF( tinP , pcz3 , flLISTdELETE_null , idGrabLayerP ) ;
        deleteIF( tinP , pcz4 , flLISTdELETE_null , idGrabLayerP ) ;    //20180507@1727: ADDED WITHOUT ANALYSIS
        deleteIF( tinP , pcz5 , flLISTdELETE_null , idGrabLayerP ) ;    //20180507@1727: ADDED WITHOUT ANALYSIS
        deleteIF( tinP , pcz6 , flLISTdELETE_null , idGrabLayerP ) ;    //20180507@1727: ADDED WITHOUT ANALYSIS
        deleteIF( tinP , pcz7 , flLISTdELETE_null , idGrabLayerP ) ;    //20180507@1727: ADDED WITHOUT ANALYSIS
        deleteIF( tinP , pcz8 , flLISTdELETE_null , idGrabLayerP ) ;    //20180507@1727: ADDED WITHOUT ANALYSIS
        deleteIF( tinP , pcza , flLISTdELETE_null , idGrabLayerP ) ;
        countT pcz1[] = { LISTnAME_ROOT , LISTnAME_ROOTsYSTEM1     , 0 } ;
        countT pcz2[] = { LISTnAME_ROOT , LISTnAME_ROOTsYSTEM2     , 0 } ;
        countT pcz3[] = { LISTnAME_ROOT , LISTnAME_ROOTsYSTEM3     , 0 } ;
        countT pcz4[] = { LISTnAME_ROOT , LISTnAME_ROOTsYSTEM4     , 0 } ;
        countT pcz5[] = { LISTnAME_ROOT , LISTnAME_ROOTsYSTEM5     , 0 } ;
        countT pcz6[] = { LISTnAME_ROOT , LISTnAME_ROOTsYSTEM6     , 0 } ;
        countT pcz7[] = { LISTnAME_ROOT , LISTnAME_ROOTsYSTEM7     , 0 } ;
        countT pcz8[] = { LISTnAME_ROOT , LISTnAME_ROOTsYSTEM8     , 0 } ;
        countT pcza[] = { LISTnAME_ROOT , LISTnAME_ROOTaPPLICATION , 0 } ; //EXPLICIT BECAUSE MUST BE DELETED IN THIS ORDER
    {
    if( !pczNameP[ 1 ] )

    }
        deleteIF( tinP , pcza , flLISTdELETE_null , idGrabLayerP ) ;       // THIS IS BECAUSE DELETING AN APPLICATION DATUM WILL UNINDEX IT, AND THE DICTIONARY MUST EXIST DURING UNINDEXING
        countT pcza[] = { LISTnAME_ROOT , LISTnAME_ROOTaPPLICATION , 0 } ; // THE APPLICATION LIST MUST BE DELETED BEFORE EITHER THE DICTIONARY OR THE INDEX IS DELETED
    {
    )
        flagsP == flLISTdELETE_null
        &&
        )
            || pczNameP[ 1 ] == LISTnAME_ROOTsYSTEM8         //20180507@1727: ADDED WITHOUT ANALYSIS
            || pczNameP[ 1 ] == LISTnAME_ROOTsYSTEM7         //20180507@1727: ADDED WITHOUT ANALYSIS
            || pczNameP[ 1 ] == LISTnAME_ROOTsYSTEM6         //20180507@1727: ADDED WITHOUT ANALYSIS
            || pczNameP[ 1 ] == LISTnAME_ROOTsYSTEM5         //20180507@1727: ADDED WITHOUT ANALYSIS
            || pczNameP[ 1 ] == LISTnAME_ROOTsYSTEM4
            || pczNameP[ 1 ] == LISTnAME_ROOTsYSTEM3
               pczNameP[ 1 ] == LISTnAME_ROOTsYSTEM2
        (
    (
    if

    grabitC grabitx( tinP , TAG( TAGiDnULL ) ) ;
    GRABtINaRGS( ifcIDtYPEtINaRGiNuSE_LIST )

    _IO_
    
    }
        if( POOP ) return flagsRC ;
        FV( flLISTdELETE , flagsP ) ;
        __( *pczNameP - LISTnAME_ROOT ) ;
        if( POOP ) return flagsRC ;
        __Z( pczNameP ) ;
        if( POOP ) return flagsRC ;
    {
    IFbEcAREFUL

    flagsT flagsRC = flLISTwALKrETURNcODE_null ;
{
/*1*/flagsT listC::deleteIF( tinS& tinP , const countT* const pczNameP , const flagsT flagsP , const countT idGrabLayerP )/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//


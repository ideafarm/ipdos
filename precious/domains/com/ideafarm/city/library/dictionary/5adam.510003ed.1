
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST
etThread.osProcessIdPhaseAdamF( tinP , ifcIDpHASEhANDOFFoLD_SHUTTINGdOWN ) ;

}
    }
        etThread = 0 ;

        etThread.strokeF( tinP , T("\r   \r") ) ;
        }
            }
                ++ s ; etThread.osSleepF( tinP , TOCK ) ;
                etThread.strokeF( tinP , T("\r   \r")+TF1(cTries) ) ;
            {
            while( !ether && cTries -- )
            countT cTries = 0x100 ;
            sleepC s( tinP , TAG( TAGiDnULL ) ) ;
        {

        etThread.delF( tinP , pstt1m ) ;
        etThread.delF( tinP , pstt1To ) ;

        }
            etThread = 0 ;

            else         etThread.boxZapF( tinP , psttc1 ) ;
            if( etThread ) etThread = 0 ;

            etThread.delF( tinP , posti ) ;

            }
                etThread.delF( tinP , pstts ) ;

                }
                    etThread.delF( tinP , psttf ) ;

                    etThread.delF( tinP , postNotice ) ;

                    etThread.boxPutF( tinP , T("ideafarm.com//smtp/" ifcEMAIL_OLDfROM ) , postNotice , costNotice , 1 ) ;

                    countT costNotice = etThread.strMakeF( tinP , LF , postNotice , T("Subject: Your submission was just rejected\r\n\r\nA submission to the IdeaFarm " "(tm) City mailing list from you was just rejected.\r\n\r\nReason:  The Subject line was either blank or missing.\r\n\r\nThe only legal way to submit an item for the mailing list is to use the appropriate entry field on http://www.ideafarm.com .\r\n\r\nYou can also submit an item by sending email to " ifcEMAIL_LISTrECEIVER " .  The body text of such entries is ignored,\r\nand the Subject: line text is sent to all list participants.\r\n\r\nIf you continue to receive this notice, contact " ifcEMAIL_WEBsITEcONTACT "") ) ; ___( postNotice ) ;
                    ZE( osTextT* , postNotice ) ;

                    if( psttf ) { etThread.strTrimF( tinP , psttf , 0 , T(TbLACKnEWlINE) ) ; ___( psttf ) ; }
                    etThread.strSubstringMimeHeaderF( tinP , psttf , T(posti) , T("from") ) ; ___( psttf ) ;
                    ZE( strokeS* , psttf ) ;
                {
                else
                }
                    }
                        etThread.delF( tinP , postOldChat ) ;

                        }
                            etThread = 0 ;
                            etThread.boxPutF( tinP , T("ideafarm.com//smtp/" ifcEMAIL_OLDfROM "/")+T(psttc2) , postOldChat , costChat , 1 ) ;
                        {
                        FORsTRINGSiN2( pstt1To )

                        countT costChat = etThread.strMakeF( tinP , LF , postOldChat , T("Subject: | ")+T(pstts)+T(" |\r\n\r\nThis one line message (it is in the Subject line) was sent to you because you (or an impostxr who claimed to be you)\r\nsubscribed you to the IdeaFarm (tm) City mailing list.\r\n\r\nIdeaFarm " "(tm) City strongly opposes spam.  If you did not subscribe to this mailing list, please notify " ifcEMAIL_WEBsITEcONTACT " .\r\n\r\nTo unsubscribe, reply to this message and edit the subject line of the reply to contain the word UNSUBSCRIBE,\r\nin capital letters.  Note:  do not reply to this message to contribute to the mailing list.\r\nThe only way to contribute to the maililng list is to enter a\r\nline of text in the appropriate entry field at http://www.ideafarm.com .\r\n\r\nThank you.") ) ; ___( postOldChat ) ;
                        ZE( osTextT* , postOldChat ) ;

                        }
                            etThread.delF( tinP , posts ) ;
                            etThread.delF( tinP , psttnu ) ;
                            etThread.boxPutUniqueF( tinP , psttnu , tLog , posts , costs ) ;
                            ZE( strokeS* , psttnu ) ;
                            countT costs = etThread.strMakeF( tinP , LF , posts , pstts ) ; ___( posts ) ;
                            ZE( osTextT* , posts ) ;
                        {
                        etThread.strokeF( tinP , T(pstts)+T("\r\n") ) ;
                    {
                    else
                    }
                        etThread.delF( tinP , psttf ) ;

                        etThread.delF( tinP , postNotice ) ;

                        etThread.boxPutF( tinP , T("ideafarm.com//smtp/" ifcEMAIL_OLDfROM ) , postNotice , costNotice , 1 ) ;

                        countT costNotice = etThread.strMakeF( tinP , LF , postNotice , T("Subject: |unsubscribe: \"")+T(psttf)+T("\"|") ) ; ___( postNotice ) ;
                        ZE( osTextT* , postNotice ) ;

                        }
                            etThread.delF( tinP , posts ) ;
                            etThread.delF( tinP , psttnu ) ;
                            etThread.boxPutUniqueF( tinP , psttnu , tLog , posts , costs ) ;
                            ZE( strokeS* , psttnu ) ;
                            countT costs = etThread.strMakeF( tinP , LF , posts , T("UNSUBSCRIBE \"")+T(psttf)+T("\"") ) ; ___( posts ) ;
                            ZE( osTextT* , posts ) ;
                        {
                        etThread.strokeF( tinP , T("UNSUBSCRIBE: \"")+T(psttf)+T("\"\r\n") ) ;

                        if( psttf ) { etThread.strTrimF( tinP , psttf , 0 , T(TbLACKnEWlINE) ) ; ___( psttf ) ; }
                        etThread.strSubstringMimeHeaderF( tinP , psttf , T(posti) , T("from") ) ; ___( psttf ) ;
                        ZE( strokeS* , psttf ) ;
                    {
                    if( etThread.strIdF( tinP , idf , sttq , T("UNSUBSCRIBE") , pstts ) )
                    strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
                    countT idf = 1 ;

                {
                if( pstts && pstts->idAdam )

                if( pstts ) { etThread.strTrimF( tinP , pstts , 0 , T(TbLACKnEWlINE) ) ; ___( pstts ) ; }
                etThread.strSubstringMimeHeaderF( tinP , pstts , T(posti) , T("subject") ) ; ___( pstts ) ;
                ZE( strokeS* , pstts ) ;
            {

            etThread.boxGetShadowF( tinP , posti , costi , psttc1 ) ; ___( posti ) ;
            ZE( countT   , costi ) ;
            ZE( osTextT* , posti ) ;

            if( ether ) break ;
        {
        FORsTRINGSiN1( pstt1m )

        }
            etThread.strokeF( tinP , TT(time1,time2)+T("  cNew=")+TF1(cNew)+T("\r\n") ) ;
            etThread.osTimeNowF( tinP , time1 , time2 ) ;
            ZE( sCountT , time2 ) ;
            ZE( countT  , time1 ) ;
        {
        if( cNew )

        countT cNew = etThread.boxMenuF( tinP , soul1m , tIn+T(".*") ) ; ___( pstt1m ) ;
        ZE( strokeS* , pstt1m ) ;

        }
            etThread.delF( tinP , pstt1m2 ) ;
            }
                etThread.delF( tinP , poste ) ;
                //etThread.strokeF( tinP , T("Participant: \"")+T(poste)+T("\"\r\n") ) ;
                etThread.strFuseSeparateF( tinP , pstt1To , T(poste) , 0 , 0 , 0 , 0 , /*U::SOUL?*/ 0x10000 ) ; ___( pstt1To ) ;
                etThread.boxGetShadowF( tinP , poste , coste , psttc1 ) ; ___( poste ) ;
                ZE( countT   , coste ) ;
                ZE( osTextT* , poste ) ;
            {
            FORsTRINGSiN1( pstt1m2 )

            etThread.boxMenuF( tinP , soul1m2 , T("///ideafarm/ephemeral/domains/com/ideafarm/5e30104/emaillist/email.*") ) ; ___( pstt1m2 ) ;
            ZE( strokeS* , pstt1m2 ) ;
        {
        ZE( strokeS* , pstt1To ) ;

        etThread.boxMailGetF( tinP , tIn , T("pplus.shell5.ba.best.com//pop/duri2-all/N7aZpRQG") , 0x10000 ) ;
    {
    while( !ether && !etThread )

    TN( tLog , "///ideafarm/ephemeral/domains/com/ideafarm/fe30104/log" ) ;
    TN( tIn  , "///ideafarm/ephemeral/domains/com/ideafarm/fe30104/in" ) ;

    etThread.strokeF( tinP , T("IdeaFarm " "(tm) City Mailing List Server\r\ni receive " ifcEMAIL_LISTrECEIVER " items and forward them on\r\n\r\n") ) ;
{
else
}
    etThread.strokeF( tinP , T("Another ")+textIdFileC( tinP , DDNAME )+T(" appears to be alive on this computer.  Only one is allowed.") ) ;
    etThread = 0  ;
{
if( etThread )
U:: USE napkinC OBJECT TO TEST FOR ALONENESS
batonC baton( tinP , TAG( TAGiDnULL ) , T("fe30104") ) ;

TODO

/*1*/WAKEhIDE( "city.mailing.list.server" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


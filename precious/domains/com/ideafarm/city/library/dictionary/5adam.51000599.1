
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

delete pFoo1 ;
delete pFoo2 ;
delete pFoo3 ;
delete pFoo4 ;

fooC* pFoo4 = new( 0 , tinP , &napFoo2 ) fooC( tinP , napFoo2 ) ;
fooC* pFoo3 = new( 0 , tinP , &napFoo1 ) fooC( tinP , napFoo1 ) ;
fooC* pFoo2 = new( 0 , tinP , &napFoo2 ) fooC( tinP , napFoo2 ) ;
napkinC napFoo2( tinP , TAG( TAGiDnULL ) , "napFoo" , 0 , sizeof( fooC ) , ifcOPENsHAREDmEMORYhOW_nCeO ) ;

fooC* pFoo1 = new( 0 , tinP , &napFoo1 ) fooC( tinP , napFoo1 ) ;
napkinC napFoo1( tinP , TAG( TAGiDnULL ) , "napFoo" , 0 , sizeof( fooC ) , ifcOPENsHAREDmEMORYhOW_nCeO ) ;

TODO

}
    else inc02AM( cRef ) ;
    }
        napBackP.formattingIsDoneF( tinP ) ;
        *(countT*)&cSomeConstantInfo = 0x11111111 ;
        cRef = 1 ;
    {
    if( !napBackP.bFormattedF() )
{
cSomeConstantInfo( cSomeConstantInfo ) //TO AVOID COMPILER ERROR
fooC::fooC( tinS& tinP , napkinC& napBackP ) :

}
    dec02AM( cRef ) ;
{
fooC::~fooC( voidT )

NEWdELcLASS( 1 , fooC )

;
}
    fooC( tinS& tinP , napkinC& napBackP ) ;
    ~fooC() ;
    NEWdELcLASSpROTOS

    public :

    const countT    cSomeConstantInfo ;
    countT          cRef ;
{
class fooC

/*1*/WAKEsHOWtEXT( "example.other.cpp.extances" )/*1*/
/**/
*/
 instances must be constructed and destructed dynamically, using operators new delete or new[] delete[]
 no members are required; there is no memory footprint overhead
 no requirements are placed on the class whatsoever except that the constructor must format conditionally
 extance is constructed just like an instance; application code provides a napkinC instance
 extance is visible to multiple processes within a memory space
features
 use an instance reference instead
it is bad code style to use an extance only within a single process
an extance can be seen and manipulated by multiple processes within a memory space
an extance is an exported instance
 to run multiple instances of me, you must either copy the code to another adam def or tell the handoffOld subsystem that multiple instances are permitted
to view this demonstration, run multiple process instances of me using a debugger
"extances" is the name i give to the c++ technique demonstrated here
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//


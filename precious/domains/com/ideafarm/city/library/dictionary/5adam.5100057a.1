
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

}
    }
        etThread.delF( tinP , pbi ) ;
        }
            }
                }
                    }
                        }
                            }
                                break ;
                                sCatch.writeF( tinP , idPort , nicName , posto , sizeof posto ) ;
                
                                ;
                
                                    "All commands are currently disabled.\r\n"
                
                                osTextT posto[] =
                            {
                            case 0 : // INVALID idCmd SO REPLY WITH INSTRUCTIONS
                        {
                        switch( pbi[ 1 ] )
                    {
                    if( cbi >= 2 )
                {
                case 1 : //CURRENT idFormat
                }
                    break ;
                    sCatch.writeF( tinP , idPort , nicName , posto , sizeof posto ) ;
    
                    ;
    
                        "Send 0x01 then 0x00 for command list.\r\n"
                        "Door\r\n"
                        postIPDOSlONG " <> IPDOS (tm)\r\n"
    
                    osTextT posto[] =
                {
                case 0 : //INVALID idFormat, SO REPLY WITH INSTRUCTIONS
            {
            switch( pbi[ 0 ] ) //idFormat OF PACKET
        {
        if( !ether && pbi && cbi )
    
        sCatch.readF( tinP , pbi , cbi , idPort , nicName ) ; ___( pbi ) ;
        nicNameC nicName ;
        ZE( countT , idPort ) ;
        ZE( countT , cbi ) ;
        ZE( byteT* , pbi ) ;
    {
    while( !etThread && !ether )
    sCatch.bindF( tinP , ifcIDpORT_DOOR ) ;
    socketC sCatch( tinP , etThread , TAG( TAGiDnULL ) , ifcSOCKETtYPE_DATAgRAM ) ;

    httpServerC server( tinP , arg1 , arg2 ) ;
    arg2.pHttpRawCommandServerCBF        = httpRawCommandServerCBF ;
    arg2.pHttpFreshenCacheCBF            = httpFreshenCacheCBF ;
    arg2.pHttpLoadContentDynamicF        = httpLoadContentDynamicCBF ;
    arg2.pHttpLoadContentStaticF         = httpLoadContentStaticCBF ;
    httpServerC_arg2S arg2 ;
    httpServerC_arg1S arg1( TAG( TAGiDnULL ) , etThread , cArgApp , ifcIDpORT_DOOR , flSOCKETc_null , T("Door") ) ;
    ZE( countT , cArgApp ) ;
{

CONoUTrAW( "DOOR\r\n" ) ; //U::
 
TODO

}
    }
        }
            }
                break ;
                sockP.writeF( tinP , postReply , sizeof postReply - 1 ) ;

                ;
        
                    "(Some commands are disabled at this home.)\r\n"
                    "a:   about (server identification, contact info, etc.)\r\n"

                    "q:   quit\r\n"
                    "?:   help\r\n"
                    "\r\n"
        
                osTextT postReply[] =
            {
            case '?' :
            }
                break ;
                bQuit = 1 ;
                sockP.writeF( tinP , postReply , sizeof postReply - 1 ) ;

                ;
        
                    "bye\r\n"
                    "\r\n"
        
                osTextT postReply[] =
            {
            case 'q' :
            }
                break ;
                sockP.writeF( tinP , postReply , sizeof postReply - 1 ) ;

                ;
        
                    postIPDOSlONG " <> IPDOS (tm) Developer's Bulletin\r\n"
                    "To receive advance notice of semantics and syntax changes for this port, subscribe to the\r\n"
                    "Information to assist affected users in migrating to new syntax and semantics is sometimes provided here.\r\n"
                    "Support for obsoleted semantics and syntax is usually removed quickly.\r\n"
                    "All semantics and syntax are subject to change without notice.\r\n"
                    "\r\n"
                    "Please report any omissions or defects.\r\n"
                    "that use this port, is provided here.\r\n"
                    "All information that you need to use this port, or to develop automata\r\n"
                    "This Well Known System Port, 902/tcp ideafarm-door, is selfdocumenting.\r\n"
                    "\r\n"
                    "IdeaFarm " "(tm) has been a registered trademark of Wo'O Ideafarm for the software product category since 1992.\r\n"
                    "http://ideafarm.com\r\n"
                    postIPDOSlONG " <> IPDOS (tm)\r\n"
                    "\r\n"
        
                osTextT postReply[] =
            {
            case 'a' :
        {
        switch( bIn )
        sockP.readF( tinP , &bIn , 1 ) ; //IF CLIENT IS GONE THEN POOP AND bIn REMAINS 0
        bIn = 0 ;

        }
            sockP.writeF( tinP , postOldCmdBanner , sizeof postOldCmdBanner - 1 ) ;
    
            ;
    
                "\r\n"
                "\r\n"
                "For a list of commands, key '?'."
                "\r\n"
                "elapses without receiving anything from you.\r\n"
                "This connection will time out if 8 TICK (45 foreign minutes)\r\n" //CS:CODEsYNC: 0850104 0850104
                "\r\n"
                "to previous commands.\r\n"
                "You may continue to enter commands while I am responding\r\n"
                "I am now in command mode.\r\n"
                "\r\n"
                "System Port 902/tcp: Door\r\n"
                postIPDOSlONG " <> IPDOS (tm)\r\n"
                "\r\n"
                "\r\n"
    
            osTextT postOldCmdBanner[] =

            bWoth = 0 ;
        {
        if( bWoth && idEscapedP == '!' )
    {
    while( !bQuit && !bQuitP && !etThread && !POOP )
    ZE( byteT , bIn ) ;
    ZE( boolT , bQuit ) ;
    boolT bWoth = 1 ;

    time1idleTimeoutWriteP = time1idleTimeoutReadP = TICK * 0x8 ; //CS:CODEsYNC: 0850104 0850104
{
voidT httpRawCommandServerCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , countT& cArgP , socketC& sockP , countT& time1idleTimeoutReadP , countT& time1idleTimeoutWriteP , sessionsC& sessionsP , nicNameC& nnPeerP , const countT idEscapedP )

}
    }
        meP.storeReplyF( tinP , ifcIDfORMhTTPrEPLY_BIGhEAD , T("/") , 0 , ifcIDsNIPpREDEFINED_HTTPoKtEXThTML , T("Door <> IPDOS (tm) <> IdeaFarm " "(tm) Piggyback Distributed Operating System") , T("Well Known System Port 902/tcp: ideafarm-door") , T("Well Known System Port 902/tcp: ideafarm-door.  Serving humans and automata worldwide.") , T("Serving Humans and Automata Worldwide...") , T("") , 0 , t1 ) ;

        ) ;

            //"</FORM>\r\n"
            //    "</TABLE>\r\n"
            //        "</TR>\r\n"
            //            "</TD>\r\n"
            //                "</SCRIPT>\r\n"
            //                    "// -->\r\n"
            //                        "document.getElementById( \"idtCmd\" ).focus() ;\r\n"
            //                    "<!--\r\n"
            //                "<SCRIPT LANGUAGE=\"JavaScript\">\r\n"
            //                "<INPUT ID=idtCmd TYPE=\"text\" MAXLENGTH=\"256\" SIZE=\"128\" NAME=\"cmd\" value=\"\"><BR>\r\n"
            //                "<INPUT TYPE=\"hidden\" NAME=\"cmd\" VALUE=\"doorcmd\">\r\n"
            //            "<TD style=\"background-color:" ifcCOLORhTMLwHAT_BACKnORMAL " ; color:" ifcCOLORhTMLwHAT_FOREnORMAL " ; align=center\">\r\n"
            //        "<TR>\r\n"
            //        "</TR>\r\n"
            //            "</TD>\r\n"
            //                "<SPAN class=\"spaLarge\">Enter a function, or just press the Enter key</SPAN>\r\n"
            //            "<TD colspan=3 style=\"background-color:" ifcCOLORhTMLwHAT_FOREnORMAL " ; color:" ifcCOLORhTMLwHAT_BACKnORMAL " ; align=center\">\r\n"
            //        "<TR>\r\n"
            //        "</TR>\r\n"
            //            "</td>\r\n"
            //                "<label for=idrCmdMode3 STYLE=\"color:" ifcCOLORhTMLwHAT_FOREnOTEbRIGHT  "\"><SPAN class=spaXXSmall onMouseOut=\"swatF();\" onMouseOver=\"flyF( 'Help me!' );\">help</SPAN></label>\r\n"
            //                "<input id=idrCmdMode3 type=\"radio\" name=\"cmdmode\" value=\"help\" onMouseOut=\"swatF();\" onMouseOver=\"flyF( 'Help me!' );\"></input>\r\n"
            //                "<label for=idrCmdMode2 STYLE=\"color:" ifcCOLORhTMLwHAT_FOREnOTEbRIGHT  "\"><SPAN class=spaXXSmall onMouseOut=\"swatF();\" onMouseOver=\"flyF( 'Tell me what the effect of this command would be.' );\">check</SPAN></label>\r\n"
            //                "<input id=idrCmdMode2 type=\"radio\" name=\"cmdmode\" value=\"check\" onMouseOut=\"swatF();\" onMouseOver=\"flyF( 'Tell me what the effect of this command would be.' );\"></input>\r\n"
            //                "<label for=idrCmdMode1 STYLE=\"color:" ifcCOLORhTMLwHAT_FOREnOTEbRIGHT  "\"><SPAN class=spaXXSmall onMouseOut=\"swatF();\" onMouseOver=\"flyF( 'Obey the command that I enter.' );\">do</SPAN></label>\r\n"
            //                "<input id=idrCmdMode1 type=\"radio\" name=\"cmdmode\" value=\"do\" checked onMouseOut=\"swatF();\" onMouseOver=\"flyF( 'Obey the command that I enter.' );\"></input>\r\n"
            //            "<td>\r\n"
            //        "<TR>\r\n"
            //    "<TABLE style=\"border: ridge medium color:" ifcCOLORhTMLwHAT_FOREnOTEnORMAL  " ;background-color:" ifcCOLORhTMLwHAT_BACKnORMAL  " ; color:" ifcCOLORhTMLwHAT_FOREnORMAL " ; width: 100% ;\">\r\n"
            //"<FORM METHOD=\"POST\" NAME=\"doorcmd\" ACTION=\"/\">\r\n"
            //"  \r\n"
            //"  \r\n"
            //"  \r\n"
            //"  \r\n"
            //"  \r\n"
            //"  \r\n"
            //"  \r\n"
            //"<P>\r\n"

            "</CENTER>\r\n"
                "<A HREF=\"/menuofreports.html\">server reports</A>\r\n"
            "<CENTER>\r\n"
            "<P>\r\n"
            "The following link is for IdeaFarm " "(tm) Operations internal use only:\r\n"
            "<P>\r\n"
            "</CENTER>\r\n"
                "<IMG SRC=\"/blob/ipdos.door.2.gif\" onMouseOut=\"swatF() ;\" onMouseOver=\"flyF( 'Both humans and robots use raw TELNET when opening Door.' ) ;\" alt=\"\" border=\"0\">\r\n"
                "<P>"
                "<IMG SRC=\"/blob/ipdos.door.1.gif\" onMouseOut=\"swatF() ;\" onMouseOver=\"flyF( 'Both humans and robots use raw TELNET when opening Door.' ) ;\" alt=\"\" border=\"0\">\r\n"
            "<CENTER>\r\n"
            "<P>"
            "Here is a screenshot of a short session:\r\n"
            "<P>\r\n"
            "To open a command window, click Start / Run... and enter CMD.EXE\r\n"
            "<P>\r\n"
            "</CENTER>\r\n"
            "telnet ideafarm.com 902\r\n"
            "<CENTER>\r\n"
            "<P>\r\n"
            "For example, on MS Windows, you can open a command prompt (by running CMD.EXE) and then enter:\r\n"
            "<P>\r\n"
            "  To view that command set, just connect to port 902 using telnet client software.\r\n"
            "The raw telnet flavor of 902/tcp supports a small provisional command set.\r\n"
            "<P>\r\n"
            "  The http flavor is being developed and is not yet ready for use.\r\n"
            "  This page was served to you by the http flavor of 902/tcp.\r\n"
            "  The port will eventually support both raw telnet connections and http connections.\r\n"
            "  To receive connectionless documentation, send a datagram that begins with byte value 0.\r\n"
            "Well Known System Port 902/tcp: ideafarm-door is self-documenting and currently supports both connectionless and connection clients.\r\n"
    
        TN( t1 ,
    {
{
voidT httpLoadContentStaticCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP )

}
    meP.storeReplyF( tinP , ifcIDfORMhTTPrEPLY_BIGhEAD , T("/menuofreports.html") , 0 , ifcIDsNIPpREDEFINED_HTTPoKtEXThTML , T("Menu of Reports") , T("The following server reports are available") , T("The following server reports are available") , T("Check it out!...") , T("") , menuOfReportsCBF ) ;
    meP.storeReplyF( tinP , ifcIDfORMhTTPrEPLY_BIGhEAD , T("/nobot/report3.html") , 0 , ifcIDsNIPpREDEFINED_HTTPoKtEXThTML , T(POSTtITLErEPORT3) , T("All comment forms on file") , T("All comment forms on file") , T("Compliments and constructive criticism...") , T("") , report3CBF ) ;
    meP.storeReplyF( tinP , ifcIDfORMhTTPrEPLY_BIGhEAD , T("/nobot/report2.html") , 0 , ifcIDsNIPpREDEFINED_HTTPoKtEXThTML , T(POSTtITLErEPORT2) , T("All emailzip forms on file") , T("All emailzip forms on file") , T("Welcome to the village fire...") , T("") , report2CBF ) ;
    meP.storeReplyF( tinP , ifcIDfORMhTTPrEPLY_BIGhEAD , T("/nobot/report1.html") , 0 , ifcIDsNIPpREDEFINED_HTTPoKtEXThTML , T(POSTtITLErEPORT1) , T("These sessions closed in the current strong") , T("These sessions closed in the current strong") , T("Visitors this strong...") , T("") , report1CBF ) ;
{
voidT httpLoadContentDynamicCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP )

}
{
voidT httpFreshenCacheCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , countT& cArgP , const boolT bCleanupP )

}
    stBodyP << (countT)posts ;
    , 0 , flSTRmAKE_PREFIXlENGTH ) ;
    
        tContent
    
    etThread.strMakeF( tinP , LF , posts , 
    ZE( osTextT* , posts ) ;

    }
        ;
            )
                "</OL>"
                "<LI><A HREF=\"/nobot/report3.html\">" POSTtITLErEPORT3 "</A>"
                "<LI><A HREF=\"/nobot/report2.html\">" POSTtITLErEPORT2 "</A>"
                "<LI><A HREF=\"/nobot/report1.html\">" POSTtITLErEPORT1 "</A>"
                "<OL>"
                "<P>"
                "  Each report is compiled to order, so please be patient while waiting for your selection."
                "The following reports are available."
            T(

        tContent =
    {
    else
    }
        ;
            )
                "  To set privileges for your session, click \"do\" at the top of this page."
                "Your session does not currently have the needed privilege."
            T(
    
        tContent =
    {
    if( !( F(session.privilegesF(tinP)) & flSESSIONpRIVILEGE_VIEWsERVERrEPORTS ) )
    TN( tContent , "" ) ;
    sessionC& session = sessionsP( tinP , nnPeerP ) ;
{
voidT menuOfReportsCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttNameP , const strokeS* const psttQueryKVP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP )

}
    stBodyP << (countT)posts ;
    , 0 , flSTRmAKE_PREFIXlENGTH ) ;
    
        tContent
    
    etThread.strMakeF( tinP , LF , posts , 
    ZE( osTextT* , posts ) ;

    }
        }
            tContent += T("</PRE></SPAN>") ;
            }
                tContent += tpa ;
                }
                    DEL( pDatum ) ;
                    tContent += T(((datumPeanutC*)pDatum)->psttOldCommentF())+tcr ;
                    sws_pDatum >> pDatum ;
                    ZE( plateC* , pDatum ) ;
                {
                while( sws_pDatum )
    
                tContent += TF2(((datumPeanutC*)pDatumLever)->idAdamF(),flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tsp+T(((datumPeanutC*)pDatumLever)->psttUrlF())+tpa ;
                pDatumLever = (datumPeanutC*)sws_pDatum.leverF( tinP , idf ) ;
            {
            for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
            TN( tpa , "\r\n\r\n" ) ;
            TN( tcr , "\r\n" ) ;
            TN( tsp , " " ) ;
            countT cFlavors = sws_pDatum.cFlavorsF( tinP ) ;
    
            }
                etThread.delF( tinP , pstt1m ) ;
                }
                    etThread.delF( tinP , psttShort ) ;
                    etThread.delF( tinP , psttDirOld ) ;
                    etThread.delF( tinP , psttDirNew ) ;
                    }
                        }
                            }
                                datumPeanutC::setModeF() ;
                                sws_pDatum.sinkF( tinP , countTC() , pDatum ) ;
                                datumPeanutC::setModeF( 1 ) ;
                                pDatumLever = pDatum ;
                                datumPeanutC* pDatum = new( 0 , tinP , LF ) datumPeanutC( tinP , etThread , sIn ) ; ___( pDatum ) ;
                            {
                            else
                            }
                                LOGrAW( T("bad form file: ")+T(psttc1)+T("\r\n") ) ;
                                POOPR
                            {
                            if( POOP )
                            
                            etThread.boxGetShadowF( tinP , sIn , tAllNew ) ;
                            soulC sIn( tinP , TAG( TAGiDnULL ) ) ;
                        {
                        else
                        if( POOP ) { POOPR ; }
                        tinP.pEtScratch->diskMoveFileOrDirF( tinP , tAllNew , T(psttDirOld)+tShort ) ;
                        TN( tAllNew , "" ) ; tAllNew = T(psttDirNew)+tShort ;
                        TN( tShort , "" ) ; tShort = T(psttShort) ;
                    {
                    if( psttDirNew && psttDirOld && psttShort )
                    etThread.strReplaceF( tinP , psttDirNew , psttDirOld , tOldDir , tNewDir ) ; ___( psttDirNew ) ;
                    etThread.strBisectF( tinP , psttDirOld , psttShort , psttc1 , T("/") , - 1 , flSTRbISECT_APPENDdELIMITER ) ; ___( psttDirOld ) ; ___( psttShort ) ;
                    ZE( strokeS* , psttShort ) ;
                    ZE( strokeS* , psttDirOld ) ;
                    ZE( strokeS* , psttDirNew ) ;
        
                    if( bQuitP ) break ;
                {
                FORsTRINGSiN1( pstt1m )
                etThread.boxMenuF( tinP , soul , T("///ideafarm/ephemeral/backed.up.daily/domains/com/ideafarm/")+TF2(ifcIDaDAM_ROOTfORMdATAeATER,flFORMAT_NObIGITvALUES)+T("/arc/form.peanut*") , 0 , TUCK ) ; ___( pstt1m ) ;
                TN( tNewDir , "/arc.seen/" ) ;
                TN( tOldDir , "/arc/" ) ;
                ZE( strokeS* , pstt1m ) ;
            {
            switchStackC sws_pDatum( tinP , etThread , TAG( TAGiDnULL ) , flSTACKc_DOnOTsERIALIZE , pDatumLever , flSTACKc_null , ifcSTACKtYPE_PTR_plateC ) ;
            ZE( plateC* , pDatumLever ) ;
    
            tContent = T("<SPAN STYLE=\"font-family: monospace\"><PRE>") ;
        {
        IFsCRATCH
    {
    else
    }
        ;
            )
                "  To set privileges for your session, click \"privileges\" in the upper left corner of this page."
                "Your session does not currently have the needed privilege."
            T(
    
        tContent =
    {
    if( !( F(session.privilegesF(tinP)) & flSESSIONpRIVILEGE_VIEWsERVERrEPORTS ) )
    TN( tContent , "" ) ;
    sessionC& session = sessionsP( tinP , nnPeerP ) ;
{
voidT report3CBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttNameP , const strokeS* const psttQueryKVP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP )

}
    stBodyP << (countT)posts ;
    , 0 , flSTRmAKE_PREFIXlENGTH ) ;
    
        tContent
    
    etThread.strMakeF( tinP , LF , posts , 
    ZE( osTextT* , posts ) ;

    }
        tContent += T("</PRE></SPAN>") ;
        }
            tContent += tpa ;
            }
                DEL( pDatum ) ;
                tContent += T(((datumEmailZipC*)pDatum)->psttEmailF())+tsp+T(((datumEmailZipC*)pDatum)->psttNoteF())+tcr ;
                std >> pDatum ;
                ZE( plateC* , pDatum ) ;
            {
            while( std )

            tContent += T(((datumEmailZipC*)pDatumLever)->psttZipF())+tspop+TF2(std,flFORMAT_NObIGITvALUES)+tcppa ;
            datumEmailZipC::setModeF() ;
            stackC& std = sws_pDatum ;
            datumEmailZipC::setModeF( idMODEeMAILzIPsORT_ZIP ) ;
            pDatumLever = (datumEmailZipC*)sws_pDatum.leverF( tinP , idf ) ;
        {
        for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
        TN( tcppa , ")\r\n\r\n" ) ;
        TN( tpa , "\r\n\r\n" ) ;
        TN( tcr , "\r\n" ) ;
        TN( tspop , " (" ) ;
        TN( tsp , " " ) ;
        countT cFlavors = sws_pDatum.cFlavorsF( tinP ) ;

        }
            etThread.delF( tinP , pstt1m ) ;
            }
                }
                    std.sinkF( tinP , countTC() , pDatum ) ;
                    datumEmailZipC::setModeF() ;
                    stackC& std = sws_pDatum ;
                    datumEmailZipC::setModeF( idMODEeMAILzIPsORT_ZIP ) ;
                    pDatumLever = pDatum ;
                    datumEmailZipC* pDatum = new( 0 , tinP , LF ) datumEmailZipC( tinP , etThread , sIn ) ; ___( pDatum ) ;
                {
                else
                }
                    LOGrAW( T("bad form file: ")+T(psttc1)+T("\r\n") ) ;
                    POOPR
                {
                if( POOP )
                
                etThread.boxGetShadowF( tinP , sIn , psttc1 ) ;
                soulC sIn( tinP , TAG( TAGiDnULL ) ) ;
    
                if( bQuitP ) break ;
            {
            FORsTRINGSiN1( pstt1m )
            etThread.boxMenuF( tinP , soul , T("///ideafarm/ephemeral/backed.up.daily/domains/com/ideafarm/")+TF2(ifcIDaDAM_ROOTfORMdATAeATER,flFORMAT_NObIGITvALUES)+T("/arc/form.emailzip*") , 0 , TUCK ) ; ___( pstt1m ) ;
            ZE( strokeS* , pstt1m ) ;
        {
        switchStackC sws_pDatum( tinP , etThread , TAG( TAGiDnULL ) , flSTACKc_DOnOTsERIALIZE , pDatumLever , flSTACKc_null , ifcSTACKtYPE_PTR_plateC ) ;
        ZE( plateC* , pDatumLever ) ;

        tContent = T("<SPAN STYLE=\"font-family: monospace\"><PRE>") ;
    {
    else
    }
        ;
            )
                "  To set privileges for your session, click \"privileges\" in the upper left corner of this page."
                "Your session does not currently have the needed privilege."
            T(
    
        tContent =
    {
    if( !( F(session.privilegesF(tinP)) & flSESSIONpRIVILEGE_VIEWsERVERrEPORTS ) )
    TN( tContent , "" ) ;
    sessionC& session = sessionsP( tinP , nnPeerP ) ;
{
voidT report2CBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttNameP , const strokeS* const psttQueryKVP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP )

}
    stBodyP << (countT)posts ;
    , 0 , flSTRmAKE_PREFIXlENGTH ) ;
    
        tContent
    
    etThread.strMakeF( tinP , LF , posts , 
    ZE( osTextT* , posts ) ;

    }
        tContent += T("</PRE></SPAN>") ;

        }
            }
                DEL( pDatum ) ;
                //tContent += T((const strokeS*)*(datumSessionC*)pDatum)+tbr ;
                sws_pDatum >> pDatum ;
                ZE( plateC* , pDatum ) ;
            {
            while( sws_pDatum )

            tContent += T((const strokeS*)all)+tbr ;
            all += sws_pDatum ;
            datumSessionC all( tinP ) ;

            pDatumLever = (datumSessionC*)sws_pDatum.leverF( tinP , idf ) ;
        {
        for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
        TN( tbr , "<BR>" ) ;
        TN( tsp , " " ) ;
        countT cFlavors = sws_pDatum.cFlavorsF( tinP ) ;

        }
            etThread.delF( tinP , pstt1m ) ;
            }
                }
                    sws_pDatum.sinkF( tinP , countTC() , pDatum ) ;
                    pDatumLever = pDatum ;
                    datumSessionC* pDatum = new( 0 , tinP , LF ) datumSessionC( tinP , etThread , sIn ) ; ___( pDatum ) ;
                {
                else
                }
                    LOGrAW( T("bad founder file: ")+T(psttc1)+T("\r\n") ) ;
                    POOPR
                {
                if( POOP )
                
                etThread.boxGetShadowF( tinP , sIn , psttc1 ) ;
                soulC sIn( tinP , TAG( TAGiDnULL ) ) ;
    
                if( bQuitP ) break ;
            {
            FORsTRINGSiN1( pstt1m )
            etThread.boxMenuF( tinP , 0 , T("///ideafarm/ephemeral/domains/com/ideafarm/ipdos/sessions/session.*") , 0 , TUCK ) ; ___( pstt1m ) ;
            ZE( strokeS* , pstt1m ) ;
        {
        switchStackC sws_pDatum( tinP , etThread , TAG( TAGiDnULL ) , flSTACKc_DOnOTsERIALIZE , pDatumLever , flSTACKc_null , ifcSTACKtYPE_PTR_plateC ) ;
        ZE( plateC* , pDatumLever ) ;

        //tContent = T("<SPAN STYLE=\"font-family: monospace; font-size: x-small\"><PRE>") ;
        tContent = T("<SPAN STYLE=\"font-family: monospace\"><PRE>") ;
    {
    else
    }
        ;
            )
                "  To set privileges for your session, click \"privileges\" in the upper left corner of this page."
                "Your session does not currently have the needed privilege."
            T(
    
        tContent =
    {
    if( !( F(session.privilegesF(tinP)) & flSESSIONpRIVILEGE_VIEWsERVERrEPORTS ) )
    TN( tContent , "" ) ;
    sessionC& session = sessionsP( tinP , nnPeerP ) ;
{
voidT report1CBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttNameP , const strokeS* const psttQueryKVP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP )

#define POSTtITLErEPORT3 "Peanut Gallery"
#define POSTtITLErEPORT2 "Emailzip Forms On File"
#define POSTtITLErEPORT1 "Recent Closed Sessions"

#include postHEADER

//OBSOLETED BY f750104, WHICH NOW DOES BOTH DOORS

/*1*/WAKEhIDE( "ifcIDaDAM_KERNEL4DOOR.kernel.door" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


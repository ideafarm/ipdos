
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    _OUT_
    if( swsYP.cFlavorsF( tinP ) && swMarkerP.cFlavorsF( tinP ) && idStyleP && flagsP ) ;

    strFuseF( tinP , psttP , T("")+S2(0,scOld_POPoRIGIN)+OLDmOVEtO(cColP,0)+S2(0,scOld_POPoRIGIN) ) ;

    bLeverP.ungrabF( tinP ) ;

    }
        strFuseF( tinP , psttP , T("")+S2(0,scOld_POPcOLOR) ) ;

        }
            while( !swsXP.third && !swsYP.third && ~hDownX && ~hDownY ) ;
            }
                }
                    if( !hDownX ) strFuseF( tinP , psttP , T("")+OLDlINEtO(xx+0.5,yy+0.5) ) ;
                    bWoth = 0 ;
                {
                if( bWoth )

                //strFuseF( tinP , psttP , T("")+OLDmOVE(-2,-2)+OLDlINE(4,0)+OLDlINE(0,4)+OLDlINE(-4,0)+OLDlINE(0,-4)+OLDmOVE(2,2) ) ; //U: HARDCODED MARKER

                strFuseF( tinP , psttP , T("")+(bWoth?OLDmOVEtO(xx+0.5,yy+0.5):OLDlINEtO(xx+0.5,yy+0.5)) ) ;
                measureT yy = scaleY * ( *(measureT*)&swsYP.downF( tinP , hDownY ) + biasY ) ;
                measureT xx = scaleX * ( *(measureT*)&swsXP.downF( tinP , hDownX ) + biasX ) ;
            {
            do
            handleC hDownY( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
            handleC hDownX( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
            boolT bWoth = 1 ;
        {
        if( swsXP )

        strFuseF( tinP , psttP , T("")+S2((countT)swColorP,scOld_cPUSHcOLOR) ) ;

        continue ;
        )
            ( pczLeverExcludeP &&  strIdNewF( pczLeverExcludeP , leverP ) )
            ( pczLeverIncludeP && !strIdNewF( pczLeverIncludeP , leverP ) ) ||
        (
        if
        leverP = swsXP.leverF( tinP , idf ) ;
    {
    for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
    cFlavors = swsXP.cFlavorsF( tinP ) ;

    }
        scaleY = bSingleY ? 1 : ( cRowP - 3 /* - crMarker */ ) / ( mMaxAllY - mMinAllY ) ;
        scaleX = bSingleX ? 1 : ( cColP - 3 /* - ccMarker */ ) / ( mMaxAllX - mMinAllX ) ;
        biasY  = bSingleY ? ( cRowP - 2 /* - crMarker */ ) / 2 - mMinAllY : - mMinAllY ;
        biasX  = bSingleX ? ( cColP - 2 /* - ccMarker */ ) / 2 - mMinAllX : - mMinAllX ;
        boolT bSingleY = mMaxAllY < mMinAllY + 1e-10 ;
        boolT bSingleX = mMaxAllX < mMinAllX + 1e-10 ;
        }
            if( F(flagsP) & flSTRgRAPH_ORIGINxiSzE && 0.0 < mMinAllX ) mMinAllX = 0.0 ;
            if( F(flagsP) & flSTRgRAPH_ORIGINyiSzE && 0.0 < mMinAllY ) mMinAllY = 0.0 ;

            }
                }
                    if( mMaxAllY < mMaxY ) mMaxAllY = mMaxY ;
                    if( mMinAllY > mMinY ) mMinAllY = mMinY ;
                    statisticsF( tinP , mMinY , mMaxY , mMeanY , mMedianY , mStdDeviationY , swsYP ) ;
                    ZE( measureT , mStdDeviationY ) ;
                    ZE( measureT , mMedianY ) ;
                    ZE( measureT , mMeanY ) ;
                    ZE( measureT , mMaxY ) ;
                    ZE( measureT , mMinY ) ;
        
                    if( mMaxAllX < mMaxX ) mMaxAllX = mMaxX ;
                    if( mMinAllX > mMinX ) mMinAllX = mMinX ;
                    statisticsF( tinP , mMinX , mMaxX , mMeanX , mMedianX , mStdDeviationX , swsXP ) ;
                    ZE( measureT , mStdDeviationX ) ;
                    ZE( measureT , mMedianX ) ;
                    ZE( measureT , mMeanX ) ;
                    ZE( measureT , mMaxX ) ;
                    ZE( measureT , mMinX ) ;
                {
                if( swsXP )
        
                continue ;
                )
                    ( pczLeverExcludeP &&  strIdNewF( pczLeverExcludeP , leverP ) )
                    ( pczLeverIncludeP && !strIdNewF( pczLeverIncludeP , leverP ) ) ||
                (
                if
                leverP = swsXP.leverF( tinP , idf ) ;
            {
            for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
            mMaxAllY = mMaxAllX = - MAXmEASUREt ;
            mMinAllY = mMinAllX =   MAXmEASUREt ;
        {
        if( cFlavors )
        ZE( measureT , mMaxAllY ) ;
        ZE( measureT , mMaxAllX ) ;
        ZE( measureT , mMinAllY ) ;
        ZE( measureT , mMinAllX ) ;
    {
    ZE( measureT , scaleY ) ;
    ZE( measureT , biasY ) ;
    ZE( measureT , scaleX ) ;
    ZE( measureT , biasX ) ;
    countT cFlavors = swsXP.cFlavorsF( tinP ) ;

    bLeverP.grabF( tinP , TAG( TAGiDnULL ) ) ;

    POSTPONEtEST( psttP ) ;
    strFuseF( tinP , psttP , T("")+S2(0,scOld_cPUSHoRIGIN)+OLDmOVEtO(1,1)+S2(0,scOld_cPUSHoRIGIN)+OLDmOVE(1,0)+T(psttNoteP)+S2(0,scOld_POPoRIGIN)+OLDmOVEtO(0,0)+OLDlINEtO(cColP-1,0)+OLDlINEtO(cColP-1,cRowP-1)+OLDlINEtO(0,cRowP-1)+OLDlINEtO(0,0)+OLDmOVEtO(1/*+ccMarker/2*/,1/*+crMarker/2*/)+S2(0,scOld_cPUSHoRIGIN) ) ; //CALLER MUST TAG __(  )

    //const countT crMarker = 4 ;
    //const countT ccMarker = 4 ; //WITH CURRENT CODE, THESE MUST BE EVEN

    if( !psttP ) strMakeF( tinP , psttP , T("") , 0x100000 ) ; //U: SIZE ACCORDING TO AMOUNT OF DATA

    _INoLD_

    }
        if( POOP ) return ;
        FV( flSTRgRAPH , flagsP ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL
    SCOOP
{
/*1*/voidT etherC::strGraphF( tinS& tinP , strokeS*& psttP , countT& leverP , batonC& bLeverP , switchStackC& swsXP , switchStackC& swsYP , switchC& swColorP , switchC& swMarkerP , const countT cColP , const countT cRowP , const countT idStyleP , const flagsT flagsP , const strokeS* const psttNoteP , const countT* pczLeverIncludeP , const countT* pczLeverExcludeP )/*1*/

/**/
*/
\<A HREF=\"5.10301a8.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$strGraphF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


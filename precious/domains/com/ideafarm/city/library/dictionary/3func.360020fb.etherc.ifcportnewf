
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return c4o.c2 ;

    }
        __( idAck - ifcREPLY_ACK ) ;
        sock.readF( tinP , (byteT*)&idAck , sizeof idAck ) ;
        ZE( countT , idAck ) ;

        sock.writeF( tinP , (byteT*)&c4o , sizeof c4o ) ;

        { ZE( countT , idp ) ; sock.myNameF( tinP , idp , tinP.pAdamGlobal1->_etherC_.nicNamePaper ) ; }
        tinP.pAdamGlobal1->_etherC_.idPortFace = idPortP ;

        sock.connectF( tinP , ifcPORToLD1pORTaUTHORITY ) ;
        socketC sock( tinP , *this , TAG( TAGiDnULL ) ) ;
    {

    c4o.c4 = idPortP ;
    c4o.c3 = idiClassP ? idiClassP : processGlobal1I.idAdamRoot ;
    c4o.c2 = tinP.pAdamGlobal1->_etherC_.idProcessOld ;
    c4o.c1 = ifcCMDpORTaUTHORITY_NEW ;
    count4S c4o ;

    _IO_

    }
        if( POOP ) return 0 ;
        __( !tinP.pAdamGlobal1->_etherC_.pEtPrime ) ;
        __( !tinP.pAdamGlobal1->_etherC_.idProcessOld ) ;
        __Z( idPortP ) ;
        __( tinP.pAdamGlobal1->_etherC_.idPortFace ) ;
        if( POOP ) return 0 ;
    {
    IFbEcAREFUL
    SCOOP
{
/*1*/countT etherC::ifcPortNewF( tinS& tinP , const countT idPortP , const countT idiClassP )/*1*/
/**/
*/
  if 0 then the owner of this etherC object is used
  can be 0
 idiClassP
  must not be 0
 idPortP
 tinP
arguments
 if idiClassP is not 0 then it is used
evaluates to the idiClass actually registered
\<A HREF=\"5.1030122.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$ifcPortNewF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


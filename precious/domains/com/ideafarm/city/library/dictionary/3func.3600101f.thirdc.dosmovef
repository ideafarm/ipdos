
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    _OUT_
    }
        BOSpOOP
        while( !POOP && ( bNoQuitEarly || ( cTriesP && -- cTriesP ) ) ) ;
        }
            }
                ++ s ; dosSleepIF( tinP , TOCK >> 2 ) ;
            {
            else if( ( !cTriesP || cTriesP > 1 ) )
            if( !tinP.bosFail ) break ;

            }
                tinP.brcQuery = tinP.brcRaw ;
                BOSdOnOTtEST( WHATgbo , GetLastError() )
            {
            if( tinP.bosFail )

            #endif
                BOS( WHATgbo , BOSoK , MoveFile( postOldP , postNewP ) )
            #elif defined( __NT__ )
                BOSI( WHATgbo , BOSfAIL , DosMove( postOldP , postNewP ) )
            #ifdef __OS2__
        {
        do
        sleepC s( tinP , TAG( TAGiDnULL ) ) ;
    {
    const boolT bNoQuitEarly = !cTriesP ;
    _INoLD_

    }
        if( POOP ) return ;
        __Z( postOldP ) ;
        __Z( postNewP ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL
    SCOOP
{
/**//*1*/voidT thirdC::dosMoveF( tinS& tinP , const osTextT* const postNewP , const osTextT* const postOldP , countT cTriesP )/*1*/
*/
  if not 0 then will try cTriesP times
  if 0 then will retry forever
 cTriesP
 postOldP
 postNewP
arguments
  \<A HREF=\"5.bd00104.1.1.0.html\"\>bd00104:  WAKEsHOW( "example.simplest.func.1020021.thirdC.dosMoveF" )\</A\>
 simplest
examples
\<A HREF=\"5.1020021.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$dosMoveF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


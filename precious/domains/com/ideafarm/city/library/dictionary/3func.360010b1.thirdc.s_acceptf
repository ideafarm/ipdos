
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    }
        if( bRefuseP ) hClientP.closeIfF() ;
    
        }
            //else if( pEtherContainsMe ) bRefuseP = pEtherContainsMe->diskFileExistsF( tinP , T("///ideafarm/ephemeral/domains/com/ideafarm/ipdos/attackers/")+T(nicNameP)+T("/") ) ;
            if( !nicNameP ) nicNameP = NICnAMElOCAL ;

            }
                pcTo[ 3 - offi ] = tinP.brcRaw ;
                BOSdOnOTtEST( WHATgbo , ntohl( pcFrom[ offi ] ) )
            {
            for( countT offi = 0 ; offi < 4 ; offi ++ )
            countT* pcTo   = (countT*)(const countT*)nicNameP ;
            countT* pcFrom = (countT*)info.sin6_addr.u.Byte ;

            idPortP = tinP.brcRaw ;
            BOSdOnOTtEST( WHATgbo , ntohs( info.sin6_port ) )
            __( cbInfo - sizeof info ) ;
            __( info.sin6_family - AF_INET6 ) ;
        {
        else
        if( bRefuseP ) hClientP.closeIfF() ;
    {
    if( !POOP )

    __Z( hClientP ) ;
    }
        hClientP.osF( ifcIDtYPEhANDLE_SOCKET , oshSocket , 0 , c_pWrapper ) ;
        hClientP.resetF() ;
        countT c_pWrapper = hClientP.cNoteF() ;
        openSsl_getWrapperIF( tinP , hClientP , *phContextP ) ;
        countT oshSocket = tinP.brcRaw ;
    {
    else
    if( !phContextP ) hClientP.osF( ifcIDtYPEhANDLE_SOCKET , tinP.brcRaw ) ;
    //CS:CODEsYNC: PSEUDODUPLICATE 3600103f 360010b1

    }
        //LOGrAW5( "" , oshSocket , "    " , tinP.pAdamGlobal1->idAdam , " ++++ accept\r\n" ) ;
        countT oshSocket = tinP.brcRaw ;
    {
    BOSpOOP
    BOSS( WHATsia , BOSsOCKETcODE , accept( handleP.osF( ifcIDtYPEhANDLE_SOCKET ) , (sockaddr*)&info , &cbInfo ) )
    sCountT cbInfo = sizeof info ;
    c_memsetIF( tinP , (byteT* const)&info , sizeof info ) ;
    sockaddr_in6 info ;
    _IO_

    //POPUPcOUNT( "acceptF2 called within: " , processGlobal1I.idAdamRoot ) ; //U::

    }
        if( POOP ) return ;
        IFsIMULATEoFFLINEpOOP
        __Z( handleP ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL    
    SCOOP
{
/*1*/voidT thirdC::s_acceptF( tinS& tinP , handleC& hClientP , countT& idPortP , nicNameC& nicNameP , const handleC& handleP , boolT& bRefuseP , const handleC* const phContextP )/*1*/

/**/
*/
  if not 0 when i have accepted a connection then i close the connection and return 0
  normally should be 0
  can be 0
 bRefuseP
arguments
\<A HREF=\"5.10200d7.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$s_acceptF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


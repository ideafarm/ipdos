
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return (byteT*)pbf ; //U::RETURN const byteT*
    }
        }
            }
                cbP     = length ;
                flagsP  = flagsItem ;
                idTypeP = idType ;
                pbf     = pbMaybe ;

                if( !( F(flagsItem) & flSOULiTEM_NULLpTR ) ) pbMaybe = pbi + 3 * sizeof( countT ) ;
                ZE( const byteT* , pbMaybe ) ;

                flagsT flagsItem = ((flagsT*)pbi)[ 2 ] ;
                countT idType    = ((countT*)pbi)[ 1 ] ;
                countT length    = ((countT*)pbi)[ 0 ] ;

                const byteT* pbi = (*pJot)[ idJot ] ;
                countT idJot = ((countT*)pbs)[ idFieldP - 1 ] ;
            {
            if( !POOP )

            __NZ( idFieldP > cHandles ) ;
            countT cHandles = cbAll / sizeof( countT ) ;
        {
        if( !POOP )

        __( cbAll % sizeof( countT ) ) ;
        countT cbAll = pbse - pbs ;
    {
    else
    }
        }
            pbs += sizeof( countT ) + *(countT*)pbs ;

            }
                break ;
                if( cbP > 2 * sizeof( countT ) ) pbf = pbs + 3 * sizeof( countT ) ;

                flagsP  = ((flagsT*)pbs)[ 2 ] ;
                idTypeP = ((countT*)pbs)[ 1 ] ;
                cbP     = ((countT*)pbs)[ 0 ] ;
            {
            if( !idFieldP )
        {
        while( pbs < pbse && idFieldP -- )
    {
    if( !pJot )
    ZE( const byteT* , pbf ) ;

    }
        idFormat = *(countT*)pbs ; pbs += sizeof( countT ) ;
                                   pbs += sizeof( countT ) ;
    {
    if( pbs && getNegAM( *(countT*)pbs ) == FINGERnEG_SOULc ) //U::CONJ: THIS IS OBSOLETE AND SHOULD BE REMOVED SINCE IT IS ONLY NEEDED TO PROCESS PERSISTENT INSTANCES AND ALL SUCH INSTANCES ARE DECADES OLD AND PROBABLY NOT EVEN IN THE ARCHIVE
    ZE( countT , idFormat ) ;

    byteT* pbse = pbs + ed.cbF() ;
    byteT* pbs  = ed ;

    _IO_

    }
        if( !!idTypeP || !!flagsP || !!cbP || !idFieldP ) return 0 ;
    {
    IFbEcAREFUL    
    SCOOP
{
/*1*/byteT* soulC::pbFieldF( tinS& tinP , countT& idTypeP , flagsT& flagsP , countT& cbP , countT idFieldP )/*1*/

/**/
*/
  if this value is greater than the number of fields present, i evaluate to 0, cbP and bNumericP remain 0 and impotence does not occur
  1 refers to the wo'th field in the soul
  must not be 0
 idFieldP
  must be 0
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/1snip.0010113.flSOULiTEM!||
 flagsP
  must be 0
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/1snip.112000c0.ifcIDtYPEsOULiTEM!||
 idTypeP
  must be 0
 cbP
 tinP
arguments
warning: do not use this byteT* value after calling any function that removes or adds objects to the soulC object
warning: do not ever d elete the byteT* value that i evaluate to
  for example, a byteT* field begins with a flags byte that is used to distinguish between a null pointer and a pointer to 0 bytes
 for some field types, the cbP bytes begin with a flags byte that must not receive an invalid value
 take care to avoid writing more than cbP bytes
my return value can be used to modify the field
 a numeric sort treats the bytes as in order of increasing significance
returns the address and length of a field in the soulC object's image, and whether these bytes are to be sorted numerically
\<A HREF=\"5.14e0017.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$pbFieldF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//



//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


//VISIBLE

REST
etThread.osProcessIdPhaseAdamF( tinP , ifcIDpHASEhANDOFFoLD_SHUTTINGdOWN ) ;

HEAReNTER( ether )
etThread.strokeF( tinP , T("press the enter key\r\n") ) ;

third.s_shutdownIF( tinP ) ;

third.s_writeF( tinP , handleJob , (byteT*)&value , sizeof value ) ;
countT value = 0x78987 ;

}
    etThread.strokeF( tinP , T("i am the server, and peer name on the job is nicName = ")+TF2(nicName,flFORMAT_UNSIGNED)+T(", idPort = ")+TF2(idPort,flFORMAT_UNSIGNED)+T("\r\n") ) ;
    third.s_peerNameF( tinP , idPort , nicName , handleJob ) ;
    ZE( countT , idPort ) ;
    nicNameC nicName ;
{

}
    etThread.strokeF( tinP , T("i am the server, and my   name on the job is nicName = ")+TF2(nicName,flFORMAT_UNSIGNED)+T(", idPort = ")+TF2(idPort,flFORMAT_UNSIGNED)+T("\r\n") ) ;
    third.s_myNameF( tinP , idPort , nicName , handleJob ) ;
    ZE( countT , idPort ) ;
    nicNameC nicName ;
{

third.s_acceptF( tinP , handleJob , idPortPeer , nnPeer , handleServer , countTC() ) ;
ZE( countT , idPortPeer ) ;
nicNameC nnPeer ;
handleC handleJob( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_SOCKET ) ;

{ ZE( countT , tnu ) ; etThread.osThreadF( tinP , tnu , tmF , 0 , flTHREADlAUNCH_null , 0 , idPort ) ; } ;

third.s_listenF( tinP , handleServer ) ;
countT idPort = third.s_bindF( tinP , handleServer ) ;
third.s_socketF( tinP , handleServer ) ;
handleC handleServer( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_SOCKET ) ;
third.s_setupIF( tinP ) ;

thirdC& third = ether ;

TODO

DONE( tmF )
etThread.strokeF( tinP , T("secondary thread received the value ")+TF1(value)+T(" by connecting to port ")+TF1(idPort)+T("\r\n") ) ;
__( sizeof value != third.s_readF( tinP , (byteT*)&value , sizeof value , handleClient ) ) ;
ZE( countT , value ) ;

}
    etThread.strokeF( tinP , T("i am the client, and peer name on the job is nicName = ")+TF2(nicName,flFORMAT_UNSIGNED)+T(", idPort = ")+TF2(idPort,flFORMAT_UNSIGNED)+T("\r\n") ) ;
    third.s_peerNameF( tinP , idPort , nicName , handleClient ) ;
    ZE( countT , idPort ) ;
    nicNameC nicName ;
{

}
    etThread.strokeF( tinP , T("i am the client, and my   name on the job is nicName = ")+TF2(nicName,flFORMAT_UNSIGNED)+T(", idPort = ")+TF2(idPort,flFORMAT_UNSIGNED)+T("\r\n") ) ;
    third.s_myNameF( tinP , idPort , nicName , handleClient ) ;
    ZE( countT , idPort ) ;
    nicNameC nicName ;
{

third.s_connectF( tinP , handleClient , idPort ) ;
third.s_socketF( tinP , handleClient ) ;
handleC handleClient( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_SOCKET ) ;

thirdC& third = ether ;
const countT idPort = pTaskP ? pTaskP->c1 : 0 ;
TASK( tmF )

/*1*/WAKEhIDE( "example.simplest.func.1020064.thirdC.s_peerNameF" )/*1*/
/**/
*/
\<A HREF=\"5.3f00104.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//



//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

}
    etThread.diskWaitDirF( tinP , hDirChange , ether , tMouth , flWAITdIR_FILEnAME | flWAITdIR_DIRnAME ) ;

    etThread.delF( tinP , pstt1m ) ;
    }
        etThread.delF( tinP , psttNameShort ) ;
        }
            etThread.boxPutF( tinP , tSoixlOld+tReadMe , tRead  , tRead.csF( tinP ) ) ;
            etThread.delF( tinP , psttrm ) ;
            tRead = T(psttrm) ;
            etThread.strReverseF( tinP , psttrm , tRead , T("\r\n") ) ; ___( psttrm ) ;
            ZE( strokeS* , psttrm ) ;
            TN( tRead  , POSTlITrEADmE ) ;

            etThread.boxPutF( tinP , tSoixlOld+T(POSTfILEhELLO) , tHelloBody , tHelloBody.csF(  tinP ) ) ;
            HELLObODY

            }
                }
                    idDup ++ ;
                    *tinP.pEtScratch = 0 ;
                {
                else
                if( !*tinP.pEtScratch ) break ;
                tinP.pEtScratch->diskMoveFileOrDirF( tinP , tSoixlOld+tReject , psttc1 ) ;
                POPUP( T("I am barfing an unsavory object named \"")+tReject+T("\".") ) ;
                TN( tReject , "" ) ; tReject = T("soixlOld.reject.")+(idDup?TF1(idDup)+T("."):T(""))+T(psttNameShort) ;
            {
            while( !ether && idDup < 0x10000 )
            ZE( countT , idDup ) ;
        {
        else
        }
            }
                else            break ;
                if( *tinP.pEtScratch ) { *tinP.pEtScratch = 0 ; ether.osSleepF( tinP , TUCK * 0x40 ) ; }
                tinP.pEtScratch->boxZapF( tinP , psttc1 ) ;
            {
            while( !ether )
            etThread.osThreadF( tinP , countTC() , tmWorkF , 0 , flTHREADlAUNCH_null , 0 , (countT)psttSoixlOld ) ;
        {
        if( psttSoixlOld )

        }
            }
                }
                    etThread.delF( tinP , psttSoixlOld ) ;
                    POPUPsOIXLoLD( T("A file object containing text that did not begin with the words \"" POSTpROLOG "\" (reading from the bottom up) was dropped into my Mouth.  I will barf it out.")+TiNTRO ) ;
                {
                if( cOk < 0xf )

                etThread.delF( tinP , pstt1w ) ;
                }
                    if( bBreak ) break ;

                    }
                        case 0xe : { if( !etThread.strCompareF( tinP , psttc1 , T("space"  ) ) ) cOk ++ ; else bBreak = 1 ; break ; }
                        case 0xd : { if( !etThread.strCompareF( tinP , psttc1 , T("version" ) ) ) cOk ++ ; else bBreak = 1 ; break ; }
                        case 0xc : { if( !etThread.strCompareF( tinP , psttc1 , T("."       ) ) ) cOk ++ ; else bBreak = 1 ; break ; }
                        case 0xb : { if( etThread.strIsDigitsF( tinP , psttc1                 ) ) cOk ++ ; else bBreak = 1 ; break ; }
                        case 0xa : { if( !etThread.strCompareF( tinP , psttc1 , T("space"  ) ) ) cOk ++ ; else bBreak = 1 ; break ; }
                        case 0x9 : { if( !etThread.strCompareF( tinP , psttc1 , T("c"       ) ) ) cOk ++ ; else bBreak = 1 ; break ; }
                        case 0x8 : { if( !etThread.strCompareF( tinP , psttc1 , T("."       ) ) ) cOk ++ ; else bBreak = 1 ; break ; }
                        case 0x7 : { if( !etThread.strCompareF( tinP , psttc1 , T("space"  ) ) ) cOk ++ ; else bBreak = 1 ; break ; }
                        case 0x6 : { if( !etThread.strCompareF( tinP , psttc1 , T("tm"      ) ) ) cOk ++ ; else bBreak = 1 ; break ; }
                        case 0x5 : { if( !etThread.strCompareF( tinP , psttc1 , T("."       ) ) ) cOk ++ ; else bBreak = 1 ; break ; }
                        case 0x4 : { if( !etThread.strCompareF( tinP , psttc1 , T("IdeaFarm") ) ) cOk ++ ; else bBreak = 1 ; break ; }
                        case 0x3 : { if( !etThread.strCompareF( tinP , psttc1 , T("."       ) ) ) cOk ++ ; else bBreak = 1 ; break ; }
                        case 0x2 : { if( !etThread.strCompareF( tinP , psttc1 , T("space"  ) ) ) cOk ++ ; else bBreak = 1 ; break ; }
                        case 0x1 : { if( !etThread.strCompareF( tinP , psttc1 , T("soixlOld"    ) ) ) cOk ++ ; else bBreak = 1 ; break ; }
                        case 0x0 : { if( !etThread.strCompareF( tinP , psttc1 , T("."       ) ) ) cOk ++ ; else bBreak = 1 ; break ; }
                    {
                    switch( cOk )
                    ZE( countT , bBreak ) ;

                    if( !psttc1->idAdam ) continue ;
                {
                FORsTRINGSiN1( pstt1w )
                etThread.strWordsOldF( tinP , pstt1w , psttSoixlOld , sttq , 0 ) ; ___( pstt1w ) ;
                strokeS sttq ;
                ZE( strokeS* , pstt1w ) ;
                ZE( countT , cOk ) ;

                etThread.strReverseF( tinP , psttSoixlOld , 0 , T("\r\n") ) ; ___( psttSoixlOld ) ;
                etThread.delF( tinP , postSoixlOld ) ;
                etThread.strMakeF( tinP , LF , psttSoixlOld , T(postSoixlOld) ) ; ___( psttSoixlOld ) ;
            {
            else
            }
                POPUPsOIXLoLD( "I was not able to read a file object that was just dropped into the depository.  I will move it to the desktop when I can." ) ;
                *tinP.pEtScratch = 0 ;
            {
            if( *tinP.pEtScratch )
            tinP.pEtScratch->boxGetShadowF( tinP , postSoixlOld , costSoixlOld , psttc1 ) ; ___( postSoixlOld ) ;
            ZE( countT   , costSoixlOld ) ;
            ZE( osTextT* , postSoixlOld ) ;
        {
        else
        if( 1 != etThread.strIdF( tinP , T("soixlOld.") , psttNameShort ) ) { POPUPsOIXLoLD( T("A file object whose name does not begin with \"soixlOld.\" was dropped into my Mouth.  I will barf it out.")+TiNTRO ) ; }
        TN( tReadMe , POSTfILErEADmE ) ;
        TN( tHelloWorld , POSTfILEhELLO ) ;
        ZE( strokeS* , psttSoixlOld ) ;

        tLathFileDropped = T(psttNameShort) ;
        etThread.strConvertToLowerCaseF( tinP , psttNameShort ) ;
        }
            etThread.strWordF( tinP , psttNameShort , psttc1 , sttq , S1C('/') , - 2 ) ; ___( psttNameShort ) ;
            etThread.delF( tinP , psttNameShort ) ;
        {
        if( psttNameShort && !psttNameShort->idAdam )
        etThread.strWordF( tinP , psttNameShort , psttc1 , sttq , S1C('/') , - 1 ) ; ___( psttNameShort ) ;
        strokeS sttq ;
        ZE( strokeS* , psttNameShort ) ;

        *tinP.pEtScratch = 0 ;
    {
    FORsTRINGSiN1( pstt1m )
    etThread.boxMenuF( tinP , soul , tMouth+T("*") ) ; ___( pstt1m ) ;
    ZE( strokeS* , pstt1m ) ;
{
while( !ether )
handleC hDirChange( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILEwAIT ) ;

if( etThread.diskMakeDirIfNeededF( tinP , tMouth ) ) etThread.osThreadF( TaRG1( tmWelcomeF ) , (countT)&tLathFileDropped ) ;
TN( tLathFileDropped , "" ) ;

TN( tMouthShort , postSOIXLoLDfILESfOLDERS_SHORTmOUTH ) ;
TN( tSoixlOldShort , postSOIXLoLDfILESfOLDERS_SHORTsOIXLoLD ) ;
TN_tMouth
TN_tSoixlOld

TODO

DONE( tmWelcomeF )
}
    }
        if( !ether ) { etThread.boxPutF( tinP , tSoixlOld+tEmptyName , tEmptyBody , tEmptyBody.csF(  tinP ) ) ; }
        if( !ether ) { POPUPsOIXLoLD( T("This is the end of the tutorial.  When you click \"OK\", I will place an empty file named \"")+tEmptyName+T("\" into \"")+tSoixlOldShort+T("\".  It contains nothing at all.  You can drop it into the Mouth to see what happens.") ) ; }
        if( !ether ) { POPUPsOIXLoLD( T("This ensures that the information in the documentation is correct, i.e. that the code examples presented in the documentation actually work!") ) ; }
        if( !ether ) { POPUPsOIXLoLD( T("With SOIL (tm), all reference information is provided in the form of text files that are valid SOIL (tm) programs that can be dropped into the Mouth.") ) ; }
        if( !ether ) { POPUPsOIXLoLD( T("A file named \"")+tReadMe+T("\" will also be barfed.  That file presents the SOIL (tm) Programmers' Reference, but it is also a SOIL (tm) program that can be dropped into the Mouth.") ) ; }
        if( !ether ) { POPUPsOIXLoLD( T("Whenever a file is barfed, a copy of ")+tHelloName+T(" will also be barfed, so that you can refer to it.") ) ; }
        if( !ether ) { POPUPsOIXLoLD( T("An object dropped into the Mouth will vanish if it is a text file that contains what appears to be valid SOIL (tm) code.  Otherwise it will be barfed back out of the Mouth.") ) ; }
        if( !ether ) { POPUPsOIXLoLD( T("You have just executed an IdeaFarm " "(tm) SOIL (tm) program.  By following the steps that I suggest, you will be programming in SOIL (tm) within minutes.") ) ; }
        FEEDmE( tHelloName )
        if( !ether ) { POPUPsOIXLoLD( T("To execute the hello program, drag it to the Mouth and drop it in.  To do that, left click on \"")+tHelloName+T("\" and, while holding down the mouse button, drag to \"")+tMouthShort+T("\", and then release the button.  When you have done that, click OK.") ) ; }
        if( !ether ) { POPUPsOIXLoLD( T("When you open a SOIL (tm) program, word wrap must be OFF.  Open \"")+tHelloName+T("\" now, and tell Notepad (or whatever other editor you are using) to NOT wrap words.  (In Notepad, make sure that \"Word Wrap\" in the \"Format\" drop down menu is not checked.  Notepad will remember this setting.  Don't try to understand the SOIL (tm) program yet.  Just turn word wrap off and close the editor.") ) ; }
        if( !ether ) { POPUPsOIXLoLD( T("I have just put a plain text file named \"")+tHelloName+T("\" into ")+tSoixlOldShort+T(".  It contains a very short SOIL (tm) program.  When you see it, click OK.  (Don't open it yet.)") ) ; }
        if( !ether ) { etThread.boxPutF( tinP , tSoixlOld+tHelloName , tHelloBody , tHelloBody.csF(  tinP ) ) ; }
        if( !ether ) { POPUPsOIXLoLD( T("Welcome to IdeaFarm " "(tm) SOIL (tm) <> Sentient Object Interface Language.  This tutorial is being displayed because the Mouth did not exist.  To display this tutorial again, delete the Mouth.") ) ; }
        TN( tEmptyBody , "" ) ;
        TN( tEmptyName , "soixlOld.empty.txt" ) ;
        HELLObODY
        TN( tHelloName , POSTfILEhELLO ) ;
        TN( tReadMe , POSTfILErEADmE ) ;
    {
    else
    if( *tinP.pEtScratch ) { *tinP.pEtScratch = 0 ; POPUPsOIXLoLD( T("The tutorial cannot be displayed.") ) ; }
    
    etThread.delF( tinP , pstt1m ) ;
    }
        if( cMoved ) { POPUPsOIXLoLD( tPop ) ; }
        }
            }
                etThread.delF( tinP , psttw ) ;
                tinP.pEtScratch->diskMoveFileOrDirF( tinP , tMouth+tOutOfWay+T("/")+T(psttw) , psttc1 ) ;
                cMoved ++ ;
                tPop += T(psttw)+tcr ;
                tinP.pEtScratch->strWordF( tinP , psttw , psttc1 , sttq , stts , - 1 ) ; ___( psttw ) ;
                strokeS sttq ;
                ZE( strokeS* , psttw ) ;
            {
            if( !tinP.pEtScratch->strIdF( tinP , tTM , tBody ) )
            etThread.delF( tinP , pbi ) ;
            TN( tBody , "" ) ; tBody = T(pbi) ;
            if( *tinP.pEtScratch ) break ;
            tinP.pEtScratch->boxGetShadowF( tinP , pbi , cbi , psttc1 ) ; ___( pbi ) ;
            ZE( countT , cbi ) ;
            ZE( byteT* , pbi ) ;
        {
        FORsTRINGSiN1( pstt1m )
        strokeS stts( '/' ) ;
        TN( tTM , ".tm IdeaFarm" ) ;
        tPop += tOutOfWay+T("\":\r\n\r\n") ;
        TN( tPop , "I have moved the following files and/or folders from your desk.  They have been placed into a folder called \"" ) ;
        TN( tcr , "\r\n" ) ;
        TN( tOutOfWay , "IdeaFarm " "(tm) Files Moved From Your Desk" ) ;
        ZE( countT , cMoved ) ;
    {
    if( pstt1m && pstt1m->idAdam )
    }
        etThread.delF( tinP , pstts ) ;
        etThread.boxMenuF( tinP , soul , pstts ) ; ___( pstt1m ) ;
        etThread.diskMapFileNameF( tinP , pstts , tMouth+T("soixlOld.*") ) ; ___( pstts ) ;
        ZE( strokeS* , pstts ) ;
    {
    ZE( strokeS* , pstt1m ) ;
    
    POPUPsOIXLoLD( T("Within \"")+tSoixlOldShort+T("\", you should see a folder named \"")+tMouthShort+T("\".  Do you see it?  Do not open it.  Click OK.") ) ;
    POPUPsOIXLoLD( T("I have just put a new folder named \"")+tSoixlOldShort+T("\" onto your desk.  Please find it now and open it.  If you do not see it, refresh your desk image by right clicking and selecting \"Refresh\".") ) ;

    TN( tMouthShort , postSOIXLoLDfILESfOLDERS_SHORTmOUTH ) ;
    TN( tSoixlOldShort , postSOIXLoLDfILESfOLDERS_SHORTsOIXLoLD ) ;
    TN_tMouth
    TN_tSoixlOld

    textC& tLathFileDroppedP = *(textC*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 )
TASK( tmWelcomeF )

DONE( tmWorkF )
}
    etThread.delF( tinP , psttSoixlOldP ) ;
    workF( tinP , etThread , psttSoixlOldP ) ;

    strokeS* psttSoixlOldP = (strokeS*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 )
TASK( tmWorkF )

}
    while( cToDo -- ) space << psttSoixlOldP ;
    countT cToDo = 1 ;
    soixlOldSpaceC space( tinP , etThread , T("space") ) ;
{
voidT workF( tinS& tinP , etherC& etThread , const strokeS* const psttSoixlOldP )

    "Introduction to IdeaFarm " "(tm) SOIL (tm) <> Sentient Object Interface Language\r\n"
    "\r\n"                                                                                              \
    "IdeaFarm " "(tm) SOIL (tm) is a general purpose programming language.  If you are\r\n"                \
    "new to IdeaFarm " "(tm) SOIL (tm), begin by reading this file.  This file is also\r\n"                \
    "a SOIL (tm) program.  SOIL (tm) program files are processed from the bottom up.\r\n"               \
    "So to read this file, please go now to the bottom line and start reading\r\n"                      \
    "upward.\r\n"                                                                                       \
    "_______________________________________________________________________________\r\n"               \
    "\r\n"                                                                                              \
    "\r\n"                                                                                              \
    "\r\n"                                                                                              \
    "\r\n"                                                                                              \
    "\r\n"                                                                                              \
    "\r\n"                                                                                              \
    "\r\n"                                                                                              \
    "\r\n"                                                                                              \
    "\r\n"                                                                                              \
    "\r\n"                                                                                              \
    "\r\n"                                                                                              \
    "\r\n"                                                                                              \
    "\r\n"                                                                                              \
    "\r\n"                                                                                              \
    "\r\n"                                                                                              \
    "\r\n"                                                                                              \
    "\r\n"                                                                                              \
    "\r\n"                                                                                              \
    "\r\n"                                                                                              \
    "\r\n"                                                                                              \
    "   . on space . ? space . off space\r\n"                                                           \
    "\r\n"                                                                                              \
    "\r\n"                                                                                              \
    "right now by dropping this " POSTfILErEADmE " file into the Mouth.\r\n"                            \
    "Step 6: Obtain IdeaFarm " "(tm) SOIL (tm) reference information.  You can do that\r\n"                \
    "\r\n"                                                                                              \
    "\r\n"                                                                                              \
    "your foot\".\r\n"                                                                                  \
    "the power of the CPU; it does not attempt to prevent you from \"shooting off\r\n"                  \
    "programming language.  Like C++, SOIL (tm) attempts to give you full access to\r\n"                \
    "play, you will discover that IdeaFarm " "(tm) SOIL (tm) is a suprisingly powerful\r\n"                \
    "Step 5: Study the programming philosophy of IdeaFarm " "(tm) SOIL (tm).  As you\r\n"                  \
    "\r\n"                                                                                              \
    "\r\n"                                                                                              \
    "own IdeaFarm " "(tm) SOIL (tm) programs.\r\n"                                                         \
    "needed.  You have everything you need, and are now ready to begin writing your\r\n"                \
    "need to compile and link them.  You have just seen that no other tools are\r\n"                    \
    "never ORIGINALS! IdeaFarm " "(tm) SOIL (tm) programs are interpreted; you do not\r\n"                 \
    "Note:  The Mouth \"eats\" any valid SOIL (tm) program, so always drop COPIES,\r\n"                 \
    "run such a program by dropping a COPY of such a file onto the Depository.\r\n"                     \
    "SOIL (tm) programs are plain text files that contain a sequence of words.  You\r\n"                \
    "Step 4: Study the concepts demonstrated in " POSTfILEhELLO ".  IdeaFarm " "(tm)\r\n"                  \
    "\r\n"                                                                                              \
    "\r\n"                                                                                              \
    "Do that now.  A popup window will appear immediately.\r\n"                                         \
    "\r\n"                                                                                              \
    "Step 3: Run \"" POSTfILEhELLO "\" by dropping it into the Mouth.\r\n"                              \
    "\r\n"                                                                                              \
    "\r\n"                                                                                              \
    "displays that data word to the user (in a \"popup window\").\r\n"                                  \
    "object pops the data word that it expects to find on the stack of pending words, and\r\n"          \
    "program, the interpreter tells that object to \"do its thang\".  The POPUP\r\n"                    \
    "POPUP is the name of an object.  When POPUP is manifested in a SOIL (tm)\r\n"                      \
    "is the last word in the hello program, and the only word that \"does anything\".\r\n"              \
    "\r\n"                                                                                              \
    "    POPUP\r\n"                                                                                     \
    "\r\n"                                                                                              \
    "the stack, since all of the preceding words were handled by the interpreter.\r\n"                  \
    "the word onto a stack of pending words.  It is the first word to be placed on\r\n"                 \
    "Since the interpreter has been told that this is a data word, it simply places\r\n"                \
    "\r\n"                                                                                              \
    "preceded by a backslash '\\', it is not interpreted.\r\n"                                          \
    "Note that this data word contains double quote marks.  When a character is\r\n"                    \
    "\r\n"                                                                                              \
    "    \" ... \"\r\n"                                                                                 \
    "\r\n"                                                                                              \
    "SOIL (tm) words refer to live objects that do things.)  The data word is:\r\n"                     \
    "This word means \"the word that follows me is just data\".  (By default,\r\n"                      \
    "\r\n"                                                                                              \
    "    .\r\n"                                                                                         \
    "\r\n"                                                                                              \
    "The next word is the real beginning of the hello world program:\r\n"                               \
    "\r\n"                                                                                              \
    "program uses.\r\n"                                                                                 \
    "program and specifies the version number of IdeaFarm " "(tm) SOIL (tm) that the\r\n"                  \
    "These words declare that the text that follows is an IdeaFarm " "(tm) SOIL (tm)\r\n"                  \
    "\r\n"                                                                                              \
    "    " POSTpROLOG "\r\n"                                                                            \
    "\r\n"                                                                                              \
    "word does.  Every IdeaFarm " "(tm) SOIL (tm) program must begin with the words:\r\n"                  \
    "Step 2: Study the hello world program until you understand what each SOIL (tm)\r\n"                \
    "\r\n"                                                                                              \
    "\r\n"                                                                                              \
    "learn; you just need to become familiar with the words and what they do.\r\n"                      \
    "are just a sequence of words separated by white space.  There is no syntax to\r\n"                 \
    "word because it is contained within double quote marks.)  SOIL (tm) programs\r\n"                  \
    "contains 21 (18_9) SOIL (tm) words.  (\" ... \" counts as a single SOIL (tm)\r\n"                  \
    "sequence of words separated by white space.  This hello world program\r\n"                         \
    "IdeaFarm " "(tm) SOIL (tm) program files are plain text files that contain a\r\n"                     \
    "Step 1: Find and open this object: \"" POSTfILEhELLO "\".\r\n"                                     \
    "\r\n"                                                                                              \
    "IdeaFarm " "(tm) SOIL (tm).  For more information, see http://ideafarm.com .\r\n"                     \
    "This file presents only the information that you will need to start using\r\n"                     \
    "\r\n"                                                                                              \
    "minded community.  Welcome!\r\n"                                                                   \
    "you are still reading, you are a potential member of an exceptionally open\r\n"                    \
    "can read can read upwards, but closed minded people will refuse to do it!  If\r\n"                 \
    "SOIL (tm), you must be willing and able to learn to read upwards.  Everyone who\r\n"               \
    "IdeaFarm " "(tm) SOIL (tm) is a general purpose programming language.  To use\r\n"                    \
    "\r\n"                                                                                              \
    "Introduction to IdeaFarm " "(tm) SOIL (tm) <> Sentient Object Interface Language\r\n"                 \
    "_______________________________________________________________________________\r\n"               \
    "\r\n"                                                                                              \
    ". off space\r\n"                                                                                   \
    ". quiet space\r\n"                                                                                 \
    POSTpROLOG "\r\n"                                                                                   \
                                                                                                        \
#define POSTlITrEADmE                                                                                   \

#define POSTfILErEADmE "soixlOld.readMe.txt"
#define POSTfILEhELLO  "soixlOld.hello.txt"


    ) ;
                                                                                                                                                    \
        POSTpROLOG "\r\n"                                                                                                                           \
        "  Tonight, you will be among friends.\"\r\n"                                                                                               \
        "  The night is cold, but our village fire is warm, and the food is plentiful and prepared with care."                                      \
        "  Join us as we tell stories of our day and sing the songs of our people."                                                                 \
        "  \\\"Come, Eat With Us!\\\""                                                                                                              \
        ". \"Hello, traveller."                                                                                                                     \
        "POPUP\r\n"                                                                                                                                 \
                                                                                                                                                    \
    TN( tHelloBody ,                                                                                                                                \
                                                                                                                                                    \
#define HELLObODY                                                                                                                                   \

    T("\".  If you are new to IdeaFarm " "(tm) City, welcome.")
    tReadMe+                                                                                    \
    T("\" and \"")+                                                                             \
    tHelloWorld+                                                                                \
    T("  I will also barf out \"")+                                                             \
#define TiNTRO                                                                                  \

#define FEEDmE(tFileP) while( !ether && etThread.strCompareF( tinP , tLathFileDroppedP , tFileP ) ) { POPUPsOIXLoLD( ( tLathFileDroppedP.csF( tinP ) ? T("You dropped \"")+tLathFileDroppedP+T("\" into the Mouth.  ") : T("You haven't dropped anything into the Mouth yet.  ") )+T("I am waiting for you to drop a file named \"")+tFileP+T("\" into the Mouth.") ) ; }

/*1*/WAKEhIDE( "ifcIDaDAM_SOIXLoLDiNTERPRETER.kernel.soixlOld.interpreter" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


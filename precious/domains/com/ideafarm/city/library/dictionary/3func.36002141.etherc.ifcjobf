
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    __( bFail ) ;
    //CONoUT( "etherC::ifcJobF/outer/cleaning up" )
    while( bFail && !POOP && ( bNoQuit || ( bNoQuitEarly && !etPrime ) || ( cTriesP && -- cTriesP ) ) ) ;
    }
        }
            }
                else bFail = 0 ;
                }
                    stCoursesP.purgeF( tinP ) ;
    
                    //CONoUT( "etherC::ifcJobF/outer/finished logging the failure of my overload" )
                    ifcSayIF( TP("",9)+T(psttOldCommentP)+tBar+T("adam ")+TF1(idAdamP)+T(" failed to do a job for thread \"")+T(tinP.postThreadName)+T("\" of the local cell of adam ")+TF1(processGlobal1I.idAdamRoot) , flSAY_APPEND | flSAY_LOG ) ;
                    POOPR
                    //CONoUT( "etherC::ifcJobF/outer/logging the failure of my overload" )
                {
                if( POOP )
    
                }
                    tinP.pEtScratch->ifcJobF( stCoursesP , tinP , idAdamP , sOrderPrimaryP , stOrdersCopy , T(psttOldCommentP)+T(" (try ")+TF1(++idTry)+T(")") , nicNameP ) ;
                    }
                        while( !POOP && ~hDown ) ;
                        }
                            }
                                stOrdersCopy << psCopy ;
                                __Z( psCopy ) ;
                                soulC* psCopy = new( 0 , tinP , LF ) soulC( *psMaster ) ;
                            {
                            if( psMaster )
                            __Z( psMaster ) ;
                            soulC* psMaster = (soulC*)stOrdersP.downF( tinP , hDown ) ;
                        {
                        do
                        handleC hDown( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
                    {
                    if( stOrdersP )
                    stackC stOrdersCopy( tinP , *tinP.pEtScratch , TAG( TAGiDnULL ) , stOrdersP.flagsF( tinP ) , stOrdersP.idTypeF( tinP ) ) ;
                {
                SCOOPS
            {
            IFsCRATCH

            //CONoUT( "etherC::ifcJobF/outer/calling my overload to try again" )
        {
        if( bNoQuit || !etPrime )

        }
            }
                ++ s ; ( bNoQuit ? *this : etPrime ).osSleepF( tinP , TOCK * 8 ) ;
                sleepC s( tinP , TAG( TAGiDnULL ) ) ;
            {
            
            //CONoUT( "etherC::ifcJobF/outer/napping 8 tocks before trying again" )
        {
        else
        if( bWoth ) bWoth = 0 ;
    {
    do
    boolT bWoth = 1 ;
    ZE( countT , idTry ) ;
    boolT bFail = 1 ;
    boolT bNoQuitEarly = !cTriesP ;
    boolT bNoQuit = cTriesP == - 1 ;
    etherC& etPrime = etPrimeIF( tinP ) ;
    TN( tBar , "| " ) ;

    _IO_

    }
        if( POOP ) return ;
        __Z( idAdamP ) ;
        __( !psttOldCommentP->idAdam ) ;
        if( POOP ) return ;
        __Z( psttOldCommentP ) ;
        __(  stOrdersP.idTypeF( tinP ) - ifcSTACKtYPE_PTR_soulC ) ;
        __(  !( F(stOrdersP.flagsF(tinP)) & flSTACKc_FIFO ) ) ;
        __(  stCoursesP.idTypeF( tinP ) - ifcSTACKtYPE_PTR_soulC ) ;
        __(  !( F(stCoursesP.flagsF(tinP)) & flSTACKc_FIFO ) ) ;
        __(  stCoursesP ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL
    SCOOP
{
/*1*/voidT etherC::ifcJobF( tinS& tinP , stackC& stCoursesP , const countT idAdamP , soulC& sOrderPrimaryP , stackC& stOrdersP , const strokeS* const psttOldCommentP , countT cTriesP , const nicNameC nicNameP )/*1*/

/**/
*/
   ifcHireF specifies the local host in order to construct a local cell
   nicNameC() values are supported mainly to facilitate debugging
  it is bad style to specify a value other than nicNameC()
  specify another value if the cell at the specified host is to handle the job
  normally should be nicNameC()
  can be nicNameC()
 nicNameP
 cTriesP
   recommend: concatenate: "description of job" "current time"
  any value is legal, but please use a concise description of the job that is unique to the current job
  this string will be attached to this job as it traverses the relay chat spline
  must not be null length
  must not be 0
 psttOldCommentP
  for such dialogs, the caller puts outgoing orders onto stOrdersP and monitors stCoursesP for incoming results
  the caller and the job doer cell can, but need not, dialog in full duplex while the job is in progress
  contains all orders other than the primary order
  can be empty
 stOrdersP
  normally this will contain all information needed for the job, and stOrdersP will be empty
  this is the order that defines the job
 sOrderPrimaryP
 idAdamP
  must be empty
 stCoursesP
 tinP
arguments
 wait for the course receiving thread to end
 until an empty order has been sent
  remove all items in stOrdersP, writing each
  wait for a new item to be placed onto stOrdersP
 forever
    if the course is not empty, stack it
    extract the course from the tray
    if the tray is empty then break
    read a tray
   forever
  protocol for this thread
 launch a thread to receive courses into stCoursesP
 remove the wo'th order, wrap it into the relay package, and write it
 connect to idAdamP via relay chat
protocol
  the caller can then remove all courses that have not already been removed by its attendant thread
  when all courses have been put onto stCoursesP, i will return
   this thread can end at any time during job processing as long as it has put an empty order onto stOrdersP
    the contents of such an order would be defined by the particular idAdam
   this thread can put an interrupt style cancel order onto stOrdersP to tell the server to cancel the job
    it -must- serialize properly
   this thread can either traverse stCoursesP or empty it as courses are placed onto it
   this thread -must- eventually place an empty order onto stOrdersP
  caller launches a thread to monitor the contents of stCoursesP
  caller places at least the wo'th order for the job onto stOrdersP
 attended operation
  then the caller can obtain all of the courses produced by emptying stCoursesP
  i return when the job is complete
  the la'th order placed onto stOrdersP must be empty
  caller places all orders for the job onto stOrdersP before calling me
 unattended operation
usage models
 U: edit the protocol to implement a state commit dialog
   a notice of pending commit
   client must not send a null order until it has received a notice of pending commit
   job is not done until client's null order has been received
  state changes must not be committed until job is done
 acceptor cell and worker cell
requirements for the adam class
if a failure occurs after the connection spline is established, i will retry with a new connection spline
if a failure occurs while establishing the connection spline, i will retry
while the job is being done, other threads of the caller can communicate with the adam cell that is doing the work
i initiate an IdeaFarm " "(tm) City job and block until the job has been done successfully
\<A HREF=\"5.1030184.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$ifcJobF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//



//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    //etThread.traceF( tinP , T("postBodyP:  ")+T(postBodyP) ) ;
    //etThread.traceF( tinP , T("psttPeerAgentP:  ")+T(psttPeerAgentP) ) ;
    //etThread.traceF( tinP , T("psttUrlP:  ")+T(psttUrlP) ) ;
    //etThread.traceF( tinP , T("nnPeerP: ")+T(nnPeerP) ) ;

    swsUnconfirmedPeerDeleteEmailZipCountryByPasswordP.ungrabF( tinP ) ;

    else meP.pushSnipF( tinP , stBodyP , T("I did not recognize the password in the link that you clicked.  (This will happen if the server serving you this page was restarted.)  Please submit your email and postal code again.\r\n\r\nIf you receive this error more than once, request support by emailing support@ideafarm.com .\r\n") ) ;
    }
        swsUnconfirmedPeerDeleteEmailZipCountryByPasswordP.purgeF( tinP ) ;

        else meP.pushSnipF( tinP , stBodyP , T("Something went wrong.  I recognized your password but could not find your email and postal code.  Please register your email again.\r\n") ) ;
        }
            THREADmODE1rESTORE

            etThread.delF( tinP , psttCountry ) ;
            etThread.delF( tinP , psttZip     ) ;
            etThread.delF( tinP , psttEmail   ) ;
            etThread.delF( tinP , psttDelete  ) ;
            etThread.delF( tinP , psttPeer    ) ;

            etThread.boxPutF( tinP , T("smtp.mailgun.org[admin]/b42/smtp/")+tHost+T("@ideafarm.com/")+T(psttEmail)+T("//wo@ideafarm.com/ideafarm.factory.reports@gmail.com") , tBody ) ;

            tBody += T("time:  ")+tTime+T("\r\n") ;
            tBody += T("\r\nreference:  ")+tShort+T("\r\n") ;

            }
                tBody += T("country:  ")+T(psttCountry)+T("\r\n") ;
                tBody += T("postal code:  ")+T(psttZip)+T("\r\n") ;
            {
            if( !bDelete )

            tBody += T("email:  ")+T(psttEmail)+T("\r\n") ;

            ) ;

                    "\r\n"
                    "The following information has been registered:\r\n"
                    "Thank you for deciding to participate in Wo'O's Table.\r\n"
                    "\r\n"
                    "Subject: Wo'O's Table:  Your email is now registered.\r\n"
                :    
                    "\r\n"
                    "Sorry to see you go!  If you change your mind, just register again.\r\n"
                    "\r\n"
                    "Subject: Wo'O's Table:  Your email has been unregistered, effective immediately.\r\n"
                ?
                bDelete

            TN( tBody ,

            textC tTime( ifcIDtEXTgEN_TIMEnOWfOREIGN , tinP , TAG( TAGiDnULL ) ) ;

            }
                etThread.delF( tinP , psttFile ) ;
                etThread.delF( tinP , psttShort ) ;
                etThread.delF( tinP , psttnu ) ;
                tShort = T(psttShort) ;
                etThread.strBisectF( tinP , psttnu , psttShort , psttFile , T("/") , - 1 , flSTRbISECT_APPENDdELIMITER ) ; ___( psttnu ) ; ___( psttShort ) ;
                ZE( strokeS* , psttShort ) ;
                ZE( strokeS* , psttnu ) ;

                etThread.boxPutUniqueF( tinP , psttFile , T("///ideafarm/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/confirmed.email/email.")+tHost , WS( rec ) ) ; ___( psttFile ) ;
                ZE( strokeS* , psttFile ) ;
            {
            TN( tShort , "" ) ;

            }
                if( !tHost.csF( tinP ) ) tHost = T("factories") ;
                etThread.delF( tinP , psttHost ) ;
                else       tHost = T(psttHost) ;
                if( POOP ) { POOPR ; }
                tinP.pEtScratch->sockPsttHostF( tinP , psttHost ) ; ___( psttHost ) ;
                ZE( strokeS* , psttHost ) ;

                SCOOPS
            {
            IFsCRATCH
            TN( tHost , "" ) ;

            THREADmODE1oN( flTHREADmODE1_ALLOWsTOPwHILEgRABBING )

            rec << psttCountry ;
            rec << psttZip ;
            rec << psttEmail ;
            rec << psttDelete ;
            rec << psttPeer ;
            rec << (countT)1 ;          // IDfORMAT
            rec << finger ;
            soulC rec( tinP , TAG( TAGiDnULL ) ) ;

            putNegAM( *(countT*)&finger , FINGERnEG_WOtABLEcONFIRMEDeMAIL ) ;
            ZE( countT , finger ) ;

            else          meP.pushSnipF( tinP , stBodyP , T(psttEmail)+T(" is now registered for Wo'O's Table in ")+T(psttZip)+T(".  Come.  Eat with us!<p>To update (or delete), simply register again.\r\n") ) ;
            if( bDelete ) meP.pushSnipF( tinP , stBodyP , T(psttEmail)+T(", has been unregistered, effective immediately.  Sorry to see you go!  (If you change your mind, just register again.)\r\n") ) ;
            boolT bDelete = psttDelete && !etThread.strCompareF( tinP , psttDelete , T("yes") ) ;

            }
                if( POOP ) { POOPR ; }

                THREADmODE1rESTORE
                tinP.pEtScratch->boxZapF( tinP , T("///ideafarm/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/unconfirmed.email/ip.")+T(psttPeer) , 1 ) ;
                THREADmODE1oN( flTHREADmODE1_ALLOWsTOPwHILEgRABBING )

                SCOOPS
            {
            IFsCRATCH

            swsUnconfirmedPeerDeleteEmailZipCountryByPasswordP >> psttPeer    ;
            swsUnconfirmedPeerDeleteEmailZipCountryByPasswordP >> psttDelete  ;
            swsUnconfirmedPeerDeleteEmailZipCountryByPasswordP >> psttEmail   ;
            swsUnconfirmedPeerDeleteEmailZipCountryByPasswordP >> psttZip     ;
            swsUnconfirmedPeerDeleteEmailZipCountryByPasswordP >> psttCountry ;
            ZE( strokeS* , psttCountry ) ;
            ZE( strokeS* , psttZip     ) ;
            ZE( strokeS* , psttEmail   ) ;
            ZE( strokeS* , psttDelete  ) ;
            ZE( strokeS* , psttPeer    ) ;
        {
        if( swsUnconfirmedPeerDeleteEmailZipCountryByPasswordP == 5 )

        cLeverPasswordP = password ;
    {
    if( swsUnconfirmedPeerDeleteEmailZipCountryByPasswordP.idSlotOfLeverF( tinP , password ) )

    swsUnconfirmedPeerDeleteEmailZipCountryByPasswordP.grabF( tinP , TAG( TAGiDnULL ) ) ;

    countT password = etThread.strDigitsToSCountF( tinP , tPass ) ;

    swKVP.ungrabF( tinP ) ;
    psttLeverKVP = tKeyPass ; tPass = T((strokeS*)(countT)swKVP) ;
    swKVP.grabF( tinP , TAG( TAGiDnULL ) ) ;
    TN( tPass , "" ) ;

    TN( tKeyPass , "pass" ) ;

    //swKVP.ungrabF( tinP ) ;
    //}
    //    etThread.traceF( tinP           , T("KV:  ")+T(psttLeverKVP)+T(":  \"")+T(psttv)+T("\"") ) ;
    //
    //    strokeS* psttv = (strokeS*)(countT)swKVP ;
    //    psttLeverKVP = (strokeS*)swKVP.leverF( tinP , idf ) ;
    //{
    //for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
    //etThread.traceF(   tinP , TF2(cFlavors,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" KV's received:") ) ;
    //countT cFlavors = swKVP.cFlavorsF( tinP ) ;
    //swKVP.grabF( tinP , TAG( TAGiDnULL ) ) ;

    switchStackC& swsUnconfirmedPeerDeleteEmailZipCountryByPasswordP = *(switchStackC*)c8pP.c4 ;
    countT&       cLeverPasswordP                                    =       *(countT*)c8pP.c3 ;
    count8S&      c8pP                                               =        *(count8S*)cArgP ;
{
/*1*/voidT emailZipConfirmationCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP )/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//



//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

}
    }
        ++ s ; ether.osSleepF( tinP , TOCK * 0x4 ) ;
        sleepC s( tinP , TAG( TAGiDnULL ) ) ;
    
        etThread.delF( tinP , pstt1m ) ;
        }
            etThread.delF( tinP , psttTmp ) ;
            }
                _OUT_
                etThread.diskMoveFileOrDirF( tinP , psttTmp , psttc1 ) ;
                _INoLD_
            {
            etThread.strReplaceF( tinP , psttTmp , psttc1 , T("/in/") , T("/arc/") ) ; ___( psttTmp ) ;
            ZE( strokeS* , psttTmp ) ;

            }
                etThread.delF( tinP , pbi ) ;
                }
                    etThread.boxPutF( tinP , T("//smtp/" ifcEMAIL_AUTOrESPONDEReARNmONEYlINK "/")+tEmail , t1 , t1.csF( tinP ) ) ;

                    ) ;
                
                        "  Respect the people that you contact, and practice the IdeaFarm " "(tm) Associates Pledge!\r\n"
                        "Enjoy selling for IdeaFarm " "(tm) Operations."
                        "\r\n"
                        "  Complaints can result in temporary or permanent loss of your sales commission privieges.\r\n"
                        "  Any person who clicks this link will be asked whether permission was requested and granted, and will be given the opportunity to file a complaint."
                        "This link must not be published, posted in a newsgroup, etc."
                        "\r\n"
                        "    Click to login:   http://ideafarm.com/wordofmouth?idticket=")+TF2(cPasscode,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+T("\r\n"
                        "\r\n"
                        "  Do not do this until you have requested and been granted permission from your recipient.\r\n"
                        "The following link can only be used wo time.  Copy and paste it into an email that you send to someone who is expecting you to send it."
                        "\r\n"
                        "  If this was done without your knowledge, you need not do anything, but please consider reporting this event to us.\r\n"
                        "You are receiving this \"earn money\" link at your request while you were logged in to http://ideafarm.com."
                        "\r\n"
                        "Subject: IdeaFarm " "(tm) Piggyback Distributed Operating System\r\n"
                
                    TN( t1 , "" ) ; t1 = T(
    
                    }
                        }
                            }
                                }
                                    etThread.boxPutF( tinP , tFilePasscode , sOut ) ;

                                    sOut << (strokeS*)tEmail ;
                                    sOut << (countT)ifcIDtYPEtICKET_EARNmONEYlINK ;
                                    sOut << (countT)1 ; //IDfORMAT
                                    sOut << FINGERnEG_TICKET ;
                                    soulC sOut( tinP , TAG( TAGiDnULL ) ) ;
                                {
                                else
                                if( etThread.diskFileExistsF( tinP , tFilePasscode ) ) cPasscode = 0 ;
                                tFilePasscode = tIpdosTickets+T("soul.ticket.")+TF2(cPasscode,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+T(".soul") ;
                            {
                            if( cPasscode )
                            cPasscode = etherC::ranUniI_IF( tinP ) * (measureT)MAXcOUNTT ;
                        {
                        while( !cPasscode )
                        TN( tFilePasscode , "" ) ;
                    {
                    ZE( countT , cPasscode ) ;
    
                    }
                        if( POOP ) { POOPR ; }
                        etThread.delF( tinP , psttEmail ) ;
                        tEmail  = T(psttEmail) ;
                        }
                            }
                                }
                                    etThread.delF( tinP , psttKey ) ;
                                    }
                                        etThread.delF( tinP , psttnu ) ;
                                        sIn >> psttnu ; ___( psttnu ) ;
                                        ZE( strokeS* , psttnu ) ;
                                    {
                                    else        
                                    }
                                        if( *ppsttv ) { etThread.strTrimF( tinP , *ppsttv , 0 , T(TbLACKnEWlINE) ) ; ___( *ppsttv ) ; }
                                        sIn >> *ppsttv ; ___( *ppsttv ) ;
                                    {
                                    if( ppsttv )
    
                                         if( !etThread.strCompareF( tinP , psttKey , T("email") ) ) ppsttv = &psttEmail  ;
                                    ZE( strokeS** , ppsttv ) ;
                                {
                                else
                                if( !psttKey ) { sIn >> psttKey ; ___( psttKey ) ; }
                            {
                            while( sIn )
                            ZE( strokeS* , psttValue ) ;
                            ZE( strokeS* , psttKey ) ;
                        {
                        ZE( strokeS* , psttEmail ) ;
                    {
                    TN( tEmail  , "" ) ;
                {
                else
                if( POOP ) { POOPR ; }
                tinP.pEtScratch->boxGetShadowF( tinP , sIn , psttc1 ) ; ___( pbi ) ;
                soulC sIn( tinP , TAG( TAGiDnULL ) ) ;
                ZE( countT , cbi ) ;
                ZE( osTextT* , pbi ) ;
            {
            else if( etThread.strIdF( tinP , tFormEarnMoneyLink , psttc1 ) )
            }
                etThread.delF( tinP , pbi ) ;
                }
                    etThread.boxPutF( tinP , T("//smtp/" ifcEMAIL_AUTOrESPONDERnEWlOGINbYeMAILaCCOUNT "/")+tEmail , t1 , t1.csF( tinP ) ) ;

                    }
                        ) ;
                    
                            "  Otherwise, please sign the IdeaFarm " "(tm) Pledge!\r\n"
                            "If this appears to be an error, please report it to us."
                            "\r\n"
                            "  (When you sign the pledge, the signing fee is credited to your account.)\r\n"
                            "  Perhaps you have not yet signed the IdeaFarm " "(tm) Pledge."
                            "The request for a login link for your email address was refused because you do not have a positive balance in your IdeaFarm " "(tm) City Central Bank account."
                            "\r\n"
                            "  If this was done without your knowledge, you need not do anything.\r\n"
                            "You are receiving this because your email address was submitted on http://ideafarm.com to request a login link."
                            "\r\n"
                            "Subject: IdeaFarm " "(tm) Piggyback Distributed Operating System\r\n"
                    
                        t1 = T(
                    {
                    else
                    }
                        ) ;
                    
                            "  Please use this link immediately.\r\n"
                            "Delivery of email can be delayed."
                            "\r\n"
                            "    Click to login:   http://ideafarm.com")+(idPort==ifcPORToLD1hTTP?T(""):T(":")+TF4(idPort,flFORMAT_NObASE|flFORMAT_UNSIGNED|flFORMAT_FOREIGN,0,0xa))+T("/emaillink/action/obeyloginlink.html?idticket=")+TF2(cPasscode,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+T("\r\n"
                            "\r\n"
                            "  If this was done without your knowledge, you need not do anything, and your login link will expire in 1 hour (90 foreign minutes).\r\n"
                            "You are receiving this login link because your email address was submitted on http://ideafarm.com to request a login link."
                            "\r\n"
                            "Subject: IdeaFarm " "(tm) Piggyback Distributed Operating System\r\n"
                    
                        t1 = T(
                    {
                    if( cPasscode )
                    TN( t1 , "" ) ;
    
                    }
                        }
                            }
                                }
                                    etThread.boxPutF( tinP , tFilePasscode , sOut ) ;

                                    sOut << idPort ;
                                    sOut << (strokeS*)tEmail ;
                                    sOut << (countT)ifcIDtYPEtICKET_LOGINvIAeMAILlINK ;
                                    sOut << (countT)1 ; //IDfORMAT
                                    sOut << FINGERnEG_TICKET ;
                                    soulC sOut( tinP , TAG( TAGiDnULL ) ) ;
                                {
                                else
                                if( etThread.diskFileExistsF( tinP , tFilePasscode ) ) cPasscode = 0 ;
                                tFilePasscode = tIpdosTickets+T("soul.ticket.")+TF2(cPasscode,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+T(".soul") ;
                            {
                            if( cPasscode )
                            cPasscode = etherC::ranUniI_IF( tinP ) * (measureT)MAXcOUNTT ;
                        {
                        while( !cPasscode )
                        TN( tFilePasscode , "" ) ;
                    {
                    if( bOk )
                    ZE( countT , cPasscode ) ;

                    }
                        }
                            bOk = infoTotal.moneyT1 || infoTotal.moneyT2 ;
                            bucketTotalC infoTotal(  tinP , ifcIDaCCbUCKEToWNER_IFO  , ifcIDbUCKET_CENTRALbANK , ifcIDpRODUCTcENTRALbANK_EXCHANGEmEDIA , idAcc ) ;
                        {
                        if( idAcc )
                        countT idAcc = !tEmail.csF( tinP ) ? 0 : idAcc = queryIdAccountFromEmailF( tinP , tEmail ) ;
                    {
                    ZE( boolT , bOk ) ;
                    //VALIDATE THE EMAIL ADDRESS AGAINST THE CENTRAL BANK BALANCE
    
                    }
                        if( POOP ) { POOPR ; }
                        etThread.delF( tinP , psttIdPort ) ;
                        etThread.delF( tinP , psttEmail ) ;
                        if( psttIdPort ) idPort = tinP.pEtScratch->strDigitsToSCountF( tinP , psttIdPort ) ;
                        tEmail  = T(psttEmail) ;
                        if( psttEmail ) etThread.strConvertToLowerCaseF( tinP , psttEmail ) ;

                        }
                            }
                                }
                                    etThread.delF( tinP , psttKey ) ;
                                    }
                                        etThread.delF( tinP , psttnu ) ;
                                        sIn >> psttnu ; ___( psttnu ) ;
                                        ZE( strokeS* , psttnu ) ;
                                    {
                                    else        
                                    }
                                        if( *ppsttv ) { etThread.strTrimF( tinP , *ppsttv , 0 , T(TbLACKnEWlINE) ) ; ___( *ppsttv ) ; }
                                        sIn >> *ppsttv ; ___( *ppsttv ) ;
                                    {
                                    if( ppsttv )
    
                                    else if( !etThread.strCompareF( tinP , psttKey , T("port" ) ) ) ppsttv = &psttIdPort ;
                                         if( !etThread.strCompareF( tinP , psttKey , T("email") ) ) ppsttv = &psttEmail  ;
                                    ZE( strokeS** , ppsttv ) ;
                                {
                                else
                                if( !psttKey ) { sIn >> psttKey ; ___( psttKey ) ; }
                            {
                            while( sIn )
                            ZE( strokeS* , psttValue ) ;
                            ZE( strokeS* , psttKey ) ;
                        {
                        ZE( strokeS* , psttIdPort ) ;
                        ZE( strokeS* , psttEmail ) ;
                    {
                    ZE( countT , idPort ) ;
                    TN( tEmail  , "" ) ;
                {
                else
                if( POOP ) { POOPR ; }
                tinP.pEtScratch->boxGetShadowF( tinP , sIn , psttc1 ) ; ___( pbi ) ;
                soulC sIn( tinP , TAG( TAGiDnULL ) ) ;
                ZE( countT , cbi ) ;
                ZE( osTextT* , pbi ) ;
            {
            else if( etThread.strIdF( tinP , tFormLoginViaEmailLink , psttc1 ) )
            }
                etThread.delF( tinP , pbi ) ;
                }
                    etThread.boxPutF( tinP , T("//smtp/" ifcEMAIL_AUTOrESPONDERwOtIMEvISITORpASSCODE "/")+tEmail , t1 , t1.csF( tinP ) ) ;

                    ) ;
                
                        "Please use your passcode immediately.\r\n"
                        "\r\n"
                        "  Passcode:   ")+TF2(cPasscode,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+T(""
                        "\r\n"
                        "  If this was done without your knowledge, you need not do anything, and your passcode will expire in 1 hour (90 foreign minutes)."
                        "You are receiving this because your email address was submitted on http://ideafarm.com to apply for a one time visitor passcode."
                        "\r\n"
                        "Subject: IdeaFarm " "(tm) Piggyback Distributed Operating System\r\n"
                
                    TN( t1 , "" ) ; t1 = T(
    
                    }
                        }
                            }
                                }
                                    etThread.boxPutF( tinP , tFilePasscode , sOut ) ;

                                    sOut << (strokeS*)tEmail ;
                                    sOut << (countT)ifcIDtYPEtICKET_FTPmENUvIAeMAILlINK ;
                                    sOut << (countT)1 ; //IDfORMAT
                                    sOut << FINGERnEG_TICKET ;
                                    soulC sOut( tinP , TAG( TAGiDnULL ) ) ;
                                {
                                else
                                if( etThread.diskFileExistsF( tinP , tFilePasscode ) ) cPasscode = 0 ;
                                tFilePasscode = tIpdosTickets+T("/soul.ticket.")+TF2(cPasscode,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+T(".soul") ;
                            {
                            if( cPasscode )
                            cPasscode = etherC::ranUniI_IF( tinP ) * (measureT)MAXcOUNTT ;
                        {
                        while( !cPasscode )
                        TN( tFilePasscode , "" ) ;
                    {
                    ZE( countT , cPasscode ) ;
    
                    }
                        etThread.delF( tinP , psttEmail ) ;
                        tEmail = T(psttEmail) ;
                        }
                            }
                                }
                                    etThread.delF( tinP , psttKey ) ;
                                    }
                                        etThread.delF( tinP , psttnu ) ;
                                        sIn >> psttnu ; ___( psttnu ) ;
                                        ZE( strokeS* , psttnu ) ;
                                    {
                                    else        
                                    }
                                        if( *ppsttv ) { etThread.strTrimF( tinP , *ppsttv , 0 , T(TbLACKnEWlINE) ) ; ___( *ppsttv ) ; }
                                        sIn >> *ppsttv ; ___( *ppsttv ) ;
                                    {
                                    if( ppsttv )
    
                                    if( !etThread.strCompareF( tinP , psttKey , T("email"   ) ) ) ppsttv = &psttEmail    ;
                                    ZE( strokeS** , ppsttv ) ;
                                {
                                else
                                if( !psttKey ) { sIn >> psttKey ; ___( psttKey ) ; }
                            {
                            while( sIn )
                            ZE( strokeS* , psttValue ) ;
                            ZE( strokeS* , psttKey ) ;
                        {
                        ZE( strokeS* , psttEmail ) ;
                    {
                    TN( tEmail , "" ) ;
                {
                else
                if( POOP ) { POOPR ; }
                tinP.pEtScratch->boxGetShadowF( tinP , sIn , psttc1 ) ; ___( pbi ) ;
                soulC sIn( tinP , TAG( TAGiDnULL ) ) ;
                ZE( countT , cbi ) ;
                ZE( osTextT* , pbi ) ;
            {
            else if( etThread.strIdF( tinP , tFormNewPasscode , psttc1 ) )
            }
                etThread.delF( tinP , pbi ) ;
                }
                    etThread.boxPutF( tinP , T("//smtp/" ifcEMAIL_AUTOrESPONDERnEWeMAILsUBACCOUNT "/")+tEmail , t1 , t1.csF( tinP ) ) ;
                    }
                        ) ;
                    
                            "Thank you for helping to spread awareness of IdeaFarm " "(tm) Operations, and its mission (to \"Connect People Wholesomely\"), by using this freebie service.\r\n"
                            "\r\n"
                            "    Name To Others: ")+tNameOut+T("\r\n"
                            "    Name To Me: ")+tNameIn+T("\r\n"
                            "    Penpal: ")+tPenpal+T("\r\n"
                            "    Title: ")+tTitle+T("\r\n"
                            "    ")+TF4(idSub,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES|flFORMAT_NObASE,0,36)+T(".")+TF4(idAccount,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES|flFORMAT_NObASE,0,36)+T(ifcEMAIL_DOUBLEbLINDsUFFIX "\r\n"
                            "\r\n"
                            "Here is your new IdeaFarm " "(tm) Password Email <> Double Blind Relay subaccount:\r\n"
                            "\r\n"
                            "  To kill such an address, contact IdeaFarm " "(tm) Operations.\r\n"
                            "  So if you start getting spam, you know who it was that disclosed your address to the spammers."
                            "  All email that you receive is identified by the relay account."
                            "  Give each relay email address to only one person, company, or web site."
                            "You may request any number of relay email addresses by entering the same receiving address in the form on the web site."
                            "\r\n"
                            "  Double blind password email is an innovation introduced by IdeaFarm " "(tm) Operations.\r\n"
                            "  You will never see the original sender's email address."
                            "  The original sender will never see your email address."
                            "  When you reply, your reply will be relayed back to the original sender."
                            "Once the account is enabled, email sent to the following address will be relayed to you."
                            "\r\n"
                            "  After doing that, I will send you a list of all of your addresses.\r\n"
                            "  When I receive an email from you, I will immediately enable all email addresses that have been dispensed to you but have not yet been enabled."
                            "  The content of your reply does not matter."
                            "To confirm that you want this account, reply to this note."
                            "\r\n"
                            "  If this\ was done without your knowledge, you need not do anything, and your new account will remain disabled because you have not replied to this email.\r\n"
                            "You are receiving this because your email address was submitted on http://ideafarm.com to apply for a double blind password email account."
                            "\r\n"
                            "Subject: IdeaFarm " "(tm) Password Email <> Double Blind Relay Account\r\n"
                    
                        t1 = T(
    
                        }
                            }
                                *info.pStkEmailPenpalExactOr << psttv ; psttv = 0 ;
                                psttv = psttOldC( tinP , etThread , tPenpal ) ; ___( psttv ) ;
                            {
                            if( tPenpal.csF( tinP ) )
                            *info.pStkEmailRelay << psttv ; psttv = 0 ;
                            strokeS* psttv = psttOldC( tinP , etThread , tEmail ) ; ___( psttv ) ;

                            subaccountS info( tinP , etThread , idAccount , idSub , tTitle , tNameIn , tNameOut , fliSUBACCOUNTmODE_null ) ;
                        {
                        ZE( countT , idSub ) ;
                        //SET SUBACCOUNT

                        { accountS info( tinP , etThread , idAccount , flACCOUNT1_SET , flACCOUNT2_QUERYfLAGSmODE | flACCOUNT2_QUERYzIPaT ) ; } //MUST QUERY FOR ALL FIELDS THAT ARE CAPTURED FROM ACCOUNT OWNER OR FROM ANOTHER SOURCE OTHER THAN PAYPAL
    
                        countT idAccount = queryIdAccountFromEmailF( tinP , tEmail ) ;
                    {
                    )
                        tNameOut.csF( tinP )
                        tNameIn.csF(  tinP )                  &&
                        tTitle.csF(   tinP )                  &&
                        tEmail.csF(   tinP )                  &&
                    (
                    else if
                    }
                        ) ;
                    
                            "  Thank you.\r\n"
                            "The \"foreign\" (not in IdeaFarm " "(tm) City) email address at which you receive your email must be used.\r\n"
                            "  \r\n"
                            "    ")+tEmail+T("\r\n"
                            "  \r\n"
                            "A new relay email account was not created because you entered an email address that contains the trademark \"IdeaFarm\":\r\n"
                            "\r\n"
                            "  If this was done without your knowledge, you need not do anything, and your new account will expire because it is not being used.\r\n"
                            "You are receiving this because your email address was submitted on http://ideafarm.com to apply for an IPDOS (tm) login account."
                            "\r\n"
                            "Subject: IdeaFarm " "(tm) Piggyback Distributed Operating System\r\n"
                    
                        t1 = T(
                    {
                    if( etThread.strIdF( tinP , T("ideafarm") , tEmail ) )
                    TN( t1 , "" ) ;
    
                    }
                        etThread.delF( tinP , psttNameOut ) ;
                        etThread.delF( tinP , psttNameIn ) ;
                        etThread.delF( tinP , psttPenpal ) ;
                        etThread.delF( tinP , psttTitle ) ;
                        etThread.delF( tinP , psttEmail ) ;
                        tNameOut  = T(psttNameOut) ;
                        tNameIn  = T(psttNameIn) ;
                        tPenpal  = T(psttPenpal) ;
                        tTitle = T(psttTitle) ;
                        tEmail = T(psttEmail) ;

                        if( psttNameOut ) etThread.strCleanF( tinP , psttNameOut , S1C(' ') , ifcIDtYPEsTROKEcLEAN_CnAMESoRbLANKoRpUNCTUATION ) ;
                        if( psttNameIn  ) etThread.strCleanF( tinP , psttNameIn  , S1C(' ') , ifcIDtYPEsTROKEcLEAN_CnAMESoRbLANKoRpUNCTUATION ) ;
                        if( psttTitle   ) etThread.strCleanF( tinP , psttTitle   , S1C(' ') , ifcIDtYPEsTROKEcLEAN_CnAMESoRbLANKoRpUNCTUATION ) ;

                        }
                            }
                                }
                                    etThread.delF( tinP , psttKey ) ;
                                    }
                                        etThread.delF( tinP , psttnu ) ;
                                        sIn >> psttnu ; ___( psttnu ) ;
                                        ZE( strokeS* , psttnu ) ;
                                    {
                                    else        
                                    }
                                        if( *ppsttv ) { etThread.strTrimF( tinP , *ppsttv , 0 , T(TbLACKnEWlINE) ) ; ___( *ppsttv ) ; }
                                        sIn >> *ppsttv ; ___( *ppsttv ) ;
                                    {
                                    if( ppsttv )
    
                                    else if( !etThread.strCompareF( tinP , psttKey , tKeyNameOut ) ) ppsttv = &psttNameOut  ;
                                    else if( !etThread.strCompareF( tinP , psttKey , tKeyNameIn  ) ) ppsttv = &psttNameIn   ;
                                    else if( !etThread.strCompareF( tinP , psttKey , tKeyPenpal  ) ) ppsttv = &psttPenpal   ;
                                    else if( !etThread.strCompareF( tinP , psttKey , tKeyTitle   ) ) ppsttv = &psttTitle    ;
                                         if( !etThread.strCompareF( tinP , psttKey , tKeyEmail   ) ) ppsttv = &psttEmail    ; 
                                    ZE( strokeS** , ppsttv ) ;
                                {
                                else
                                if( !psttKey ) { sIn >> psttKey ; ___( psttKey ) ; }
                            {
                            while( sIn )
                            ZE( strokeS* , psttValue ) ;
                            ZE( strokeS* , psttKey ) ;
                        {
                        ZE( strokeS* , psttNameOut  ) ;
                        ZE( strokeS* , psttNameIn  ) ;
                        ZE( strokeS* , psttPenpal  ) ;
                        ZE( strokeS* , psttTitle ) ;
                        ZE( strokeS* , psttEmail ) ;
                    {
                    TN( tNameOut , "" ) ;
                    TN( tNameIn , "" ) ;
                    TN( tPenpal , "" ) ;
                    TN( tTitle , "" ) ;
                    TN( tEmail , "" ) ;
                    TN( tKeyNameOut  , "nameout" ) ;
                    TN( tKeyNameIn  , "namein" ) ;
                    TN( tKeyPenpal  , "penpal" ) ;
                    TN( tKeyTitle , "title" ) ;
                    TN( tKeyEmail , "email" ) ;
                {
                else
                if( POOP ) { POOPR ; }
                tinP.pEtScratch->boxGetShadowF( tinP , sIn , psttc1 ) ; ___( pbi ) ;
                soulC sIn( tinP , TAG( TAGiDnULL ) ) ;
                ZE( countT , cbi ) ;
                ZE( osTextT* , pbi ) ;
            {
            else if( etThread.strIdF( tinP , tFormNewRelayEmailAccount , psttc1 ) )

            #endif

                }
                    etThread.delF( tinP , pbi ) ;
                    }
                        etThread.boxPutF( tinP , T("//smtp/" ifcEMAIL_AUTOrESPONDERnEWlOGINbYpASSWORDaCCOUNT "/")+tEmail , t1 , t1.csF( tinP ) ) ;
                        }
        
                            ) ;
                        
                                "  So be sure to copy them to a safe place right now!\r\n"
                                "If you lose your userid or password, there is no way to retrieve them, and all information associated with your account will be lost when the account closes due to inactivity."
                                "\r\n"
                                "   Regular:       1 mEx per day\r\n"
                                "   Introductory:  FREE\r\n"
                                "\r\n"
                                "IPDOS (tm) login account pricing:\r\n"
                                "\r\n"
                                "  If your mEx (tm) account balance falls to ze""ro, your IPDOS (tm) login account will revert to a free introductory account and you must then resume logging in frequently to keep it from being closed.\r\n"
                                "  To open your mEx (tm) account, click \"buy\" at the top of any page on http://ideafarm.com ."
                                "This account becomes a regular login account whenever you have mEx (tm) in your IdeaFarm " "(tm) Central Bank account."
                                "\r\n"
                                "  When a login account is closed, all information associated with that account is lost.\r\n"
                                "  If 8 days elapse without a login, your free introductory login account will be closed."
                                "You can keep your FREE introductory IPDOS (tm) login account indefinitely by logging in at least every 7 days."
                                "\r\n"
                                "  Before deleting this email, please log in twice to verify that your userid and password are saved correctly in your browser's field memory.\r\n"
                                "  Please save this information."
                                "You can log in to IPDOS (tm) immediately."
                                "\r\n"
                                "    Password: ")+TF2(cPassword,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+T("\r\n"
                                "    UserId:   ")+TF2(cUserId,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+T("\r\n"
                                "\r\n"
                                " Enter this information on the form:\r\n"
                                " To add privileges, click \"do\" at the top of any page at http:\\ideafarm.com ."
                                "Within IPDOS (tm), \"logging in\" means adding privileges to your session."
                                "\r\n"
                                "  If this was done without your knowledge, you need not do anything, and your new account will expire because it is not being used.\r\n"
                                "You are receiving this because your email address was submitted on http://ideafarm.com to apply for an IPDOS (tm) login account."
                                "\r\n"
                                "Subject: IdeaFarm " "(tm) Piggyback Distributed Operating System\r\n"
                        
                            t1 = T(
            
                            }
                                if( cPassword ) etThread.boxPutF( tinP , tDirAccount+tShortFilePassword+TF2(cPassword,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES) ) ;
                                cPassword = etherC::ranUniI_IF( tinP ) * (measureT)MAXcOUNTT ;
                            {
                            while( !cPassword )
                            ZE( countT , cPassword ) ;
            
                            }
                                }
                                    else                                                 etThread.boxPutF( tinP , tDirAccount+tShortFileOwner , tEmail , tEmail.csF( tinP ) ) ;
                                    if( etThread.diskFileExistsF( tinP , tDirAccount ) ) cUserId = 0 ;
                                {
                                if( cUserId )
            
                                tDirAccount = tIpdosAccounts+TF2(cUserId,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+T("/") ;
                                cUserId = etherC::ranUniI_IF( tinP ) * (measureT)MAXcOUNTT ;
                            {
                            while( !cUserId )
                            ZE( countT , cUserId ) ;
                            TN( tDirAccount , "" ) ;
                        {
                        else
                        }
                            ) ;
                        
                                "  Thank you.\r\n"
                                "The \"foreign\" (not in IdeaFarm " "(tm) City) email address at which you receive your email must be used.\r\n"
                                "  \r\n"
                                "    ")+tEmail+T("\r\n"
                                "  \r\n"
                                "A Login By Password account was not created because you entered an email address that contains the trademark \"IdeaFarm\":\r\n"
                                "\r\n"
                                "  If this was done without your knowledge, you need not do anything, and your new account will expire because it is not being used.\r\n"
                                "You are receiving this because your email address was submitted on http://ideafarm.com to apply for an IPDOS (tm) login account."
                                "\r\n"
                                "Subject: IdeaFarm " "(tm) Piggyback Distributed Operating System\r\n"
                        
                            t1 = T(
                        {
                        if( etThread.strIdF( tinP , T("ideafarm") , tEmail ) )
                        TN( t1 , "" ) ;
        
                        }
                            etThread.delF( tinP , psttEmail ) ;
                            tEmail = T(psttEmail) ;
                            }
                                }
                                    }
                                        etThread.delF( tinP , psttKey ) ;
                                        }
                                            etThread.delF( tinP , psttnu ) ;
                                            sIn >> psttnu ; ___( psttnu ) ;
                                            ZE( strokeS* , psttnu ) ;
                                        {
                                        else        
                                        }
                                            if( *ppsttv ) { etThread.strTrimF( tinP , *ppsttv , 0 , T(TbLACKnEWlINE) ) ; ___( *ppsttv ) ; }
                                            sIn >> *ppsttv ; ___( *ppsttv ) ;
                                        {
                                        if( ppsttv )
        
                                        if( !etThread.strCompareF( tinP , psttKey , T("email"   ) ) ) ppsttv = &psttEmail    ;
                                        ZE( strokeS** , ppsttv ) ;
                                    {
                                    else
                                    if( !psttKey ) { sIn >> psttKey ; ___( psttKey ) ; }
                                {
                                while( sIn )
                                ZE( strokeS* , psttValue ) ;
                                ZE( strokeS* , psttKey ) ;
                            {
                            ZE( strokeS* , psttEmail ) ;
                        {
                        TN( tEmail , "" ) ;
                    {
                    else
                    if( POOP ) { POOPR ; }
                    tinP.pEtScratch->boxGetShadowF( tinP , sIn , psttc1 ) ; ___( pbi ) ;
                    soulC sIn( tinP , TAG( TAGiDnULL ) ) ;
                    ZE( countT , cbi ) ;
                    ZE( osTextT* , pbi ) ;
                {
                else if( etThread.strIdF( tinP , tFormNewLoginAccount , psttc1 ) )
                //TO GIVE USERS THE ALTERNATIVE OF LOGGING IN USING A PASSCODE, REWRITE THIS TO USE LIST SERVERS RATHER THAN FILE DATABASE
                //COMMENTED OUT BECAUSE LOGIN USES CONFIRMATION LINK EMAILED TO USER

            #if defined( NEVERdEFINED )

            }
                etThread.delF( tinP , pbi ) ;
                }
                    etThread.boxPutF( tinP , T("//smtp/" ifcEMAIL_AUTOrESPONDEReMAILzIPfORM "/")+T(psttEmail) , tReply , tReply.csF( tinP ) ) ;
    
                    tReply += t2 ;                    
    
                    if( psttNote ) tReply += T("Note: \"")+T(psttNote)+T("\"\r\n") ;
    
                    ;
    
                        +T("Language: \"")+T(psttLanguage)+T("\"\r\n")
                        +T("Postal Code: \"")+T(psttZip)+T("\"\r\n")
                        +T("Country: \"")+T(psttOldCountry)+T("\"\r\n")
                        +T("Email: \"")+T(psttEmail)+T("\"\r\n")
                        t1
    
                    TN( tReply , "" ) ; tReply =
    
                    }
                        }
                            }
                                etThread.delF( tinP , psttKey ) ;
                                }
                                    etThread.delF( tinP , psttnu ) ;
                                    sIn >> psttnu ; ___( psttnu ) ;
                                    ZE( strokeS* , psttnu ) ;
                                {
                                else
                                }
                                    if( etThread.strCompareF( tinP , psttKey , T("note" ) ) && *ppsttv ) { etThread.strTrimF( tinP , *ppsttv , 0 , T(TbLACKnEWlINE) ) ; ___( *ppsttv ) ; }
                                    sIn >> *ppsttv ; ___( *ppsttv ) ;
                                {
                                if( ppsttv )

                                else if( !etThread.strCompareF( tinP , psttKey , T("note"    ) ) ) ppsttv = &psttNote     ;
                                else if( !etThread.strCompareF( tinP , psttKey , T("language") ) ) ppsttv = &psttLanguage ;
                                else if( !etThread.strCompareF( tinP , psttKey , T("email"   ) ) ) ppsttv = &psttEmail    ;
                                else if( !etThread.strCompareF( tinP , psttKey , T("zip"     ) ) ) ppsttv = &psttZip      ;
                                     if( !etThread.strCompareF( tinP , psttKey , T("country" ) ) ) ppsttv = &psttOldCountry  ;
                                ZE( strokeS** , ppsttv ) ;
                            {
                            else
                            if( !psttKey ) { sIn >> psttKey ; ___( psttKey ) ; }
                        {
                        while( sIn )
                        ZE( strokeS* , psttValue ) ;
                        ZE( strokeS* , psttKey ) ;
                    {
                    ZE( strokeS* , psttNote ) ;
                    ZE( strokeS* , psttLanguage ) ;
                    ZE( strokeS* , psttEmail ) ;
                    ZE( strokeS* , psttZip ) ;
                    ZE( strokeS* , psttOldCountry ) ;
                {
                else
                if( POOP ) { POOPR ; }
                tinP.pEtScratch->boxGetShadowF( tinP , sIn , psttc1 ) ; ___( pbi ) ;
                soulC sIn( tinP , TAG( TAGiDnULL ) ) ;
                ZE( countT , cbi ) ;
                ZE( osTextT* , pbi ) ;

                ) ;
            
                    "http://ideafarm.com\r\n"
                    "\"Connecting People Wholesomely\"\r\n"
                    "IdeaFarm " "(tm) Associates\r\n"
                    "Organizer\r\n"
                    "Wo'O Ideafarm\r\n"
                    "\r\n"
                    "\r\n"
                    "  The Nautilus is like lightning; it rarely strikes the same place twice!\r\n"
                    "If you are the only wouldbe villager in your zip code, and you don't do anything to spread the word, then you'll probably not hear from me again."
                    "\r\n"
                    "  None of these notifications will contain veiled solicitations or other \"spam content\".\r\n"
                    "  Then, when two teenage hosts have been recruited, which completes the formation of a village, you will be notified and your email will then be discarded."
                    "  As the number of people registered in your postal code reaches the milestone levels 2,4,8,16, you will be notified."
                    "As promised, your email will not be disclosed, and you will not receive solicitations or newsletters."
                    "\r\n"
                    "  Those of you who spread the word will get villages quickly; there are tens of thousands of people in your postal code and it only takes 16!\r\n"
                    "  Most of you are solitary wouldbe villagers in your postal codes."
                    "  The Nautilus is working around the clock to build the list of postal codes worldwide where someone knows about this project."
                    "  I am busy developing the IdeaFarm " "(tm) Piggyback Distributed Operating System to \"connect us wholesomely globally\"."
                    "Don't wait for me to find those 15 people for you."
                    "\r\n"
                    "  16 people, including 2 teenager hosts, makes it happen, so spread the word!\r\n"
                    "There is not yet a village in your postal code."
                    "\r\n"
                    "  Most gatherings are open to the general public; you are welcome to participate indefinitely without ever becoming an IdeaFarm " "(tm) Associate.\r\n"
                    "Thank you for taking the first step to participate in the village gatherings of IdeaFarm " "(tm) Associates."
                    "\r\n"
                    "If this information was submitted without your knowledge, you can use our web page to tell us to discard this data.\r\n"
                    "\r\n"
            
                TN( t2 ,
                TN( t1 , "Subject: IdeaFarm " "(tm) Associates - response to your query\r\n\r\nThe following information was submitted on our web page:\r\n\r\n" ) ;
            {
            if( etThread.strIdF( tinP , tFormEmailzip , psttc1 ) )
        {
        FORsTRINGSiN1( pstt1m )
        etThread.boxMenuF( tinP , soul , tLike , 0 , 0x10 ) ; ___( pstt1m ) ;
        ZE( strokeS* , pstt1m ) ;
    {
    while( !ether && !etThread )
    TN( tShortFilePassword            , "password." ) ;
    TN( tShortFileOwner               , "txt.email.owner.txt" ) ;
    TN( tFormEarnMoneyLink            , "/form.earnmoneylink." ) ;
    TN( tFormLoginViaEmailLink        , "/form.loginviaemaillink." ) ;
    TN( tFormNewPasscode              , "/form.wotimepasscode." ) ;
    TN( tFormNewRelayEmailAccount     , "/form.newrelayemailaccount." ) ;
    TN( tFormNewLoginAccount          , "/form.newloginaccount." ) ;
    TN( tFormEmailzip                 , "/form.emailzip." ) ;

    TN( te , "\r\n" ) ;
    TN( tLike , "///ideafarm/ephemeral/backed.up.daily/domains/com/ideafarm/" ) ; tLike += TF2(DDNUMB,flFORMAT_NObIGITvALUES)+T("/in/*") ;

    TN( tIpdosTickets  , "///ideafarm/ephemeral/backed.up.daily/domains/com/ideafarm/ipdos/tickets/" ) ;

    //etThread.osThreadAdamF( tinP , ifcIDaDAM_ROOTwATCHMAN ) ; //PRODUCTION (OBSOLETE?)

    etThread.osThreadAdamF( tinP , ifcIDaDAM_ROOTgORILLA ) ; //PRODUCTION
    //U::COMMENTED OUT TO MINIMIZE MEMORY USAGE PENDING DEBUGGING OF MEMORY EXHAUSTION

    SCOOPS
{
IFsCRATCH

TODO

}
    return idAccount ;

    }
        __Z( idAccount ) ;
        sIn >> idAccount ;
    
        __( idFormat - 1 ) ;
        sIn >> idFormat ;
        ZE( countT , idFormat ) ;
    
        __( finger - FINGERnEG_LISTsERVERrEPLY ) ;
        sIn >> finger ;
        ZE( countT , finger ) ;
    
        sock.readF( tinP , sIn ) ;
        soulC sIn( tinP , TAG( TAGiDnULL ) ) ;
    
        sock.writeF( tinP , sOut ) ;
        sOut << psttP ;
        sOut << (countT)ifcIDcMDlISTsERVEReMAILiDaCCOUNT_ASKiDaCCOUNTfROMeMAIL ;
        sOut << (countT)1 ;
        sOut << (countT)FINGERnEG_LISTsERVERcMD ;
        soulC sOut( tinP , TAG( TAGiDnULL ) ) ;
    
        sock.connectF( tinP , homeS::homeIF().idPortListServerEmailIdAccount ) ;
        socketC sock( tinP , *tinP.pEtScratch , TAG( TAGiDnULL ) ) ;

        SCOOPS
    {
    IFsCRATCH
    ZE( countT , idAccount ) ;

    if( POOP ) return 0 ;
    __Z( psttP ) ;
    if( POOP ) return 0 ;
{
countT queryIdAccountFromEmailF( tinS& tinP , const strokeS* const psttP )
//DUPLICATE CODE: b750104 e750104 1d20005

/*1*/WAKEhIDE( "ifcIDaDAM_ROOTfORMdATAeATER" )/*1*/

/**/
*/
composes email reply
watches a directory containing incoming form information
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


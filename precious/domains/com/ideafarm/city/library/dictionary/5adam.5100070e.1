
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST


etherC::loafIF( tinP ) ;
etThread.traceF( tinP , T("done ; loafing") ) ;

while( ~hFind && !POOP && !ether ) ;
}
    }
        DEL( pInfo ) ;
        }
            }
                etThread.delF( tinP , postName ) ;

                }
                    etThread.diskMoveFileOrDirF( tinP , tNewData , pInfo->psttIfoName ) ;

                    etThread.traceF( tinP , tNewData ) ;
                    TN( tNewData , "" ) ; tNewData = tPath+tShort+tDotExt ;

                    }
                        etThread.delF( tinP , psttDotExt ) ;
                        etThread.delF( tinP , psttnu ) ;
                        tDotExt = T(psttDotExt) ;
                        etThread.strBisectF( tinP , psttnu , psttDotExt , T(postName) , tDot , - 1 , flSTRbISECT_PREPENDdELIMITER ) ; ___( psttnu ) ; ___( psttDotExt ) ;
                        ZE( strokeS* , psttDotExt ) ;
                        ZE( strokeS* , psttnu ) ;
                    {
                    TN( tDotExt , "" ) ;

                    //etThread.traceF( tinP , T(postName) ) ;
                {
                if( postName && costName )

                etThread.boxGetShadowF( tinP , postName , costName , tLongMetaName ) ; ___( postName ) ;
                ZE( countT   , costName ) ;
                ZE( osTextT* , postName ) ;
            {
            if( etThread.diskFileExistsF( tinP , tLongMetaName ) )

            TN( tLongMetaName , "" ) ; tLongMetaName = tPath+tShorter+T("meta.currentname") ;

            //etThread.traceF( tinP , tShorter ) ;
            }
                etThread.delF( tinP , psttShorter ) ;
                tShorter = T(psttShorter) ;
                etThread.delF( tinP , psttnu ) ;
                if( etThread.strCompareF( tinP , psttnu , tData ) ) { BLAMMO ; } 
                etThread.strBisectF( tinP , psttShorter , psttnu , tShort , tDot , - 1 , flSTRbISECT_APPENDdELIMITER ) ; ___( psttnu ) ; ___( psttShorter ) ;
                ZE( strokeS* , psttnu ) ;
                ZE( strokeS* , psttShorter ) ;
            {
            TN( tShorter , "" ) ;

            //etThread.traceF( tinP , tShort ) ;
        {
        else
        }
        {
        if( bDir )

        }
            etThread.delF( tinP , psttShort ) ;
            etThread.delF( tinP , psttPath ) ;
            tShort = T(psttShort) ;
            tPath  = T(psttPath) ;
            etThread.strBisectF( tinP , psttPath , psttShort , pInfo->psttIfoName , tSlash , - 1 - bDir , flSTRbISECT_APPENDdELIMITER ) ; ___( psttPath ) ; ___( psttShort ) ;
            ZE( strokeS* , psttShort ) ;
            ZE( strokeS* , psttPath ) ;
        {
        TN( tShort , "" ) ;
        TN( tPath  , "" ) ;

        const boolT bDir = pInfo->psttIfoName[ CSpREFIX - 1 + pInfo->psttIfoName->idAdam ].idAdam == '/' ;

        //etRock.traceF( tinP , T("cloudC: [file]: ")+tIfoName ) ;
        TN( tIfoName , pInfo->psttIfoName ) ;
    {
    else
    }
        break ;
        DEL( pInfo ) ;
    {
    if( !pInfo || !pInfo->psttIfoName )

    etThread.diskFindFileOrDirF( tinP , pInfo , hFind , tLike ) ;
    ZE( infoFileS* , pInfo ) ;
{
do
handleC hFind( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILEfIND ) ;
TN( tLike , "///d/archive/*.data" ) ;
TN( tSlash , "/" ) ;
TN( tDot , "." ) ;
TN( tData , "data" ) ;

TODO

/*1*/WAKEsHOWtEXT( "tool.archive.rename.add.ext.from.meta" )/*1*/
/**/
*/
/*


//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


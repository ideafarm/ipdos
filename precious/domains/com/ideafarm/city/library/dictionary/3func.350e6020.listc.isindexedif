
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return bYes ;

    }
        }
            }
                }
                    }
                        }
                            }
                                bYes = ~hIndex ;
                                h3.closeIfF() ;
                                listC::openIF( tinP , hIndex , h3 , pczIndex , flLISToPEN_IFeXISTS , idGrabLayerP ) ;
                                handleC hIndex( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_LISTING ) ;
                                countT pczIndex[] = { idNameIndex , 0 } ;
                            {
                            if( idNameIndex )
                        {
                        if( ~h3 )
                        h2.closeIfF() ;
                        listC::openIF( tinP , h3 , pcz3 , flLISToPEN_IFeXISTS , idGrabLayerP ) ;
                        countT pcz3[] = { LISTnAME_ROOT , LISTnAME_ROOTsYSTEM3 , LISTnAME_FIELDvALUEiNDEX , 0 } ;
                        handleC h3( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_LISTING ) ;
                    {
                    if( ~h2 )
                    h1.closeIfF() ;
                    listC::openIF( tinP , h2 , pcz2 , flLISToPEN_IFeXISTS , idGrabLayerP ) ;
                    countT pcz2[] = { LISTnAME_ROOT , LISTnAME_ROOTsYSTEM3 , 0 } ;
                    handleC h2( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_LISTING ) ;
                {
                if( ~h1 )
                listC::openIF( tinP , h1 , pcz1 , flLISToPEN_IFeXISTS , idGrabLayerP ) ;
                countT pcz1[] = { LISTnAME_ROOT , 0 } ;
                handleC h1( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_LISTING ) ;

                grabitC grabitx( tinP , TAG( TAGiDnULL ) ) ;
            {
            if( idNameIndex )

            THREADmODE2rESTORE
            countT idNameIndex = listC::dictionaryQueryFromTextIF( tinP , postMasterPool , flDICTIONARYqUERYfROMtEXT_IFeXISTS ) ;
            THREADmODE2oN( flTHREADmODE2_ALLOWdICTIONARYwHILEgRABBING )

            puseC puseIndex( tinP , idPoolUse ) ;
        {
        if( idPoolUse == ifcIDpOOL_ADAMtEMP || tinP.pAdamGlobal1->pPoolHomeTemp )       // IF ifcIDpOOL_HOMEtEMP && !tinP.pAdamGlobal1->pPoolHomeTemp THEN CLEARLY IS NOT INDEXED

        const countT idPoolUse = !idStateSpace || idStateSpace == ifcIDsTATEsPACE_SINGLEaDAM( tinP ) || idStateSpace == ifcIDsTATEsPACE_SCRATCH ? ifcIDpOOL_ADAMtEMP : ifcIDpOOL_HOMEtEMP ; // "!idStateSpace" ADDED WITHOUT ANALYSIS

        const countT idStateSpace = PUSE.idStateSpaceF() ;
 
        const osTextT* postMasterPool = PUSE.postNameF( tinP ) ;
    {
    if( tinP.pPoolUse ) //I MIGHT BE CALLED LATE, WHEN !tinP.pPoolUse
    ZE( boolT , bYes ) ;

    _IO_

    }
        if( POOP ) return 0 ;
    {
    IFbEcAREFUL
{
/*1*/boolT listC::isIndexedIF( tinS& tinP , const countT idGrabLayerP )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


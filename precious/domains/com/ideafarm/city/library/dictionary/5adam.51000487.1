
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST
//etThread.ifcSayF( tinP , T("final aok\r\n") , flSAY_APPEND | flSAY_LOG ) ;

}
    DEL( pLake ) ;
    etUsesPoolPrime.delF( tinP , pbPackLag ) ;
    TELL( "cleaning up" ) ;
    }
        if( bWoPass ) break ;
        //etThread.ifcSayF( tinP , TF1(DDNUMB)+T(" cycle ")+tIdCycle+T(" this cycle has ended\r\n") , flSAY_APPEND | flSAY_LOG ) ;
        TELL( "ending a cycle" ) ;

        }
            HIRE( T("city.publisher.load") , 0x401043a , 0x1000000 , 0x401043a , 0x1000000 )
            TELL( "hiring a34" )
        {
        if( idCycle == 1 )

        //ether.beeClickF( tinP , 0x800 , TUCK * 0x20 ) ;
        //etThread.ifcSayF( tinP , TF1(DDNUMB)+T(" cycle ")+tIdCycle+T(" the current pack file is loaded\r\n") , flSAY_APPEND | flSAY_LOG ) ;
        loadPackF( tinP , ether , etThread , etUsesPoolPrime , pLake , pbPackLag ) ;
        //etThread.ifcSayF( tinP , TF1(DDNUMB)+T(" cycle ")+tIdCycle+T(" beginning to load the current pack file\r\n") , flSAY_APPEND | flSAY_LOG ) ;
        //ether.beeClickF( tinP , 0x700 , TUCK * 0x20 ) ;
        TELL( "loading a pack of fish into the lake" ) ;

        TN( tIdCycle , "" ) ; tIdCycle = TF1(++idCycle) ;
        TELL( "beginning a cycle" ) ;
    {
    while( !ether && !etThread )
    ZE( lakeC* , pLake ) ;
    ZE( countT , idCycle ) ;
    ZE( byteT* , pbPackLag ) ;
    etherC etUsesPoolPrime( tinP , TAG( TAGiDnULL ) ) ;

    }
        if( etThread.diskFileExistsF( tinP , tPackLoaded  ) ) etThread.boxZapF( tinP , tPackLoaded ) ;
        if( etThread.diskFileExistsF( tinP , tPackNoticed ) ) etThread.boxZapF( tinP , tPackNoticed ) ;
        TN( tPackLoaded  , "///ideafarm/ephemeral/domains/com/ideafarm/gen/lake/pack.loaded."  ) ; tPackLoaded  += TF1(etThread.diskIdF(tinP,T("///c"))) ;
        TN( tPackNoticed , "///ideafarm/ephemeral/domains/com/ideafarm/gen/lake/pack.noticed." ) ; tPackNoticed += TF1(etThread.diskIdF(tinP,T("///c"))) ;
    {

    stateS state( tinP , etThread ) ;
{

//U:etThread.flagsMode |= flTHIRDmODE_CHECKpOOLoLD ;

const boolT bTest   = etThread.etherParameterF( tinP , T("!test")   ) ;
const boolT bWoPass = etThread.etherParameterF( tinP , T("!woPass") ) ; //U: THESE ARE OBSOLETE NOW THAT I CYCLE CONTINUOUSLY AS PART OF ifc11 SYSTEM

//etThread.osThreadSwitchingDesireF( tinP , ifcTHREADpRIORITY_LAZIEST ) ; // I ALSO TAKE NAPS FREQUENTLY TO MAKE EXTRA SURE THAT I DO NOT INTERFERE WITH HTTP SERVICE
((thirdC&)etThread).third_bWatchful_F( tinP ) = 0 ;
TELL( "preparing for work" ) ;
TODO

}
    }
        }
            //etThread.ifcSayF( tinP , TF1(DDNUMB)+T(" the loaded file was written\r\n") , flSAY_APPEND | flSAY_LOG ) ;
            }
                etThread.boxPutF( tinP , tPackLoaded , (byteT*)&c2l , sizeof c2l ) ;
                etThread.osTimeNowF( tinP , c2l.c1 , (sCountT&)c2l.c2 ) ;
                count2S c2l ;
            {
            //etThread.ifcSayF( tinP , TF1(DDNUMB)+T(" writing the loaded file\r\n") , flSAY_APPEND | flSAY_LOG ) ;
    
            }
                }
                    __( !poolC::poolOldRootIF( tinP ).offNewMinF( tinP ) ) ;
                    }
                        poolC::poolOldRootIF( tinP ).poolOldDelIF( tinP , (voidT*)pbPad ) ; pbPad = 0 ;
                        poolC::poolOldRootIF( tinP ).flagsBackF( tinP ) &= ~( F(flPOOLoLDbACK_NOcURSORrESET) ) ;
                        poolC::poolOldRootIF( tinP ).setPoolNewMinF( tinP ) ;
                        }
                            db.cbUsedReally = cba ;
                            db.idType       = ifciDtYPEdROPnOTE_byteT ;
                            //DROPnOTErEF( pbPad ) ;
                        {
                        if( pbPad )
                        byteT* pbPad = (byteT*)poolC::poolOldRootIF( tinP ).poolNewF( tinP , LF , cba ) ; ___( pbPad ) ;
                        countT cba = cbSoFar * 2 ;
                    {
                    __( !!poolC::poolOldRootIF( tinP ).offNewMinF( tinP ) ) ;
    
                    }
                        poolC::poolOldRootIF( tinP ).poolOldDelIF( tinP , (voidT*)pbAt ) ; pbAt = 0 ;
                        cbSoFar = ap_artmentOldC( tinP , pbAt ) ;
                        }
                            db.cbUsedReally = 0 ;
                            db.idType       = ifciDtYPEdROPnOTE_byteT ;
                            //DROPnOTErEF( pbAt ) ;
                        {
                        if( pbAt )
                        byteT* pbAt = (byteT*)poolC::poolOldRootIF( tinP ).poolNewF( tinP , LF , 0 ) ; ___( pbAt ) ;
                    {
                    ZE( countT , cbSoFar ) ;
                {
                if( !bNewMinIsSet )

                etThread.osThreadF( tinP , countTC() , tmFreshCalendarF , 0 , flTHREADlAUNCH_null , 0 , (countT)&lake , (countT)&bNewMinIsSet ) ;
                }
                    stockOneImageFishF( tinP , etThread , lake , pcNameWo       , T("///d/ideafarm.work/backed.up.daily/images/jpeg/wo.jpg"         ) , T("image/jpeg") , bNewMinIsSet ) ;
                    stockOneImageFishF( tinP , etThread , lake , pcNameMural    , T("///d/ideafarm.work/backed.up.daily/images/jpeg/mural.jpg"      ) , T("image/jpeg") , bNewMinIsSet ) ;
                    stockOneImageFishF( tinP , etThread , lake , pcNameFlag     , T("///d/ideafarm.work/backed.up.daily/images/gif/flag.100x50.gif" ) , T("image/gif" ) , bNewMinIsSet ) ;
                    countT pcNameWo[]       = { 2 , 3 , 0 } ;
                    countT pcNameMural[]    = { 2 , 2 , 0 } ;
                    countT pcNameFlag[]     = { 2 , 1 , 0 } ;
                {
    
                //etThread.ifcSayF( tinP , T("time to load ")+TF1(cPacks)+T(" packs containing ")+T(cFish)+T(" fish into the lake: ")+TT(time1b,time2b)+T("\r\n") , flSAY_APPEND | flSAY_LOG ) ;
                etThread.osTimeSubtractF( tinP , time1b , time2b , time1as , time2as ) ;
                etThread.osTimeNowF( tinP , time1b , time2b ) ;
                ZE( sCountT , time2b ) ;
                ZE( countT , time1b ) ;
            {
            if( !ether && !etThread )
    
            time2a = time2bs ;
            time1a = time1bs ;
            etThread.osTimeSubtractF( tinP , time1b , time2b , time1a , time2a ) ;
            sCountT time2bs = time2b ;
            countT time1bs = time1b ;
            etThread.osTimeNowF( tinP , time1b , time2b ) ;
            ZE( sCountT , time2b ) ;
            ZE( countT , time1b ) ;
    
                                              //WO APPROACH: USE THE WO'TH NAME VALUE AS A SERIAL NUMBER AND PASS THROUGH THE ENTIRE LAKE DELETING SERIAL NUMBERS BELOW OR AT THE BACKING PACK THAT IS ABOUT TO BE DELETED
                                              //U: IF A FISH BECOMES OBSOLETE WITHOUT BEING REPLACED, IT WILL REMAIN IN THE LAKE EVEN THOUGH THE pbPack THAT IT POINTS TO HAS BEEN DELETED
            pbPackLagP = pbPack ; pbPack = 0 ; //pbPack CANNOT BE DELETED UNTIL AFTER ALL FISH THAT REFER TO IT ARE DELETED
            etUsesPoolPrime.delF( tinP , pbPackLagP ) ;
            etThread.lakeFishFromPackF( tinP , lake , pbPack , cbPack , bNewMinIsSet ) ;

            }
                etThread.boxPutF( tinP , tPackNoticed , (byteT*)&c2l , sizeof c2l ) ;
                etThread.osTimeNowF( tinP , c2l.c1 , (sCountT&)c2l.c2 ) ;
                count2S c2l ;
            {
    
            __( etUsesPoolPrime ) ;
            etUsesPoolPrime.boxGetShadowF( tinP , pbPack , cbPack , tPack ) ; ___( pbPack ) ;
            TELL( "loading a pack/reading the pack file" ) ;
            ZE( countT , cbPack ) ;
            ZE( byteT* , pbPack ) ;
        {
        if( !ether )

        //etThread.ifcSayF( tinP , TF1(DDNUMB)+T(" the noticed file is gone; loading the pack file\r\n") , flSAY_APPEND | flSAY_LOG ) ;
        }
            while( !ether && etThread.diskFileExistsF( tinP , tPackNoticed ) ) { ++ s ; ether.osSleepF( tinP , TOCK * 0x10 ) ; }
            sleepC s( tinP , TAG( TAGiDnULL ) ) ;
        {
        TELL( "loading a pack/waiting for the \"loaded\" baton file to disappear" ) ;
        //etThread.ifcSayF( tinP , TF1(DDNUMB)+T(" waiting for the noticed file to disappear\r\n") , flSAY_APPEND | flSAY_LOG ) ;

        if( !bNewMinIsSet ) poolC::poolOldRootIF( tinP ).flagsBackF( tinP ) |= flPOOLoLDbACK_NOcURSORrESET ;
        const boolT bNewMinIsSet = !!poolC::poolOldRootIF( tinP ).offNewMinF( tinP ) ;
        ZE( countT , cFish ) ;
        ZE( countT , cPacks ) ;
        TELL( "loading a pack/setting up" ) ;

        sCountT time2as = time2a ;
        countT time1as = time1a ;
        etThread.osTimeNowF( tinP , time1a , time2a ) ;
        ZE( sCountT , time2a ) ;
        ZE( countT , time1a ) ;

        TN( tPackLoaded  , "///ideafarm/ephemeral/domains/com/ideafarm/gen/lake/pack.loaded."  ) ; tPackLoaded  += TF1(etThread.diskIdF(tinP,T("///c"))) ;
        TN( tPackNoticed , "///ideafarm/ephemeral/domains/com/ideafarm/gen/lake/pack.noticed." ) ; tPackNoticed += TF1(etThread.diskIdF(tinP,T("///c"))) ;
        TN( tPack        , "///ideafarm/ephemeral/domains/com/ideafarm/gen/lake/pack" ) ;

        lakeC& lake = *pLakeP ;
    {
    if( pLakeP )
    TN( tLog , "///d/ideafarm.log.html" ) ;

    if( !pLakeP ) pLakeP = new( 0 , tinP , LF ) lakeC( tinP , etThread ) ;
{
voidT loadPackF( tinS& tinP , etherC& ether , etherC& etThread , etherC& etUsesPoolPrime , lakeC*& pLakeP , byteT*& pbPackLagP )
*/
  write the 2 image fish
    writes the blob to the lake, using name pcName
     if the '.' word begins with '$', the remaining substring is queried in the dictionary
    set pcName using the '.' words in the last '/' word in name
    get psttName cbBlob pbBlob
   for each fish
   initialize offset to sizeof( countT )
   read the pack box 
  for each pack file (no wildcard is used, so always just processes -the- pack file
 while not fired
pseudocode
/*

DONE( tmFreshCalendarF )
}
    }
        }
            dayDone = today ;
            stockCalendarFishF( tinP , etThread , lake , pcNameCalendar , bNewMinIsSet ) ;

            }
                continue ;
                }
                    ++ s ; etThread.osSleepF( tinP , TOCK * 0x10 , TOCK ) ;
                    sleepC s( tinP , TAG( TAGiDnULL ) ) ;
                {
            {
            else if( today == dayDone )
            if( bWoth ) bWoth = 0 ;

            etThread.osTimeNowF( tinP , countTC() , today ) ;
            ZE( sCountT , today ) ;
        {
        while( !ether && !etThread )
        ZE( countT , dayDone ) ;

        boolT bWoth = 1 ;
        countT pcNameCalendar[] = { 3 , 1 , 0 } ;
    {
    if( !( cIn ++ ) )
    static countT cIn ;

    boolT& bNewMinIsSet = *(boolT*)pTaskP->c2 ;
    lakeC& lake         = *(lakeC*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 )
TASK( tmFreshCalendarF )

}
    //etThread.ifcSayF( tinP , T("stockOneImageFishF: ")+TF1(pcP)+T("  \"")+T(psttP)+T("\"\r\n") , flSAY_APPEND | flSAY_LOG ) ;
    etThread.delF( tinP , pbBlob ) ;
    }
        THREADmODE1rESTORE
        lakeP.writeF( tinP , pcP , pbBlob , cbBlob , 1 ) ;
        THREADmODE1oN( flTHREADmODE1_POOLoLDsECTION1 ) ;
    {
    else
    if( !bNewMinIsSetP ) lakeP.writeF( tinP , pcP , pbBlob , cbBlob , 1 ) ;

    etThread.delF( tinP , pbi ) ;
    etThread.memCopyF( tinP , pbBlob + cb0 , pbi , cbi ) ;
    etThread.memCopyF( tinP , pbBlob       , t0  , cb0 ) ;
    etThread.newF( tinP , LF , pbBlob , cbBlob ) ; ___( pbBlob ) ;
    cbBlob = cb0 + cbi ;
    countT cb0 = t0.csF( tinP ) ;

    textC t0 = T("HTTP/1.0 200 OK\r\nContent-Type: ")+T(psttTypeP)+T("\r\nContent-Length: ")+TF4(cbi,flFORMAT_FILLzE|flFORMAT_NObASE|flFORMAT_FOREIGN,8,0xa)+T("\r\n\r\n") ;

    etThread.boxGetShadowF( tinP , pbi , cbi , psttP ) ; ___( pbi ) ;
    ZE( countT , cbi ) ;
    ZE( byteT* , pbi ) ;
    ZE( countT   , cbBlob ) ;
    ZE( osTextT* , pbBlob ) ;
    TN( tLog , "///d/ideafarm.log.html" ) ;
{
voidT stockOneImageFishF( tinS& tinP , etherC& etThread , lakeC& lakeP , const countT* const pcP , const strokeS* const psttP , const strokeS* const psttTypeP , const boolT bNewMinIsSetP )
*/
 writes reply blob to lake using name pcP
 makes reply blob by concatenating reply header with blob
 reads blob from box psttP
pseudocode
/*

}
    etThread.delF( tinP , postf ) ;
    }
        THREADmODE1rESTORE
        lakeP.writeF( tinP , pcP , postf , costf , 1 ) ;
        THREADmODE1oN( flTHREADmODE1_POOLoLDsECTION1 ) ;
    {
    else
    if( !bNewMinIsSetP ) lakeP.writeF( tinP , pcP , postf , costf , 1 ) ;

    etThread.delF( tinP , psttf ) ;
    countT costf = etThread.strMakeF( tinP , postf , psttf ) ; ___( postf ) ;
    ZE( osTextT* , postf ) ;
    etThread.strCalendarF( tinP , psttf , timeN2 ) ; ___( psttf ) ;
    ZE( strokeS* , psttf ) ;

    etThread.osTimeNowF( tinP , countTC() , timeN2 ) ;
    ZE( sCountT , timeN2 ) ;
{
voidT stockCalendarFishF( tinS& tinP , etherC& etThread , lakeC& lakeP , const countT* const pcP , const boolT bNewMinIsSetP )
*/
 writes reply blob to lake using name pcP
 makes reply blob by concatenating reply header with blob
 reads blob from box psttP
pseudocode
/*

#define CCiDnAMEmAX 0x10

}
{
stateC( tinP , etherP , sizeof *this , 0 , translateStateF )
stateS::stateS( tinS& tinP , etherC& etherP ) :

TRANSLATEsTATE_END
    state.idMe ++ ;
TRANSLATEsTATE_MIDDLE
    case 1 : { state.idMe = stateOther.idMe ; state.idPass = stateOther.idPass ; state.idStep = stateOther.idStep ; }
TRANSLATEsTATE_BEGIN( stateS , 1 )

;
}
    stateS( tinS& tinP , etherC& etherP ) ;

    countT idStep ;
    countT idPass ;
    countT idMe ;
    countT idVersion ;
{
struct stateS : public stateC

/*1*/WAKEhIDE( "city.publisher.load" )/*1*/
/**/
*/
  if specified, then a small lake pack is made that focuses on func.1330004.busC.cSubscribersF
 !test
command line parameters
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//



//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//

}
    tinP.pInOutFrame = pDad ;

    }
        THREADmODE4rESTORE
        }
            THREADmODE4rESTORE

            tinP.cTimeWriteInOutTelemetry      += deltaTime5      ;
            tinP.cCpuCyclesWriteInOutTelemetry += deltaCpuCycles5 ;
            tinP.cTellsWriteInOutTelemetry ++ ;

            }
                pDad->auditTime     .dTimeAuditKidBook      += deltaTime5      ;
                pDad->auditCpuCycles.dCpuCyclesAuditKidBook += deltaCpuCycles5 ;
            {
            if( pDad )

            deltaTime5      -= say.cTime4      ;
            deltaCpuCycles5 -= say.cCpuCycles4 ;

            tinP.cTime2Or5Lath      = deltaTime5      ; //NOT DELTA YET
            tinP.cCpuCycles2Or5Lath = deltaCpuCycles5 ; //NOT DELTA YET

            QueryThreadCycleTime( (HANDLE)(-2) ,  (ULONG64*)&deltaCpuCycles5 ) ;
            QueryPerformanceCounter( (LARGE_INTEGER*)&deltaTime5 ) ;
            count04T deltaTime5      ;  //INTENTIONALLY UNINITIALIZED FOR SPEED
            count04T deltaCpuCycles5 ;  //INTENTIONALLY UNINITIALIZED FOR SPEED

            }
                THREADmODE4rESTORE
                TELLaPPc3LIFI( ifcIDtYPEtELLaPP_INoUT , (byteT*)&say , sizeof say , idLineCt , idiFileCt )
                THREADmODE4oN( flTHREADmODE4_INoUTfRAMEdEFERwRITINGaPPtELEMETRY ) ;
            {
            if( !bDone && !( F(flagsCt) & flINoUTfRAMEc_DEFERwRITINGaPPtELEMETRY ) )

            }
                }
                    BLAMMO ;
                    bDone = 1 ;
                    pPending[ cPending ++ ] = say ;
                    cPending = 0 ;
                    LOGrAW3(    "~inOutFrameC: error 3: no more room in pending buffer [cPending]:    " , cPending , "\r\n" ) ;
                    CONoUTrAW3( "~inOutFrameC: error 3: no more room in pending buffer [cPending]:    " , cPending , "\r\n" ) ;
                {
                else
                }
                    bDone = 1 ;
                    pPending[ cPending ++ ] = say ;
                {
                else if( cPending < CmAXpENDINGiNoUTfRAMEpACKETS )
                }
                    BLAMMO ;
                    LOGrAW5(    "~inOutFrameC: error 2 [cPending,cMax]:    " , cPending , "    " , CmAXpENDINGiNoUTfRAMEpACKETS , "\r\n" ) ;
                    CONoUTrAW5( "~inOutFrameC: error 2 [cPending,cMax]:    " , cPending , "    " , CmAXpENDINGiNoUTfRAMEpACKETS , "\r\n" ) ;
                {
                if( cPending > CmAXpENDINGiNoUTfRAMEpACKETS )

                }
                    }
                        cPending = 0 ;

                        //THREADmODE4rESTORE
                        }
                            thirdC::dosTellMonitorIF( tinP , tell , ifcIDbOOKStELL_APP ) ;
                            tellC tell( tinP , idLineCt , idiFileCt , 0 , ifcIDtYPEtELLaPP_INoUTaRRAY , tinP.pbPendingInOutFramePackets , sizeof( countT ) + cPending * sizeof( tellInfoAppInOutFrameS ) ) ;
                        {
                        //THREADmODE4oN( flTHREADmODE4_INoUTfRAMEdOnOTcOLLECTaPPtELEMETRY | flTHREADmODE4_DOnOTfLUSHpENDINGaPPtELEMETRY ) ;
                    {
                    else if( cPending >= CmAXpENDINGiNoUTfRAMEpACKETS * 7 / 8 )  // 1/8 OF THE CAPACITY IS USED TO ACCUMULATE WHEN I CANNOT EMIT TELEMETRY
                    }
                        BLAMMO ;
                        LOGrAW5(    "~inOutFrameC: error 1 [cPending,cMax]:    " , cPending , "    " , CmAXpENDINGiNoUTfRAMEpACKETS , "\r\n" ) ;
                        CONoUTrAW5( "~inOutFrameC: error 1 [cPending,cMax]:    " , cPending , "    " , CmAXpENDINGiNoUTfRAMEpACKETS , "\r\n" ) ;
                    {
                    if( cPending > CmAXpENDINGiNoUTfRAMEpACKETS )
                {
                if( !( F(flagsCt) & flINoUTfRAMEc_DEFERwRITINGaPPtELEMETRY ) )        // EMIT THE PENDING PACKETS IF I CAN

                tellInfoAppInOutFrameS* pPending = (tellInfoAppInOutFrameS*)( tinP.pbPendingInOutFramePackets + sizeof( countT ) ) ;
                countT&                 cPending =                *(countT*)  tinP.pbPendingInOutFramePackets                      ;
            {
            if( tinP.pbPendingInOutFramePackets )
            ZE( boolT , bDone ) ;

            THREADmODE4oN( flTHREADmODE4_INoUTfRAMEdOnOTcOLLECTaPPtELEMETRY | flTHREADmODE4_DOnOTfLUSHpENDINGaPPtELEMETRY ) ;
        {
        THREADmODE4oFF( flTHREADmODE4_INoUTfRAMEfORCEcOLLECTaPPtELEMETRY )

        say.dTimeDt      = say.cTime4      - say.cTime3      ;
        say.dCpuCyclesDt = say.cCpuCycles4 - say.cCpuCycles3 ;

        }
            pDad->auditTime     .dTimeAuditKidDt      += say.cTime4      - say.cTime3      ;
            pDad->auditCpuCycles.dCpuCyclesAuditKidDt += say.cCpuCycles4 - say.cCpuCycles3 ;
        {
        if( pDad )

        QueryThreadCycleTime( (HANDLE)(-2) ,  (ULONG64*)&say.cCpuCycles4 ) ;
        QueryPerformanceCounter( (LARGE_INTEGER*)&say.cTime4 ) ;
    {
    if( !( F(flagsCt) & flINoUTfRAMEc_DOnOTcOLLECTaPPtELEMETRY ) )

    tinP.monitor.idWhat1 = idWhat1Save ;_

    }
        _MOLE
        tinP.monitor.idWhat2 = idWhat2Save ;_
        }
            //}
            //    }
            //        else                               { BLAMMO ; }
            //        if( tinP.pcLevelUntagged[ offi ] ) tinP.pcLevelUntagged[ offi ] -- ;_
            //    {
            //    if( tinP.ppbNewUntagged[ offi ] )
            //{
            //for( countT offi = 0 ; offi < sizeof tinP.ppbNewUntagged / sizeof tinP.ppbNewUntagged[ 0 ] ; offi ++ )

            thirdC::inOutChatterIfIF( tinP ) ;_

            }
                tinP.bSuppressInOutTrace -- ;_
                }
                    //U::SUSPECTED DEADLOCK: ((etherC*)0)->traceF( tinP , (strokeS*)(const osTextT*)ostoSay , flTRACE_PARAMETERiSoStEXT ) ;_

                    }
                        OStEXTA( ostoSay , postTitle ) ;_
                    {
                    if( postTitle )
                    const osTextT* postTitle = processGlobal7S::_processGlobal7I_IF().source.postFileTitleF( tinP , processGlobal7S::_processGlobal7I_IF().source.idFileRankF( tinP , idiFileCt ) ) ;_
                    OStEXTAK( ostoSay , ") --    " ) ;_
                    OStEXTC9( ostoSay , idLineCt ) ;_
                    OStEXTAK( ostoSay , "(" ) ;_
                    OStEXTC(  ostoSay , idiFileCt , 0 ) ;_
                    OStEXT(   ostoSay , TUCK << 2 ) ;_
                {
                if( !( tinP.bSuppressInOutTrace ++ ) && tinP.monitor.idThread != ifcIDtHREADlOW_tmHeartF && tinP.monitor.idThread != ifcIDtHREADlOW_break && tinP.monitor.idThread != ifcIDtHREADlOW_tmKillSocketF && tinP.monitor.idThread != ifcIDtHREADlOW_tmWatchF && tinP.monitor.idThread != ifcIDtHREADlOW_tmTimeNowF )
            {
            if( ph && ph->flags & F(flHOMEs_INoUTtRACE) )
            homeS* ph = &homeS::homeIF() ;_

            tinP.monitor.idDirty ++ ;_

            tinP.pLFstep[ offos2New + 1 ] = idiFileCt ;_
            tinP.pLFstep[ offos2New     ] = idLineCt & ~fliSTEP_FLAGmASK | fliSTEP_NESTcHANGE | fliSTEP_NESToUT ;_

            const countT offosNew  =   tinP.monitor.idStep        & OFFsLOTtINsTEPmAX ; const countT offos2New = offosNew << 1 ;_
            tinP.monitor.cInNest -- ;_
            tinP.monitor.idStep ++ ;_

            tinP.pFlagsThreadLevelMode[ offon      ] = pFlagsThreadLevelModeSave ;_
            tinP.pIdProgressNest[       offon      ] = idProgressNestSave ;_
            tinP.pEIPInNest[            offon      ] = eipInNestSave ;_
            tinP.pIdInNest[             offonk     ] = 0 ;_
            tinP.monitor.pLFnest[       offon2 + 1 ] = idFileNestSave ;_
            tinP.monitor.pLFnest[       offon2     ] = idLineNestSave ;_

            }
                if( off && off < tinP.ccExitsWhere ) inc02AM( tinP.pcExitsWhere[ off ] ) ;_
                countT off = idFileRankCt ;_
            {
            IFwHEREiSwATCHING

            if( tinP.tally.bTally ) tinP.tally.pcExits[ IDFILE ] ++ ;_

            const countT offonk = ( tinP.monitor.cInNest + 1 ) & OFFsLOTtINnESTmAX ; // "k" IS FOR "KID"
            const countT offon  =   tinP.monitor.cInNest       & OFFsLOTtINnESTmAX ; const countT offon2 = offon << 1 ;_
            const countT offos  =   tinP.monitor.idStep        & OFFsLOTtINsTEPmAX ; const countT offos2 = offos << 1 ;_

            tinP.monitor.idDirty ++ ;_
        {
        if( F(tinP.flagsThreadMode1) & flTHREADmODE1_UPDATEtIN && !( tinP.monitor.idDirty % 2 ) )

        //}
        //    }
        //        BLAMMO ;_
        //        LOGrAW5( "process global [valueExpectedByInOut,*pcWatchedByInOut]: " , pg1.valueExpectedByInOut , " != " , *pg1.pcWatchedByInOut , "\r\n" ) ;_
        //    {
        //    if( pg1.pcWatchedByInOut && *pg1.pcWatchedByInOut != pg1.valueExpectedByInOut )
        //    processGlobal1S& pg1 = processGlobal1S::_processGlobal1I_IF() ;_
        //{
        //
        //}
        //    BLAMMO ;_
        //    LOGrAW5( "tinP [valueExpectedByInOut,*pcWatchedByInOut]: " , tinP.valueExpectedByInOut , " != " , *tinP.pcWatchedByInOut , "\r\n" ) ;_
        //{
        //if( tinP.pcWatchedByInOut && *tinP.pcWatchedByInOut != tinP.valueExpectedByInOut )
    {
    if( F(flagsCt) & flINoUTfRAMEc_REGISTERcALLnEST )

    tinP.monitor.idWhat1 = ifcIDwHAT_GOiNoUTdT ;_

    }
        }
            say.dTimeInNet = deltaTimeIn - ( dAuditTimeTotal - auditTime.dTimeAuditKidBetween ) ;

            }
                BLAMMO ;
                LOGrAW( ostoSay ) ;
                CONoUTrAW( ostoSay ) ;
                OStEXTAK( ostoSay , "\r\n" ) ;
                OStEXTCF( ostoSay , ((countT*)&say.dTimeInNet)[0] , '0' ) ;
                OStEXTAK( ostoSay , "." ) ;
                OStEXTCF( ostoSay , ((countT*)&say.dTimeInNet)[1] , '0' ) ;
                OStEXTAK( ostoSay , "\r\n dTimeInNet:    " ) ;
                OStEXTCF( ostoSay , ((countT*)&say.dTimeIn)[0] , '0' ) ;
                OStEXTAK( ostoSay , "." ) ;
                OStEXTCF( ostoSay , ((countT*)&say.dTimeIn)[1] , '0' ) ;
                OStEXTAK( ostoSay , "\r\n    dTimeIn:    " ) ;
                OStEXTCF( ostoSay , ((countT*)&dAuditTimeTotal)[0] , '0' ) ;
                OStEXTAK( ostoSay , "." ) ;
                OStEXTCF( ostoSay , ((countT*)&dAuditTimeTotal)[1] , '0' ) ;
                OStEXTAK( ostoSay ,     "~inOutFrameC error: auditTime failure:    dAuditTimeTotal :    " ) ;
                OStEXT( ostoSay , TUCK ) ;
            {
            if( dAuditTimeTotal != say.dTimeIn )

            ;

                + auditTime.dTimeAuditKidBook
                + auditTime.dTimeAuditKidDt
                + auditTime.dTimeAuditKidIn
                + auditTime.dTimeAuditKidCt
                  auditTime.dTimeAuditKidBetween

            count04T dAuditTimeTotal =
        {

        }
            say.dCpuCyclesInNet = deltaCpuCyclesIn - ( dAuditCpuCyclesTotal - auditCpuCycles.dCpuCyclesAuditKidBetween ) ;

            }
                BLAMMO ;
                LOGrAW( ostoSay ) ;
                CONoUTrAW( ostoSay ) ;
                OStEXTAK( ostoSay , "\r\n" ) ;
                OStEXTCF( ostoSay , ((countT*)&say.dCpuCyclesInNet)[0] , '0' ) ;
                OStEXTAK( ostoSay , "." ) ;
                OStEXTCF( ostoSay , ((countT*)&say.dCpuCyclesInNet)[1] , '0' ) ;
                OStEXTAK( ostoSay , "\r\n dCpuCyclesInNet:    " ) ;
                OStEXTCF( ostoSay , ((countT*)&say.dCpuCyclesIn)[0] , '0' ) ;
                OStEXTAK( ostoSay , "." ) ;
                OStEXTCF( ostoSay , ((countT*)&say.dCpuCyclesIn)[1] , '0' ) ;
                OStEXTAK( ostoSay , "\r\n    dCpuCyclesIn:    " ) ;
                OStEXTCF( ostoSay , ((countT*)&dAuditCpuCyclesTotal)[0] , '0' ) ;
                OStEXTAK( ostoSay , "." ) ;
                OStEXTCF( ostoSay , ((countT*)&dAuditCpuCyclesTotal)[1] , '0' ) ;
                OStEXTAK( ostoSay ,     "~inOutFrameC error: auditCpuCycles failure:    dAuditCpuCyclesTotal :    " ) ;
                OStEXT( ostoSay , TUCK ) ;
            {
            if( dAuditCpuCyclesTotal != say.dCpuCyclesIn )

            ;

                + auditCpuCycles.dCpuCyclesAuditKidBook
                + auditCpuCycles.dCpuCyclesAuditKidDt
                + auditCpuCycles.dCpuCyclesAuditKidIn
                + auditCpuCycles.dCpuCyclesAuditKidCt
                  auditCpuCycles.dCpuCyclesAuditKidBetween

            count04T dAuditCpuCyclesTotal =
        {

        say.dTimeIn      = say.cTime3      - say.cTime2      ;
        say.dCpuCyclesIn = say.cCpuCycles3 - say.cCpuCycles2 ;

        ;
            : say.cTime3 - tinP.cTime2Or5Lath
            ? deltaTimeIn
        auditTime.dTimeAuditKidBetween += tinP.cTime2Or5Lath == say.cTime2

        ;
            : say.cCpuCycles3 - tinP.cCpuCycles2Or5Lath
            ? deltaCpuCyclesIn
        auditCpuCycles.dCpuCyclesAuditKidBetween += tinP.cCpuCycles2Or5Lath == say.cCpuCycles2

        }
            pDad->auditTime     .dTimeAuditKidIn      += deltaTimeIn      ;
            pDad->auditCpuCycles.dCpuCyclesAuditKidIn += deltaCpuCyclesIn ;
        {
        if( pDad )

        count04T deltaTimeIn      = say.cTime3      - say.cTime2      ;
        count04T deltaCpuCyclesIn = say.cCpuCycles3 - say.cCpuCycles2 ;

        QueryThreadCycleTime( (HANDLE)(-2) ,  (ULONG64*)&say.cCpuCycles3 ) ;
        QueryPerformanceCounter( (LARGE_INTEGER*)&say.cTime3 ) ;
    {
    if( !( F(flagsCt) & flINoUTfRAMEc_DOnOTcOLLECTaPPtELEMETRY ) )

    tinS& tinP = tinCt ; _MILE  _
{
/*1*/inOutFrameC::~inOutFrameC( voidT )/*1*/

boolT bDebugIsSet ;

/**/

*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//



//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//

}

}


    }
        THREADmODE4rESTORE
        TELLaPPc3LIFI( ifcIDtYPEtELLaPP_INoUT , (byteT*)&say , sizeof say , idLineCt , idiFileCt )
        THREADmODE4oN( flTHREADmODE4_QUIETiNoUTfRAMEc ) ;
        }
            //  ac03 d9020063
            //  e56 b1040063
            //  e56 b1040063
            //  e56 b1040063
            //  8f4 6000e063
            //  ce3 0101e063
            //  4a3 4002e063
            //  593 4002e063
            //  d73 4002e063
            //  8bd1 a5020063
            //  981 60040063
            //  ac03 d9020063

            }
                countT foo = 2 ;
            {
            if( idLineCt == 0x30ca && idiFileCt == 0x3600209d )

            CONoUTrAW5( "" , idLineCt , " " , idiFileCt , "\r\n" ) ;
        {
        if( tinP.pcUtility[ 0 ] )   //U::TO FIND A BUG
        CONoUTrAW( "." ) ; //U:: TO FIND A BUG
    {
    if( !( F(tinP.flagsThreadMode4) & flTHREADmODE4_QUIETiNoUTfRAMEc ) && !( F(processGlobal1I._thirdC_flagsModeProcess1) & flMODEpROCESS1_QUIETiNoUTfRAMEc ) )

{
if( processGlobal1I.idAdamRoot == 0x51012007 )
//U:: TO FIND A BUG

    QueryThreadCycleTime( (HANDLE)(-2) ,  (ULONG64*)&say.cCpuCycles4 ) ;
    //if( tinP.idTinNamed != ifcIDtINnAMED_tinHeartI ) thirdC::dosPriorityIF( tinP ) ; //U:: TO FIND A BUG
    tinP.monitor.idWhat1 = idWhat1Save ;_
    processGlobal1I.pcUtility[ 5 ] ++ ; //U::TO FIND A BUG
    processGlobal1I.pcUtility[ 1 ] -- ; //U::TO FIND A BUG

    }
        _MOLE
        tinP.monitor.idWhat2 = idWhat2Save ;_
        }
            //}
            //    }
            //        else                               { BLAMMO ; }
            //        if( tinP.pcLevelUntagged[ offi ] ) tinP.pcLevelUntagged[ offi ] -- ;_
            //    {
            //    if( tinP.ppbNewUntagged[ offi ] )
            //{
            //for( countT offi = 0 ; offi < sizeof tinP.ppbNewUntagged / sizeof tinP.ppbNewUntagged[ 0 ] ; offi ++ )

            thirdC::inOutChatterIfIF( tinP ) ;_

            }
                tinP.bSuppressInOutTrace -- ;_
                }
                    //U::SUSPECTED DEADLOCK: ((etherC*)0)->traceF( tinP , (strokeS*)(const osTextT*)ostoSay , flTRACE_PARAMETERiSoStEXT ) ;_

                    }
                        OStEXTA( ostoSay , postTitle ) ;_
                    {
                    if( postTitle )
                    const osTextT* postTitle = processGlobal7S::_processGlobal7I_IF().source.postFileTitleF( tinP , processGlobal7S::_processGlobal7I_IF().source.idFileRankF( tinP , idiFileCt ) ) ;_
                    OStEXTAK( ostoSay , ") --    " ) ;_
                    OStEXTC9( ostoSay , idLineCt ) ;_
                    OStEXTAK( ostoSay , "(" ) ;_
                    OStEXTC(  ostoSay , idiFileCt , 0 ) ;_
                    OStEXT(   ostoSay , TUCK << 2 ) ;_
                {
                if( !( tinP.bSuppressInOutTrace ++ ) && tinP.monitor.idThread != ifcIDtHREADlOW_tmHeartF && tinP.monitor.idThread != ifcIDtHREADlOW_break && tinP.monitor.idThread != ifcIDtHREADlOW_tmKillSocketF && tinP.monitor.idThread != ifcIDtHREADlOW_tmWatchF && tinP.monitor.idThread != ifcIDtHREADlOW_tmTimeNowF )
            {
            if( ph && ph->flags & F(flHOMEs_INoUTtRACE) )
            homeS* ph = &homeS::homeIF() ;_

            tinP.monitor.idDirty ++ ;_

            tinP.pLFstep[ offos2New + 1 ] = idiFileCt ;_
            tinP.pLFstep[ offos2New     ] = idLineCt & ~fliSTEP_FLAGmASK | fliSTEP_NESTcHANGE | fliSTEP_NESToUT ;_

            const countT offosNew  =   tinP.monitor.idStep        & OFFsLOTtINsTEPmAX ; const countT offos2New = offosNew << 1 ;_
            tinP.monitor.cInNest -- ;_
            tinP.monitor.idStep ++ ;_

            tinP.pFlagsThreadLevelMode[ offon      ] = pFlagsThreadLevelModeSave ;_
            tinP.pIdProgressNest[       offon      ] = idProgressNestSave ;_
            tinP.pEIPInNest[            offon      ] = eipInNestSave ;_
            tinP.pIdInNest[             offonk     ] = 0 ;_
            tinP.monitor.pLFnest[       offon2 + 1 ] = idFileNestSave ;_
            tinP.monitor.pLFnest[       offon2     ] = idLineNestSave ;_

            }
                if( off && off < tinP.ccExitsWhere ) inc02AM( tinP.pcExitsWhere[ off ] ) ;_
                countT off = idFileRankCt ;_
            {
            IFwHEREiSwATCHING

            if( tinP.tally.bTally ) tinP.tally.pcExits[ IDFILE ] ++ ;_

            const countT offonk = ( tinP.monitor.cInNest + 1 ) & OFFsLOTtINnESTmAX ; // "k" IS FOR "KID"
            const countT offon  =   tinP.monitor.cInNest       & OFFsLOTtINnESTmAX ; const countT offon2 = offon << 1 ;_
            const countT offos  =   tinP.monitor.idStep        & OFFsLOTtINsTEPmAX ; const countT offos2 = offos << 1 ;_

            tinP.monitor.idDirty ++ ;_
        {
        if( F(tinP.flagsThreadMode1) & flTHREADmODE1_UPDATEtIN && !( tinP.monitor.idDirty % 2 ) )

        //}
        //    }
        //        BLAMMO ;_
        //        LOGrAW5( "process global [valueExpectedByInOut,*pcWatchedByInOut]: " , pg1.valueExpectedByInOut , " != " , *pg1.pcWatchedByInOut , "\r\n" ) ;_
        //    {
        //    if( pg1.pcWatchedByInOut && *pg1.pcWatchedByInOut != pg1.valueExpectedByInOut )
        //    processGlobal1S& pg1 = processGlobal1S::_processGlobal1I_IF() ;_
        //{
        //
        //}
        //    BLAMMO ;_
        //    LOGrAW5( "tinP [valueExpectedByInOut,*pcWatchedByInOut]: " , tinP.valueExpectedByInOut , " != " , *tinP.pcWatchedByInOut , "\r\n" ) ;_
        //{
        //if( tinP.pcWatchedByInOut && *tinP.pcWatchedByInOut != tinP.valueExpectedByInOut )
    {
    if( F(flagsCt) & flINoUTfRAMEc_TRACE )

    processGlobal1I.pcUtility[ 4 ] ++ ; //U::TO FIND A BUG
    processGlobal1I.pcUtility[ 1 ] ++ ; //U::TO FIND A BUG

    //if( tinP.idTinNamed != ifcIDtINnAMED_tinHeartI ) thirdC::dosPriorityIF( tinP ) ; //U:: TO FIND A BUG
    tinP.monitor.idWhat1 = ifcIDwHAT_GOiNoUTdT ;_
    tinS& tinP = tinCt ; _MILE  _
    //QueryThreadCycleTime( (HANDLE)(-2) ,  (ULONG64*)&say.cCpuCycles3 ) ;
{
/*1*/inOutFrameC::~inOutFrameC( voidT )/*1*/

/**/

*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


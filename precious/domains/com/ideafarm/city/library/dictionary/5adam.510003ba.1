
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


//VISIBLE

REST
etThread.osProcessIdPhaseAdamF( tinP , ifcIDpHASEhANDOFFoLD_SHUTTINGdOWN ) ;

HEAReNTER( ether )
etThread.strokeF( tinP , T("\r\n\r\npress the enter key") ) ;

}
    stObs >> cValue ;
    ZE( countT , cValue ) ;
{
while( !ether && stObs )

}
    while( handle ) ;
    }
        etThread.strokeF( tinP , TF1((sCountT)cValue)+T("\r\n") ) ;
        countT cValue = stObs.downF( tinP , handle ) ;
    {
    do
    handleC handle( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
{
if( stObs )
//U: PASS THROUGH STACK, CALCULATING THE CURRENT CELL BOUNDARIES

}
    { ZE( countT , ids ) ; stObs.sinkF( tinP , ids , cValue , flSTACKsINK_UNIQUE ) ; if( !ids ) etThread.strokeF( tinP , T("rejected because that value is already on the stack\r\n") ) ; }

    etThread.delF( tinP , psttw ) ;
    countT cValue = etThread.strDigitsToSCountF( tinP , psttw ) ;

    if( !psttw || !psttw->idAdam ) break ;
    etThread.faceHearF( tinP , psttw ) ; ___( psttw ) ;
    ZE( strokeS* , psttw ) ;
    etThread.strokeF( tinP , T("(optional) enter a unique sCountT value: ") ) ;
{
while( !ether )
stackC stObs( tinP , ether , TAG( TAGiDnULL ) , flSTACKc_null , ifcSTACKtYPE_measureT ) ;

TODO

/*1*/WAKEhIDE( "" )/*1*/
/**/
*/
mesh pnn for one dimension
\<A HREF=\"5.cb30104.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//


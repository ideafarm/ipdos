
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    THREADmODE2rESTORE
    }
        }
            }
                }
                    pGrabNewElt[ offs ].ungrabF( tinP ) ;
                    inc02AM( pcTallyOut[ offs ] ) ;
                    }
                        }
                            }
                                ppSex[ offs ] = pSexNew ;

                                                               pPoolContainsMe->pSexLifoConstructed = pSexNew ;
                                pSexNew->pSexLifoConstructed = pPoolContainsMe->pSexLifoConstructed                 ;

                                //CONoUTrAW( ostoSay ) ;
                                //}
                                //    pc = pc->pSexLifoConstructed ;
                                //    OStEXTC(  ostoSay , pc , 0 ) ;
                                //    OStEXTAK( ostoSay , " , " ) ;
                                //{
                                //while( pc )
                                //sexC* pc = pPoolContainsMe->pSexLifoConstructed ;
                                //OStEXTC(   ostoSay , pSexNew , 0 ) ;
                                //OStEXTAK(  ostoSay , "\r\n+ [pNew,list]: " ) ;
                                //OStEXT(    ostoSay , TOCK << 0 ) ;
                            {
                            else
                            }
                                DELzOMBIE( pSexNew ) ;
                                POOPR
                            {
                            if( POOP )
        
                            THREADmODE1rESTORE
                            sexC* pSexNew = new( 0 , tinP , pbza1 + offs * sizeof( sexC ) , sizeof( sexC ) ) sexC( tinP , TAG( TAGiDnULL ) , idLineNewP , idiFileNewP , ostoName , expCbDrop , offs , flagsc , idStateSpace , idMemorySpace , pPoolContainsMe ) ;
                            THREADmODE1oN( flTHREADmODE1_ALLOWsTOPwHILEgRABBING )

                            SCOOPS
                        {
                        IFsCRATCH
    
                        if( F(flagsCt) & flSLOTSc_NOTES    ) flagsc |= fliSEXc_NOTES    ;
                        if( F(flagsCt) & flSLOTSc_READoNLY ) flagsc |= fliSEXc_READoNLY ;
                        flagsT flagsc = bBrowse ? fliSEXc_BROWSE : fliSEXc_null ;
                    {
                    else
                    if( ppSex[ offs ] ) { BLAMMO ; }
                    inc02AM( pcTallyIn[ offs ] ) ;
                    pGrabNewElt[ offs ].grabF( tinP , TAG( TAGiDnULL ) ) ;
    
                    OStEXTC(  ostoName , offs , 0 ) ;
                    OStEXTAK( ostoName , "." ) ;
                    OStEXTA(  ostoName , ostoNameGroup ) ;
                    OStEXT(   ostoName , TUCK << 2 )
                {
                if( bBrowse || bitsStateExists >> offs & 1 )
            {
            for( countT offs = expSlotsMin ; offs < sizeof ppSex / sizeof ppSex[ 0 ] ; offs ++ )
        {
        if( bBrowse || bitsStateExists )
    
        }
            }
                }
                    while( ~hFind ) ;
                    }
                        }
                            }
                                bitsStateExists |= 1 << offNeed ;
                                countT offNeed = thirdC::c_atoiIF( postAt ) ; ;
                                *postEnd = 0 ;
                            {
                            if( postEnd )
                            osTextT* postEnd = thirdC::c_strstrIF( tinP , postAt , "." ) ;
                            postAt += sizeof postBefore - 1 ;
                        {
                        if( postAt )
                        osTextT* postAt = thirdC::c_strstrIF( tinP , postName , postBefore ) ;
                        osTextT postBefore[] = ".slotsC.sex." ;

                        }
                            continue ;
                            thirdC::dosDeleteIF( tinP , postName , 1 ) ;
                        {
                        if( !bOk )
    
                        }
                            }
                                if( !POOP && ( info.cbUsed || info.cbUsedHigh ) ) bOk = 1 ;
                                thirdC::dosQueryFileInfoIF( tinP , pInfo , hFile ) ;
                                infoFileS* pInfo = &info ;
                                infoFileS info( tinP ) ;

                                if( !hFile ) { BLAMMO ; } //SHOULD BE IMPOSSIBLE
                            {
                            if( !POOP )
                            thirdC::dosOpenIF( tinP , tinP.pEther , hFile , countTC() , postName , ifcOPENaCCESS_R , 0 , flOPENdETAILS_DOnOTvALIDATE , ifcOPENhOW_nFeO , flFILEaTTR_null , 0 , 1 ) ;
                            handleC hFile( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILE ) ;

                            POOPIE ;
                        {
                        ZE( boolT , bOk ) ;
    
                        }
                            break ;
                            __( ~hFind ) ;
                        {
                        if( !postName[ 0 ] )
                        thirdC::dosFindFileOrDirSimpleIF( tinP , postName , sizeof postName , hFind , ostoLike ) ;
                        postName[ 0 ] = 0 ;
                        osTextT postName[ TUCK << 1 ] ;
                    {
                    do
                    handleC hFind( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILEfIND ) ;
                {

                }
                    OStEXTAK( ostoLike , "\\.*.data.*" ) ;
                    OStEXTA(  ostoLike , ostoNameGroup ) ;
                    OStEXTAK( ostoLike , "\\" ) ;
    
                    POOPR
                    OStEXTC(  ostoLike , idStateSpaceP , 0 ) ;                                                                thirdC::dosCreateDirIF( tinP , ostoLike ) ;
                    OStEXTAK( ostoLike , "\\" ) ;
                    OStEXTAK( ostoLike , "\\stateSpaces" ) ;                                                                  thirdC::dosCreateDirIF( tinP , ostoLike ) ;
                    OStEXTCF( ostoLike , tinP.pAdamGlobal1->idMemorySpace , '0' ) ;                                           thirdC::dosCreateDirIF( tinP , ostoLike ) ;
                    OStEXTAK( ostoLike , "\\" ) ;
                    OStEXTA(  ostoLike , thirdC::postUserNameIF() ) ;                                                         thirdC::dosCreateDirIF( tinP , ostoLike ) ;
                    OStEXTAK( ostoLike , "\\" ) ;
                    OStEXTAK( ostoLike , "\\memorySpaces" ) ;                                                                 thirdC::dosCreateDirIF( tinP , ostoLike ) ;
                    OStEXTAK( ostoLike , "\\ipdos" ) ;                                                                        thirdC::dosCreateDirIF( tinP , ostoLike ) ;
                    OStEXTAK( ostoLike , "\\ideafarm" ) ;                                                                     thirdC::dosCreateDirIF( tinP , ostoLike ) ;
                    OStEXTAK( ostoLike , "\\com" ) ;                                                                          thirdC::dosCreateDirIF( tinP , ostoLike ) ;
                    OStEXTAK( ostoLike , "\\domains" ) ;                                                                      thirdC::dosCreateDirIF( tinP , ostoLike ) ;
                    OStEXTAK( ostoLike , "\\backed.up.daily" ) ;                                                              thirdC::dosCreateDirIF( tinP , ostoLike ) ;
                    OStEXTAK( ostoLike , "\\ephemeral" ) ;                                                                    thirdC::dosCreateDirIF( tinP , ostoLike ) ;
                    OStEXTA(  ostoLike , postHome ) ;                                                                         thirdC::dosCreateDirIF( tinP , ostoLike ) ;

                    if( POOP ) { BLAMMO ; }
                    thirdC::diskFindHomeIF( tinP , postHome , sizeof postHome , "ideafarm" ) ;
                    osTextT postHome[ TUCK << 1 ] ;
    
                    SCOOP
                    poopC poop ;
                {
                OStEXT( ostoLike , TUCK * 2 ) ;
            {
        {
        if( idStateSpaceP )
        ZE( countT , bitsStateExists ) ;
    
        boolT bBrowse =  F(flagsCt) & flSLOTSc_BROWSE ;
                
        OStEXTAK( ostoNameGroup , ".slotsC.sex" ) ;
        OStEXTA(  ostoNameGroup , postName ) ;
        OStEXT(   ostoNameGroup , TUCK << 2 )
    
        //if( idStateSpaceP ) { CONoUTrAW( T("slotsC: ")+T(postName)+T("=========================================================================================================\r\n") ) ; }
    
        for( countT offg = expSlotsMin ; offg < CsLOTeXTENTS ; offg ++ ) new( 0 , tinP , pbzaGrab + offg * sizeof( grabC ) , sizeof( grabC ) ) grabC( tinP , TAG( TAGiDnULL ) , flGRABc_NOTjEALOUS | flGRABc_SHARElAYER , ifcIDgRABlAYER_8POOL5nEW ) ;

        }
            countT foo = 2 ;
        {
        if( expCbDrop == 0xc )

        thirdC::c_memsetIF( tinP , (byteT*)pcTallyOut , sizeof pcTallyOut ) ;
        thirdC::c_memsetIF( tinP , (byteT*)pcTallyIn  , sizeof pcTallyIn  ) ;
        thirdC::c_memsetIF( tinP , (byteT*)ppSex      , sizeof ppSex      ) ;
        thirdC::c_strcpyIF( tinP , postName , postNameP ) ;
        puseC puse( tinP , ifcIDpOOL_NONE ) ;
    {
    THREADmODE2oN( flTHREADmODE2_UNLOCKpOOLiDENTITY )
    if( F(tinP.flagsThreadMode2) & flTHREADmODE2_DISALLOWpUSE ) { BLAMMO ; }
    _IO_
{
pPoolContainsMe( pPoolContainsMeP )
pGrabNewElt( (grabC*)pbzaGrab ) ,
) ,
    4           //U:: TRIGRAPH AFTER VERIFY THE TABLE BELOW IS CORRECT
(
cBitsExpSlots
) ,
                : 0
                ? 2
            : expCbDrop == 0x12                                 // THESE ARE OPTIMIZATIONS TO REDUCE ADDRESS SPACE FRAGMENTATION ; sexC OF THESE SIZES WOULD BE CT DURING SETUP OF EVERY ADAM ANYWAY
            ? 3
        : expCbDrop == 0x11                                     // THESE ARE OPTIMIZATIONS TO REDUCE ADDRESS SPACE FRAGMENTATION ; sexC OF THESE SIZES WOULD BE CT DURING SETUP OF EVERY ADAM ANYWAY
        ? thirdC::os_expCbAllocationGrain_IF( tinP ) - expCbDrop
    thirdC::os_expCbAllocationGrain_IF( tinP ) > expCbDrop
(
expSlotsMin
expCbDrop( expCbDropP ) ,
poolC_cBitsExpCbDrop( poolC_cBitsExpCbDropP ) ,
idMemorySpace( idMemorySpaceP ) ,
idStateSpace( idStateSpaceP ) ,
flagsCt( flagsP ) ,
/*1*/slotsC::slotsC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const countT idLineNewP , const countT idiFileNewP , const osTextT* const postNameP , const countT poolC_cBitsExpCbDropP , const countT expCbDropP , const flagsT flagsP , const countT idStateSpaceP , countT idMemorySpaceP , poolC* const pPoolContainsMeP ) :/*1*/

//     | 
//     | f1             0                       0               0               0 --------------------------------- 0
//     | e1             1                       0               1               1 --------------------------------- 1
//     | d1             2                       0               2               2 --------------------------------- 2
//     | c1             3                       0               3               3                                   2
//     | b1             4                       0               4               4 --------------------------------- 3
//     | a1             5                       0               5               5                                   3
//     | 91             6                       0               6               6                                   3
//     | 81             7                       0               7               7                                   3
//     | 71             8                       0               8               8 --------------------------------- 4
//     | 61             9                       0               9               9                                   4
//     | 51             a                       0               a               a                                   4
//     | 41             b                       0               b               b                                   4
//     | 31             c                       0               c               c                                   4
//     | 21             d                       0               d               d                                   4
//     | 11             e                       0               e               e                                   4
//     | 01             f                       0               f               f                                   4
//     | f              01                      1               01              f                                   4
//     | e              11                      2               11              f                                   4
//     | d              21                      3               21              f                                   4
//     | c              31                      4               31              f                                   4
//     | b              41                      5               41              f                                   4
//     | a              51                      6               51              f                                   4
//     | 9              61                      7               61              f                                   4
//     | 8              71                      8               71              f                                   4
//     | 7              81                      9               81              f                                   4
//     | 6              91                      a               91              f                                   4
//     | 5              a1                      b               a1              f                                   4
//     | 4              b1                      c               b1              f                                   4
//     | 3              c1                      d               c1              f                                   4
//     | 2              d1                      e               d1              f                                   4
//     | 1              e1                      f               e1              f                                   4
//     | 0              f1                      01              f1              f                                   4
//     | 
//     | expCbDrop      expSlotsAddressable     expSlotsMin     expSlotsMax     expSlotsAddressable-expSlotsMin     cBitsNeeded
//     | 
//  cBitsExpSlots IS SET ACCORDING TO THIS TABLE

/**/

*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


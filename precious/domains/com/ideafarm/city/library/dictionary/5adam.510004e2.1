
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

#endif

}
    etThread.strokeF( tinP , TP( tzs.postShort , 0x20 )+TX(idz)+ts+TX(yU)+TX(mU)+TX(dU)+TX(hhU)+TX(mmU)/*+TX(ssU)+TX(msU)*/+tc ) ;

    thThread.osTimeOldUtcFromOldLocalF( tinP , msU , ssU , mmU , hhU , dU , mU , yU , dowU , msL , ssL , mmL , hhL , dL , mL , yL , dowL , idz ) ;
    ZE( countT  , dowU ) ;
    ZE( sCountT , yU   ) ;
    ZE( countT  , mU   ) ;
    ZE( countT  , dU   ) ;
    ZE( countT  , hhU  ) ;
    ZE( countT  , mmU  ) ;
    ZE( countT  , ssU  ) ;
    ZE( countT  , msU  ) ;

    const timeZoneSpecS& tzs = timeZoneSpecF( tinP , idz ) ;
{
for( countT idz = 1 ; idz <= cZones ; idz ++ )
etThread.strokeF( tinP , T("LOC ")+ts+TX(yL)+TX(mL)+TX(dL)+TX(hhL)+TX(mmL)/*+TX(ssL)+TX(msL)*/+tc+tc ) ;
//for( countT idz = 0x2f ; idz <= 0x2f ; idz ++ ) //U.S. PACIFIC TIME
countT cZones = cTimeZonesF( tinP ) ;

thThread.osTimeToOldTimeF( tinP , msL , ssL , mmL , hhL , dL , mL , yL , dowL , timeL1 , timeL2 , flOStIMEfROMoLDtIME_OLDtIMEiSutc ) ;
ZE( countT  , dowL ) ;
ZE( sCountT , yL   ) ;
ZE( countT  , mL   ) ;
ZE( countT  , dL   ) ;
ZE( countT  , hhL  ) ;
ZE( countT  , mmL  ) ;
ZE( countT  , ssL  ) ;
ZE( countT  , msL  ) ;

//timeL1 = 0 ;
etThread.osTimeNowF( tinP , timeL1 , timeL2 ) ;
ZE( sCountT , timeL2 ) ;
ZE( countT  , timeL1 ) ;

//etThread.strokeF( tinP , T("VALIDATE: ")+tc+TT(timeL1,timeL2)+tc+TT(timeL1V,timeL2V)+tc ) ;
//thThread.osTimeFromOldTimeF( tinP , timeL1V , timeL2V , yL , mL , dL , hhL , mmL , ssL , msL ) ;
ZE( sCountT , timeL2V ) ;
ZE( countT  , timeL1V ) ;

}
    etThread.strokeF( tinP , TP(timeZoneSpecF(tinP,idZone).postShort,0x20)+T(": ")+TX(dowL)+tb+TX(yL)+tb+TX(mL)+tb+TX(dL)+tb+TX(hhL)+tb+TX(mmL)/*+tb+TX(ssL)+tb+TX(msL)*/+tc ) ;
    thThread.osTimeOldUtcToOldLocalF( tinP , msL , ssL , mmL , hhL , dL , mL , yL , dowL , msU , ssU , mmU , hhU , dU , mU , yU , dowU , idZone ) ;
    ZE( countT  , dowL ) ;
    ZE( sCountT , yL   ) ;
    ZE( countT  , mL   ) ;
    ZE( countT  , dL   ) ;
    ZE( countT  , hhL  ) ;
    ZE( countT  , mmL  ) ;
    ZE( countT  , ssL  ) ;
    ZE( countT  , msL  ) ;
{
for( countT idZone = 1 ; idZone <= cZones ; idZone ++ )
const countT cZones = cTimeZonesF( tinP ) ;

ZE( countT  , dowU ) ;
sCountT yU   = 2003 ;
countT  mU   = 0 ;
countT  dU   = 0 ;
countT  hhU  = 0 ;
countT  mmU  = 0 ;
ZE( countT  , ssU  ) ;
ZE( countT  , msU  ) ;

#if defined( NEVERdEFINED )

}
    etThread.strokeF( tinP , T("just after newyear in ")+TP(timeZoneSpecF(tinP,idZone).postShort,0x20)+T(", UTC is: ")+TX(dowU)+tb+TX(yU)+tb+TX(mU)+tb+TX(dU)+tb+TX(hhU)+tb+TX(mmU)/*+tb+TX(ssU)+tb+TX(msU)*/+tc ) ;
    thThread.osTimeOldUtcFromOldLocalF( tinP , msU , ssU , mmU , hhU , dU , mU , yU , dowU , msL , ssL , mmL , hhL , dL , mL , yL , dowL , idZone ) ;
    ZE( countT  , dowU ) ;
    ZE( sCountT , yU   ) ;
    ZE( countT  , mU   ) ;
    ZE( countT  , dU   ) ;
    ZE( countT  , hhU  ) ;
    ZE( countT  , mmU  ) ;
    ZE( countT  , ssU  ) ;
    ZE( countT  , msU  ) ;
{
for( countT idZone = 5 ; idZone <= 5 ; idZone ++ )
const countT cZones = cTimeZonesF( tinP ) ;

ZE( countT  , dowL ) ;
sCountT yL   = 2003 ;
countT  mL   = 0 ;
countT  dL   = 0 ;
countT  hhL  = 0 ;
countT  mmL  = 0 ;
ZE( countT  , ssL  ) ;
ZE( countT  , msL  ) ;

#endif  

etThread.strokeF( tinP , /*TP(timeZoneSpecF(tinP,idZone).postShort,0x20)+T(": ")+*/TX(dowL)+tb+TX(yL)+tb+TX(mL)+tb+TX(dL)+tb+TX(hhL)+tb+TX(mmL)/*+tb+TX(ssL)+tb+TX(msL)*/+tc ) ;

thThread.osTimeToOldTimeF( tinP , msL , ssL , mmL , hhL , dL , mL , yL , dowL , timeB1 , timeB2 , flOStIMEfROMoLDtIME_OLDtIMEiSutc ) ;
ZE( countT  , dowL ) ;
ZE( sCountT , yL   ) ;
ZE( countT  , mL   ) ;
ZE( countT  , dL   ) ;
ZE( countT  , hhL  ) ;
ZE( countT  , mmL  ) ;
ZE( countT  , ssL  ) ;
ZE( countT  , msL  ) ;

sCountT timeB2 = 0xb29bb ;
countT timeB1 = 0xffffffff ;


etThread.strokeF( tinP , TT(timeL1,timeL2)+tc ) ;
thThread.osTimeFromOldTimeF( tinP , timeL1 , timeL2 , yL , mL , dL , hhL , 0 , 0 , 0 ) ;
ZE( sCountT , timeL2 ) ;
ZE( countT  , timeL1 ) ;
ZE( countT  , dowL ) ;
sCountT yL   = 2002 ;
countT  mL   = 11 ;
countT  dL   = 30 ;
countT  hhL  = 23 ;

#if defined( NEVERdEFINED )

thirdC& thThread = etThread ;
TN( tc , "\r\n" ) ;
TN( tb4 , "    " ) ;
TN( ts , " | " ) ;
TN( tb , " " ) ;

TODO

#define TX(cP) TF4(cP,flFORMAT_FOREIGN|flFORMAT_NObASE,5,0xa)

/*1*/WAKEhIDE( "doodle.time" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


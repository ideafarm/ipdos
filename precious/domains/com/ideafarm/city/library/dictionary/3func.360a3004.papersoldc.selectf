
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


#undef ifcIDcMDrETURNsCRATCH
#undef ifcIDcMDrETURNrENDER
#undef ifcIDcMDrETURNrENDERdEFAULT
#undef ifcIDcMDrETURNsHOW

}
    return *pPaper ;
    if( !pPaper ) { BLAMMO ; }

    }
        default                          : { BLAMMO                       ; break ; }
        case ifcIDcMDrETURNsCRATCH       : { pPaper = pPaperScratch       ; break ; }
        case ifcIDcMDrETURNrENDER        : { pPaper = pPaperRender        ; break ; }
        case ifcIDcMDrETURNrENDERdEFAULT : { pPaper = pPaperRenderDefault ; break ; }
        case ifcIDcMDrETURNsHOW          : { pPaper = pPaperShow          ; break ; }
    {
    switch( idCmdReturn )

    if( !pPaperScratch       ) pPaperScratch       = pPaperRender        ;
    if( !pPaperRender        ) pPaperRender        = pPaperRenderDefault ;
    if( !pPaperRenderDefault ) pPaperRenderDefault = pPaperShow          ;
    if( !pPaperShow          ) { BLAMMO ; }
    //DEFAULT CASCADE (APPLIES ONLY IF I AM CALLED BEFORE ALL PAPERS ARE CT); PURPOSE IS TO ENSURE A VALID REF IS ALWAYS RETURNED

    }
        //LOGrAW9( "papersOldC::selectF [idPaperRenderDefault,idPaperRender,idPaperShow,idPaperScratch]: " , idPaperRenderDefault , " " , idPaperRender , " " , idPaperShow , " " , idPaperScratch , "\r\n" ) ;

        }
            pPaperScratch = !swPaper.idSlotOfLeverF( tinP , cLeverIdPaper ) ? 0 : (paperOldC*)&(countT&)swPaper ;
            cLeverIdPaper = idPaperScratch ;
        {
        else
        if( !idPaperScratch ) pPaperScratch = 0 ;
        //SCRATCH

        }
            pPaperRender = !swPaper.idSlotOfLeverF( tinP , cLeverIdPaper ) ? 0 : (paperOldC*)&(countT&)swPaper ;
            cLeverIdPaper = idPaper ;
            }
                case ifcIDpAPER_SCRATCH : { idPaper = idPaperScratch           ; break ; }
                case ifcIDpAPER_NOTsHOW : { idPaper = idPaperShow != 1 ? 1 : 2 ; break ; }
                case ifcIDpAPER_SHOW    : { idPaper = idPaperShow              ; break ; }
            {
            switch( idPaper )
            countT idPaper = idPaperRender ;
        {
        else
        if( idPaperRender == ifcIDpAPER_DEFAULT ) pPaperRender = pPaperRenderDefault ;
        //RENDER

        pPaperRenderDefault = !swPaper.idSlotOfLeverF( tinP , cLeverIdPaper ) ? 0 : (paperOldC*)&(countT&)swPaper ;
        cLeverIdPaper = idPaper ;
        }
            case ifcIDpAPER_SCRATCH : { idPaper = idPaperScratch           ; break ; }
            case ifcIDpAPER_NOTsHOW : { idPaper = idPaperShow != 1 ? 1 : 2 ; break ; }
            case ifcIDpAPER_SHOW    : { idPaper = idPaperShow              ; break ; }
        {
        switch( idPaper )
        __( idPaper == ifcIDpAPER_DEFAULT ) ;
        countT idPaper = idPaperRenderDefault ;
        //RENDERdEFAULT

        pPaperShow = !swPaper.idSlotOfLeverF( tinP , cLeverIdPaper ) ? 0 : (paperOldC*)&(countT&)swPaper ;
        cLeverIdPaper = idPaperShow ;
        //SHOW
    {
    if( bFreshCache )

    }
        default : { BLAMMO ; break ; }
        }
            break ;
            idCmdReturn = ifcIDcMDrETURNsCRATCH ;
            //LOGrAW( "QUERYsCRATCH\r\n" ) ;
        {
        case ifcIDcMDpAPERsELECT_QUERYsCRATCH :
        }
            //INTENTIONAL FALLTHROUGH
            bFreshCache = 1 ;
            idPaperScratch = idPaperP ;
            //LOGrAW( "SETsCRATCH\r\n" ) ;
        {
        case ifcIDcMDpAPERsELECT_SETsCRATCH :
        }
            break ;
            idCmdReturn = ifcIDcMDrETURNrENDER ;
            //LOGrAW( "QUERYrENDER\r\n" ) ;
        {
        case ifcIDcMDpAPERsELECT_QUERYrENDER :
        }
            //INTENTIONAL FALLTHROUGH
            bFreshCache = 1 ;
            idPaperRender = idPaperP ;
            //LOGrAW( "SETrENDER\r\n" ) ;
        {
        case ifcIDcMDpAPERsELECT_SETrENDER :
        }
            break ;
            idCmdReturn = ifcIDcMDrETURNrENDERdEFAULT ;
            //LOGrAW( "QUERYrENDERdEFAULT\r\n" ) ;
        {
        case ifcIDcMDpAPERsELECT_QUERYrENDERdEFAULT :
        }
            //INTENTIONAL FALLTHROUGH
            bFreshCache = 1 ;
            else                                 idPaperRenderDefault = idPaperP ;
            if( idPaperP == ifcIDpAPER_DEFAULT ) idPaperRenderDefault = ifcIDpAPER_NOTsHOW ;
            //LOGrAW( "SETrENDERdEFAULT\r\n" ) ;
        {
        case ifcIDcMDpAPERsELECT_SETrENDERdEFAULT :
        }
            break ;
            idCmdReturn = ifcIDcMDrETURNsHOW ;
            //LOGrAW( "QUERYsHOW\r\n" ) ;
        {
        case ifcIDcMDpAPERsELECT_QUERYsHOW :
        }
            //INTENTIONAL FALLTHROUGH
            }
                bFreshCache = 1 ;
                idPaperShow = idPaperP ;
            {
            if( idPaperShow != idPaperP )

            __( idPaperP > cPapers ) ;
            }
                case ifcIDpAPER_SCRATCH : { idPaperP = idPaperScratch           ; break ; }
                case ifcIDpAPER_NOTsHOW : { idPaperP = idPaperShow != 1 ? 1 : 2 ; break ; } //LOWEST idPaper THAT IS NOT SHOW
                case ifcIDpAPER_DEFAULT : { idPaperP = 1                        ; break ; }
            {
            switch( idPaperP )
            __( idPaperP == ifcIDpAPER_SHOW ) ;
            //LOGrAW( "SETsHOW\r\n" ) ;
        {
        case ifcIDcMDpAPERsELECT_SETsHOW :
    {
    switch( idCmdP )
    ZE( paperOldC* , pPaper ) ;
    ZE( countT , idCmdReturn ) ;
    ZE( boolT , bFreshCache ) ;
    //LOGrAW5( "****************************************************************************************************\r\npapersOldC::selectF [idCmdP,idPaperP]: " , idCmdP , " " , idPaperP , "\r\n" ) ;
{
/*1*/paperOldC& papersOldC::selectF( tinS& tinP , const countT idCmdP , countT idPaperP )/*1*/

#define ifcIDcMDrETURNsCRATCH         0x4
#define ifcIDcMDrETURNrENDER          0x3
#define ifcIDcMDrETURNrENDERdEFAULT   0x2
#define ifcIDcMDrETURNsHOW            0x1

/**/
*/
   not all symbolic values are legal for all idCmdP values
  can also be one of the ifcIDpAPER symbolic values
  can be 0 < idPaperP <= cPapers
 idPaperP
 idCmdP
 tinP
arguments
it is illegal to call me when there are no papers
i always return a valid reference
i, and i alone, am responsible for keeping the cache members (pPaper*) coherent with the authoritative members (idPaper*)
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//


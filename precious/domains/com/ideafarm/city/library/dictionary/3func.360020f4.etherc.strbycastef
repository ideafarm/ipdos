
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    }
        }
            delF( tinP , psttw ) ;
            strFuseSeparateF( tinP , pstt1P , psttw ) ; ___( pstt1P ) ;
            strSubstringF( tinP , psttw , idf , idl , psttP ) ; ___( psttw ) ;
            ZE( strokeS* , psttw ) ;
            countT idl = off ;
            countT idf = 1 + offWoth ;
        {
        if( _bWantCaste )
        SETwANTcASTE( idCasteLag )

        }
            }
                offWoth = off ;

                }
                    delF( tinP , psttw ) ;
                    strFuseSeparateF( tinP , pstt1P , psttw ) ; ___( pstt1P ) ;
                    strSubstringF( tinP , psttw , idf , idl , psttP ) ; ___( psttw ) ;
                    ZE( strokeS* , psttw ) ;
                    countT idl = off ;
                    countT idf = 1 + offWoth ;
                {
                if( _bWantCaste )

                idCasteLag = psttP[ CSpREFIX + off ].idCaste ;
                SETwANTcASTE( idCasteLag )
            {
            if( idCasteLag != psttP[ CSpREFIX + off ].idCaste )
        {
        for( ; off < psttP->idAdam ; off ++ )
        ZE( countT , off ) ;
        strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
        ZE( countT , idCasteLag ) ;
        ZE( countT , offWoth ) ;
    {

    strMakeF( tinP , LF , pstt1P , T("") , psttP->idAdam + CSpREFIX * cString + csttExtraP ) ; // CALLER MUST TAG ___( pstt1P ) ;

    }
        }
            }
                if( _bWantCaste ) cString ++ ;
                SETwANTcASTE( psttP[ CSpREFIX + off ].idCaste )
                idCasteLag = psttP[ CSpREFIX + off ].idCaste ;
            {
            if( idCasteLag != psttP[ CSpREFIX + off ].idCaste )
        {
        for( countT off = 0 ; off < psttP->idAdam ; off ++ )
        ZE( countT , idCasteLag ) ;
    {
    ZE( countT , cString ) ;

    const countT cExclude = pczIdCasteExcludeP ? thirdC::c_strlenIF( tinP , pczIdCasteExcludeP ) : 0 ;
    const countT cInclude = pczIdCasteIncludeP ? thirdC::c_strlenIF( tinP , pczIdCasteIncludeP ) : 0 ;

    _IO_

    }
        if( POOP ) return ;
        __( psttP->idAdam && !psttP[ CSpREFIX ].idCaste ) ;
        if( POOP ) return ;
        __Z( psttP ) ;
        __NZ( pstt1P ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL
    SCOOP
{
/*1*/voidT etherC::strByCasteF( tinS& tinP , strokeS*& pstt1P , const strokeS* const psttP , const countT* const pczIdCasteIncludeP , const countT* const pczIdCasteExcludeP , const countT csttExtraP )/*1*/

/**/
*/
  this filter is applied to the results of the include filter
  if not 0 then points to a null terminated list of the idCaste values that will be excluded
 pczIdCasteExcludeP
  if not 0 then points to a null terminated list of the idCaste values that will be allowed
 pczIdCasteIncludeP
 psttP
 pstt1P
 tinP
arguments
 a new string is begun whenever the caste of the current stroke is not equal to the caste of the preceding stroke
parses a string into separate strings, each of homogeneous caste
\<A HREF=\"5.103011b.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$strByCasteF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//



//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    //OUT
    if( csP ) { ether.strResizeF( tinP , psttMe , csP , sttPadP , fLeadingP ) ;  ___BITScT( psttMe , 0xd56 ) ; }
    ether.strFuseF( tinP , psttMe , sttP ) ;  ___BITScT( psttMe , 0xd57 ) ;
    ether.strMakeF( tinP , LF , psttMe , T("") , csP ? csP : 1 ) ;  ___BITScT( psttMe , 0xd58 ) ;

    else            thirdC::c_memsetIF( tinP , (byteT*)pbBitsCt , sizeof pbBitsCt ) ;
    if( pbBitsCtP ) thirdC::c_memcpyIF( tinP , (byteT*)pbBitsCt , (byteT*)pbBitsCtP , sizeof pbBitsCt ) ;
    puseC puse( tinP , ifcIDpOOL_ADAMtEMP ) ;
    
    //IN_C

    }
        if( ether ) return ;
        __Z( sttP ) ;
        if( ether ) return ;
    {
    IFbEcAREFUL
{
bConvertible( 1 )
psttLower( 0 ) ,
puntMe( 0 ) ,
postMe( 0 ) ,
psttMe( 0 ) ,
ether( etherC::etTextIF( tinP ) ) ,
flags( flagsP ) ,
idiFileCt( idiFileCtP ) ,
idLineCt( idLineCtP ) ,
/*1*/textC::textC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const flagsT flagsP , const strokeS sttP , const countT csP , const strokeS sttPadP , const boolT fLeadingP )/*1*/ :

/**/
*/
 sttP
 etherP
arguments
  \<A HREF=\"5.5b20104.1.1.0.html\"\>5b20104:  WAKEsHOW( "example.simplest.func.1050008.textC.textC" )\</A\>
 simplest
examples
\<A HREF=\"5.1050008.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//



//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


;
}
 FRIENDS_stackC
/**/

 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34063.stackC.upF!||
 boolT upF( tinS& tinP , const boolT bQueryP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34062.stackC.downF!||
 boolT downF( tinS& tinP , const boolT bQueryP = 0 ) ;
/* commands to navigate the stack (move ppLathRefDefault) */

 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34071.stackC.recycleLever2F!||
 countT recycleLever2F( tinS& tinP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34070.stackC.recycleLever1F!||
 countT recycleLever1F( tinS& tinP ) ;
 inline voidT recycleCleanF( tinS& tinP ) { purgeF( tinP , 0 ) ; }
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34072.stackC.newRecyclableIF!||
 static stackC* newRecyclableIF( tinS& tinP , const flagsT flagsP , const countT idTypeP ) ;
/* recycle */

 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3406f.stackC.pLeverLathRefF!||
 countT* pLeverLathRefF( tinS& tinP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34064.stackC.grabListF!||
 voidT grabListF( tinS& tinP , countT**& ppcDownP , countT**& ppcUpP , countT& cDownP , countT& cUpP , const boolT bNoGrabP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34061.stackC.validateF!||
 voidT validateF( tinS& tinP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3406b.stackC.snapF!||
 voidT snapF( tinS& tinP , const boolT bRestoreP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34057.stackC.purgeF!||
 voidT purgeF( tinS& tinP , countT cPlatesRetainP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3406a.stackC.waitGrabF!||
 boolT waitGrabF( tinS& tinP , const countT cPlatesLimitP , const boolT& bQuitP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34031.stackC.waitF!||
 voidT waitF( tinS& tinP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34011.stackC.upF!||
 countT& upF( tinS& tinP , handleC& handleP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34030.stackC.topF!||
 countT& topF( tinS& tinP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3404f.stackC.randomF!||
 voidT randomF( tinS& tinP , timeS& timeP ) ;
 //||!k t|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/U::!||
 voidT randomF( tinS& tinP , handleC& handleP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3404d.stackC.randomF!||
 voidT randomF( tinS& tinP , nicNameC& nicNameP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34044.stackC.randomF!||
 countT& randomF( tinS& tinP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3404c.stackC.randomF!||
 voidT randomF( tinS& tinP , byteT*& pbP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34043.stackC.downUndoF!||
 countT& downUndoF( tinS& tinP , handleC& handleP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34010.stackC.downF!||
 countT& downF( tinS& tinP , handleC& handleP ) ;
/* commands to inspect the items on the stack without removing them */

 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34077.stackC.sortF!||
 voidT sortF( tinS& tinP , const flagsT flagsP = flSTACKsORT_null , ifc4FT pSubtractFP = 0 , const countT subtractionParmP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34025.stackC.ungrabF!||
 countT ungrabF( tinS& tinP , const flagsT flagsP = flGRABcUNGRABf_null ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3404e.stackC.cbDataF!||
 countT cbDataF( tinS& tinP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34046.stackC.idTypeF!||
 countT idTypeF( tinS& tinP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34024.stackC.grabF!||
 voidT grabF( tinS& tinP , const countT idLineP , const countT idiFileP , const byteT* const pbBitsP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3405d.stackC.flagsStateF!||
 flagsT flagsStateF( tinS& tinP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34045.stackC.flagsF!||
 flagsT flagsF( tinS& tinP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34054.stackC.operator_call!||
 countT operator () ( const timeS& timeP , ifc4FT pSubtractFP = 0 , const countT subtractionParmP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34039.stackC.operator_call!||
 countT operator () ( soulC& soulP , ifc4FT pSubtractFP = 0 , const countT subtractionParmP = 0 ) ;
 //||!k t|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34032.stackC.operator_call!||
 //U::countT operator () ( const handleC& handleP , ifc4FT pSubtractFP = 0 , const countT subtractionParmP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34032.stackC.operator_call!||
 countT operator () ( const nicNameC& nicNameP , ifc4FT pSubtractFP = 0 , const countT subtractionParmP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3402f.stackC.operator_call!||
 countT operator () ( const count8S& c8P , ifc4FT pSubtractFP = 0 , const countT subtractionParmP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3402e.stackC.operator_call!||
 countT operator () ( const count7S& c7P , ifc4FT pSubtractFP = 0 , const countT subtractionParmP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3402d.stackC.operator_call!||
 countT operator () ( const count6S& c6P , ifc4FT pSubtractFP = 0 , const countT subtractionParmP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3402c.stackC.operator_call!||
 countT operator () ( const count5S& c5P , ifc4FT pSubtractFP = 0 , const countT subtractionParmP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3402b.stackC.operator_call!||
 countT operator () ( const count4S& c4P , ifc4FT pSubtractFP = 0 , const countT subtractionParmP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3402a.stackC.operator_call!||
 countT operator () ( const count3S& c3P , ifc4FT pSubtractFP = 0 , const countT subtractionParmP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34029.stackC.operator_call!||
 countT operator () ( const count2S& c2P , ifc4FT pSubtractFP = 0 , const countT subtractionParmP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34076.stackC.operator_call!||
 countT operator () ( const plateC* const pPlateP , ifc4FT pSubtractFP = 0 , const countT subtractionParmP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34028.stackC.operator_call!||
 countT operator () ( const strokeS* const psttP , ifc4FT pSubtractFP = 0 , const countT subtractionParmP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34069.stackC.operator_call!||
 countT operator () ( const countT* const pcP , ifc4FT pSubtractFP = 0 , const countT subtractionParmP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34041.stackC.operator_call!||
 countT operator () ( const byteT* const pbP , ifc4FT pSubtractFP = 0 , const countT subtractionParmP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3405b.stackC.operator_call!||
 countT operator () ( const measureT mP , ifc4FT pSubtractFP = 0 , const countT subtractionParmP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34026.stackC.operator_call!||
 countT operator () ( const countT cP , ifc4FT pSubtractFP = 0 , const countT subtractionParmP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400b.stackC.operator_element!||
 countT& operator [] ( countT idP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34004.stackC.operator_countT!||
 operator countT ( voidT ) const ;
/* other expressions */

 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3405e.stackC.extractNullsF!||
 voidT extractNullsF( tinS& tinP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34050.stackC.extractF!||
 voidT extractF( tinS& tinP , timeS& timeP , const countT idP = 0 ) ;
 //||!k t|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/U::!||
 //U::voidT extractF( tinS& tinP , handleC& handleP , const countT idP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3404b.stackC.extractF!||
 voidT extractF( tinS& tinP , nicNameC& nicNameP , const countT idP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400f.stackC.extractF!||
 countT extractF( tinS& tinP , const countT idP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3405c.stackC.extractF!||
 voidT extractF( tinS& tinP , byteT*& pbP , countT& cbP , const countT idP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3404a.stackC.extractF!||
 voidT extractF( byteT* const pbP , tinS& tinP , countT idP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34037.stackC.operator_shiftRight!||
 stackC& operator >> ( soulC*& pSoulP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34051.stackC.operator_shiftRight!||
 stackC& operator >> ( timeS& timeP ) ;
 //||!k t|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/U::!||
 //U::stackC& operator >> ( handleC& handleP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34074.stackC.operator_shiftRight!||
 stackC& operator >> ( plateC*& pPlateP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34049.stackC.operator_shiftRight!||
 stackC& operator >> ( nicNameC& nicNameP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34034.stackC.operator_shiftRight!||
 stackC& operator >> ( nicNameC*& pNicNameP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3401d.stackC.operator_shiftRight!||
 stackC& operator >> ( count8S*& pc8P ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3401c.stackC.operator_shiftRight!||
 stackC& operator >> ( count7S*& pc7P ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3401b.stackC.operator_shiftRight!||
 stackC& operator >> ( count6S*& pc6P ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3401a.stackC.operator_shiftRight!||
 stackC& operator >> ( count5S*& pc5P ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34019.stackC.operator_shiftRight!||
 stackC& operator >> ( count4S*& pc4P ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34018.stackC.operator_shiftRight!||
 stackC& operator >> ( count3S*& pc3P ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400a.stackC.operator_shiftRight!||
 stackC& operator >> ( count2S*& pc2P ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34009.stackC.operator_shiftRight!||
 stackC& operator >> ( strokeS*& psttP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34066.stackC.operator_shiftRight!||
 stackC& operator >> ( countT*& pcP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34040.stackC.operator_shiftRight!||
 stackC& operator >> ( byteT*& pbP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3405a.stackC.operator_shiftRight!||
 stackC& stackC::operator >> ( measureT& mP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34008.stackC.operator_shiftRight!||
 stackC& operator >> ( countT& valueP ) ;
/* commands and expressions to remove an object from the stack */

 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34042.stackC.insertF!||
 voidT insertF( tinS& tinP , const countT valueP , const countT idTypeP = ifcSTACKtYPE_countT , countT idP = 0 , const boolT bOtherWayP = 0 ) ;
/* commands and expressions to insert an object into the stack at a specific slot */

 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34073.stackC.sinkF!||
 voidT sinkF( tinS& tinP , countT& idSlotP , const plateC* const pPlateP , const flagsT flagsP = flSTACKsINK_null , ifc4FT pSubtractFP = 0 , const countT subtractionParmP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34056.stackC.sinkF!||
 voidT sinkF( tinS& tinP , soulC& soulP , const flagsT flagsP = flSTACKsINK_null , ifc4FT pSubtractFP = 0 , const countT subtractionParmP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34052.stackC.sinkF!||
 voidT sinkF( tinS& tinP , countT& idSlotP , const timeS& timeP , const flagsT flagsP = flSTACKsINK_null , ifc4FT pSubtractFP = 0 , const countT subtractionParmP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34038.stackC.sinkF!||
 voidT sinkF( tinS& tinP , countT& idSlotP , const soulC* const pSoulP , const flagsT flagsP = flSTACKsINK_null , ifc4FT pSubtractFP = 0 , const countT subtractionParmP = 0 ) ;
 //||!k t|///ideafarm/precious/domains/com/ideafarm/city/library/U::!||
 //U::voidT sinkF( tinS& tinP , countT& idSlotP , const handleC& handleP , const flagsT flagsP = flSTACKsINK_null , ifc4FT pSubtractFP = 0 , const countT subtractionParmP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34048.stackC.sinkF!||
 voidT sinkF( tinS& tinP , countT& idSlotP , const nicNameC& nicNameP , const flagsT flagsP = flSTACKsINK_null , ifc4FT pSubtractFP = 0 , const countT subtractionParmP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34033.stackC.sinkF!||
 voidT sinkF( tinS& tinP , countT& idSlotP , const nicNameC* const pNicNameP , const flagsT flagsP = flSTACKsINK_null , ifc4FT pSubtractFP = 0 , const countT subtractionParmP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34023.stackC.sinkF!||
 voidT sinkF( tinS& tinP , countT& idSlotP , const count8S* const pc8P , const flagsT flagsP = flSTACKsINK_null , ifc4FT pSubtractFP = 0 , const countT subtractionParmP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34022.stackC.sinkF!||
 voidT sinkF( tinS& tinP , countT& idSlotP , const count7S* const pc7P , const flagsT flagsP = flSTACKsINK_null , ifc4FT pSubtractFP = 0 , const countT subtractionParmP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34021.stackC.sinkF!||
 voidT sinkF( tinS& tinP , countT& idSlotP , const count6S* const pc6P , const flagsT flagsP = flSTACKsINK_null , ifc4FT pSubtractFP = 0 , const countT subtractionParmP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34020.stackC.sinkF!||
 voidT sinkF( tinS& tinP , countT& idSlotP , const count5S* const pc5P , const flagsT flagsP = flSTACKsINK_null , ifc4FT pSubtractFP = 0 , const countT subtractionParmP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3401f.stackC.sinkF!||
 voidT sinkF( tinS& tinP , countT& idSlotP , const count4S* const pc4P , const flagsT flagsP = flSTACKsINK_null , ifc4FT pSubtractFP = 0 , const countT subtractionParmP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3401e.stackC.sinkF!||
 voidT sinkF( tinS& tinP , countT& idSlotP , const count3S* const pc3P , const flagsT flagsP = flSTACKsINK_null , ifc4FT pSubtractFP = 0 , const countT subtractionParmP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400e.stackC.sinkF!||
 voidT sinkF( tinS& tinP , countT& idSlotP , const count2S* const pc2P , const flagsT flagsP = flSTACKsINK_null , ifc4FT pSubtractFP = 0 , const countT subtractionParmP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400d.stackC.sinkF!||
 voidT sinkF( tinS& tinP , countT& idSlotP , const strokeS* const psttP , const flagsT flagsP = flSTACKsINK_null , ifc4FT pSubtractFP = 0 , const countT subtractionParmP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34068.stackC.sinkF!||
 voidT sinkF( tinS& tinP , countT& idSlotP , const countT* const pcP , const flagsT flagsP = flSTACKsINK_null , ifc4FT pSubtractFP = 0 , const countT subtractionParmP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3403f.stackC.sinkF!||
 voidT sinkF( tinS& tinP , countT& idSlotP , const byteT* const pbP , const flagsT flagsP = flSTACKsINK_null , ifc4FT pSubtractFP = 0 , const countT subtractionParmP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34059.stackC.sinkF!||
 voidT sinkF( tinS& tinP , countT& idSlotP , const measureT mP , const flagsT flagsP = flSTACKsINK_null , ifc4FT pSubtractFP = 0 , const countT subtractionParmP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400c.stackC.sinkF!||
 voidT sinkF( tinS& tinP , countT& idSlotP , const countT valueP , const flagsT flagsP = flSTACKsINK_null , ifc4FT pSubtractFP = 0 , const countT subtractionParmP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34053.stackC.operator_shiftLeft!||
 stackC& operator << ( const timeS& timeP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34036.stackC.operator_shiftLeft!||
 stackC& operator << ( const soulC* const pSoulP ) ;
 //||!k t|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/U::!||
 //U::stackC& operator << ( const handleC& handleP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34075.stackC.operator_shiftLeft!||
 stackC& operator << ( const plateC* const pPlateP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34047.stackC.operator_shiftLeft!||
 stackC& operator << ( const nicNameC& nicNameP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34035.stackC.operator_shiftLeft!||
 stackC& operator << ( const nicNameC* const pNicNameP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34017.stackC.operator_shiftLeft!||
 stackC& operator << ( const count8S* const pc8P ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34016.stackC.operator_shiftLeft!||
 stackC& operator << ( const count7S* const pc7P ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34015.stackC.operator_shiftLeft!||
 stackC& operator << ( const count6S* const pc6P ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34014.stackC.operator_shiftLeft!||
 stackC& operator << ( const count5S* const pc5P ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34013.stackC.operator_shiftLeft!||
 stackC& operator << ( const count4S* const pc4P ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34012.stackC.operator_shiftLeft!||
 stackC& operator << ( const count3S* const pc3P ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34007.stackC.operator_shiftLeft!||
 stackC& operator << ( const count2S* const pc2P ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34006.stackC.operator_shiftLeft!||
 stackC& operator << ( const strokeS* const psttP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34067.stackC.operator_shiftLeft!||
 stackC& operator << ( const countT* const pcP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3403e.stackC.operator_shiftLeft!||
 stackC& operator << ( const byteT* const pbP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34058.stackC.operator_shiftLeft!||
 stackC& operator << ( const measureT mP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34005.stackC.operator_shiftLeft!||
 stackC& operator << ( const countT valueP ) ;
/* commands and expressions to put an object onto the top of the stack */

 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3403b.stackC.operator_shiftRight!||
 const baseSoilXxxxC& operator >>( soulC& slP ) const ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3403a.stackC.operator_shiftRight!||
 baseSoilXxxxC& operator >>( soulC& slP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34055.stackC.operator_shiftLeft!||
 baseSoilXxxxC& operator <<( soulC& slP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34065.stackC.operator_call!||
 voidT operator ()( tinS& tinP , soulC& slP ) ;
/*soixlOld*/

 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34002.stackC.dt_stackC!||
 ~stackC( voidT ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3403d.stackC.stackC!||
 stackC( tinS& tinP , thirdC& thirdP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , soulC& soulP , const countT idGrabLayerP = ifcIDgRABlAYER_7BASEmISC1 , countT* pLeverLathRefP = 0 , const osTextT* const postNameP = 0 , batonC* const pBatonP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34001.stackC.stackC!||
 stackC( tinS& tinP , thirdC& thirdP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const flagsT flagsP = flSTACKc_null , const countT idTypeP = 0 , const countT idGrabLayerP = ifcIDgRABlAYER_7BASEmISC1 , countT* pLeverLathRefP = 0 , const osTextT* const postFileP = 0 , cbFT pCbFP = 0 , const osTextT* const postNameP = 0 , batonC* const pBatonP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34003.stackC.NEWdELcLASStHIRD!||
 NEWdELcLASSpROTOS
/* birth , death */

/**/
    public :

    countT                      cWaitingForEvent ;
    signC*                      pSgnEvent ; /**//* THIS MUST BE GIVEN BY EACH PIECE OF CODE THAT CALLS newPlateF, BUT NOT UNTIL THE PLATE HAS BEEN ADDED TO THE STACK *//**/

    private :

/**/
 countT cPlatesSnap ;
 boolT bDying ;
 const poopC& poop ;
 thirdC& third ; // PUBLIC SO THAT: (1) CAN SEE IF I AM IMPOTENT IN LOOPS; (2) CAN ENSURE THAT OBJECTS PLACED ON ME REFER TO THE SAME thirdC OBJECT THAT I USE
/* face 1 */

/**/
    public :

                                //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34060.stackC.pPlateF!||
    plateS*                     pPlateF( tinS& tinP , countT& idP ) ; //PUBLIC SO APP CAN QUERY FOR THE ID OF THE LATH REFERENCED PLATE
    public :

                                //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34078.stackC.sinkPrivateF!||
    voidT                       sinkPrivateF( tinS& tinP , countT& idSlotP , const countT valueP , plateS*& ppValueP , const flagsT flagsP , ifc4FT pSubtractFP , const countT subtractionParmP ) ;
                                //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3406e.stackC.adjustRefsF!||
    voidT                       adjustRefsF( tinS& tinP , countT idSlotTargetP , const countT idActionP , plateS* ppNewP = 0 ) ;
                                //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3406d.stackC.setIdLathRefF!||
    voidT                       setIdLathRefF( tinS& tinP ) ;
                                //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3406c.stackC.checkChainF!||
    voidT                       checkChainF( tinS& tinP ) ;
                                //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3405f.stackC.newTabsIfF!||
    boolT                       newTabsIfF( tinS& tinP , plateS* ppNewDelP , const boolT bDelP ) ; //FOR MAX SPEED, PARAMETERS DO NOT DEFAULT
                                //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3403c.stackC.ctF!||
    voidT                       ctF( tinS& tinP , soulC* pSoulP = 0 ) ;
                                //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34027.stackC.newPlateF!||
    voidT                       newPlateF( tinS& tinP , plateS*& ppNewP , const countT valueP ) ;

    xrayC*                      pXray ;
    countT                      cTabAge ;
    countT*                     pcTabIdSlot ;
    plateS**                    ppTab ;
    countT                      cTabs ;
    cbFT                        pCbF ;
    const byteT                 pbBitsCt[ CBbITScT ] ;
    const countT                idiFileCt ;
    const countT                idLineCt ;
    const countT                cbData ; // MUST BE AFTER idType
    const countT                idType ;
    const flagsT                flags  ;
    const countT                recycleLever2 ;
    const countT                recycleLever1 ;
    ranUniC                     ranUni ;
    flagsT                      flagsState ;
    osTextT*                    postOsFile ;
    boolT                       bUp ;
    byteT*                      pbnu ;
    plateS*                     ppBottom ;
    switchC*                    pSw_idLathRef ;
    switchC*                    pSw_ppLathRef ;
    switchC*                    pSw_idCursor ;
    switchC*                    pSw_ppCursor ;
    countT*                     pLeverLathRef ;
    countT                      idLathRefDefault ;
    plateS*                     ppLathRefDefault ;
    countT                      idCursorDefault ;
    plateS*                     ppCursorDefault ;
    plateS*                     ppTop ;
    countT                      cPlates ;
    countT                      osTidOwner ;
    boolT                       bDoNotDeleteBaton ;
    batonC*                     pBaton ;
    const osTextT* const        postName ;
 {
/*1*/class _export stackC : public baseSoilXxxxC/*1*/

// WORKAROUND: JUST CALL closeIfF ON THE OUTER HANDLE, WHICH CAUSES THE OUTER WALK TO RESTART FROM THE BEGINNING
// NOT ANALYZED
// CONJ: CACHE INFORMATION SUCH AS TABBING BECOMES ZOMBIE DUE TO THE DELETION OF A PLATE AND THE OUTER HANDLE SOMEHOW CAUSES REFERENCE TO A ZOMBIE VALUE
// 2011.12.10: THIS WAS OBSERVED WHEN WALKING A switchStackC LOADED WITH FILE NAMES
// BUG: downF upF: IF INNER WALK DELETES A PLATE, THEN IT MUST CALL closeIfF FOR THE HANDLE OF THE OUTER WALK

/**/
*/
 U: (DONE) enhance this to support varying sizes
 U: (DONE) enhance this to support a size other than sizeof( countT )
the data portion of each plate is of size sizeof( countT )
 for efficiency when sinking, sink the heaviest plates wo'th, with each new plate lighter than the preceding plate
 note that the fifo flag has no effect at all when sinkF is used to put plates onto the stack
 sinkF puts the new plate on the top of the stack, but the plate sinks into the stack until a "heavier" plate is encountered
 if the fifo flag is       set, operator << puts an object onto the bottom of the stack
 if the fifo flag is -not- set, operator << puts an object onto the top    of the stack
 operator >> is used in all three modes to remove an object from the top of the stack
 internally, a stackC is a "stack" of "plates", with an object on each plate
a stackC object can be used as a fifo, as a lifo, or as a sort
  objective is to make operator [] very fast when adjacent or near elements are accessed
  zeed whenever stackC object is modified
  used and set only by operator []
 idCursorDefault
  objective is to make operator [] very fast when adjacent or near elements are accessed
  zeed whenever stackC object is modified
  used and set only by operator []
 ppCursorDefault
face
  \<A HREF=\"5.ab10104.1.1.0.html\"\>ab10104:  WAKEsHOW( "example.simplest.snip.15000004.stackC" )\</A\>
 simplest
examples
\<A HREF=\"5.15000004.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//


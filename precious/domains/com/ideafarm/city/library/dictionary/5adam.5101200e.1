
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//

                            
REST

etherC::loafIF( tinP ) ;
etThread.traceF( tinP , T("ok") ) ;

}
    }
        }
            printf( "ContinueDebugEvent failed [rc]: %d\r\n" , rc ) ;
            rc = GetLastError() ;
        {
        if( !bOk )

        bOk = ContinueDebugEvent( info3.dwProcessId , info3.dwThreadId , DBG_EXCEPTION_NOT_HANDLED ) ;

        }
            default : { printf( "event: %d: (unexpected)\r\n" , info3.dwDebugEventCode ) ; break ; }
            case 9  : { printf( "event: %d: RIP_EVENT\r\n" , info3.dwDebugEventCode ) ; break ; }
            case 8  : { printf( "event: %d: OUTPUT_DEBUG_STRING_EVENT\r\n" , info3.dwDebugEventCode ) ; break ; }
            case 7  : { printf( "event: %d: UNLOAD_DLL_DEBUG_EVENT\r\n" , info3.dwDebugEventCode ) ; break ; }
            case 6  : { printf( "event: %d: LOAD_DLL_DEBUG_EVENT\r\n" , info3.dwDebugEventCode ) ; break ; }
            case 5  : { printf( "event: %d: EXIT_PROCESS_DEBUG_EVENT\r\n" , info3.dwDebugEventCode ) ; break ; }
            case 4  : { printf( "event: %d: EXIT_THREAD_DEBUG_EVENT\r\n" , info3.dwDebugEventCode ) ; break ; }
            case 3  : { printf( "event: %d: CREATE_PROCESS_DEBUG_EVENT\r\n" , info3.dwDebugEventCode ) ; break ; }
            case 2  : { printf( "event: %d: CREATE_THREAD_DEBUG_EVENT\r\n" , info3.dwDebugEventCode ) ; break ; }
            case 1  : { printf( "event: %d: EXCEPTION_DEBUG_EVENT\r\n" , info3.dwDebugEventCode ) ; break ; }
        {
        switch( info3.dwDebugEventCode )

        }
            printf( "WaitForDebugEvent failed [rc]: %d\r\n" , rc ) ;
            rc = GetLastError() ;
        {
        if( !bOk )

        bOk = WaitForDebugEvent( &info3 , INFINITE ) ;
    {
    while( info3.dwDebugEventCode != EXIT_PROCESS_DEBUG_EVENT )

#endif





    etThread.ifcHireF( tinP , psttFoo , ifcIDaDAM_SCRATCH0d , psttGoo , flHIRE_DISPLAYaUTO | flHIRE_MONITORtHIS | flHIRE_MONITORkIDS , nnHoo ) ;




    nicNameC nnHoo ;
    strokeS* psttGoo = tGoo ;
    TN( tGoo , "!ignoreFireByOperator" ) ;
    strokeS* psttFoo = tFoo ;
    TN( tFoo , "e" ) ;

    // THIS FAILS; THE GOAL IS TO FIGURE OUT WHY

#else

    }
        }
            DeleteProcThreadAttributeList( (_PROC_THREAD_ATTRIBUTE_LIST*)pcInfo2 ) ;

            }
                BOS( WHATsfr , BOSoK , CreateProcess( 0 , "d:\\ideafarm.home.1\\ephemeral\\domains\\com\\ideafarm\\city\\workshop\\exe\\null.exe" , &sa , &sa , 0 , flags1 , 0 , 0 , (STARTUPINFO*)&sinfo , &pinfo ) )      //20200423@1807: WITHOUT ANALYSIS, CHANGED "0" TO "1" FOR bInherit
                BOSnOvALUE( WHATgbo , SetLastError( 0 ) )

                SECURITYaTTRIBUTE_saUNRESTRICTED( 0 ) ;

                sinfo.StartupInfo.hStdError  = (HANDLE)GetStdHandle( STD_ERROR_HANDLE  ) ;
                sinfo.StartupInfo.hStdOutput = (HANDLE)GetStdHandle( STD_OUTPUT_HANDLE ) ;
                sinfo.StartupInfo.hStdInput  = (HANDLE)GetStdHandle( STD_INPUT_HANDLE  ) ;
                sinfo.StartupInfo.dwFlags |= STARTF_USESTDHANDLES ;
                sinfo.lpAttributeList = (_PROC_THREAD_ATTRIBUTE_LIST*)pcInfo2 ;
                sinfo.StartupInfo.dwFillAttribute = BACKGROUND_GREEN ;
                sinfo.StartupInfo.dwYCountChars = 0x300 ;
                sinfo.StartupInfo.dwXCountChars = 0x400 ;
                sinfo.StartupInfo.dwY = sinfo.StartupInfo.dwX = 0 ;
                sinfo.StartupInfo.wShowWindow = /*SW_SHOWMAXIMIZED*/ SW_SHOWMINNOACTIVE ;
                sinfo.StartupInfo.dwFlags = STARTF_USESHOWWINDOW | STARTF_USEPOSITION | STARTF_USECOUNTCHARS | STARTF_USEFILLATTRIBUTE ;
                sinfo.StartupInfo.cb = sizeof sinfo ;
                thirdC::c_memsetIF( tinP , (byteT*)&sinfo , sizeof sinfo ) ;
                STARTUPINFOEX sinfo ;
            {
            if( bOk )

            }
                }
                    bOk = 1 ;
                {
                if( UpdateProcThreadAttribute( (_PROC_THREAD_ATTRIBUTE_LIST*)pcInfo2 , 0 , PROC_THREAD_ATTRIBUTE_PREFERRED_NODE , &offNodePreferred , sizeof offNodePreferred , 0 , 0 ) )
                WORD offNodePreferred = (WORD)offNumaNodeValidChosen ;  // THE NEXT LINE WILL FAIL WITH ANY SIZE OTHER THAN WORD
                bOk = 0 ;
            {
            if( offNumaNodeValidChosen != NUMA_NO_PREFERRED_NODE )
            countT offNumaNodeValidChosen = thirdC::osOffNumaNodeValidChosenIF( processGlobal2S::_processGlobal2I_IF().idNumaNode ) ;
            boolT bOk = 1 ;
        {
        if( InitializeProcThreadAttributeList( (_PROC_THREAD_ATTRIBUTE_LIST*)pcInfo2 , 1 , 0 , &cba ) )

        memset( pcInfo2 , 0 , cba ) ;
        unsigned pcInfo2[ 0x100 / sizeof( unsigned ) ] ;
    {
    if( cba < 0x100 )
    thirdC::c_memsetIF( tinP , (byteT*)&pinfo , sizeof pinfo ) ;
    PROCESS_INFORMATION pinfo ;

    InitializeProcThreadAttributeList( 0 , 1 , 0 , &cba ) ;
    SIZE_T cba = 0 ;

    flagsT flags1 = CREATE_DEFAULT_ERROR_MODE | NORMAL_PRIORITY_CLASS | EXTENDED_STARTUPINFO_PRESENT | DEBUG_PROCESS | CREATE_NEW_CONSOLE ;
    BOSnOvALUE( WHATgbo , SetLastError( 0 ) )

    // THIS WORKS AND IS ADOPTED FROM osProcessF, WHICH ifcHireF CALLS

#elif defined( NEVERdEFINED2 )

    }
        if( rc ) rc = 0 ;
        rc = GetLastError() ;
    {
    if( !bOk )

    bOk = CreateProcessA( 0 , "d:\\ideafarm.home.1\\ephemeral\\domains\\com\\ideafarm\\city\\workshop\\exe\\null.exe" , 0 , 0 , 0 , CREATE_NEW_CONSOLE | DEBUG_PROCESS , 0 , 0 , &info1 , &info2 ) ;

    // THIS WORKS

#if defined( NEVERdEFINED )


    memset( (char*)&info3 , 0 , sizeof info3 ) ;
    memset( (char*)&info2 , 0 , sizeof info2 ) ;
    memset( (char*)&info1 , 0 , sizeof info1 ) ;

    int rc ;
    BOOL bOk ;
    DEBUG_EVENT         info3 ;
    PROCESS_INFORMATION info2 ;
    STARTUPINFO         info1 ;
{

TODO

/*1*/WAKEhIDE( "null adam" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//

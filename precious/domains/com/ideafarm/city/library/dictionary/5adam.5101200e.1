
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etherC::loafIF( tinP ) ;
etThread.traceF( tinP , T("ok") ) ;

//queryFileListF( tinP , tFolder ) ;
//TN( tFolder , "///ideafarm/tmp/" ) ;

queryFileListAllF( tinP ) ;

TODO

}
    }
        }
            tinP.pEther->delF( tinP , psttf ) ;
            tinP.pEther->traceF( tinP , psttf ) ;
            sIn >> psttf ; ___( psttf ) ;
            ZE( strokeS* , psttf ) ;
        {
        while( sIn )

        __( idReply - ifcIDrEPLYcLOAK_FOLDERcONTENTS) ;
        sIn >> idReply ;
        ZE( countT , idReply ) ;
    
        __( idFormat - 1 ) ;
        sIn >> idFormat ;
        ZE( countT , idFormat ) ;
    
        __( finger - FINGERnEG_CLOAKrEPLY ) ;
        sIn >> finger ;
        ZE( countT , finger ) ;
    
        sock.readF( tinP , sIn ) ;
        static soulC sIn( tinP , TAG( TAGiDnULL ) ) ;
    
        sock.writeF( tinP , sOut ) ;
        sOut << psttFolderP ;
        sOut << (countT)ifcIDcMDcLOAK_QUERYfOLDERcONTENTS ;
        sOut << (countT)1 ;
        sOut << (countT)FINGERnEG_CLOAKcOMMAND ;
        static soulC sOut( tinP , TAG( TAGiDnULL ) ) ;
    
        sock.connectF( tinP , homeS::homeIF().idPortCloak ) ;
        socketC sock( tinP , *tinP.pEtScratch , TAG( TAGiDnULL ) , 0 , flSOCKETc_NOsECRECY ) ;

        SCOOPS
    {
    IFsCRATCH

    if( POOP ) return ;
{
voidT queryFileListF( tinS& tinP , const strokeS* const psttFolderP )

}
    }
        }
            tinP.pEther->delF( tinP , psttf ) ;
            tinP.pEther->traceF( tinP , psttf ) ;
            sIn >> psttf ; ___( psttf ) ;
            ZE( strokeS* , psttf ) ;
        {
        while( sIn )

        __( idReply - ifcIDrEPLYcLOAK_ALLlOCKEDfOLDERScONTENTS ) ;
        sIn >> idReply ;
        ZE( countT , idReply ) ;
    
        __( idFormat - 1 ) ;
        sIn >> idFormat ;
        ZE( countT , idFormat ) ;
    
        __( finger - FINGERnEG_CLOAKrEPLY ) ;
        sIn >> finger ;
        ZE( countT , finger ) ;
    
        sock.readF( tinP , sIn ) ;
        static soulC sIn( tinP , TAG( TAGiDnULL ) ) ;
    
        sock.writeF( tinP , sOut ) ;
        sOut << (countT)ifcIDcMDcLOAK_QUERYaLLlOCKEDfOLDERScONTENTS ;
        sOut << (countT)1 ;
        sOut << (countT)FINGERnEG_CLOAKcOMMAND ;
        static soulC sOut( tinP , TAG( TAGiDnULL ) ) ;
    
        sock.connectF( tinP , homeS::homeIF().idPortCloak ) ;
        socketC sock( tinP , *tinP.pEtScratch , TAG( TAGiDnULL ) , 0 , flSOCKETc_NOsECRECY ) ;

        SCOOPS
    {
    IFsCRATCH

    if( POOP ) return ;
{
voidT queryFileListAllF( tinS& tinP )

/*1*/WAKEhIDE( "doodle.query.file.list.from.cloak" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//

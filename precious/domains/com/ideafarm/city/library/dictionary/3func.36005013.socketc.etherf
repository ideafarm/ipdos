
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    dec02AM( cFunctionsPending ) ;
    }
        _OUT_
        bWrite.ungrabF( tinP ) ;
        bRead.ungrabF( tinP ) ;
        dad.etherF( tinP , etherP ) ;
        mom.etherF( tinP , etherP ) ;
        if( !*pEther ) *pEther = ecOld ;
        pPoop = &(const poopC&)etherP ;
        pEther = &etherP ; // ASSUME: THIS IS COMPILED TO A SINGLE ASSEMBLY INSTRUCTION, SO OTHER THREADS WILL NEVER GET AN INVALID POINTER VALUE
        countT const ecOld = *pEther ;
        bRead.grabF( tinP , TAG( TAGiDnULL ) ) ;
        bWrite.grabF( tinP , TAG( TAGiDnULL ) ) ;
        _INoLD_
        SCOOPP
    {
    inc02AM( cFunctionsPending ) ;
{
/**//*1*/voidT socketC::etherF( tinS& tinP , etherC& etherP )/*1*/
*/
 etherP
arguments
use this function to control which etherC object will become impotent if an exception occurs
if it is not impotent, then it inherits the impotence value of the old *this->pEther
if etherP is impotent then it retains its impotence value
unconditionally replaces the etherC object that will do the work for this socket
  \<A HREF=\"5.d420104.1.1.0.html\"\>d420104:  WAKEsHOW( "example.simplest.func.1070014.socketC.etherF" )\</A\>
 simplest
examples
\<A HREF=\"5.1070014.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$etherF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


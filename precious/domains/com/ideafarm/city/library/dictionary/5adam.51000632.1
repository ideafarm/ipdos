
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

bOk = tinP.brcRaw ;
BOSpOOP
BOS( WHATgbo , BOSoK , UnregisterClass( postClass , oshInstance ) )

BOSpOOP
BOS( WHATgbo , BOSoK , DestroyWindow( oshw ) )

}
    BOSdOnOTtEST( WHATgbo , DispatchMessage( &info ) )

    if( POOP || !tinP.brcRaw ) break ;
    BOSpOOP
    BOS( WHATgbo , BOSfAILiFmINUS1 , GetMessage( &info , oshw , 0 , 0 ) )
    MSG info ;
{
for(;;)

etThread.osThreadF( TaRG1( tmDrawF ) ) ;

boolT bOk = tinP.brcRaw ;
BOSdOnOTtEST( WHATgbo , ShowWindow( oshw , SW_SHOW ) )

oshw = (HWND)tinP.brcRaw ;
BOSpOOP
BOS( WHATgbo , BOSoK , CreateWindowEx( 0 , postClass , "ifcDoodle" , 0x06cf0000 , 0x0 , 0x20 , 0x400 , 0x200 , 0 , 0 , oshInstance , 0 ) )

}
    if( atomClass ) ;
    ATOM atomClass = (ATOM)tinP.brcRaw ;
    BOSpOOP
    BOS( WHATgbo , BOSoK , RegisterClass( &info ) )

    info.lpszClassName = postClass ;
    info.lpszMenuName  = 0 ;
    info.hbrBackground = 0 ;
    info.hCursor       = (HCURSOR)tinP.brcRaw ;
    BOSpOOP
    BOS( WHATgbo , BOSoK , LoadCursor( 0 , IDC_CROSS ) )
    info.hIcon         = 0 ;
    info.hInstance     = oshInstance ;
    info.cbWndExtra    = 0 ;
    info.cbClsExtra    = 0 ;
    info.lpfnWndProc   = winMessageHandlerFooF ;
    info.style         = CS_HREDRAW | CS_VREDRAW | CS_OWNDC | CS_BYTEALIGNCLIENT ;
    WNDCLASS info;
{
osTextT* postClass = "doodleClass" ;
HINSTANCE oshInstance = (HINSTANCE)processGlobal4S::_processGlobal4I_IF()._thirdC_hWindowingClient.osF( ifcIDtYPEhANDLE_WINDOWINGcLIENT ) ;

pTin = &tinP ;

TODO

DONE( tmDrawF )
}
    }
        }
            //LOGrAW7( "[cLines,timeE1,001*timeE1/cLines]: " , cLines , " " , timeE1 , " " , TUCK * timeE1 / cLines , "\r\n" ) ;
            //countT cLines = ( TUCK + 1 ) * TUCK * 3 ;
            //
            //Beep( TUCK << 2 , TUCK ) ;
            //
            //tinP.pEther->osTimeSubtractF( tinP , timeE1 , timeE2 , timeS1 , timeS2 ) ;
            //tinP.pEther->osTimeNowF( tinP , timeE1 , timeE2 ) ;
            //ZE( sCountT , timeE2 ) ;
            //ZE( countT , timeE1 ) ;

            }
                }
                    }
                        BOSpOOP
                        BOS( WHATgbo , BOSoK , LineTo( oshdc , xx , yy ) )
                
                        //}
                        //    case 3 : { yy ++           ; break ; }
                        //    case 2 : { xx -= TUCK << 1 ; break ; }
                        //    case 1 : { yy ++           ; break ; }
                        //    case 0 : { xx += TUCK << 1 ; break ; }
                        //{
                        //else switch( offc % 4 )
                        
                        }
                            yy = info.bottom - 0x10 ;
                            xx = 0x10 + idCycle % ( info.right - 0x20 ) ;
                        {
                        //else
                
                        /*if( !offc )*/  ;
                        BOSpOOP
                        BOS( WHATgbo , BOSoK , MoveToEx( oshdc , xx , yy , 0 ) )
                    {
                    //if( idCycle < info.right - 0x20 )
                {
                //for( countT offc = 0 ; offc < TUCK * 3 ; offc ++ )
            
                countT yy = info.top + 0x10 ;
                countT xx = info.left + 0x10 ;
            {
            //while( cToDo -- )
            //countT cToDo = TUCK + 1 ;
            
            //tinP.pEther->osTimeNowF( tinP , timeS1 , timeS2 ) ;
            //ZE( sCountT , timeS2 ) ;
            //ZE( countT , timeS1 ) ;

            }
                BOSdOnOTtEST( WHATgbo , SelectObject( oshdc , poshp[ idPen % 6 ] ) )

                countT idPen = ++ idPenLath ;
                static countT idPenLath ;
                OSsLEEPf( TUCK ) ;
            {
            if( !( idCycle % ( info.right - 0x20 ) ) )

            ++ idCycle ;

            }
                BOSpOOP
                BOS( WHATgbo , BOSoK , SetROP2( oshdc , R2_XORPEN ) )
                BOSpOOP
                BOS( WHATgbo , BOSoK , Rectangle( oshdc , info.left , info.top , info.right , info.bottom ) )
                BOSpOOP
                BOS( WHATgbo , BOSoK , GetClientRect( oshw , &info ) )

                BOSdOnOTtEST( WHATgbo , SelectObject( oshdc , poshp[ 0 ] ) )
                BOSdOnOTtEST( WHATgbo , SelectObject( oshdc , oshb ) )

                poshp[ 5 ] = (HPEN)tinP.brcRaw ;
                BOSpOOP
                BOS( WHATgbo , BOSoK , CreatePen( PS_SOLID , 1 , 0xffff00 ) )
                poshp[ 4 ] = (HPEN)tinP.brcRaw ;
                BOSpOOP
                BOS( WHATgbo , BOSoK , CreatePen( PS_SOLID , 1 , 0xff00ff ) )
                poshp[ 3 ] = (HPEN)tinP.brcRaw ;
                BOSpOOP
                BOS( WHATgbo , BOSoK , CreatePen( PS_SOLID , 1 , 0xff0000 ) )
                poshp[ 2 ] = (HPEN)tinP.brcRaw ;
                BOSpOOP
                BOS( WHATgbo , BOSoK , CreatePen( PS_SOLID , 1 , 0x00ffff ) )
                poshp[ 1 ] = (HPEN)tinP.brcRaw ;
                BOSpOOP
                BOS( WHATgbo , BOSoK , CreatePen( PS_SOLID , 1 , 0x00ff00 ) )
                poshp[ 0 ] = (HPEN)tinP.brcRaw ;
                BOSpOOP
                BOS( WHATgbo , BOSoK , CreatePen( PS_SOLID , 1 , 0x0000ff ) )

                oshb = (HBRUSH)tinP.brcRaw ;
                BOSpOOP
                BOS( WHATgbo , BOSoK , CreateSolidBrush( 0 ) )
            {
            if( !idCycle )
        {
        if( oshdc )
    {
    while( !ether && !etThread )
    ZE( countT , idCycle ) ;
    sleepC s( tinP , TAG( TAGiDnULL ) ) ;
{
if( pTaskP )
TASK( tmDrawF )

HPEN   poshp[ 6 ] ;
HBRUSH oshb ;

}
    return rc ;

    }
        }
            break ;
            rc = tinP.brcRaw ;
            BOSdOnOTtEST( WHATgbo , DefWindowProc( oshWindowP , idCmdP , p1P , p2P ) )
        {
        default :
        }
            break ;
            BOSpOOP
            BOS( WHATgbo , BOSoK , PostMessage( oshWindowP , WM_QUIT , 0 , 0 ) )
        {
        case WM_CLOSE :
        }
            break ;
            BOSdOnOTtEST( WHATgbo , EndPaint( oshWindowP , &info ) )
            oshdc = (HDC)tinP.brcRaw ;
            BOSpOOP
            BOS( WHATgbo , BOSoK , BeginPaint( oshWindowP , &info ) )
            PAINTSTRUCT info ;
        {
        case WM_PAINT :
    {
    switch( idCmdP )
    ZE( LRESULT , rc ) ;

    tinS& tinP = *pTin ;
{
extern "C" LRESULT OSF winMessageHandlerFooF( HWND oshWindowP , UINT idCmdP , WPARAM p1P , LPARAM p2P )

RECT  info ;
HDC   oshdc ;
HWND  oshw ;
tinS* pTin ;

/*1*/WAKEsHOW( "doodle.raw.graphics.calls" )/*1*/
/**/
*/
/*


//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//


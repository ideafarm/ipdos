
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    dec02AM( cFunctionsPending ) ;
    }
    
        bWrite.ungrabF( tinP ) ;
        bRead.ungrabF( tinP ) ;
    
        if( timeAllowedConnected && F(flagsP) & flSOCKETc_CTbYlISTENER ) FRESHtIMEaTOMIC( *pEther , timeConnected.time1 , timeConnected.time2 )
    
        }
            __Z( idSlot ) ;
            etherC::sockStkIdleTimeoutersF( tinP ).sinkF( tinP , idSlot , (countT)this , flSTACKsINK_UNIQUE ) ;
            ZE( countT , idSlot ) ;
        {
        if( !( F(flags) & flSOCKETc_DOnOTrEGISTERtIMEoUT ) )
    
        }
            __Z( idSlot ) ;
            etherC::sockStkQuittersF( tinP ).sinkF( tinP , idSlot , (countT)this , flSTACKsINK_UNIQUE ) ;
            ZE( countT , idSlot ) ;
            //__( F(tinP.flagsThreadMode3) & flTHREADmODE3_NOTwATCHED ) ;
        {
        if( idType != ifcSOCKETtYPE_DATAgRAM && !( F(flags) & flSOCKETc_DOnOTrEGISTERqUITTER ) )

        if(    F(flags) & flSOCKETc_CANbROADCAST   && idType == ifcSOCKETtYPE_DATAgRAM ) pEther->sockOptionBroadcastF( tinP , handle ) ;
        if( !( F(flags) & flSOCKETc_NOsENDnOW    ) && idType == ifcSOCKETtYPE_STREAM   ) pEther->sockOptionSendNowF(   tinP , handle ) ;
        if( !( F(flags) & flSOCKETc_NOlINGER     ) && idType == ifcSOCKETtYPE_STREAM   ) pEther->sockOptionLingerF(    tinP , handle ) ;
        __Z( handle ) ;
        pEther->sockF( tinP , handle , idType , !( F(flags) & flSOCKETc_CRYPTfOREIGNsSL ) ? 0 : &hSslContext ) ;
    
        bRead.grabF( tinP , TAG( TAGiDnULL ) ) ;
        bWrite.grabF( tinP , TAG( TAGiDnULL ) ) ;
    
        //20141028@0638: REGISTRATION MOVED FROM HERE
    
        else            thirdC::c_memsetIF( tinP , (byteT*)pbBitsCt , sizeof pbBitsCt ) ;
        if( pbBitsCtP ) thirdC::c_memcpyIF( tinP , (byteT*)pbBitsCt , (byteT*)pbBitsCtP , sizeof pbBitsCt ) ;
    
        if( F(flags) & flSOCKETc_CRYPTfOREIGNsSL ) etherP.openSsl_getContextF( tinP , hSslContext , T("///c/Certbot/live/ideafarm.com/fullchain.pem") , T("///c/Certbot/live/ideafarm.com/privkey.pem") ) ;

        if( idleTimeAllowedWrite && idleTimeAllowedWrite != SOCKETtIMEOUTdEFAULTwAN && idleTimeAllowedRead  != SOCKETtIMEOUTdEFAULTlAN ) pEther->traceF( tinP , T("socketC / unusual parameter value [this,idleTimeAllowedWrite]: ")+TF2((countT)this,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(idleTimeAllowedWrite,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
        if( idleTimeAllowedRead  && idleTimeAllowedRead  != SOCKETtIMEOUTdEFAULTwAN && idleTimeAllowedRead  != SOCKETtIMEOUTdEFAULTlAN ) pEther->traceF( tinP , T("socketC / unusual parameter value [this,idleTimeAllowedRead ]: ")+TF2((countT)this,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(idleTimeAllowedRead ,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
    
        //if( idleTimeAllowedWrite && idleTimeAllowedWrite != SOCKETtIMEOUTdEFAULTwAN && idleTimeAllowedRead  != SOCKETtIMEOUTdEFAULTlAN ) { BLAMMO ; } 
        //if( idleTimeAllowedRead  && idleTimeAllowedRead  != SOCKETtIMEOUTdEFAULTwAN && idleTimeAllowedRead  != SOCKETtIMEOUTdEFAULTlAN ) { BLAMMO ; }
    
        _IO_
    
        }
            }
                return ;
                dec02AM( cFunctionsPending ) ;
            {
            if( *pEther )

            FV( flSOCKETc , flagsP ) ;
            __( idType == ifcSOCKETtYPE_DATAgRAM && F(flags) & flSOCKETc_DOnOTrEGISTERqUITTER ) ;
            __( idType == ifcSOCKETtYPE_DATAgRAM && F(flags) & flSOCKETc_NOlINGER             ) ;
            __( idType == ifcSOCKETtYPE_STREAM   && F(flags) & flSOCKETc_CANbROADCAST         ) ;

            }
                return ;
                dec02AM( cFunctionsPending ) ;
            {
            if( *pEther )
        {
        IFbEcAREFUL    
        SCOOPP

        tinP.pAdamGlobal3->_socketC_.grab.ungrabF( tinP ) ;
        }
            tinP.pAdamGlobal3->_socketC_.pSwOdometer = new( 0 , tinP , LF ) switchC( tinP , etRock , idLineCtP , idiFileCtP , pbBitsCtP , flSTACKc_null , tinP.pAdamGlobal3->_socketC_.nnLever , 0 , sizeof( sockOdometerS ) ) ; ___( tinP.pAdamGlobal3->_socketC_.pSwOdometer ) ;
            etherC& etRock = etherC::etRockIF( tinP ) ;

            }
                THREADmODE1rESTORE
                }
                    }
                        ++ s ; thirdC::dosSleepWinkIF( tinP ) ;
                    {
                    while( tinP.pAdamGlobal3->_socketC_.pSwOdometer )
                    sleepC s( tinP , TAG( TAGiDnULL ) ) ;
                {
                THREADmODE1oN( flTHREADmODE1_ALLOWsTOPwHILEgRABBING )
            {
            if( tinP.pAdamGlobal3->_socketC_.pSwOdometer )
        {
        if( !incv02AM( tinP.pAdamGlobal3->_socketC_.cRef ) )
        tinP.pAdamGlobal3->_socketC_.grab.grabF( tinP , TAG( TAGiDnULL ) ) ;
        //20141028@0638: REGISTRATION MOVED TO HERE
    {
    inc02AM( cFunctionsPending ) ;
{
hSslContext( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_openSslContext )
pMapPortBind( 0 ) ,
idleTimeAllowedWrite( pIdleTimeAllowedWriteP ? *pIdleTimeAllowedWriteP : F(flagsP) & flSOCKETc_CRYPTfOREIGNsSL ? tinP.pAdamGlobal3->_socketC_.alwaysTick : tinP.pAdamGlobal3->_socketC_.alwaysZe ) ,
idleTimeAllowedRead(  pIdleTimeAllowedReadP  ? *pIdleTimeAllowedReadP  : F(flagsP) & flSOCKETc_CRYPTfOREIGNsSL ? tinP.pAdamGlobal3->_socketC_.alwaysTick : tinP.pAdamGlobal3->_socketC_.alwaysZe ) ,
timeAllowedConnected( pTimeAllowedConnectedP ? *pTimeAllowedConnectedP : F(flagsP) & flSOCKETc_CRYPTfOREIGNsSL ? tinP.pAdamGlobal3->_socketC_.alwaysZe   : tinP.pAdamGlobal3->_socketC_.alwaysZe ) , // SSL IS A PIECE OF SHIT: IT CAN PEG CPU FOREVER IN AN INFINITE LOOP ; 20161201@1201: CHANGED FROM TICK TO ZE TO AVOID CANCELING LONG CLOUD TRANSFERS.  HOPEFULLY THE IDLE LIMITS WILL SUFFICE TO KILL SSL PEGGING CPU
psttName( 0 ) ,
pczKeyTopSecretPeer( 0 ) ,
pczKeyTopSecret( 0 ) ,
idPhaseTopSecret( ifcIDpHASEsOCKETtOPsECRET_1SENDpINnAME ) ,
dad( tinP , etherP , TAGoR( TAGiDnULL , idLineCtP , idiFileCtP , pbBitsCtP ) ) ,
mom( tinP , etherP , TAGoR( TAGiDnULL , idLineCtP , idiFileCtP , pbBitsCtP ) ) ,
hnu( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_SOCKET ) ,
idPortMe( 0 ) ,
bCatcher( 0 ) ,
bAcceptor( 0 ) ,
cbMsgInLast( 0 ) ,
idMsgInLast( 0 ) ,
idMsgOutLast( 0 ) ,
handle( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_SOCKET ) ,
bRead( tinP , TAGoR( TAGiDnULL , idLineCtP , idiFileCtP , pbBitsCtP ) , 0 , ifcIDgRABlAYER_7BASEmISC1 , flBATONc_NOTjEALOUS | flBATONc_SHARElAYER ) ,
bWrite( tinP , TAGoR( TAGiDnULL , idLineCtP , idiFileCtP , pbBitsCtP ) , 0 , ifcIDgRABlAYER_7BASEmISC1 , flBATONc_NOTjEALOUS | flBATONc_SHARElAYER ) ,
flagsMode( flSOCKETcmODE_null ) ,
) ,
    )
            : flSOCKETc_null
            ? flSOCKETc_DOnOTrEGISTERtIMEoUT
        ( !pIdleTimeAllowedReadP && !pIdleTimeAllowedWriteP && !pTimeAllowedConnectedP && !( F(flagsP) & flSOCKETc_CRYPTfOREIGNsSL ) ) || idType == ifcSOCKETtYPE_DATAgRAM
    (
    flagsP |
(
flags
fListening( 0 ) ,
idType( idTypeP ) ,
pPoop( &(const poopC&)etherP ) ,
pEther( &etherP ) ,
bAcceptedByLF( 0 ) ,
pOdometer( 0 ) ,
cFunctionsPending( 0 ) ,
idiFileCt( idiFileCtP ) ,
idLineCt( idLineCtP ) ,
/*1*/socketC::socketC( tinS& tinP , etherC& etherP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const boolT idTypeP , const flagsT flagsP , const countT* const pIdleTimeAllowedReadP , const countT* const pIdleTimeAllowedWriteP , const countT* const pTimeAllowedConnectedP )/*1*/ :

/**/
*/
 this is because SSL is a piece of shit and can peg the cpu in an infinite loop
default behavior is to not time out, except that SSL socket defaults to timeout in a TICK (approx. 5 foreign minutes)
 flagsP
 idTypeP
 etherP
 tinP
arguments
sets the linger option
constructs a socket that can be used to communicate with another local or a remote process
  \<A HREF=\"5.3420104.1.1.0.html\"\>3420104:  WAKEsHOW( "example.simplest.func.1070001.socketC.socketC" )\</A\>
 simplest
examples
\<A HREF=\"5.1070001.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


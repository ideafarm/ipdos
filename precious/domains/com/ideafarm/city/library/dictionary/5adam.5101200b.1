
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//

                            
REST

etherC::loafIF( tinP ) ;

etThread.osThreadF( TaRG1( tmSayF ) ) ;

etThread.osThreadF( TaRG1( tmHearF ) ) ;
etThread.osThreadF( TaRG1( tmHearF ) ) ;

etThread.traceF( tinP , T("[nnLocalMulticast]:    ")+T(nnLocalMulticast) ) ;
nnLocalMulticast = socketC::nicNameIF( tinP , etThread , T("ff02:0:0:0:0:0:0:1") ) ;

etThread.traceF( tinP , T("[nnMe]:    ")+T(nnMe) ) ;
nnMe             = socketC::nicNameIF( tinP , etThread , T("2001:550:2:c::8b:101") ) ;

etThread.traceF( tinP , T("[nnAny]:    ")+T(nnAny) ) ;
nnAny = socketC::nicNameIF( tinP , etThread , T("::") ) ;

//etThread.delF( tinP , pNicName ) ;
//socketC::nicNameIF( tinP , etThread , pNicName , cNicName , 0 ) ; ___( pNicName ) ;
//ZE( countT    , cNicName ) ;
//ZE( nicNameC* , pNicName ) ;


TODO

DONE( tmHearF )

}
    etThread.delF( tinP , posti ) ;
    etThread.traceF( tinP , T("called readF [nnHe,idpHe,posti]:    ")+T(nnHe)+T("    ")+TF2(idpHe,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+T(posti) ) ;
    socki.readF( tinP , posti , costi , idpHe , nnHe , 0 , 0 ) ; ___( posti ) ;
    etThread.traceF( tinP , T("calling readF") ) ;
    ZE( countT , idpHe ) ;
    nicNameC nnHe ;
    ZE( countT   , costi ) ;
    ZE( osTextT* , posti ) ;
{
while( !POOP && !ether )

idpMe = socki.bindF( tinP , 0 , nnAny , 1 , 0 ) ;
socketC socki( tinP , etThread , TAG( TAGiDnULL ) , ifcSOCKETtYPE_DATAgRAM , flSOCKETc_null , 0 , 0 , 0 , 0 , 0 ) ;

TASK( tmHearF )

DONE( tmSayF )

//etThread.traceF( tinP , T("wrote 2") ) ;
//socko.writeF( tinP , idpMe , nnLocalMulticast , tSay , tSay.csF( tinP ) ) ;
//etThread.traceF( tinP , T("writing 2") ) ;
//
//}
//    ++ s ; ether.osSleepF( tinP , TOCK << 2 ) ;
//    sleepC s( tinP , TAG( TAGiDnULL ) ) ;
//{

etThread.traceF( tinP , T("wrote 1") ) ;
socko.writeF( tinP , idpMe , nnLocalMulticast , tSay , tSay.csF( tinP ) ) ;
//B:socko.writeF( tinP , idpMe , nnLocalMulticast , tSay , tSay.csF( tinP ) ) ;
//G:socko.writeF( tinP , idpMe , nnMe , tSay , tSay.csF( tinP ) ) ;
etThread.traceF( tinP , T("writing 1") ) ;

TN( tSay , "Hello, Jesus!" ) ;

socko.bindF( tinP , 0 , nnAny , 1 , 0 ) ;
//G:socko.bindF( tinP , 0 , nnAny , 1 , 0 ) ;
socketC socko( tinP , etThread , TAG( TAGiDnULL ) , ifcSOCKETtYPE_DATAgRAM , flSOCKETc_null , 0 , 0 , 0 , 0 , 0 ) ;

}
    ++ s ; ether.osSleepF( tinP , TOCK << 2 ) ;
    sleepC s( tinP , TAG( TAGiDnULL ) ) ;
{

TASK( tmSayF )

countT idpMe ;
nicNameC nnMe ;
nicNameC nnLocalMulticast ;
nicNameC nnAny ;

/*1*/WAKEsHOWtEXT( "scratch b" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


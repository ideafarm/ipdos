
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


#endif

        }
            return pvr ;                                                                                                                        \
            voidT* pvr = operator new( cbP , 0 , tinP , pNapkinP ) ;                                                                            \
            _IO_                                                                                                                             \
        {                                                                                                                                       \
        voidT* classP::subclassP::operator new[]( countT cbP , tinS& tinP , napkinC* const pNapkinP )                                           \
                                                                                                                                                \
        }                                                                                                                                       \
            return pvr ;                                                                                                                        \
            voidT* pvr = (voidT*)pbZombieP ;                                                                                                    \
            if( tinP.fingerprint ) ;                                                                                                            \
            if( cbZombieP - cbP ) BLAMMO ;                                                                                                      \
            _IO_                                                                                                                             \
        {                                                                                                                                       \
        voidT* classP::subclassP::operator new[]( countT cbP , tinS& tinP , byteT* pbZombieP , const countT cbZombieP )                         \
                                                                                                                                                \
        }                                                                                                                                       \
            return pvr ;                                                                                                                        \
            voidT* pvr = operator new( cbP , 0 , tinP , idLineP , idiFileP ) ;                                                                  \
            _IO_                                                                                                                             \
        {                                                                                                                                       \
        voidT* classP::subclassP::operator new[]( countT cbP , tinS& tinP , const countT idLineP , const countT idiFileP )                      \
                                                                                                                                                \
        }                                                                                                                                       \
            return pvr ;                                                                                                                        \
            voidT* pvr = (voidT*)( (byteT*)pvn + cbaFoot ) ;                                                                                    \
                                                                                                                                                \
            }                                                                                                                                   \
                putNegAM( *(countT*)( (byteT*)pvn + cbaFoot - sizeof( countT ) ) , FINGERnEG_FOOTc2 ) ;                                         \
                putNegAM( *(countT*)pvn , FINGERnEG_FOOTc1 ) ;                                                                                  \
                BLAMMO ;                                                                                                                        \
            {                                                                                                                                   \
            if( cbaFoot )                                                                                                                       \
            __Z( pvn ) ;                                                                                                                        \
                                                                                                                                                \
            if( pNapkinP && *pNapkinP == ( cbaFoot + cbP ) ) pvn = (voidT*)(byteT*)*pNapkinP ;                                                  \
            ZE( voidT* , pvn ) ;                                                                                                                \
                                                                                                                                                \
            countT cbaFoot = cbFootP ? cbFootP + 2 * sizeof( countT ) : 0 ;                                                                     \
            _IO_                                                                                                                             \
        {                                                                                                                                       \
        voidT* classP::subclassP::operator new( countT cbP , const countT cbFootP , tinS& tinP , napkinC* const pNapkinP )                      \
                                                                                                                                                \
        }                                                                                                                                       \
            return pvr ;                                                                                                                        \
            voidT* pvr = (voidT*)( pbZombieP + cbaFoot ) ;                                                                                      \
            }                                                                                                                                   \
                putNegAM( *(countT*)( pbZombieP + cbaFoot - sizeof( countT ) ) , FINGERnEG_FOOTc2 ) ;                                           \
                putNegAM( *(countT*)pbZombieP , FINGERnEG_FOOTc1 ) ;                                                                            \
                BLAMMO ;                                                                                                                        \
            {                                                                                                                                   \
            if( cbaFoot )                                                                                                                       \
            if( tinP.fingerprint ) ;                                                                                                            \
            if( cbZombieP - ( cbaFoot + cbP ) ) BLAMMO ;                                                                                        \
            countT cbaFoot = cbFootP ? cbFootP + 2 * sizeof( countT ) : 0 ;                                                                     \
            _IO_                                                                                                                             \
        {                                                                                                                                       \
        voidT* classP::subclassP::operator new( countT cbP , const countT cbFootP , tinS& tinP , byteT* pbZombieP , const countT cbZombieP )    \
                                                                                                                                                \
        }                                                                                                                                       \
            return pvr ;                                                                                                                        \
            voidT* pvr = (voidT*)( (byteT*)pvn + cbaFoot ) ;                                                                                    \
            }                                                                                                                                   \
                putNegAM( *(countT*)( (byteT*)pvn + cbaFoot - sizeof( countT ) ) , FINGERnEG_FOOTc2 ) ;                                         \
                putNegAM( *(countT*)pvn , FINGERnEG_FOOTc1 ) ;                                                                                  \
                BLAMMO ;                                                                                                                        \
            {                                                                                                                                   \
            if( cbaFoot )                                                                                                                       \
            __Z( pvn ) ;                                                                                                                        \
            PUSE.newF( tinP , LF , *(byteT**)&pvn , ( cbaFoot + cbP ) ) ; ___( pvn ) ;                                                          \
            if( !tinP.pPoolUse ) { BLAMMO ; }                                                                                                   \
            ZE( voidT* , pvn ) ;                                                                                                                \
            countT cbaFoot = cbFootP ? cbFootP + 2 * sizeof( countT ) : 0 ;                                                                     \
            _IO_                                                                                                                             \
        {                                                                                                                                       \
        voidT* classP::subclassP::operator new( countT cbP , const countT cbFootP , tinS& tinP , const countT idLineP , const countT idiFileP ) \
                                                                                                                                                \
        }                                                                                                                                       \
            operator delete( pvP ) ;                                                                                                            \
            _IO_                                                                                                                             \
            TINSL                                                                                                                               \
        {                                                                                                                                       \
        voidT classP::subclassP::operator delete[]( voidT* pvP )                                                                                \
                                                                                                                                                \
        }                                                                                                                                       \
            }                                                                                                                                   \
                PUSE( tinP , *(byteT**)&pvP ) ;                                                                                                 \
                if( !tinP.pPoolUse ) { BLAMMO ; }                                                                                               \
            {                                                                                                                                   \
            if( pvP && !( F(tinP.flagsThreadMode2) & flTHREADmODE2_DOnOTcaLLdELif ) )                                                           \
            if( idType == ifciDtYPEdROPnOTE_strokeS && ((strokeS*)pvP)->idCaste != sc_cADAM ) { BLAMMO ; }                                      \
            countT idType = ifciDtYPEdROPnOTE_##typeP ;                                                                                         \
            _IO_                                                                                                                             \
            TINSL                                                                                                                               \
        {                                                                                                                                       \
        voidT classP::subclassP::operator delete( voidT* pvP )                                                                                  \
                                                                                                                                                \
    #define NEWdELcLASSsUBCLASS0(classP,subclassP,typeP,cbSizeP)                                                                                \

#else

        }
            return pvr ;                                                                                                                        \
            voidT* pvr = operator new( cbP , 0 , tinP , pNapkinP ) ;                                                                            \
            _IO_                                                                                                                             \
        {                                                                                                                                       \
        voidT* classP::subclassP::operator new[]( countT cbP , tinS& tinP , napkinC* const pNapkinP )                                           \
                                                                                                                                                \
        }                                                                                                                                       \
            return pvr ;                                                                                                                        \
            voidT* pvr = (voidT*)pbZombieP ;                                                                                                    \
            if( tinP.fingerprint ) ;                                                                                                            \
            if( cbZombieP - cbP ) BLAMMO ;                                                                                                      \
            _IO_                                                                                                                             \
        {                                                                                                                                       \
        voidT* classP::subclassP::operator new[]( countT cbP , tinS& tinP , byteT* pbZombieP , const countT cbZombieP )                         \
                                                                                                                                                \
        }                                                                                                                                       \
            return pvr ;                                                                                                                        \
            voidT* pvr = operator new( cbP , 0 , tinP , idLineP , idiFileP ) ;                                                                  \
            _IO_                                                                                                                             \
        {                                                                                                                                       \
        voidT* classP::subclassP::operator new[]( countT cbP , tinS& tinP , const countT idLineP , const countT idiFileP )                      \
                                                                                                                                                \
        }                                                                                                                                       \
            return pvr ;                                                                                                                        \
            voidT* pvr = (voidT*)( (byteT*)pvn + cbaFoot ) ;                                                                                    \
                                                                                                                                                \
            }                                                                                                                                   \
                putNegAM( *(countT*)( (byteT*)pvn + cbaFoot - sizeof( countT ) ) , FINGERnEG_FOOTc2 ) ;                                         \
                putNegAM( *(countT*)pvn , FINGERnEG_FOOTc1 ) ;                                                                                  \
                BLAMMO ;                                                                                                                        \
            {                                                                                                                                   \
            if( cbaFoot )                                                                                                                       \
            __Z( pvn ) ;                                                                                                                        \
                                                                                                                                                \
            if( pNapkinP && *pNapkinP == ( cbaFoot + cbP ) ) pvn = (voidT*)(byteT*)*pNapkinP ;                                                  \
            ZE( voidT* , pvn ) ;                                                                                                                \
                                                                                                                                                \
            countT cbaFoot = cbFootP ? cbFootP + 2 * sizeof( countT ) : 0 ;                                                                     \
            _IO_                                                                                                                             \
        {                                                                                                                                       \
        voidT* classP::subclassP::operator new( countT cbP , const countT cbFootP , tinS& tinP , napkinC* const pNapkinP )                      \
                                                                                                                                                \
        }                                                                                                                                       \
            return pvr ;                                                                                                                        \
            voidT* pvr = (voidT*)( pbZombieP + cbaFoot ) ;                                                                                      \
            }                                                                                                                                   \
                putNegAM( *(countT*)( pbZombieP + cbaFoot - sizeof( countT ) ) , FINGERnEG_FOOTc2 ) ;                                           \
                putNegAM( *(countT*)pbZombieP , FINGERnEG_FOOTc1 ) ;                                                                            \
                BLAMMO ;                                                                                                                        \
            {                                                                                                                                   \
            if( cbaFoot )                                                                                                                       \
            if( tinP.fingerprint ) ;                                                                                                            \
            if( cbZombieP - ( cbaFoot + cbP ) ) BLAMMO ;                                                                                        \
            countT cbaFoot = cbFootP ? cbFootP + 2 * sizeof( countT ) : 0 ;                                                                     \
            _IO_                                                                                                                             \
        {                                                                                                                                       \
        voidT* classP::subclassP::operator new( countT cbP , const countT cbFootP , tinS& tinP , byteT* pbZombieP , const countT cbZombieP )    \
                                                                                                                                                \
        }                                                                                                                                       \
            return pvr ;                                                                                                                        \
            voidT* pvr = (voidT*)( (byteT*)pvn + cbaFoot ) ;                                                                                    \
            }                                                                                                                                   \
                putNegAM( *(countT*)( (byteT*)pvn + cbaFoot - sizeof( countT ) ) , FINGERnEG_FOOTc2 ) ;                                         \
                putNegAM( *(countT*)pvn , FINGERnEG_FOOTc1 ) ;                                                                                  \
                BLAMMO ;                                                                                                                        \
            {                                                                                                                                   \
            if( cbaFoot )                                                                                                                       \
            __Z( pvn ) ;                                                                                                                        \
            }                                                                                                                                   \
                }                                                                                                                               \
                    pNote->cbRequested  = pNote->cbUsedReally = cbaFoot + cbP ;                                                                 \
                    pNote->idType       = ifciDtYPEdROPnOTE_##typeP ;                                                                           \
                {                                                                                                                               \
                if( pNote )                                                                                                                     \
                dropNoteS* pNote = PUSE.pDropNoteF( tinP , (byteT*)pvn ) ;                                                                      \
            {                                                                                                                                   \
            if( pvn )                                                                                                                           \
            PUSE.newF( tinP , LF , *(byteT**)&pvn , ( cbaFoot + cbP ) ) ; ___( pvn ) ;                                                          \
            if( !tinP.pPoolUse ) { BLAMMO ; }                                                                                                   \
            ZE( voidT* , pvn ) ;                                                                                                                \
            countT cbaFoot = cbFootP ? cbFootP + 2 * sizeof( countT ) : 0 ;                                                                     \
            _IO_                                                                                                                             \
        {                                                                                                                                       \
        voidT* classP::subclassP::operator new( countT cbP , const countT cbFootP , tinS& tinP , const countT idLineP , const countT idiFileP ) \
                                                                                                                                                \
        }                                                                                                                                       \
            operator delete( pvP ) ;                                                                                                            \
            _IO_                                                                                                                             \
            TINSL                                                                                                                               \
        {                                                                                                                                       \
        voidT classP::subclassP::operator delete[]( voidT* pvP )                                                                                \
                                                                                                                                                \
        }                                                                                                                                       \
            }                                                                                                                                   \
                PUSE( tinP , *(byteT**)&pvP ) ;                                                                                                 \
                if( !tinP.pPoolUse ) { BLAMMO ; }                                                                                               \
            {                                                                                                                                   \
            if( pvP && !( F(tinP.flagsThreadMode2) & flTHREADmODE2_DOnOTcaLLdELif ) )                                                           \
            if( idType == ifciDtYPEdROPnOTE_strokeS && ((strokeS*)pvP)->idCaste != sc_cADAM ) { BLAMMO ; }                                      \
            countT idType = ifciDtYPEdROPnOTE_##typeP ;                                                                                         \
            _IO_                                                                                                                             \
            TINSL                                                                                                                               \
        {                                                                                                                                       \
        voidT classP::subclassP::operator delete( voidT* pvP )                                                                                  \
                                                                                                                                                \
    #define NEWdELcLASSsUBCLASS0(classP,subclassP,typeP,cbSizeP)                                                                                \

#if defined( ENABLEdROPnOTES )

/*1*//*NEWdELcLASSsUBCLASS0(classP,subclassP,typeP,cbSizeP)*//*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//


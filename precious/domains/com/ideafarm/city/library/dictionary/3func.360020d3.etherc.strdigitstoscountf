
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    delF( tinP , psttd ) ;_WQ

    if( fNeg ) valueP *= sCountC( tinP , *this , - 1 ) ;_WQ

    }
        else break ;
        }
            valueP += sCountC( tinP , *this , cDelta ) ;_WQ
            valueP *= sCountC( tinP , *this , radix ) ;_WQ
        {
        if( bOk )

        }
            else                                                                                                   bOk = 0 ;
            else if( psttc[ off ] >= stt_qu && psttc[ off ] <= stt_at && (countT)psttc[ off ] - '?' + 62 < radix ) cDelta = (countT)psttc[ off ] - '?' + 62 ;
            else if( psttc[ off ] >= stt_A  && psttc[ off ] <= stt_Z  && (countT)psttc[ off ] - 'A' + 36 < radix ) cDelta = (countT)psttc[ off ] - 'A' + 36 ;
            else if( psttc[ off ] >= stt_a  && psttc[ off ] <= stt_z  && (countT)psttc[ off ] - 'a' + 10 < radix ) cDelta = (countT)psttc[ off ] - 'a' + 10 ;
                 if( psttc[ off ] >= stt_0  && psttc[ off ] <= stt_9  && (countT)psttc[ off ] - '0'      < radix ) cDelta = (countT)psttc[ off ] - '0' ;
        {
        ZE( sCountT , cDelta ) ;_WQ
        boolT bOk = 1 ;_WQ
    {
    for( countT off = 0 ; !POOP && off < cc ; off ++ )
    //GET ABSOLUTE VALUE

    }
        }
            }
                if( psttc[ off ] == stt_bl ) break ;
                }
                    break ;
                    else { __( !!psttc[ off ] ) ; __1 }
                    else if( psttc[ off ] >= stt_qu && psttc[ off ] <= stt_at ) radix = (countT)psttc[ off ] - '?' + 63 ;
                    else if( psttc[ off ] >= stt_A  && psttc[ off ] <= stt_Z  ) radix = (countT)psttc[ off ] - 'A' + 37 ;
                    else if( psttc[ off ] >= stt_a  && psttc[ off ] <= stt_z  ) radix = (countT)psttc[ off ] - 'a' + 11 ;
                         if( psttc[ off ] >= stt_1  && psttc[ off ] <= stt_9  ) radix = (countT)psttc[ off ] - '0' +  1 ;
                {
                if( psttc[ off - 1 ] == stt_un )
            {
            for( countT off = 1 ; off < cc ; off ++ )
        {

        cc = cs - ( psttc - psttPrefix - CSpREFIX ) ;_WQ
        if( fNeg || *psttc == stt_pl ) psttc ++ ;_WQ
        fNeg = *psttc == stt_mi ;_WQ
        while( *psttc == stt_bl ) psttc ++ ;_WQ
        psttc += CSpREFIX ;_WQ
        countT cs = psttPrefix->idAdam ;_WQ
        const strokeS* psttPrefix = psttc ;_WQ
    {
    if( !POOP )
    ZE( boolT , fNeg ) ;_WQ
    ZE( countT , cc ) ;_WQ
    strokeS* psttc = psttd ;_WQ
    //GET SIGN AND RADIX OVERRIDE

    if( !bForeignP ) { strReverseF( tinP , psttd ) ; ___( psttd ) ; }
    strMakeF( tinP , LF , psttd , psttP ) ; ___( psttd ) ;_WQ
    ZE( strokeS* , psttd ) ;_WQ

    const strokeS stt_un( '_' ) ;_WQ
    const strokeS stt_pl( '+' ) ;_WQ
    const strokeS stt_mi( '-' ) ;_WQ
    const strokeS stt_at( '@' ) ;_WQ
    const strokeS stt_qu( '?' ) ;_WQ
    const strokeS stt_bl( ' ' ) ;_WQ
    const strokeS stt_Z( 'Z' ) ;_WQ
    const strokeS stt_A( 'A' ) ;_WQ
    const strokeS stt_z( 'z' ) ;_WQ
    const strokeS stt_a( 'a' ) ;_WQ
    const strokeS stt_9( '9' ) ;_WQ
    const strokeS stt_1( '1' ) ;_WQ
    const strokeS stt_0( '0' ) ;_WQ
    //U: OPTIMIZE BY MAKING THESE STATIC

    _IO_

    // NOTE: THIS FUNCTION WAS CODED ASSUMING FOREIGN DIGIT ORDERING.  AFTER THE CODE WAS COMPLETED, IT WAS DECIDED TO ORDER DIGITS IN INCREASING SIGNIFICANCE WITHIN IFC
    //U: OPTIMIZE TO ELIMINATE USE OF strReverseF BY REWRITING THIS FUNCTION

    }
        if( POOP ) return ;
        __( psttP->idCaste != sc_PREFIXlENGTH ) ;_WQ
        if( POOP ) return ;
        __( radix > 64 ) ;_WQ
        __( radix < 2 ) ;_WQ
        __Z( psttP ) ;_WQ
        if( !radix ) radix = 0x10 ;_WQ
        __( valueP != sCountC( tinP , *this ) ) ;_WQ
        if( POOP ) return ;
    {
    IFbEcAREFUL

    countT radix = defaultRadixP ;_WQ
    SCOOP
{
/*1*/voidT etherC::strDigitsToSCountF( tinS& tinP , sCountC& valueP , const strokeS* const psttP , const countT defaultRadixP , const boolT bForeignP )/*1*/

/**/
*/
U::EDIT TO SUPPORT sc_cALPHABET1
  1: Foreign digit ordering (most significant digit occurs first (i.e. at left)
  0: IdeaFarm (tm) City digit ordering (least significant digit occurs first (i.e. at left)
  can be 0 or 1
 bForeignP
  if nonze, must be at least 2 and not more than 64_9
  can be 0, which implies radix 16_9
 defaultRadixP
 psttP
  must be 0
 valueP
arguments
 sCountC objects use significantly more computation resources
do not use this overload if it is known that the value will fit into an sCountT object
there is no limit to the number of digits that can be stored in valueP
after an overflow, the resulting sign will still be correct
overflow is not detected
 if there is a valid radix override, terminates with the radix override
 if there is a radix override but it is invalid (not a radix 64_9 digit) then impotence occurs
 if there is no radix override, terminates with the first stroke that is not a value radix 16_9 digit
conversion terminates with the first nonnumeric stroke
the radix override value is always expressed in radix 64_9 (the digits are 0..9 a..z A..Z ? @)
 "-YZ?@_@" is the radix 64_9 value -YZYZ
 "-EFEF_F" is the radix 42_9 value -EFEF
 "-yzyz_z" is the radix 36_9 value -yzyz
 "-efef_f" is the radix 16_9 (hex) value -efef
 "89abcde" is the radix 16_9 value 89abcde
 "10"      is the radix 16_9 value 10
 "0"       is the value 0
 a radix can be specified by appending an underscore "_" followed by a single radix 64 digit [0..9 a..z A..Z ? @]
an explicit radix overrides defaultRadixP
the plus sign is legal
the negative sign must be the first nonblank character
the number can contain leading blanks
  \<A HREF=\"5.2e10104.1.1.0.html\"\>2e10104:  WAKEsHOW( "example.simplest.func.10300f1.etherC.strDigitsToSCountF" )\</A\>
 simplest
examples
\<A HREF=\"5.10300f1.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$strDigitsToSCountF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


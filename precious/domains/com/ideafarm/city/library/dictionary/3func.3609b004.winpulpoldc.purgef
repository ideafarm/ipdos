
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    _OUT_

    if( !( F(flagsP) & flPAPERrESET_LEAVEeMPTY ) ) cacheF( tinP , 0 ) ;

    purgeBaseF( tinP , etherP , flagsP ) ;

    while( stqr_mRowShear3_D           ) { ZE( measureT , mFoo ) ; stqr_mRowShear3_D                 >> mFoo ; } if( !bEmpty ) stqr_mRowShear3_D                 << (measureT) PI / 2 ;
    while( stqr_mRowShear3_C           ) { ZE( measureT , mFoo ) ; stqr_mRowShear3_C                 >> mFoo ; } if( !bEmpty ) stqr_mRowShear3_C                 << (measureT) 1.0    ;
    while( stqr_mRowShear3_B           ) { ZE( measureT , mFoo ) ; stqr_mRowShear3_B                 >> mFoo ; } if( !bEmpty ) stqr_mRowShear3_B                 << (measureT) PI / 2 ;
    while( stqr_mRowShear3_A           ) { ZE( measureT , mFoo ) ; stqr_mRowShear3_A                 >> mFoo ; } if( !bEmpty ) stqr_mRowShear3_A                 << (measureT) 1.0    ;
    while( stqr_mRowShear3             ) { ZE( measureT , mFoo ) ; stqr_mRowShear3                   >> mFoo ; } if( !bEmpty ) stqr_mRowShear3                   << (measureT) 0.5 ;
    while( stqr_mRowShear2_D           ) { ZE( measureT , mFoo ) ; stqr_mRowShear2_D                 >> mFoo ; } if( !bEmpty ) stqr_mRowShear2_D                 << (measureT) PI / 2 ;
    while( stqr_mRowShear2_C           ) { ZE( measureT , mFoo ) ; stqr_mRowShear2_C                 >> mFoo ; } if( !bEmpty ) stqr_mRowShear2_C                 << (measureT) 1.0    ;
    while( stqr_mRowShear2_B           ) { ZE( measureT , mFoo ) ; stqr_mRowShear2_B                 >> mFoo ; } if( !bEmpty ) stqr_mRowShear2_B                 << (measureT) PI / 2 ;
    while( stqr_mRowShear2_A           ) { ZE( measureT , mFoo ) ; stqr_mRowShear2_A                 >> mFoo ; } if( !bEmpty ) stqr_mRowShear2_A                 << (measureT) 1.0    ;
    while( stqr_mRowShear2             ) { ZE( measureT , mFoo ) ; stqr_mRowShear2                   >> mFoo ; } if( !bEmpty ) stqr_mRowShear2                   << (measureT) 3.0 ;
    while( stqr_mRowShear1_D           ) { ZE( measureT , mFoo ) ; stqr_mRowShear1_D                 >> mFoo ; } if( !bEmpty ) stqr_mRowShear1_D                 << (measureT) PI / 2 ;
    while( stqr_mRowShear1_C           ) { ZE( measureT , mFoo ) ; stqr_mRowShear1_C                 >> mFoo ; } if( !bEmpty ) stqr_mRowShear1_C                 << (measureT) 1.0    ;
    while( stqr_mRowShear1_B           ) { ZE( measureT , mFoo ) ; stqr_mRowShear1_B                 >> mFoo ; } if( !bEmpty ) stqr_mRowShear1_B                 << (measureT) PI / 2 ;
    while( stqr_mRowShear1_A           ) { ZE( measureT , mFoo ) ; stqr_mRowShear1_A                 >> mFoo ; } if( !bEmpty ) stqr_mRowShear1_A                 << (measureT) 1.0    ;
    while( stqr_mRowShear1             ) { ZE( measureT , mFoo ) ; stqr_mRowShear1                   >> mFoo ; } if( !bEmpty ) stqr_mRowShear1                   << (measureT)-1.0 ;
    while( stqr_mColShear3_D           ) { ZE( measureT , mFoo ) ; stqr_mColShear3_D                 >> mFoo ; } if( !bEmpty ) stqr_mColShear3_D                 << (measureT) PI / 2 ;
    while( stqr_mColShear3_C           ) { ZE( measureT , mFoo ) ; stqr_mColShear3_C                 >> mFoo ; } if( !bEmpty ) stqr_mColShear3_C                 << (measureT) 1.0    ;
    while( stqr_mColShear3_B           ) { ZE( measureT , mFoo ) ; stqr_mColShear3_B                 >> mFoo ; } if( !bEmpty ) stqr_mColShear3_B                 << (measureT) PI / 2 ;
    while( stqr_mColShear3_A           ) { ZE( measureT , mFoo ) ; stqr_mColShear3_A                 >> mFoo ; } if( !bEmpty ) stqr_mColShear3_A                 << (measureT) 1.0    ;
    while( stqr_mColShear3             ) { ZE( measureT , mFoo ) ; stqr_mColShear3                   >> mFoo ; } if( !bEmpty ) stqr_mColShear3                   << (measureT) 0.5 ;
    while( stqr_mColShear2_D           ) { ZE( measureT , mFoo ) ; stqr_mColShear2_D                 >> mFoo ; } if( !bEmpty ) stqr_mColShear2_D                 << (measureT) PI / 2 ;
    while( stqr_mColShear2_C           ) { ZE( measureT , mFoo ) ; stqr_mColShear2_C                 >> mFoo ; } if( !bEmpty ) stqr_mColShear2_C                 << (measureT) 1.0    ;
    while( stqr_mColShear2_B           ) { ZE( measureT , mFoo ) ; stqr_mColShear2_B                 >> mFoo ; } if( !bEmpty ) stqr_mColShear2_B                 << (measureT) PI / 2 ;
    while( stqr_mColShear2_A           ) { ZE( measureT , mFoo ) ; stqr_mColShear2_A                 >> mFoo ; } if( !bEmpty ) stqr_mColShear2_A                 << (measureT) 1.0    ;
    while( stqr_mColShear2             ) { ZE( measureT , mFoo ) ; stqr_mColShear2                   >> mFoo ; } if( !bEmpty ) stqr_mColShear2                   << (measureT) 3.0 ;
    while( stqr_mColShear1_D           ) { ZE( measureT , mFoo ) ; stqr_mColShear1_D                 >> mFoo ; } if( !bEmpty ) stqr_mColShear1_D                 << (measureT) PI / 2 ;
    while( stqr_mColShear1_C           ) { ZE( measureT , mFoo ) ; stqr_mColShear1_C                 >> mFoo ; } if( !bEmpty ) stqr_mColShear1_C                 << (measureT) 1.0    ;
    while( stqr_mColShear1_B           ) { ZE( measureT , mFoo ) ; stqr_mColShear1_B                 >> mFoo ; } if( !bEmpty ) stqr_mColShear1_B                 << (measureT) PI / 2 ;
    while( stqr_mColShear1_A           ) { ZE( measureT , mFoo ) ; stqr_mColShear1_A                 >> mFoo ; } if( !bEmpty ) stqr_mColShear1_A                 << (measureT) 1.0    ;
    while( stqr_mColShear1             ) { ZE( measureT , mFoo ) ; stqr_mColShear1                   >> mFoo ; } if( !bEmpty ) stqr_mColShear1                   << (measureT)-1.0 ;
    while( stqr_mRowScale_D            ) { ZE( measureT , mFoo ) ; stqr_mRowScale_D                  >> mFoo ; } if( !bEmpty ) stqr_mRowScale_D                  << (measureT) PI / 2 ;
    while( stqr_mRowScale_C            ) { ZE( measureT , mFoo ) ; stqr_mRowScale_C                  >> mFoo ; } if( !bEmpty ) stqr_mRowScale_C                  << (measureT) 1.0    ;
    while( stqr_mRowScale_B            ) { ZE( measureT , mFoo ) ; stqr_mRowScale_B                  >> mFoo ; } if( !bEmpty ) stqr_mRowScale_B                  << (measureT) PI / 2 ;
    while( stqr_mRowScale_A            ) { ZE( measureT , mFoo ) ; stqr_mRowScale_A                  >> mFoo ; } if( !bEmpty ) stqr_mRowScale_A                  << (measureT) 1.0    ;
    while( stqr_mRowScale              ) { ZE( measureT , mFoo ) ; stqr_mRowScale                    >> mFoo ; } if( !bEmpty ) stqr_mRowScale                    << (measureT)64.0f ;
    while( stqr_mColScale_D            ) { ZE( measureT , mFoo ) ; stqr_mColScale_D                  >> mFoo ; } if( !bEmpty ) stqr_mColScale_D                  << (measureT) PI / 2 ;
    while( stqr_mColScale_C            ) { ZE( measureT , mFoo ) ; stqr_mColScale_C                  >> mFoo ; } if( !bEmpty ) stqr_mColScale_C                  << (measureT) 1.0    ;
    while( stqr_mColScale_B            ) { ZE( measureT , mFoo ) ; stqr_mColScale_B                  >> mFoo ; } if( !bEmpty ) stqr_mColScale_B                  << (measureT) PI / 2 ;
    while( stqr_mColScale_A            ) { ZE( measureT , mFoo ) ; stqr_mColScale_A                  >> mFoo ; } if( !bEmpty ) stqr_mColScale_A                  << (measureT) 1.0    ;
    while( stqr_mColScale              ) { ZE( measureT , mFoo ) ; stqr_mColScale                    >> mFoo ; } if( !bEmpty ) stqr_mColScale                    << (measureT)32.0f ;
    while( stqr_mMirrorAngle_D         ) { ZE( measureT , mFoo ) ; stqr_mMirrorAngle_D               >> mFoo ; } if( !bEmpty ) stqr_mMirrorAngle_D               << (measureT) PI / 2 ;
    while( stqr_mMirrorAngle_C         ) { ZE( measureT , mFoo ) ; stqr_mMirrorAngle_C               >> mFoo ; } if( !bEmpty ) stqr_mMirrorAngle_C               << (measureT) 1.0    ;
    while( stqr_mMirrorAngle_B         ) { ZE( measureT , mFoo ) ; stqr_mMirrorAngle_B               >> mFoo ; } if( !bEmpty ) stqr_mMirrorAngle_B               << (measureT) PI / 2 ;
    while( stqr_mMirrorAngle_A         ) { ZE( measureT , mFoo ) ; stqr_mMirrorAngle_A               >> mFoo ; } if( !bEmpty ) stqr_mMirrorAngle_A               << (measureT) 1.0    ;
    while( stqr_mSinMirrorAngle        ) { ZE( measureT , mFoo ) ; stqr_mSinMirrorAngle              >> mFoo ; } if( !bEmpty ) stqr_mSinMirrorAngle              << (measureT) 1.0 ;
    while( stqr_mCosMirrorAngle        ) { ZE( measureT , mFoo ) ; stqr_mCosMirrorAngle              >> mFoo ; } if( !bEmpty ) stqr_mCosMirrorAngle              << (measureT) 0.0 ;
    while( stqr_m01RowMirrorPoint_D    ) { ZE( measureT , mFoo ) ; stqr_m01RowMirrorPoint_D          >> mFoo ; } if( !bEmpty ) stqr_m01RowMirrorPoint_D          << (measureT) PI / 2 ;
    while( stqr_m01RowMirrorPoint_C    ) { ZE( measureT , mFoo ) ; stqr_m01RowMirrorPoint_C          >> mFoo ; } if( !bEmpty ) stqr_m01RowMirrorPoint_C          << (measureT) 1.0    ;
    while( stqr_m01RowMirrorPoint_B    ) { ZE( measureT , mFoo ) ; stqr_m01RowMirrorPoint_B          >> mFoo ; } if( !bEmpty ) stqr_m01RowMirrorPoint_B          << (measureT) PI / 2 ;
    while( stqr_m01RowMirrorPoint_A    ) { ZE( measureT , mFoo ) ; stqr_m01RowMirrorPoint_A          >> mFoo ; } if( !bEmpty ) stqr_m01RowMirrorPoint_A          << (measureT) 1.0    ;
    while( stqr_m01RowMirrorPoint      ) { ZE( measureT , mFoo ) ; stqr_m01RowMirrorPoint            >> mFoo ; } if( !bEmpty ) stqr_m01RowMirrorPoint            << (measureT) 0.5 ;
    while( stqr_m01ColMirrorPoint_D    ) { ZE( measureT , mFoo ) ; stqr_m01ColMirrorPoint_D          >> mFoo ; } if( !bEmpty ) stqr_m01ColMirrorPoint_D          << (measureT) PI / 2 ;
    while( stqr_m01ColMirrorPoint_C    ) { ZE( measureT , mFoo ) ; stqr_m01ColMirrorPoint_C          >> mFoo ; } if( !bEmpty ) stqr_m01ColMirrorPoint_C          << (measureT) 1.0    ;
    while( stqr_m01ColMirrorPoint_B    ) { ZE( measureT , mFoo ) ; stqr_m01ColMirrorPoint_B          >> mFoo ; } if( !bEmpty ) stqr_m01ColMirrorPoint_B          << (measureT) PI / 2 ;
    while( stqr_m01ColMirrorPoint_A    ) { ZE( measureT , mFoo ) ; stqr_m01ColMirrorPoint_A          >> mFoo ; } if( !bEmpty ) stqr_m01ColMirrorPoint_A          << (measureT) 1.0    ;
    while( stqr_m01ColMirrorPoint      ) { ZE( measureT , mFoo ) ; stqr_m01ColMirrorPoint            >> mFoo ; } if( !bEmpty ) stqr_m01ColMirrorPoint            << (measureT) 0.5 ;
    while( stqr_mHotAngle_D            ) { ZE( measureT , mFoo ) ; stqr_mHotAngle_D                  >> mFoo ; } if( !bEmpty ) stqr_mHotAngle_D                  << (measureT) PI / 2 ;
    while( stqr_mHotAngle_C            ) { ZE( measureT , mFoo ) ; stqr_mHotAngle_C                  >> mFoo ; } if( !bEmpty ) stqr_mHotAngle_C                  << (measureT) 1.0    ;
    while( stqr_mHotAngle_B            ) { ZE( measureT , mFoo ) ; stqr_mHotAngle_B                  >> mFoo ; } if( !bEmpty ) stqr_mHotAngle_B                  << (measureT) PI / 2 ;
    while( stqr_mHotAngle_A            ) { ZE( measureT , mFoo ) ; stqr_mHotAngle_A                  >> mFoo ; } if( !bEmpty ) stqr_mHotAngle_A                  << (measureT) 1.0    ;
    while( stqr_mSinHotAngle           ) { ZE( measureT , mFoo ) ; stqr_mSinHotAngle                 >> mFoo ; } if( !bEmpty ) stqr_mSinHotAngle                 << (measureT) 0.0 ;
    while( stqr_mCosHotAngle           ) { ZE( measureT , mFoo ) ; stqr_mCosHotAngle                 >> mFoo ; } if( !bEmpty ) stqr_mCosHotAngle                 << (measureT) 1.0 ;
    while( stqr_m01RowHotPoint_D       ) { ZE( measureT , mFoo ) ; stqr_m01RowHotPoint_D             >> mFoo ; } if( !bEmpty ) stqr_m01RowHotPoint_D             << (measureT) PI / 2 ;
    while( stqr_m01RowHotPoint_C       ) { ZE( measureT , mFoo ) ; stqr_m01RowHotPoint_C             >> mFoo ; } if( !bEmpty ) stqr_m01RowHotPoint_C             << (measureT) 1.0    ;
    while( stqr_m01RowHotPoint_B       ) { ZE( measureT , mFoo ) ; stqr_m01RowHotPoint_B             >> mFoo ; } if( !bEmpty ) stqr_m01RowHotPoint_B             << (measureT) PI / 2 ;
    while( stqr_m01RowHotPoint_A       ) { ZE( measureT , mFoo ) ; stqr_m01RowHotPoint_A             >> mFoo ; } if( !bEmpty ) stqr_m01RowHotPoint_A             << (measureT) 1.0    ;
    while( stqr_m01RowHotPoint         ) { ZE( measureT , mFoo ) ; stqr_m01RowHotPoint               >> mFoo ; } if( !bEmpty ) stqr_m01RowHotPoint               << (measureT) 0.5 ;
    while( stqr_m01ColHotPoint_D       ) { ZE( measureT , mFoo ) ; stqr_m01ColHotPoint_D             >> mFoo ; } if( !bEmpty ) stqr_m01ColHotPoint_D             << (measureT) PI / 2 ;
    while( stqr_m01ColHotPoint_C       ) { ZE( measureT , mFoo ) ; stqr_m01ColHotPoint_C             >> mFoo ; } if( !bEmpty ) stqr_m01ColHotPoint_C             << (measureT) 1.0    ;
    while( stqr_m01ColHotPoint_B       ) { ZE( measureT , mFoo ) ; stqr_m01ColHotPoint_B             >> mFoo ; } if( !bEmpty ) stqr_m01ColHotPoint_B             << (measureT) PI / 2 ;
    while( stqr_m01ColHotPoint_A       ) { ZE( measureT , mFoo ) ; stqr_m01ColHotPoint_A             >> mFoo ; } if( !bEmpty ) stqr_m01ColHotPoint_A             << (measureT) 1.0    ;
    while( stqr_m01ColHotPoint         ) { ZE( measureT , mFoo ) ; stqr_m01ColHotPoint               >> mFoo ; } if( !bEmpty ) stqr_m01ColHotPoint               << (measureT) 0.5 ;
    while( stqr_m01FloatUp_D           ) { ZE( measureT , mFoo ) ; stqr_m01FloatUp_D                 >> mFoo ; } if( !bEmpty ) stqr_m01FloatUp_D                 << (measureT) PI / 2 ;
    while( stqr_m01FloatUp_C           ) { ZE( measureT , mFoo ) ; stqr_m01FloatUp_C                 >> mFoo ; } if( !bEmpty ) stqr_m01FloatUp_C                 << (measureT) 1.0    ;
    while( stqr_m01FloatUp_B           ) { ZE( measureT , mFoo ) ; stqr_m01FloatUp_B                 >> mFoo ; } if( !bEmpty ) stqr_m01FloatUp_B                 << (measureT) PI / 2 ;
    while( stqr_m01FloatUp_A           ) { ZE( measureT , mFoo ) ; stqr_m01FloatUp_A                 >> mFoo ; } if( !bEmpty ) stqr_m01FloatUp_A                 << (measureT) 1.0    ;
    while( stqr_m01FloatUp             ) { ZE( measureT , mFoo ) ; stqr_m01FloatUp                   >> mFoo ; } if( !bEmpty ) stqr_m01FloatUp                   << (measureT) 0.5 ;
    while( stqr_m01FloatRight_D        ) { ZE( measureT , mFoo ) ; stqr_m01FloatRight_D              >> mFoo ; } if( !bEmpty ) stqr_m01FloatRight_D              << (measureT) PI / 2 ;
    while( stqr_m01FloatRight_C        ) { ZE( measureT , mFoo ) ; stqr_m01FloatRight_C              >> mFoo ; } if( !bEmpty ) stqr_m01FloatRight_C              << (measureT) 1.0    ;
    while( stqr_m01FloatRight_B        ) { ZE( measureT , mFoo ) ; stqr_m01FloatRight_B              >> mFoo ; } if( !bEmpty ) stqr_m01FloatRight_B              << (measureT) PI / 2 ;
    while( stqr_m01FloatRight_A        ) { ZE( measureT , mFoo ) ; stqr_m01FloatRight_A              >> mFoo ; } if( !bEmpty ) stqr_m01FloatRight_A              << (measureT) 1.0    ;
    while( stqr_m01FloatRight          ) { ZE( measureT , mFoo ) ; stqr_m01FloatRight                >> mFoo ; } if( !bEmpty ) stqr_m01FloatRight                << (measureT) 0.5 ;

    }
        }
            c3c.c2 = 0 ;
            BOSpOOP
            BOS( WHATgbo , BOSoK , DeleteObject( HPEN( c3c.c2 ) ) )
            if( oshOldVerify != c3c.c2 ) { BLAMMO ; } //U::O: COMMENT THIS OUT IN PRODUCTION
            countT oshOldVerify = tinP.brcRaw ;
            BOSdOnOTtEST( WHATgbo , SelectObject( (HDC)pulp.pHndDrawBitmap->osF( ifcIDtYPEhANDLE_DRAWpRIVATE ) , HPEN( c3c.c1 ) ) )

            //thirdC::winSelectObjectIF( tinP , *pulp.pHndDrawBitmap , const handleC& hToolP , hToolOld ) ;
            //hTool.osF( tinP , ifcIDtYPEhANDLE_DRAWINGtOOL , HPEN( c3c.c1 ) ) ;
            //handleC hTool( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_DRAWINGtOOL ) ;
            //handleC hToolOld( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_DRAWINGtOOL ) ;
            //U::MIGRATE ALL BASE OS CODE TO thirdC, BUT DO IT IN A WAY THAT PRESERVES SPEEDINESS
                
            winPulpOldC& pulp = *(winPulpOldC*)this ;
        {
        if( !bNoDraw )

        stqr_color >> pbc ;
        byteT* pbc = (byteT*)&c3c ;
        count3S c3c ;
    {
    while( stqr_color )
    const boolT bNoDraw = F(flagsP) & flPAPERrESET_NOdRAW ;
    const boolT bEmpty  = F(flagsP) & flPAPERrESET_LEAVEeMPTY ;

    _INoLD_
{
/*1*/voidT winPulpOldC::purgeF( tinS& tinP , etherC& etherP , const flagsT flagsP )/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


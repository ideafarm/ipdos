
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return cReplacements ;

    _OUT_

    }
        else if( bPool ) delF( tinP , psttOut ) ;
        if( !POOP      ) psttNewBigP = psttOut ; // psttOut COULD BE ELIMINATED ; IT IS USED ONLY TO MAKE THIS CODE MORE READABLE

        if( !bReadOnly ) delF( tinP , *(strokeS**)&psttIn ) ;

        psttOut->idAdam += scDelta ;

        }
            else { strSubstringF( tinP , psttOut , idf , countTC() , psttIn ) ; ___( psttOut ) ; }
            }
                while( csttCopy -- ) *( pstto ++ ) = *( pstti ++ ) ;
                countT csttCopy = psttIn->idAdam - idf + 1 ;
            {
            if( bPatch )
        {
        if( idf && psttIn->idAdam >= idf )  // APPEND THE SUFFIX (WHAT REMAINS AFTER THE LATH HIT)
        idf = idfPrefix ;

        }
            }
                else       idHit = STRiDf_OR_sTRiDaNYf( tinP , 0 , flSTRmATCH_null , idf , sttq , psttOldSmallP , psttIn ) ;
                if( !idf ) idHit = 0 ;
                idfPrefix = idf ;
                // MOVE THE HIT CURSOR TO THE NEXT HIT
    
                else { strFuseF( tinP , psttOut , psttNewSmallP ) ; ___( psttOut ) ; }
                }
                    scDelta += csttns - csttMatched ;
                    pstti += csttMatched ; // CSTTmATCHED
                    countT csttMatched = ( idf ? idf : psttIn->idAdam + 1 ) - idHit ;

                    while( csttCopy -- ) *( pstto ++ ) = *( psttis ++ ) ;
                    countT csttCopy = psttNewSmallP->idAdam ;
                    const strokeS* psttis = psttNewSmallP + CSpREFIX ;
                {
                if( bPatch )
                cReplacements ++ ;
                // APPEND THE REPLACEMENT
    
                }
                    idf = idfSuffix ;
    
                    else { strSubstringF( tinP , psttOut , idf , idl , psttIn ) ; ___( psttOut ) ; }
                    }
                        else while( csttCopy -- ) *( pstto ++ ) = *( pstti ++ ) ;
                        }
                            pstti += csttCopy ;
                            pstto += csttCopy ; // A PREFIX AT THE BEGINNING DOES NOT NEED TO BE MOVED
                        {
                        if( idf == 1 )
                        countT csttCopy = idl - idf + 1 ;
                    {
                    if( bPatch )
    
                    countT idl = idHit - 1 ;
                    idf = idfPrefix ;
                    countT idfSuffix = idf ;
                {
                if( idHit > idfPrefix )
                // APPEND THE PREFIX
            {
            while( idHit )
            countT idHit = STRiDf_OR_sTRiDaNYf( tinP , 0 , flSTRmATCH_null , idf , sttq , psttOldSmallP , psttIn ) ;
            if( F(flagsP) & flSTRrEPLACE_IGNOREqUOTES ) sttq.idCaste = sc_IGNOREqUOTES ;
            strokeS sttq ;
        {
        countT idfPrefix = idf ;
        countT idf = 1 ;
        ZE( sCountT , scDelta ) ;

              strokeS* pstto = bPatch ? psttOut + CSpREFIX : 0 ;
        const strokeS* pstti = bPatch ? psttIn  + CSpREFIX : 0 ;
        const boolT bPatch = psttOut == psttIn ;
    {
    if( !POOP )
    ZE( countT , cReplacements ) ;

    }
        __Z( psttOut ) ;

        if( psttOut == psttIn ) bReadOnly = 1 ;
    
        }
            bPool = 1 ;
            POSTPONEtEST( psttOut ) ;
            strMakeF( tinP , psttOut , 0 , psttIn->idAdam + psttIn[ 2 ].idAdam + scGrow + csttExtraP ) ; // CALLER MUST TAG ___( psttOut ) ;
        {
        if( !psttOut )

        }
            if( scGrow && psttOut ) psttOut = 0 ;

            if( scGrow < 0 ) scGrow = 0 ;
            scGrow = cHits * csttns - csttHit ;

            }
                }
                    ;
                        : 0
                        ? STRiDf_OR_sTRiDaNYf( tinP , 0 , flSTRmATCH_null , idf , sttq , psttOldSmallP , psttIn )
                    idHit = idf

                    csttHit += ( idf ? idf : psttIn->idAdam + 1 ) - idHit ;
                    cHits ++ ;
                {
                while( idHit )
                countT idHit = STRiDf_OR_sTRiDaNYf( tinP , 0 , flSTRmATCH_null , idf , sttq , psttOldSmallP , psttIn ) ;

                if( F(flagsP) & flSTRrEPLACE_IGNOREqUOTES ) sttq.idCaste = sc_IGNOREqUOTES ;
                strokeS sttq ;
                countT idf = 1 ;
            {
            ZE( countT , csttHit ) ;
            ZE( countT , cHits ) ;
        {
        if( !psttOut || psttOut == psttIn )
        ZE( sCountT , scGrow ) ;
    {
    if( !POOP )
    ZE( boolT , bPool ) ;
    const countT csttns = psttNewSmallP->idAdam ;

    // 
    //  psttOut == psttIn : DECIDE WHETHER TO REPLACE IN PLACE OR TO ALLOCATE FROM POOL
    // 
    //  psttOut != psttIn : PREALLOCATED
    // 
    // !psttOut           : ALLOCATE FROM POOL
    // 
    // ALL CASES:

    }
        __( !psttOut[ 2 ].idAdam ) ;
        __( psttOut->idAdam ) ;
    {
    if( psttOut && psttOut != psttIn )  // IF PREALLOCATED THEN MUST BE NULL LENGTH AND MUST HAVE NONZE CAPACITY (I WILL FAIL LATER IF CAPACITY IS INSUFFICIENT)

    countT         save_poop   = POOP ;
    const strokeS* save_psttIn = psttIn ;
    //U:: TO FIND A BUG

    __Z( psttIn ) ;

                                             psttOldBigP = psttNewBigP = 0 ;  // FOR CLARITY ; I WILL NOT REFER TO THESE PARAMETERS UNTIL I AM READY TO SET psttNewBigP
          strokeS* psttOut =                               psttNewBigP ;
    const strokeS* psttIn  =   psttOldBigP ? psttOldBigP : psttNewBigP ;
    boolT bReadOnly  = !!psttOldBigP ;

    _INoLD_

    }
        if( POOP ) return 0 ;
        FV( flSTRrEPLACE , flagsP ) ;
        __Z( psttNewSmallP ) ;
        if( POOP ) return 0 ;
    {
    IFbEcAREFUL
    SCOOP
{
/*1*//*common code for strReplaceF, strReplaceAnyF*//*1*/
/*H*/
/**/
*/
 flagsP
 csttExtraP
 psttNewSmallP
 psttOldSmallP
    if psttNewSmallP is length 1 then the replace will be done in place on psttNewBigP
   if any
    if psttNewSmallP is not longer than psttOldSmallP then the replace will be done in place on psttNewBigP
   if exact
  if 0 then psttNewBigP will be used as the source string
 psttOldBigP
  else must be large enough to hold the result
  if 0 then will be allocated
 psttNewBigP
 tinP
parameters
it is illegal to refer to this symbol in the definition of an adam
\<A HREF=\"5.0050004.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


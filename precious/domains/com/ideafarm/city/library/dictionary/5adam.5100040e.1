
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST
etThread.osProcessIdPhaseAdamF( tinP , ifcIDpHASEhANDOFFoLD_SHUTTINGdOWN ) ;
etThread.delF( tinP , postReply ) ;

etThread.ifcDrivenServerF( tinP , i1 , i2 ) ;
serverInfo2S i2( 0x50 , TF2(thirdC::third_idAdamRootI_IF( tinP ),flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES) , 0 , (countT)&c8p , 0 , 1 , sizeof( stateS ) , translateStateF ) ;
serverInfo1S i1( &pbdVarying , b_pbdVarying , bHandedOff , sgnIdPortReplaced , tmcF , countTC() , ether ) ;

c8p.c2 = (countT)&b_pbdVarying ;
c8p.c1 = (countT)&pbdVarying ;
count8S c8p ;

ZE( boolT , bHandedOff ) ;
batonC b_pbdVarying( tinP , TAG( TAGiDnULL ) ) ;
ZE( byteT* , pbdVarying ) ;
signC sgnIdPortReplaced( tinP , TAG( TAGiDnULL ) ) ;

TODO

DONEdRIVENsERVER( tmcF )
}
    pso->readF( tinP , posti , sizeof posti , flSOCKETcrEAD_STILLhUNGRYiSoK ) ;
    pso->writeF( tinP , postReply , costReply ) ;

    }
        b_pbdVarying.ungrabF( tinP ) ;
        }
            etThread.memCopyF( tinP , postReply + offFieldB , ostox , ostox.costF() ) ;
            etThread.memCopyF( tinP , postReply + offFieldA , ostox , ostox.costF() ) ;
            OStEXTV( ostox , "- n/a --" )
        {
        else
        }
            etThread.memCopyF( tinP , postReply + offFieldB , t_cHamburgers , t_cHamburgers.csF( tinP ) ) ;
            etThread.memCopyF( tinP , postReply + offFieldA , t_idMe        , t_idMe.csF( tinP ) ) ;
            TN( t_cHamburgers , "" ) ; t_cHamburgers = TF3(++state.cHamburgers,0,8) ;
            TN( t_idMe        , "" ) ; t_idMe        = TF3(state.idMe,0,8) ;
            stateS& state = *(stateS*)pbdVarying ;
        {
        if( pbdVarying )
        b_pbdVarying.grabF( tinP , TAG( TAGiDnULL ) ) ;
    {
    if( postReply )

    if( !postReply ) setupF( tinP , etThread ) ;

    batonC& b_pbdVarying = *(batonC*)c8p.c2 ;
    byteT*& pbdVarying   = *(byteT**)c8p.c1 ;
    count8S& c8p = *(count8S*)cArg ;
{
if( cArg )
TASKdRIVENsERVER( tmcF )

}
    offFieldB = etThread.strIdF( tinP , idf , sttq , T("!b345678") , tReply ) ; if( offFieldB ) offFieldB -- ;
    offFieldA = etThread.strIdF( tinP , idf , sttq , T("!a345678") , tReply ) ; if( offFieldA ) offFieldA -- ;
    strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
    countT idf = 1 ;

    costReply = etThread.strMakeF( tinP , postReply , tReply ) ; ___( postReply ) ;
    TN( tReply , "" ) ; tReply = tHead1+tHead2+tHead3+tBody ;

    ) ;
        "\r\n"
        "\r\n"
    TN( tHead3 ,

    TN( tHead2 , "" ) ; tHead2 = TF4(tBody.csF(tinP),flFORMAT_FOREIGN,0,0xa) ;

    ) ;
        "Content-Length: "
        "Content-Type: text/html\r\n"
        "HTTP/1.1 300 Ok\r\n"
    TN( tHead1 ,
    //U:

    ) ;
        "Content-Length: "
        "Content-Type: text/html\r\n"
        "Location: http://talentmarket.monster.com/viewauction.asp?auctionid=77451&view=1\r\n"
        //"Location: http://talentmarket.monster.com/viewauction.asp?auctionid=75832&view=1\r\n"
        "HTTP/1.1 302 Temporary Redirection\r\n"
    TN( tHead1hide , //U:

    ) ;
        "click <A HREF=\"http://talentmarket.monster.com/viewauction.asp?auctionid=75832&view=1\r\n\">here</A>.\r\n"
        "For information on the IdeaFarm " "(tm) Demonstration and Early Application (IDEA) Program,\r\n"
        "cHamburgers = !b345678\r\n\r\n"
        "idMe        = !a345678\r\n"
        "<PRE>"
    TN( tBody ,
{
voidT setupF( tinS& tinP , etherC& etThread )

static osTextT posti[ CBpOSTI ] ;
countT offFieldB ;
countT offFieldA ;
countT costReply ;
byteT* postReply ; // THESE GLOBALS ARE USED FOR SPEED

TRANSLATEsTATEdRIVENsERVER_END
    state.idMe ++ ;
TRANSLATEsTATEdRIVENsERVER_MIDDLE
    case 1 : { state.idMe        = stateOther.idMe        ; }
    case 2 : { state.cHamburgers = stateOther.cHamburgers ; }
TRANSLATEsTATEdRIVENsERVER_BEGIN( stateS , 2 )

;
}
    countT cHamburgers ;
    countT idMe ;
    countT idVersion ;
{
struct stateS

#define CBpOSTI 0x1000
//ASSUMPTION: CBpOSTI IS LARGER THAN ANY POSSIBLE INCOMING HTTP REQUEST

/*1*/WAKEhIDE( "city.driven.server.port05" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


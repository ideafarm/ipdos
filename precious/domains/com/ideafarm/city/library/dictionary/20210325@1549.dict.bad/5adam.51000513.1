
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


//VISIBLE

REST

sgnDone_tmServerF.waitF( tinP ) ;
}
    sock.writeF( tinP , soulOut ) ;
    
    soulOut << (countT)0x87654321 ;
    soulC soulOut( tinP , TAG( TAGiDnULL ) ) ;
    
    sock.connectF( tinP , idPort ) ;
    socketC sock( tinP , ether , TAG( TAGiDnULL ) ) ;
{

sgnReady.waitF( tinP ) ;
etThread.osThreadF( tinP , countTC() , tmServerF , &sgnDone_tmServerF , flTHREADlAUNCH_null , 0 , (countT)&idPort , (countT)&sgnReady ) ;
ZE( countT , idPort ) ;
signC sgnDone_tmServerF(  tinP , TAG( TAGiDnULL ) ) ;
signC sgnReady(  tinP , TAG( TAGiDnULL ) ) ;

TODO

DONE( tmServerF )
}
    DEL( pso ) ;
    }
        etThread.strokeF( tinP , T("value received over secure socket: ")+TF1(value)+T("\r\n") ) ;
        soulIn >> value ;
        ZE( countT , value ) ;

        pso->readF( tinP , soulIn ) ;
        soulC soulIn( tinP , TAG( TAGiDnULL ) ) ;
    {
    if( pso )
    sock.acceptF( tinP , pso , idPortPeer , nnPeer , countTC() ) ; ___( pso ) ;
    ZE( countT , idPortPeer ) ;
    nicNameC nnPeer ;
    ZE( socketC* , pso ) ;

    sgnReadyP.giveF( tinP ) ;
    sock.listenF( tinP ) ;
    idPortP = sock.bindF( tinP ) ;
    socketC sock( tinP , ether , TAG( TAGiDnULL ) ) ;

    signC&  sgnReadyP =  *(signC*)pTaskP->c2 ;
    countT& idPortP   = *(countT*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 )
TASK( tmServerF )

/*1*/WAKEhIDE( "example.simplest.func.1070028.socketC.writeF" )/*1*/
/**/
*/
   then the recipient presents the codes received over IP to the same dadC object to obtain the important data
   the recipient presents the CDR data to its dadC object to obtain the garbage data (which he discards)
   the important data is transmitted via IP
   the CDR is delivered by secure courier to the recipient
   then that momC object processes the remaining (important) data
   the CDR disk is written by the sender's momC object from random garbage data
  for example, fill a CDR disk with encoded garbage data and use that as the beginning of the code stream
 combine IP with non-IP transmission channels to prevent an eavesdropper from capturing the whole stream
 use momC and dadC objects to create an encoded stream
for high security, application code can do
the default security that i demonstrate is only a "medium" level security for this reason
an eavesdropper who can reconstruct the entire data stream can easily decode it
an ifc connection is only secure if it lives long enough to prevent an eavesdropper from capturing all IP packets
this demonstration is not really secure because the connection is ephemeral
i demonstrate secure communication over sockets
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


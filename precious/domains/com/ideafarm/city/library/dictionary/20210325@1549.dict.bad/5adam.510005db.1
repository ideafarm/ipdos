
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//

                            
REST

}
    etThread.delF( tinP , pstt1m ) ;
    }
        }
            etThread.delF( tinP , pstt2m ) ;
            }
                }
                    }
                        }
                            *info.pStkEmailPenpalExactOrExactOr << psttv ; psttv = 0 ;
                            psttv = psttOldC( tinP , etThread , tEmailPenpalExactOr ) ; ___( psttv ) ;
                        {
                        if( tEmailPenpalExactOr.csF( tinP ) )

                        }
                            *info.pStkRecipeExactOr << psttv ; psttv = 0 ;
                            psttv = psttOldC( tinP , etThread , tRecipe ) ; ___( psttv ) ;
                        {
                        if( tRecipe.csF( tinP ) )

                        }
                            *info.pStkAutoresponseExactOr << psttv ; psttv = 0 ;
                            psttv = psttOldC( tinP , etThread , tAutoresponse ) ; ___( psttv ) ;
                        {
                        if( tAutoresponse.csF( tinP ) )

                        }
                            *info.pStkEmailRelay << psttv ; psttv = 0 ;
                            strokeS* psttv = psttOldC( tinP , etThread , tEmailRelay ) ; ___( psttv ) ;
                        {
                        if( tEmailRelay.csF( tinP ) )

                        subaccountS info( tinP , etThread , 1 , idSub , tTitle , tNameIn , tNameOut , fliSUBACCOUNTmODE_OWNERcONFIRMED ) ;
                    {
                    //SET SUBACCOUNT

                    if( !tNameOut.csF( tinP ) ) tNameOut = T("no name") ;
                    if( !tNameIn.csF( tinP ) ) tNameIn = T("no name") ;
                    if( !tTitle.csF( tinP ) ) tTitle = T("no title") ;
                
                    CONoUTrAW( T("penpal      : \"")+tEmailPenpalExactOr+T("\"\r\n") ) ;
                    CONoUTrAW( T("autoresponse: \"")+tAutoresponse+T("\"\r\n") ) ;
                    CONoUTrAW( T("relay       : \"")+tEmailRelay+T("\"\r\n") ) ;
                    CONoUTrAW( T("nameout     : \"")+tNameOut+T("\"\r\n") ) ;
                    CONoUTrAW( T("namein      : \"")+tNameIn+T("\"\r\n") ) ;
                    CONoUTrAW( T("recipe      : \"")+tRecipe+T("\"\r\n") ) ;
                    CONoUTrAW( T("title       : \"")+tTitle+T("\"\r\n") ) ;
                    CONoUTrAW( T("owner       : \"")+tEmailOwner+T("\"\r\n") ) ;
                    CONoUTrAW( T("subaccount  : \"")+TF4(idSub,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES|flFORMAT_NObASE,0,36)+T(".1.doubleblind.1@ideafarm.com\"\r\n") ) ;
                    CONoUTrAW( T("-----------------------------------------------------------------------------------------------------\r\n") ) ;
                {
                if( tEmailOwner.csF( tinP ) )

                etThread.delF( tinP , pstt3m ) ;
                }
                    }
                        etThread.delF( tinP , psttw ) ;
                        etThread.delF( tinP , posti ) ;
                        }
                            else if( !etThread.strCompareF( tinP , psttw , T("txt.autoresponse.txt") ) ) tAutoresponse = T(posti) ;
                            else if( !etThread.strCompareF( tinP , psttw , T("txt.email.penpal.txt") ) ) tEmailPenpalExactOr  = T(posti) ;
                            else if( !etThread.strCompareF( tinP , psttw , T("txt.recipe.txt"      ) ) ) tRecipe       = T(posti) ;
                            else if( !etThread.strCompareF( tinP , psttw , T("txt.email.relay.txt" ) ) ) tEmailRelay   = T(posti) ;
                            else if( !etThread.strCompareF( tinP , psttw , T("txt.name.in.txt"     ) ) ) tNameIn       = T(posti) ;
                            else if( !etThread.strCompareF( tinP , psttw , T("txt.name.out.txt"    ) ) ) tNameOut      = T(posti) ;
                                 if( !etThread.strCompareF( tinP , psttw , T("txt.title.txt"       ) ) ) tTitle        = T(posti) ;
                        {
                        else if( posti && costi )
                        if( POOP ) { POOPR ; }
                        tinP.pEtScratch->boxGetShadowF( tinP , posti , costi , psttc3 , 1 ) ; ___( posti ) ;
                        ZE( countT   , costi ) ;
                        ZE( osTextT* , posti ) ;

                        //CONoUTrAW( T("name: \"")+T(psttw)+T("\"\r\n") ) ;
                        etThread.strWordF( tinP , psttw , psttc3 , sttq , S1C('/') , - 1 ) ; ___( psttw ) ;
                        strokeS sttq( 0 , sc_IGNOREqUOTES ) ;
                        ZE( strokeS* , psttw ) ;
                    {
                    if( psttc3[ CSpREFIX + psttc3->idAdam - 1 ].idAdam != '/' )
                {
                FORsTRINGSiN3( pstt3m )
                etThread.boxMenuF( tinP , soul , T(psttc2)+T("*") , 0 , TUCK ) ; ___( pstt3m ) ;
                ZE( strokeS* , pstt3m ) ;

                TN( tEmailPenpalExactOr , "" ) ;
                TN( tAutoresponse , "" ) ;
                TN( tEmailRelay , "" ) ;
                TN( tNameOut , "" ) ;
                TN( tNameIn , "" ) ;
                TN( tRecipe , "" ) ;
                TN( tTitle , "" ) ;

                }
                    etThread.delF( tinP , psttw ) ;
                    idSub = etThread.strDigitsToSCountF( tinP , psttw , 36 ) ;    
                    etThread.strWordF( tinP , psttw , psttc2 , sttq , S1C('/') , - 2 ) ; ___( psttw ) ;
                    strokeS sttq( 0 , sc_IGNOREqUOTES ) ;
                    ZE( strokeS* , psttw ) ;
                {
                ZE( countT , idSub ) ;
            {
            FORsTRINGSiN2( pstt2m )
            etThread.boxMenuF( tinP , soul , T(psttc1)+T("subaccounts/*") , 0 , TUCK ) ; ___( pstt2m ) ;
            ZE( strokeS* , pstt2m ) ;

            }
                __Z( bDone ) ;
                CONoUTrAW3( "[bDone]: " , bDone , "\r\n" ) ;
                sIn >> bDone ;
                ZE( boolT , bDone ) ;
            
                __( idFormat - 1 ) ;
                sIn >> idFormat ;
                ZE( countT , idFormat ) ;
            
                __( finger - FINGERnEG_LISTsERVERrEPLY ) ;
                sIn >> finger ;
                ZE( countT , finger ) ;
            
                sock.readF( tinP , sIn ) ;
                soulC sIn( tinP , TAG( TAGiDnULL ) ) ;
            
                sock.writeF( tinP , sOut ) ;
                sOut << (strokeS*)0 ; //psttPaypalProtectionEligibility ;
                sOut << (strokeS*)0 ; //psttPaypalPayerStatus ;
                sOut << (strokeS*)0 ; //psttPaypalPayerId ;
                sOut << (strokeS*)0 ; //psttPaypalPayerEmail ;
                sOut << (strokeS*)0 ; //psttCharset ;
                sOut << (strokeS*)0 ; //psttZipAt ;
                sOut << (strokeS*)0 ; //psttResidenceCountry ;
                sOut << (strokeS*)0 ; //psttLastName ;
                sOut << (strokeS*)0 ; //psttFirstName ;
                sOut << (strokeS*)0 ; //psttAddressStatus ;
                sOut << (strokeS*)0 ; //psttAddressCountry ;
                sOut << (strokeS*)0 ; //psttAddressZip ;
                sOut << (strokeS*)0 ; //psttAddressCountryCode ;
                sOut << (strokeS*)0 ; //psttAddressState ;
                sOut << (strokeS*)0 ; //psttAddressCity ;
                sOut << (strokeS*)0 ; //psttAddressStreet ;
                sOut << (strokeS*)0 ; //psttAddressName ;
                sOut << (countT)fliACCOUNTmODE_OWNERcONFIRMED ;
                sOut << idAccount ;
                sOut << (countT)ifcIDcMDlISTsERVERiDaCCOUNTdESCRIPTION_SETaCCOUNTdESCRIPTION ;
                sOut << (countT)1 ;
                sOut << (countT)FINGERnEG_LISTsERVERcMD ;
                soulC sOut( tinP , TAG( TAGiDnULL ) ) ;
            
                sock.connectF( tinP , homeS::homeIF().idPortListServerIdAccountDescription ) ;
                socketC sock( tinP , *tinP.pEtScratch , TAG( TAGiDnULL ) ) ;
            {
            //SET ACCOUNT

            }
                __( idAccountVerify - idAccount ) ;
                CONoUTrAW5( "[idAccount,idAccountVerify]: " , idAccount , " " , idAccountVerify , "\r\n" ) ;
                sIn >> idAccountVerify ;
            
                __( idFormat - 1 ) ;
                sIn >> idFormat ;
                ZE( countT , idFormat ) ;
            
                __( finger - FINGERnEG_LISTsERVERrEPLY ) ;
                sIn >> finger ;
                ZE( countT , finger ) ;
            
                sock.readF( tinP , sIn ) ;
                soulC sIn( tinP , TAG( TAGiDnULL ) ) ;
            
                sock.writeF( tinP , sOut ) ;
                sOut << (strokeS*)tEmailOwner ;
                sOut << (countT)ifcIDcMDlISTsERVEReMAILiDaCCOUNT_ASKiDaCCOUNTfROMeMAIL ;
                sOut << (countT)1 ;
                sOut << (countT)FINGERnEG_LISTsERVERcMD ;
                soulC sOut( tinP , TAG( TAGiDnULL ) ) ;
            
                sock.connectF( tinP , homeS::homeIF().idPortListServerEmailIdAccount ) ;
                socketC sock( tinP , *tinP.pEtScratch , TAG( TAGiDnULL ) ) ;
            {
            ZE( countT , idAccountVerify ) ;
        {
        if( tEmailOwner.csF( tinP ) )

        }
            etThread.delF( tinP , posti ) ;
            else if( posti && costi ) tEmailOwner = T(posti) ;
            if( POOP ) { POOPR ; }
            tinP.pEtScratch->boxGetShadowF( tinP , posti , costi , T(psttc1)+T("txt.email.owner.txt") , 1 ) ; ___( posti ) ;
            ZE( countT   , costi ) ;
            ZE( osTextT* , posti ) ;
        {
        TN( tEmailOwner , "" ) ;

        CONoUTrAW3( "idAccount: " , idAccount , "\r\n" ) ;
        }
            etThread.delF( tinP , psttw ) ;
            idAccount = etThread.strDigitsToSCountF( tinP , psttw , 36 ) ;    
            etThread.strWordF( tinP , psttw , psttc1 , sttq , S1C('/') , - 2 ) ; ___( psttw ) ;
            strokeS sttq( 0 , sc_IGNOREqUOTES ) ;
            ZE( strokeS* , psttw ) ;
        {
        ZE( countT , idAccount ) ;
    {
    FORsTRINGSiN1( pstt1m )
    etThread.boxMenuF( tinP , soul , T("///ideafarm/ephemeral/backed.up.daily/domains/com/ideafarm/ipdos/accounts/*") , 0 , TUCK ) ; ___( pstt1m ) ;
    ZE( strokeS* , pstt1m ) ;

    SCOOPS
{
IFsCRATCH

TODO

/*1*/WAKEsHOWtEXT( "tool.migrate.account.description" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//



//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return name ;

    }
        }
            name = pc->idName ;
            if( !( pc->flagsi & fliLISTINGc_MIXINlIST ) ) { BLAMMO ; }
        {
        if( pc )

        }
            pc = &APT( listC , pc->aptDad ) ;
            if( !( pc->flagsi & fliLISTINGc_MIXINlIST ) ) { BLAMMO ; }
        {
        while( pc && cSkip -- )
        listC* pc = &APT( listC , aptDad ) ;

        countT cSkip = ccName - idP - 1 ;

        }
            }
                pc = &APT( listC , pc->aptDad ) ;
                ccName ++ ;
                if( !( pc->flagsi & fliLISTINGc_MIXINlIST ) ) { BLAMMO ; }
            {
            while( pc )
            listC* pc = &APT( listC , aptDad ) ;
        {
        countT ccName = 1 ; // 1 IS TO COUNT MYSELF
    {
    else
    }
        }
            name = pc->idName ;
            if( !( pc->flagsi & fliLISTINGc_MIXINlIST ) ) { BLAMMO ; }
        {
        if( pc )

        }
            pc = &APT( listC , pc->aptDad ) ;
            if( !( pc->flagsi & fliLISTINGc_MIXINlIST ) ) { BLAMMO ; }
        {
        while( pc && cSkip -- )
        listC* pc = &APT( listC , aptDad ) ;

        countT cSkip = - idP - 1 ;
    {
    else if( idP < 0 )
    if( !idP ) name = idName ;
    ZE( countT , name ) ;

    if( !( flagsi & fliLISTINGc_MIXINlIST ) ) { BLAMMO ; }

    //O: _IO_
{
/*1*/countT listC::nameF( sCountT idP ) const/*1*/

// MINIMAL ERROR CHECKING, FOR SPEED

/**/
*/
  etc.
  -2: returns s2, the name of the list that contains the list that contains me (daddad)
  -1: returns s1, the name of the list that contains me (dad)
  1: returns n1, the name of the root list, which is always LISTnAME_ROOT
  0: returns me, my name
  can be any value
 idP
 tinP
parameters
the full name of a listC instance is a null terminated string of countT values of the form { LISTnAME_ROOT , n2 , n3 , ... , s3 , s2 , s1 , me , 0 }
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


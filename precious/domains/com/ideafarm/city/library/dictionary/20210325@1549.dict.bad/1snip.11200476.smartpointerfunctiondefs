
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


    classSPP##SP& classSPP##SP::operator =( const classSPP##VSP& vspP ) { gaspF() ; pv = (classP*)P(((const classSPP##SP*)&vspP)->pv) ; cryF() ; return *this ; }
    classSPP##SP& classSPP##SP::operator =( const classSPP##SP&   spP ) { gaspF() ; pv = (classP*)P(spP.pv)                           ; cryF() ; return *this ; } \
    classSPP##SP& classSPP##SP::operator =( classP* pvP               ) { gaspF() ; pv = (classP*)P(pvP)                              ; cryF() ; return *this ; } \
                                                                                                                                                    \
    }                                                                                                                                               \
        return (const classP*)P(pv) ;                                                                                                               \
        /*if( P(pv) && !thirdC::bCanAccessMemoryIF( (byteT*)P(pv) , cbTestP ) ) { BLAMMO ; }*/                                                      \
    {                                                                                                                                               \
    classSPP##SP::operator const classP*( voidT ) const                                                                                             \
                                                                                                                                                    \
    }                                                                                                                                               \
        return !P(pv) ? (count##bitsCRefP##T)0 : ((count##bitsCRefP##T*)P(pv))[ offCRefP ] ;                                                        \
        /*if( P(pv) && !thirdC::bCanAccessMemoryIF( (byteT*)P(pv) , cbTestP ) ) { BLAMMO ; }*/                                                      \
    {                                                                                                                                               \
    count##bitsCRefP##T classSPP##SP::cRefF( voidT ) const                                                                                          \
                                                                                                                                                    \
    classSPP##SP::classSPP##SP( const classSPP##VSP& vspP ) : pv( ((const classSPP##SP*)&vspP)->pv ) { if( !H(pv) ) cryF()  ; }                     \
    classSPP##SP::classSPP##SP( const classSPP##SP&  spP  ) : pv( spP.pv                           ) { if( !H(pv) ) cryF()  ; }                     \
    classSPP##SP::classSPP##SP( classP* pvP               ) : pv( pvP                              ) { if( !H(pv) ) cryF()  ; }                     \
    classSPP##SP::~classSPP##SP( voidT                    )                                          { if( !H(pv) ) gaspF() ; }                     \
                                                                                                                                                    \
    NEWdELcLASSb( classSPP##SP )                                                                                                                    \
                                                                                                                                                    \
    }                                                                                                                                               \
        }                                                                                                                                           \
            }                                                                                                                                       \
                if( vsp.pCBF ) (*vsp.pCBF)( thirdC::third_tinS_ref_IF() , (byteT*)this , ifcIDeVENTvsp_DT , cRefOld , cRefF() , vsp.cArg ) ;        \
                classSPP##VSP& vsp = *(classSPP##VSP*)this ;                                                                                        \
            {                                                                                                                                       \
            if( H(pv) )                                                                                                                             \
            count##bitsCRefP##T cRefOld = decv##bitsCRefP##AM( ((count##bitsCRefP##T*)P(pv))[ offCRefP ] ) ;                                        \
            if( !((count##bitsCRefP##T*)P(pv))[ offCRefP ] ) { TINSL ; __1 } ;                                                                      \
            /*if( !thirdC::bCanAccessMemoryIF( (byteT*)P(pv) , cbTestP ) ) { BLAMMO ; }*/                                                           \
        {                                                                                                                                           \
        if( P(pv) )                                                                                                                                 \
    {                                                                                                                                               \
    voidT classSPP##SP::gaspF( voidT )                                                                                                              \
                                                                                                                                                    \
    }                                                                                                                                               \
        }                                                                                                                                           \
            }                                                                                                                                       \
                if( vsp.pCBF ) (*vsp.pCBF)( thirdC::third_tinS_ref_IF() , (byteT*)this , ifcIDeVENTvsp_CT , cRefOld , cRefF() , vsp.cArg ) ;        \
                classSPP##VSP& vsp = *(classSPP##VSP*)this ;                                                                                        \
            {                                                                                                                                       \
            if( H(pv) )                                                                                                                             \
            if( !((count##bitsCRefP##T*)P(pv))[ offCRefP ] ) { TINSL ; __1 } ;                                                                      \
            count##bitsCRefP##T cRefOld = incv##bitsCRefP##AM( ((count##bitsCRefP##T*)P(pv))[ offCRefP ] ) ;                                        \
            /*if( !thirdC::bCanAccessMemoryIF( (byteT*)P(pv) , cbTestP ) ) { BLAMMO ; }*/                                                           \
        {                                                                                                                                           \
        if( P(pv) )                                                                                                                                 \
    {                                                                                                                                               \
    voidT classSPP##SP::cryF( voidT )                                                                                                               \
                                                                                                                                                    \
#define SMARTpOINTERfUNCTIONdEFS(classSPP,classP,offCRefP,bitsCRefP,cbTestP)                                                                        \

/*1*//*SMARTpOINTERfUNCTIONdEFS(classSPP,classP,offCRefP,bitsCRefP,cbTestP)*//*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


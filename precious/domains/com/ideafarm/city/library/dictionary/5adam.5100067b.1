
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

CONoUTrAW( "bye\r\n" ) ;
etherC::loafIF( tinP ) ;
CONoUTrAW( "done.\r\n" ) ;

thirdC::diskWalkIF( tinP , cDirsP , cFilesP , "\\ideafarm.home.101\\IdeaFarm (tm)\\Drop Files Here To Archive\\audio\\" , *(boolT*)&(const boolT&)ether , myWalkCBF , pcArg ) ;
ZE( countT , cFilesP ) ;
ZE( countT , cDirsP ) ;

countT pcArg[] = { 0 } ;

TODO

}
    return bDoIt ;

    }
        //else bQuitP |= 1 ;
        }
            }

                }
                    }
                        }
                            }
                                CONoUTrAW3( "" , cDoneP , "\r\n" ) ;
                                //CONoUTrAW3( "\r        \r" , cDoneP , "\r" ) ;
                            {
                            //if( !( cDoneP % TUCK ) )

                            cDoneP ++ ;

                            ((thirdC&)*tinP.pEther).dosMoveF( tinP , postNew , postNameP ) ;

                            LOGrAW( "\r\n" ) ;
                            LOGrAW( postNew ) ;
                            LOGrAW( "\r\n" ) ;
                            LOGrAW( postNameP ) ;
                            LOGrAW( "\r\n" ) ;

                            thirdC::c_strcpyIF( tinP , postcTo , postName ) ;
                            // POUR NAME

                            while( cDo -- ) *( postcTo ++ ) = *( postcFrom ++ ) ;
                            cDo = costNote ;
                            postcFrom = postNote ;
                            // POUR MODIFIED NOTE

                            while( cDo -- ) *( postcTo ++ ) = *( postcFrom ++ ) ;
                            cDo = postName - postLath - 1 ;
                            postcFrom = postLath + 1 ;
                            // POUR STAMP

                            while( cDo -- ) *( postcTo ++ ) = *( postcFrom ++ ) ;
                            cDo = postWoth - postNameP ;
                            postcTo   = postNew ;
                            postcFrom = postNameP ;
                            // POUR PATH

                            osTextT postNew[ TUCK << 1 ] ;

                            countT costNote = postcTo - postNote ;
                            *postcTo = 0 ;
                            }
                                postcTo ++ ;

                                if( *postcTo == '\\' ) *postcTo = '.' ;

                                *( postcTo ) = *( postcFrom ++ ) ;
                            {
                            while( cDo -- )
                            countT cDo = 1 + postLath - postWoth ;
                            // CALCULATE NOTE

                            osTextT*       postcTo   = postNote ;
                            const osTextT* postcFrom = postWoth ;

                            osTextT postNote[ TUCK << 1 ] ;

                            //
                            //   4. POUR NAME
                            //   3. POUR MODIFIED NOTE
                            //   2. POUR STAMP
                            //   1. POUR PATH
                            //
                            // RECIPE
                            //                                                              
                            //                                                              h      h
                            //                                                              t      t
                            //                                                              o      a
                            //                                                              w      l
                            //
                            //                                                              |------|
                            //  |---PATH---------------------------------------------------||-NOTE-||----STAMP   ----------------------------------------||----NAME----|
                            //  |                                                          ||      ||                                                    ||            |
                            // "\ideafarm.home.101\IdeaFarm (tm)\Drop Files Here To Archive\audio\z\!ideafarm." "3.000b35c1.d2b3c4d5.ab10f1c3.voice.pad.!.120604_023.MP3"

                            postName += 3 ;
                        {
                        if( postName )
                        osTextT* postName = thirdC::c_strstrIF( tinP , postLath + 0xa , "_!_" ) ;
                    {
                    if( postWoth <= postLath )

                    postLath -= 1 ;
                {
                if( postLath )

                osTextT* postLath = thirdC::c_strstrIF( tinP , postWoth , "!ideafarm." ) ;
                postWoth ++ ;
            {
            if( postWoth )
            osTextT* postWoth = thirdC::c_strstrIF( tinP , postNameP , postTest1 ) ;

            static osTextT postTest1[] = "\\audio\\" ;
        {
        //if( idIn <= 0x20 )
        countT idIn = ++ idInLath ;
        static countT idInLath ;
    {
    if( bDoIt )

    countT& cDoneP = *pcArgP ;

    }
        bDoIt = '\\' != postNameP[ costName - 1 ] ;
        countT costName = thirdC::c_strlenIF( tinP , postNameP ) ;
    {
    if( postNameP )
    ZE( boolT , bDoIt ) ;
{
boolT myWalkCBF( tinS& tinP , countT& cDirsP , countT& cFilesP , boolT& bQuitP , const osTextT* const postNameP , countT* const pcArgP , const countT* const pModuloDirsP , const countT* const pModuloFilesP )

/*1*/WAKEsHOWtEXT( "tool.rename.audio.recordings.for.move.into.root.of.archive" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//



//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    #endif

        }
            CONoUTrAW3( "osLogWrongNodeIF / scanned [cFound]: " , cFound , "\r\n" ) ;
            LOGrAW3( "osLogWrongNodeIF / scanned [cFound]: " , cFound , "\r\n" ) ;
            }
                }
                    CONoUTrAW( ostoSay ) ;
                    LOGrAW( ostoSay ) ;

                    OStEXTA(  ostoSay , postSay ) ;
                    OStEXTAK( ostoSay , "    " ) ;
                    OStEXTC(  ostoSay , pInfoGrain[ offg ].VirtualAttributes.Node , ' ' ) ;
                    OStEXTAK( ostoSay , "    " ) ;
                    OStEXTCF( ostoSay , pInfoGrain[ offg ].VirtualAddress , '0' ) ;
                    OStEXTAK( ostoSay , "    " ) ;
                    OStEXTC(  ostoSay , offg , ' ' ) ;
                    OStEXTAK( ostoSay , "[offg,@,offNode]:    " ) ;
                    OStEXT(   ostoSay , TUCK << 1 ) ;

                    c_strcatIF( tinP , postSay, "\r\n" ) ;
                    }
                        default                      : { thirdC::c_strcatIF( tinP , postSay, " notRecognized   " ) ; break ; }
                        //case PAGE_TARGETS_NO_UPDATE  : { thirdC::c_strcatIF( tinP , postSay, " targetsNoUpdate " ) ; break ; }
                        //case PAGE_TARGETS_INVALID    : { thirdC::c_strcatIF( tinP , postSay, " targetsInvalid  " ) ; break ; }
                        case PAGE_WRITECOPY          : { thirdC::c_strcatIF( tinP , postSay, " writeCopy       " ) ; break ; }
                        case PAGE_READWRITE          : { thirdC::c_strcatIF( tinP , postSay, " readWrite       " ) ; break ; }
                        case PAGE_READONLY           : { thirdC::c_strcatIF( tinP , postSay, " readOnly        " ) ; break ; }
                        case PAGE_NOACCESS           : { thirdC::c_strcatIF( tinP , postSay, " noAccess        " ) ; break ; }
                        case PAGE_EXECUTE_WRITECOPY  : { thirdC::c_strcatIF( tinP , postSay, " executeWriteCopy" ) ; break ; }
                        case PAGE_EXECUTE_READWRITE  : { thirdC::c_strcatIF( tinP , postSay, " executeReadWrite" ) ; break ; }
                        case PAGE_EXECUTE_READ       : { thirdC::c_strcatIF( tinP , postSay, " executeRead     " ) ; break ; }
                        case PAGE_EXECUTE            : { thirdC::c_strcatIF( tinP , postSay, " execute         " ) ; break ; }
                    {
                    switch( pInfoGrain[ offg ].VirtualAttributes.Win32Protection )

                    osTextT postSay[ TUCK ] = "" ;

                    //ULONG_PTR Valid  :1;
                    //ULONG_PTR ShareCount  :3;
                    //ULONG_PTR Win32Protection  :11;
                    //ULONG_PTR Shared  :1;
                    //ULONG_PTR Node  :6;
                    //ULONG_PTR Locked  :1;
                    //ULONG_PTR LargePage  :1;
                    //ULONG_PTR Reserved  :7;
                    //ULONG_PTR Bad  :1;

                    cFound ++ ;
                {
                if( !pInfoGrainAtLaunch[ offg ].VirtualAttributes.Valid && pInfoGrain[ offg ].VirtualAttributes.Valid && pInfoGrain[ offg ].VirtualAttributes.Node != pg1.idNumaNode - 1 )
            {
            for( offg = 0 ; offg < cGrains ; offg ++ )
            ZE( countT , cFound ) ;
            CONoUTrAW( "osLogWrongNodeIF / scanning\r\n" ) ;
            LOGrAW( "osLogWrongNodeIF / scanning\r\n" ) ;

            PSAPI_WORKING_SET_EX_INFORMATION* pInfoGrainAtLaunch = (PSAPI_WORKING_SET_EX_INFORMATION*)pg1.pcInfoGrain ;

            //CONoUTrAW5( "processGlobal1I / QueryWorkingSetEx [bOk,rc]:    " , bOk , "    " , rc , "\r\n" ) ;
            countT rc = bOk ? 0 : GetLastError() ;

            static BOOL bOk = QueryWorkingSetEx( GetCurrentProcess() , pInfoGrain , sizeof( PSAPI_WORKING_SET_EX_INFORMATION ) * TOCK / 2 ) ;

            }
                pInfoGrain[ ++ offg ].VirtualAddress = (voidT*)pbTry ;
            {
            for( byteT* pbTry = 0 ; pbTry < (byteT*)BM_HIGH ; pbTry += cbGrain )
            countT offg = -1 ;
            ZE( countT , idColLath ) ;
            //CONoUTrAW3( "[cbGrain]: " , cbGrain , "\r\n" ) ;
            //CONoUTrAW( "\r\n\r\nAddress Space Usage (ct processGlobal1I):\r\n\r\n" ) ;

            if( cGrains != sizeof pInfoGrain / sizeof pInfoGrain[ 0 ] ) { BLAMMO ; }
            countT cGrains = BM_HIGH / cbGrain ;
            countT cbGrain = thirdC::os_cbAllocationGrain_IF( tinP ) ;
        {
        if( pg1.idNumaNode )
        //if( pg1.idAdamRoot != ifcIDaDAM_ADAM && pg1.idAdamRoot != ifcIDaDAM_EVE && pg1.idAdamRoot != ifcIDaDAM_ELF ) //U:: REMOVE THIS LINE IN PRODUCTION

        processGlobal1S& pg1 = processGlobal1S::_processGlobal1I_IF() ;

    #if defined( __NT__ )
{
/*1*/voidT thirdC::osLogWrongNodeIF( tinS& tinP )/*1*/

PSAPI_WORKING_SET_EX_INFORMATION pInfoGrain[ TOCK >> 1 ] ;

/**/
*/
U::not thread safe
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


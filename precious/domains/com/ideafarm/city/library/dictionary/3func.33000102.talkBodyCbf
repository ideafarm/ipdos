
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    }
        }
            tinP.pEtScratch->traceF( tinP , T("disk or file error 13") ) ;
            POOPR
        {
        if( POOP )

        }
            tinP.pEtScratch->delF( tinP , psttFile ) ;

            DEL( prPosts ) ;
            if( prPosts ) meP.pushSnipF( tinP , stBodyP , *prPosts ) ;
            tinP.pEtScratch->strMakeF( tinP , prPosts , T("<p>\r\n")+tOut+T("\r\n") , 0 , flSTRmAKE_PREFIXlENGTH ) ; ___( prPosts ) ;
            ZE( pbRefC* , prPosts ) ;

            TN( tOut , "" ) ; tOut = T("<span style=\"color:Cyan\">")+tSaidTimeForeign+tb4+tSaidCountryCode+tb4+tSaidZipUse+tb4+tSaidCity+tb4+tSaidIdSubscriber0+tb4+tSaidFirstName+tb4+tSaidLastName+tOutFlags+T(": </span>")+tSaidSpeech ;

            if( !tinP.pEtScratch->strCompareF( tinP , tSaidFlags , T("anonymous") ) ) tOutFlags = T(" (anonymous) ") ;
            TN( tOutFlags , "" ) ;

            }
                tinP.pEtScratch->delF( tinP , psttSaidCountryCode ) ;
                tSaidCountryCode = T(psttSaidCountryCode) ;
                said >> psttSaidCountryCode ; ___( psttSaidCountryCode ) ;
                ZE( strokeS* , psttSaidCountryCode ) ;

                tinP.pEtScratch->delF( tinP , psttSaidState ) ;
                said >> psttSaidState ; ___( psttSaidState ) ;
                ZE( strokeS* , psttSaidState ) ;

                tinP.pEtScratch->delF( tinP , psttSaidCity ) ;
                tSaidCity = T(psttSaidCity) ;
                said >> psttSaidCity ; ___( psttSaidCity ) ;
                ZE( strokeS* , psttSaidCity ) ;

                tinP.pEtScratch->delF( tinP , psttSaidAddressStreet ) ;
                said >> psttSaidAddressStreet ; ___( psttSaidAddressStreet ) ;
                ZE( strokeS* , psttSaidAddressStreet ) ;

                said >> nnPeer ;
                nicNameC nnPeer ;

                tinP.pEtScratch->delF( tinP , psttSaidNnPeer ) ;
                said >> psttSaidNnPeer ; ___( psttSaidNnPeer ) ;
                ZE( strokeS* , psttSaidNnPeer ) ;

                tinP.pEtScratch->delF( tinP , psttSaidZipUse ) ;
                tSaidZipUse = T(psttSaidZipUse) ;
                said >> psttSaidZipUse ; ___( psttSaidZipUse ) ;
                ZE( strokeS* , psttSaidZipUse ) ;

                tinP.pEtScratch->delF( tinP , psttSaidAddressName ) ;
                said >> psttSaidAddressName ; ___( psttSaidAddressName ) ;
                ZE( strokeS* , psttSaidAddressName ) ;

                tinP.pEtScratch->delF( tinP , psttSaidLastName ) ;
                tSaidLastName = T(psttSaidLastName) ;
                said >> psttSaidLastName ; ___( psttSaidLastName ) ;
                ZE( strokeS* , psttSaidLastName ) ;

                //tinP.pEtScratch->traceF( tinP , T("talkBodyCBF: tSaidFirstName: ")+tSaidFirstName ) ; //U::
                tinP.pEtScratch->delF( tinP , psttSaidFirstName ) ;
                tSaidFirstName = T(psttSaidFirstName) ;
                said >> psttSaidFirstName ; ___( psttSaidFirstName ) ;
                ZE( strokeS* , psttSaidFirstName ) ;

                tinP.pEtScratch->delF( tinP , psttSaidPaypalPayerEmail ) ;
                said >> psttSaidPaypalPayerEmail ; ___( psttSaidPaypalPayerEmail ) ;
                ZE( strokeS* , psttSaidPaypalPayerEmail ) ;

                tinP.pEtScratch->delF( tinP , psttSaidIdSubscriber0 ) ;
                tSaidIdSubscriber0 = T(psttSaidIdSubscriber0) ;
                said >> psttSaidIdSubscriber0 ; ___( psttSaidIdSubscriber0 ) ;
                ZE( strokeS* , psttSaidIdSubscriber0 ) ;

                tinP.pEtScratch->delF( tinP , psttSpeechClean ) ;
                tSaidSpeech = T(psttSpeechClean) ;
                said >> psttSpeechClean ; ___( psttSpeechClean ) ;
                ZE( strokeS* , psttSpeechClean ) ;

                tinP.pEtScratch->delF( tinP , psttValueSpeech ) ;
                said >> psttValueSpeech ; ___( psttValueSpeech ) ;
                ZE( strokeS* , psttValueSpeech ) ;

                }
                    tinP.pEtScratch->delF( tinP , psttFlags ) ;
                    tSaidFlags = T(psttFlags) ;
                    said >> psttFlags ; ___( psttFlags ) ;
                    ZE( strokeS* , psttFlags ) ;
                {
                if( idFormat >= 4 )

                tinP.pEtScratch->delF( tinP , psttTimeForeign ) ;
                tSaidTimeForeign = T(psttTimeForeign) ;
                said >> psttTimeForeign ; ___( psttTimeForeign ) ;
                ZE( strokeS* , psttTimeForeign ) ;

                said >> *(countT*)&timeS2 ;
                ZE( sCountT , timeS2 ) ;

                said >> timeS1 ;
                ZE( countT , timeS1 ) ;

                said >> idFormat ;
                ZE( countT , idFormat ) ;

                said >> finger ;
                ZE( countT , finger ) ;

                tinP.pEtScratch->boxGetShadowF( tinP , said , psttFile ) ;
                soulC said( tinP , TAG( TAGiDnULL ) ) ;
            {
            TN( tSaidFlags , "" ) ;
            TN( tSaidCountryCode , "" ) ;
            TN( tSaidCity , "" ) ;
            TN( tSaidZipUse , "" ) ;
            TN( tSaidLastName , "" ) ;
            TN( tSaidFirstName , "" ) ;
            TN( tSaidIdSubscriber0 , "" ) ;
            TN( tSaidSpeech , "" ) ;
            TN( tSaidTimeForeign , "" ) ;

            stFileSaid >> psttFile ;
            ZE( strokeS* , psttFile ) ;
        {
        while( stFileSaid )
        TN( tb4 , "    " ) ;

        SCOOPS
    {
    IFsCRATCH

    }
        }
            }
                tinP.pEtScratch->traceF( tinP , T("disk or file error 137") ) ;
                POOPR
            {
            if( POOP )

            }
                tinP.pEtScratch->delF( tinP , psttFile ) ;

                DEL( prPosts ) ;
                if( prPosts ) meP.pushSnipF( tinP , stBodyP , *prPosts ) ;
                tinP.pEtScratch->strMakeF( tinP , prPosts , T("<p>\r\n")+tOut+T("\r\n") , 0 , flSTRmAKE_PREFIXlENGTH ) ; ___( prPosts ) ;
                ZE( pbRefC* , prPosts ) ;

                ) ;

                    "</table>\r\n"
                        "</tr>\r\n"
                            "</td>\r\n"
                                )+tPTopicTopic+T(
                            "<td>\r\n"
                            "</td>\r\n"
                                "</form>\r\n"
                                    "<input id=\"submit\" name=\"submit\" type=\"submit\" value=\"Change Topic\" onclick=\" window.parent.document.getElementById( 'showtopic' ).innerHTML = '")+tPTopicTopic+T("' ; \"/>\r\n"
                                    "<input id=\"newtopic\" name=\"newtopic\" type=\"hidden\" value=\"")+tPTopicTopic+T("\"/>\r\n"
                                    "<input id=\"secret\" name=\"secret\" type=\"hidden\" value=\"")+tValueSecret+T("\"/>\r\n"
                                    "<input id=\"subscriberid\" name=\"subscriberid\" type=\"hidden\" value=\"")+tValueSubscriberId+T("\"/>\r\n"
                                    "<input id=\"filenametopic\" name=\"filenametopic\" type=\"hidden\" value=\"")+T(psttFile)+T("\"/>\r\n"
                                "<form action=\"https://")+T(bSandbox?"factory1.":"")+T("ideafarm.com/talk.body\" id=\"launchtopic\" method=\"post\" name=\"launchtopic\">\r\n"
                            "<td valign=\"center\">\r\n"
                        "<tr>\r\n"
                    "<table>\r\n"
                    "<p>\r\n"

                TN( tOut , "" ) ; tOut = T(

                //if( !tinP.pEtScratch->strCompareF( tinP , tPTopicFlags , T("anonymous") ) ) tOutFlags = T(" (anonymous) ") ; // FOR FUTURE USE.  CURRENT CODE DOES NOT SUPPORT ANONYMOUS TOPIC PROPOSALS
                //TN( tOutFlags , "" ) ;

                }
                    tinP.pEtScratch->delF( tinP , psttSaidCountryCode ) ;
                    tPTopicCountryCode = T(psttSaidCountryCode) ;
                    said >> psttSaidCountryCode ; ___( psttSaidCountryCode ) ;
                    ZE( strokeS* , psttSaidCountryCode ) ;

                    tinP.pEtScratch->delF( tinP , psttSaidState ) ;
                    said >> psttSaidState ; ___( psttSaidState ) ;
                    ZE( strokeS* , psttSaidState ) ;

                    tinP.pEtScratch->delF( tinP , psttSaidCity ) ;
                    tPTopicCity = T(psttSaidCity) ;
                    said >> psttSaidCity ; ___( psttSaidCity ) ;
                    ZE( strokeS* , psttSaidCity ) ;

                    tinP.pEtScratch->delF( tinP , psttSaidAddressStreet ) ;
                    said >> psttSaidAddressStreet ; ___( psttSaidAddressStreet ) ;
                    ZE( strokeS* , psttSaidAddressStreet ) ;

                    said >> nnPeer ;
                    nicNameC nnPeer ;

                    tinP.pEtScratch->delF( tinP , psttSaidNnPeer ) ;
                    said >> psttSaidNnPeer ; ___( psttSaidNnPeer ) ;
                    ZE( strokeS* , psttSaidNnPeer ) ;

                    tinP.pEtScratch->delF( tinP , psttSaidZipUse ) ;
                    tPTopicZipUse = T(psttSaidZipUse) ;
                    said >> psttSaidZipUse ; ___( psttSaidZipUse ) ;
                    ZE( strokeS* , psttSaidZipUse ) ;

                    tinP.pEtScratch->delF( tinP , psttSaidAddressName ) ;
                    said >> psttSaidAddressName ; ___( psttSaidAddressName ) ;
                    ZE( strokeS* , psttSaidAddressName ) ;

                    tinP.pEtScratch->delF( tinP , psttSaidLastName ) ;
                    tPTopicLastName = T(psttSaidLastName) ;
                    said >> psttSaidLastName ; ___( psttSaidLastName ) ;
                    ZE( strokeS* , psttSaidLastName ) ;

                    tinP.pEtScratch->delF( tinP , psttSaidFirstName ) ;
                    tPTopicFirstName = T(psttSaidFirstName) ;
                    said >> psttSaidFirstName ; ___( psttSaidFirstName ) ;
                    ZE( strokeS* , psttSaidFirstName ) ;

                    tinP.pEtScratch->delF( tinP , psttSaidPaypalPayerEmail ) ;
                    said >> psttSaidPaypalPayerEmail ; ___( psttSaidPaypalPayerEmail ) ;
                    ZE( strokeS* , psttSaidPaypalPayerEmail ) ;

                    tinP.pEtScratch->delF( tinP , psttSaidIdSubscriber0 ) ;
                    tPTopicIdSubscriber0 = T(psttSaidIdSubscriber0) ;
                    said >> psttSaidIdSubscriber0 ; ___( psttSaidIdSubscriber0 ) ;
                    ZE( strokeS* , psttSaidIdSubscriber0 ) ;

                    tinP.pEtScratch->delF( tinP , psttTopicClean ) ;
                    tPTopicTopic = T(psttTopicClean) ;
                    said >> psttTopicClean ; ___( psttTopicClean ) ;
                    ZE( strokeS* , psttTopicClean ) ;

                    tinP.pEtScratch->delF( tinP , psttValueTopic ) ;
                    said >> psttValueTopic ; ___( psttValueTopic ) ;
                    ZE( strokeS* , psttValueTopic ) ;

                    }
                        tinP.pEtScratch->delF( tinP , psttFlags ) ;
                        tPTopicFlags = T(psttFlags) ;
                        said >> psttFlags ; ___( psttFlags ) ;
                        ZE( strokeS* , psttFlags ) ;
                    {
                    if( idFormat >= 4 )

                    tinP.pEtScratch->delF( tinP , psttTimeForeign ) ;
                    tPTopicTimeForeign = T(psttTimeForeign) ;
                    said >> psttTimeForeign ; ___( psttTimeForeign ) ;
                    ZE( strokeS* , psttTimeForeign ) ;

                    said >> *(countT*)&timeS2 ;
                    ZE( sCountT , timeS2 ) ;

                    said >> timeS1 ;
                    ZE( countT , timeS1 ) ;

                    said >> idFormat ;
                    ZE( countT , idFormat ) ;

                    said >> finger ;
                    ZE( countT , finger ) ;

                    tinP.pEtScratch->boxGetShadowF( tinP , said , psttFile ) ;
                    soulC said( tinP , *tinP.pEtScratch , TAG( TAGiDnULL ) ) ;
                {
                TN( tPTopicFlags , "" ) ;
                TN( tPTopicCountryCode , "" ) ;
                TN( tPTopicCity , "" ) ;
                TN( tPTopicZipUse , "" ) ;
                TN( tPTopicLastName , "" ) ;
                TN( tPTopicFirstName , "" ) ;
                TN( tPTopicIdSubscriber0 , "" ) ;
                TN( tPTopicTopic , "" ) ;
                TN( tPTopicTimeForeign , "" ) ;

                stFilePTopic >> psttFile ;
                ZE( strokeS* , psttFile ) ;
            {
            while( stFilePTopic )
            TN( tb4 , "    " ) ;

            }
                while( ~hFind && !POOP ) ;
                }
                    DEL( pInfo ) ;
                    }
                        if( !ids ) tinP.pEtScratch->delF( tinP , psttFile ) ; //SHOULD BE IMPOSSIBLE
                        stFilePTopic.sinkF( tinP , ids , psttFile , flSTACKsINK_UNIQUE|flSTACKsINK_REVERSE ) ;
                        ZE( countT , ids ) ;

                        tinP.pEtScratch->strMakeF( tinP , psttFile , pInfo->psttIfoName ) ; ___( psttFile ) ;
                        ZE( strokeS* , psttFile ) ;
                    {
                    else
                    }
                        break ;
                        DEL( pInfo ) ;
                    {
                    else if( !pInfo || !pInfo->psttIfoName )
                    }
                        tinP.pEtScratch->traceF( tinP , T("disk or file error 295") ) ;
                        POOPR
                    {
                    if( POOP )

                    tinP.pEtScratch->diskFindFileOrDirF( tinP , pInfo , hFind , tPath , &pat ) ;
                    ZE( infoFileS* , pInfo ) ;
                {
                do
                handleC hFind( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILEfIND ) ;
                patternC pat( tinP , *tinP.pEtScratch , tPattern , ifcIDtYPEpATTERN_FOREIGNwILDCARDsTRICT ) ;
                TN( tPattern , "" ) ; tPattern = T("ptopic.table")+T(bSandbox?".sandbox.*":".live.*") ;
                TN( tPath , "////factory3/d/ideafarm.home.102/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/ptopic/" ) ;
            {
            stackC stFilePTopic( tinP , *tinP.pEtScratch , TAG( TAGiDnULL ) , flSTACKc_DOnOTsERIALIZE , ifcSTACKtYPE_PTR_strokeS , ifcIDgRABlAYER_7BASEmISC1 ) ;

            SCOOPS
        {
        IFsCRATCH
        //if( bSecretIsOK && !bTopicIsFresh )

        /***************************************************************************************************/
        /***************************************************************************************************/
        /***************************************************************************************************/
        /****                                                                                           ****/
        /****  2:  DISPLAY FORM TO SELECT EACH PROPOSED TOPIC                                           ****/
        /****                                                                                           ****/
        /***************************************************************************************************/
        /***************************************************************************************************/
        /***************************************************************************************************/

        }
            while( ~hFind && !POOP ) ;
            }
                DEL( pInfo ) ;
                }
                    }
                        if( POOP ) { POOPR ; }
                        tinP.pEtScratch->diskFileOrDirDeleteF( tinP , pInfo->psttIfoName , flFILEoRdIRdELETE_null , 1 ) ;
                        SCOOPS
                    {
                    IFsCRATCH
                {
                else
                }
                    break ;
                    DEL( pInfo ) ;
                {
                else if( !pInfo || !pInfo->psttIfoName )
                }
                    tinP.pEtScratch->traceF( tinP , T("disk or file error 337") ) ;
                    POOPR
                {
                if( POOP )

                tinP.pEtScratch->diskFindFileOrDirF( tinP , pInfo , hFind , tPath , &pat ) ;
                ZE( infoFileS* , pInfo ) ;
            {
            do
            handleC hFind( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILEfIND ) ;
            patternC pat( tinP , *tinP.pEtScratch , tPattern , ifcIDtYPEpATTERN_FOREIGNwILDCARDsTRICT ) ;
            TN( tPattern , "" ) ; tPattern = T("newTopic")+T(bSandbox?".sandbox.*":".live.*") ;
            TN( tPath , "////factory3/d/ideafarm.home.102/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/newTopic/" ) ;

            SCOOPS
        {
        IFsCRATCH

        }
            DEL( prPosts ) ;
            if( prPosts ) meP.pushSnipF( tinP , stBodyP , *prPosts ) ;

            etThread.strMakeF( tinP , prPosts , tSay , 0 , flSTRmAKE_PREFIXlENGTH ) ; ___( prPosts ) ;
            ZE( pbRefC* , prPosts ) ;

            TN( tSay , "" ) ; tSay = T("<script> window.parent.document.getElementById( 'showtopic' ).innerHTML = 'Open!' ; </script>\r\n<p>\r\n") ;

            countT secondsRemaining = 60 * minAllowed - allSeconds ;
            countT allSeconds = seconds + minutes * 60 ;

        {
    {
    else
    }
        }
            DEL( prPosts ) ;
            if( prPosts ) meP.pushSnipF( tinP , stBodyP , *prPosts ) ;

            etThread.strMakeF( tinP , prPosts , tSay , 0 , flSTRmAKE_PREFIXlENGTH ) ; ___( prPosts ) ;
            ZE( pbRefC* , prPosts ) ;

            ) ;

                "</script>\r\n"
                    "document.getElementById( 'currenttopic' ).innerHTML = window.parent.document.getElementById( 'showtopic' ).innerHTML ;\r\n"
                "<script>\r\n"
                "<span id=\"topiccountdown\">: Topic is now <span id=\"currenttopic\" style=\"color:cyan\"></span> and will become unlocked in ")+TF4(secondsRemaining,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FOREIGN|flFORMAT_NObASE,0,0xa)+T(" seconds.</span>\r\n<p>\r\n"

            TN( tSay , "" ) ; tSay = T(

            countT secondsRemaining = 60 * minAllowed - allSeconds ;
            countT allSeconds = seconds + minutes * 60 ;
        {
    {
    if( cFiles && !years && !months && !days && !hours && minutes < minAllowed )
    const countT minAllowed = 1 ; // 2 IN PRODUCTION

    if( cFiles ) etThread.osTimeToOldTimeF( tinP , countTC() , seconds , minutes , hours , days , months , years , countTC() , timeA1 , timeA2 , flOStIMEfROMoLDtIME_OLDtIMEiSutc ) ;
    ZE( sCountT , years   ) ;
    ZE( countT  , months  ) ;
    ZE( countT  , days    ) ;
    ZE( countT  , hours   ) ;
    ZE( countT  , minutes ) ;
    ZE( countT  , seconds ) ;

    //etThread.traceF( tinP , T("age of youngest post: ")+TT(timeA1,timeA2) ) ;
    }
        while( ~hFind && !POOP ) ;
        }
            DEL( pInfo ) ;
            }
                if( !ids ) tinP.pEtScratch->delF( tinP , psttFile ) ; //SHOULD BE IMPOSSIBLE
                stFileSaid.sinkF( tinP , ids , psttFile , flSTACKsINK_UNIQUE|flSTACKsINK_REVERSE ) ;
                ZE( countT , ids ) ;

                tinP.pEtScratch->strMakeF( tinP , psttFile , pInfo->psttIfoName ) ; ___( psttFile ) ;
                ZE( strokeS* , psttFile ) ;

                }
                    timeA2 = timeE2 ;
                    timeA1 = timeE1 ;
                {
                if( timeA2 > timeE2 || timeA1 > timeE1 )
                //tinP.pEtScratch->traceF( tinP , T("age: ")+TT(timeE1,timeE2) ) ;
                tinP.pEtScratch->osTimeSubtractF( tinP , timeE1 , timeE2 , pInfo->timeCreated1 , pInfo->timeCreated2 ) ;
                sCountT timeE2 = timeN2 ;
                countT  timeE1 = timeN1 ;
                cFiles ++ ;
            {
            else
            }
                break ;
                DEL( pInfo ) ;
            {
            else if( !pInfo || !pInfo->psttIfoName )
            }
                tinP.pEtScratch->traceF( tinP , T("disk or file error 425") ) ;
                POOPR
            {
            if( POOP )

            tinP.pEtScratch->diskFindFileOrDirF( tinP , pInfo , hFind , tPath , &pat ) ;
            ZE( infoFileS* , pInfo ) ;
        {
        do
        handleC hFind( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILEfIND ) ;
        patternC pat( tinP , *tinP.pEtScratch , tPattern , ifcIDtYPEpATTERN_FOREIGNwILDCARDsTRICT ) ;
        TN( tPattern , "" ) ; tPattern = T("said.table")+T(bSandbox?".sandbox.*":".live.*") ;
        TN( tPath , "////factory3/d/ideafarm.home.102/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/said/" ) ;

        SCOOPS
    {
    IFsCRATCH
    ZE( countT , cFiles ) ;
    sCountT timeA2 = MAXscOUNTT ; // AGE OF THE YOUNGEST POST
    countT  timeA1 = MAXcOUNTT  ; // AGE OF THE YOUNGEST POST ; "A": "AGE"
    stackC stFileSaid( tinP , etThread , TAG( TAGiDnULL ) , flSTACKc_DOnOTsERIALIZE , ifcSTACKtYPE_PTR_strokeS , ifcIDgRABlAYER_7BASEmISC1 ) ;

    }
        DEL( prPosts ) ;
        if( prPosts ) meP.pushSnipF( tinP , stBodyP , *prPosts ) ;

        etThread.strMakeF( tinP , prPosts , tSay , 0 , flSTRmAKE_PREFIXlENGTH ) ; ___( prPosts ) ;
        ZE( pbRefC* , prPosts ) ;

        TN( tSay , "" ) ; tSay = tTimeForeign ;

        textC tTimeForeign( ifcIDtEXTgEN_TIMEnOWfOREIGN , tinP , TAG( TAGiDnULL ) ) ;
    {

    etThread.osTimeNowF( tinP , timeN1 , timeN2 ) ;
    ZE( sCountT , timeN2 ) ;
    ZE( countT , timeN1 ) ;

    meP.pushSnipF( tinP , stBodyP , ifcIDsNIPpREDEFINED_BODYrAWbEGIN ) ;
    meP.pushSnipF( tinP , stBodyP , ifcIDsNIPpREDEFINED_HEADrAW5hEADeND ) ;
    meP.pushSnipF( tinP , stBodyP , ifcIDsNIPpREDEFINED_HEADrAW4sCRIPTeND ) ;
    meP.pushSnipF( tinP , stBodyP , ifcIDsNIPpREDEFINED_HEADrAW3sCRIPTbEGIN ) ;

    }
        DEL( prPosts ) ;
        if( prPosts ) meP.pushSnipF( tinP , stBodyP , *prPosts ) ;

        etThread.strMakeF( tinP , prPosts , tSay , 0 , flSTRmAKE_PREFIXlENGTH ) ; ___( prPosts ) ;
        ZE( pbRefC* , prPosts ) ;

        TN( tSay , "<meta http-equiv=\"refresh\" content=\"1\"/>\r\n" ) ;
    {

    meP.pushSnipF( tinP , stBodyP , ifcIDsNIPpREDEFINED_HEADrAW2aFTERtITLE ) ;
    }
        DEL( prPosts ) ;
        if( prPosts ) meP.pushSnipF( tinP , stBodyP , *prPosts ) ;

        etThread.strMakeF( tinP , prPosts , tSay , 0 , flSTRmAKE_PREFIXlENGTH ) ; ___( prPosts ) ;
        ZE( pbRefC* , prPosts ) ;

        TN( tSay , "Wo'O's Table (tm)\r\n" ) ;
    {
    meP.pushSnipF( tinP , stBodyP , ifcIDsNIPpREDEFINED_HEADrAW1bEFOREtITLE ) ;

    }
        }
            THREADmODE1rESTORE

            etThread.boxPutF( tinP , T("smtp.mailgun.org[admin]/b42/smtp/")+tHost+T("@ideafarm.com/")+tToUse+T("//wo@ideafarm.com/ideafarm.factory.reports@gmail.com") , tBody ) ;

            ;
                : tLoginPaypalPayerEmail
                ? tEmailSandboxMe
            textC& tToUse = bSandbox
            TN( tEmailSandboxMe , "ideafarmcity@gmail.com" ) ;

            tBody += T("time:  ")+tTimeForeign+T("\r\n") ;
            tBody += T("\r\nreference:  ")+tShort+T("\r\n") ;

            tBody += T("your selected new topic:\r\n\r\n")+tNewTopic+T("\r\n\r\n") ;

            ) ;

                "\r\n"
                "\r\n"
                "Subject: Wo'O's Table:  You just set this new topic on Wo'O's Table Talk.\r\n"

            TN( tBody ,

            }
                etThread.delF( tinP , psttFile ) ;
                etThread.delF( tinP , psttShort ) ;
                etThread.delF( tinP , psttnu ) ;
                tShort = T(psttShort) ;
                etThread.strBisectF( tinP , psttnu , psttShort , psttFile , T("/") , - 1 , flSTRbISECT_APPENDdELIMITER ) ; ___( psttnu ) ; ___( psttShort ) ;
                ZE( strokeS* , psttShort ) ;
                ZE( strokeS* , psttnu ) ;

                }
                    tinP.pEtScratch->traceF( tinP , T("disk or file error 517") ) ;
                    POOPR
                {
                if( POOP )

                }
                    etThread.traceF( tinP , T("wrote   ")+T(psttFile) ) ;
                {
                FORsTRINGSiN1( psttFile )
                tinP.pEtScratch->boxPutUniqueF( tinP , psttFile , tList , WS( newTopic ) ) ; ___( psttFile ) ;
                ZE( strokeS* , psttFile ) ;

                tList += T("////factory5/d/ideafarm.home.102/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/newTopic/newTopic")+T(bSandbox?".sandbox.@1@.":".live.@1@.")+T(nnPeerP)+tDot+TF4(((countT*)&subscriberIdTry)[0],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x3e)+tDot+TF4(((countT*)&subscriberIdTry)[1],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x3e)+tDot+tHost ;
                tList += T("////factory4/d/ideafarm.home.102/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/newTopic/newTopic")+T(bSandbox?".sandbox.@1@.":".live.@1@.")+T(nnPeerP)+tDot+TF4(((countT*)&subscriberIdTry)[0],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x3e)+tDot+TF4(((countT*)&subscriberIdTry)[1],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x3e)+tDot+tHost ;
                tList += T("////factory3/d/ideafarm.home.102/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/newTopic/newTopic")+T(bSandbox?".sandbox.@1@.":".live.@1@.")+T(nnPeerP)+tDot+TF4(((countT*)&subscriberIdTry)[0],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x3e)+tDot+TF4(((countT*)&subscriberIdTry)[1],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x3e)+tDot+tHost ;
                TlIST( tList ) ;
            {
            IFsCRATCH
            TN( tShort , "" ) ;

            }
                }
                    tinP.pEtScratch->traceF( tinP , T("disk or file error 526") ) ;
                    POOPR
                {
                if( POOP )

                }
                    etThread.traceF( tinP , T("wrote   ")+T(psttFile) ) ;
                {
                FORsTRINGSiN1( psttFile )
                tinP.pEtScratch->boxPutUniqueF( tinP , psttFile , tList , WS( said ) ) ; ___( psttFile ) ;
                ZE( strokeS* , psttFile ) ;

                tList += T("////factory5/d/ideafarm.home.102/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/said/said.table")+T(bSandbox?".sandbox.@1@.":".live.@1@.")+T(nnPeerP)+tDot+TF4(((countT*)&subscriberIdTry)[0],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x3e)+tDot+TF4(((countT*)&subscriberIdTry)[1],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x3e)+tDot+tHost ;
                tList += T("////factory4/d/ideafarm.home.102/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/said/said.table")+T(bSandbox?".sandbox.@1@.":".live.@1@.")+T(nnPeerP)+tDot+TF4(((countT*)&subscriberIdTry)[0],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x3e)+tDot+TF4(((countT*)&subscriberIdTry)[1],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x3e)+tDot+tHost ;
                tList += T("////factory3/d/ideafarm.home.102/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/said/said.table")+T(bSandbox?".sandbox.@1@.":".live.@1@.")+T(nnPeerP)+tDot+TF4(((countT*)&subscriberIdTry)[0],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x3e)+tDot+TF4(((countT*)&subscriberIdTry)[1],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x3e)+tDot+tHost ;
                TlIST( tList ) ;

                SCOOPS
            {
            IFsCRATCH

            }
                if( !tHost.csF( tinP ) ) tHost = T("factories") ;
                etThread.delF( tinP , psttHost ) ;
                else            tHost = T(psttHost) ;
                if( !psttHost ) etThread.traceF( tinP , T("error: reverse DNS lookup on myself failed 591") ) ;
                etThread.sockPsttHostF( tinP , psttHost ) ; ___( psttHost ) ;
                ZE( strokeS* , psttHost ) ;
            {
            TN( tHost , "" ) ;

            THREADmODE1oN( flTHREADmODE1_ALLOWsTOPwHILEgRABBING )

            }
                said << (strokeS*)tLoginAddressStatus ;
                said << (strokeS*)tLoginAddressZip ;
                said << (strokeS*)tLoginAddressCountry ;
                said << (strokeS*)tLoginAddressCountryCode ;
                said << (strokeS*)tLoginAddressState ;
                said << (strokeS*)tLoginAddressCity ;
                said << (strokeS*)tLoginAddressStreet ;
                said << nnPeerP ;                                   // FORMAT 2
                said << (strokeS*)tLoginNnPeer ;
                said << (strokeS*)tLoginZipUse ;
                said << (strokeS*)tLoginAddressName ;
                said << (strokeS*)tLoginLastName ;
                said << (strokeS*)tLoginFirstName ;
                said << (strokeS*)tLoginPaypalPayerEmail ;
                said << (strokeS*)tLoginIdSubscriber0 ;
                said << (strokeS*)( T("topic: ")+tNewTopic ) ;
                said << (strokeS*)T("") ;
                said << (strokeS*)tFlags ;                          // FORMAT 4
                said << (strokeS*)tTimeForeign ;
                said << (countT)timeN2 ;
                said << timeN1 ;
                said << (countT)4 ;             // IDfORMAT
                said << finger ;
                TN( tFlags , "" ) ;

                putNegAM( *(countT*)&finger , FINGERnEG_WOtABLEsAID ) ;
                ZE( countT , finger ) ;
            {
            soulC said( tinP , TAG( TAGiDnULL ) ) ;

            }
                newTopic << (strokeS*)tLoginAddressStatus ;
                newTopic << (strokeS*)tLoginAddressZip ;
                newTopic << (strokeS*)tLoginAddressCountry ;
                newTopic << (strokeS*)tLoginAddressCountryCode ;
                newTopic << (strokeS*)tLoginAddressState ;
                newTopic << (strokeS*)tLoginAddressCity ;
                newTopic << (strokeS*)tLoginAddressStreet ;
                newTopic << (strokeS*)tLoginNnPeer ;
                newTopic << (strokeS*)tLoginNnPeer ;
                newTopic << (strokeS*)tLoginZipUse ;
                newTopic << (strokeS*)tLoginAddressName ;
                newTopic << (strokeS*)tLoginLastName ;
                newTopic << (strokeS*)tLoginFirstName ;
                newTopic << (strokeS*)tLoginPaypalPayerEmail ;
                newTopic << (strokeS*)tLoginIdSubscriber0 ;
                newTopic << (strokeS*)tNewTopic ;
                newTopic << (strokeS*)tTimeForeign ;
                newTopic << (countT)timeN2 ;
                newTopic << timeN1 ;
                newTopic << (countT)1 ;             // IDfORMAT
                newTopic << finger ;

                putNegAM( *(countT*)&finger , FINGERnEG_WOtABLEnEWtOPICcERTIFIED ) ;
                ZE( countT , finger ) ;
            {
            soulC newTopic( tinP , TAG( TAGiDnULL ) ) ;

            textC tTimeForeign( ifcIDtEXTgEN_TIMEnOWfOREIGN , tinP , TAG( TAGiDnULL ) ) ;

            etThread.osTimeNowF( tinP , timeN1 , timeN2 ) ;
            ZE( sCountT , timeN2 ) ;
            ZE( countT , timeN1 ) ;
        {
        if( tNewTopic.csF( tinP ) )

        //etThread.traceF( tinP , T("new topic:    ")+tNewTopic ) ;

        }
            }
                tinP.pEtScratch->traceF( tinP , T("disk or file error 677") ) ;
                POOPR
            {
            if( POOP )

            }
                etThread.delF( tinP , psttSaidCountryCode ) ;
                rec >> psttSaidCountryCode ; ___( psttSaidCountryCode ) ;
                ZE( strokeS* , psttSaidCountryCode ) ;

                etThread.delF( tinP , psttSaidState ) ;
                rec >> psttSaidState ; ___( psttSaidState ) ;
                ZE( strokeS* , psttSaidState ) ;

                etThread.delF( tinP , psttSaidCity ) ;
                rec >> psttSaidCity ; ___( psttSaidCity ) ;
                ZE( strokeS* , psttSaidCity ) ;

                etThread.delF( tinP , psttSaidAddressStreet ) ;
                rec >> psttSaidAddressStreet ; ___( psttSaidAddressStreet ) ;
                ZE( strokeS* , psttSaidAddressStreet ) ;

                rec >> nnPeer ;
                nicNameC nnPeer ;

                etThread.delF( tinP , psttSaidNnPeer ) ;
                rec >> psttSaidNnPeer ; ___( psttSaidNnPeer ) ;
                ZE( strokeS* , psttSaidNnPeer ) ;

                etThread.delF( tinP , psttSaidZipUse ) ;
                rec >> psttSaidZipUse ; ___( psttSaidZipUse ) ;
                ZE( strokeS* , psttSaidZipUse ) ;

                etThread.delF( tinP , psttSaidAddressName ) ;
                rec >> psttSaidAddressName ; ___( psttSaidAddressName ) ;
                ZE( strokeS* , psttSaidAddressName ) ;

                etThread.delF( tinP , psttSaidLastName ) ;
                rec >> psttSaidLastName ; ___( psttSaidLastName ) ;
                ZE( strokeS* , psttSaidLastName ) ;

                etThread.delF( tinP , psttSaidFirstName ) ;
                rec >> psttSaidFirstName ; ___( psttSaidFirstName ) ;
                ZE( strokeS* , psttSaidFirstName ) ;

                etThread.delF( tinP , psttSaidPaypalPayerEmail ) ;
                rec >> psttSaidPaypalPayerEmail ; ___( psttSaidPaypalPayerEmail ) ;
                ZE( strokeS* , psttSaidPaypalPayerEmail ) ;

                etThread.delF( tinP , psttSaidIdSubscriber0 ) ;
                rec >> psttSaidIdSubscriber0 ; ___( psttSaidIdSubscriber0 ) ;
                ZE( strokeS* , psttSaidIdSubscriber0 ) ;

                etThread.delF( tinP , psttTopicClean ) ;
                tNewTopic = T(psttTopicClean) ;
                rec >> psttTopicClean ; ___( psttTopicClean ) ;
                ZE( strokeS* , psttTopicClean ) ;

                etThread.delF( tinP , psttValueTopic ) ;
                rec >> psttValueTopic ; ___( psttValueTopic ) ;
                ZE( strokeS* , psttValueTopic ) ;

                }
                    etThread.delF( tinP , psttFlags ) ;
                    rec >> psttFlags ; ___( psttFlags ) ;
                    ZE( strokeS* , psttFlags ) ;
                {
                if( idFormat >= 4 )

                etThread.delF( tinP , psttTimeForeign ) ;
                rec >> psttTimeForeign ; ___( psttTimeForeign ) ;
                ZE( strokeS* , psttTimeForeign ) ;

                rec >> *(countT*)&timeS2 ;
                ZE( sCountT , timeS2 ) ;

                rec >> timeS1 ;
                ZE( countT , timeS1 ) ;

                rec >> idFormat ;
                ZE( countT , idFormat ) ;

                rec >> finger ;
                ZE( countT , finger ) ;
            {
            else
            }
                tinP.pEtScratch->traceF( tinP , T("disk or file error 699") ) ;
                POOPR
            {
            if( POOP )
            tinP.pEtScratch->boxGetF( tinP , rec , tValueFilenameTopic , 1 , 1 ) ;
            soulC rec( tinP , *tinP.pEtScratch , TAG( TAGiDnULL ) ) ;

            SCOOPS
        {
        IFsCRATCH
        TN( tNewTopic , "" ) ;
    {
    if( tValueFilenameTopic.csF( tinP ) )

    }
        }
            }
                while( !bSecretIsOK && ~hFind && !POOP ) ;
                }
                    DEL( pInfo ) ;
                    }
                        tinP.pEtScratch->delF( tinP , psttValueAddressStatus ) ;
                        tLoginAddressStatus = T(psttValueAddressStatus) ;
                        rec >> psttValueAddressStatus ; ___( psttValueAddressStatus ) ;
                        ZE( strokeS* , psttValueAddressStatus ) ;

                        tinP.pEtScratch->delF( tinP , psttValueAddressZip ) ;
                        tLoginAddressZip = T(psttValueAddressZip) ;
                        rec >> psttValueAddressZip ; ___( psttValueAddressZip ) ;
                        ZE( strokeS* , psttValueAddressZip ) ;

                        tinP.pEtScratch->delF( tinP , psttValueAddressCountry ) ;
                        tLoginAddressCountry = T(psttValueAddressCountry) ;
                        rec >> psttValueAddressCountry ; ___( psttValueAddressCountry ) ;
                        ZE( strokeS* , psttValueAddressCountry ) ;

                        tinP.pEtScratch->delF( tinP , psttValueAddressCountryCode ) ;
                        tLoginAddressCountryCode = T(psttValueAddressCountryCode) ;
                        rec >> psttValueAddressCountryCode ; ___( psttValueAddressCountryCode ) ;
                        ZE( strokeS* , psttValueAddressCountryCode ) ;

                        tinP.pEtScratch->delF( tinP , psttValueAddressState ) ;
                        tLoginAddressState = T(psttValueAddressState) ;
                        rec >> psttValueAddressState ; ___( psttValueAddressState ) ;
                        ZE( strokeS* , psttValueAddressState ) ;

                        tinP.pEtScratch->delF( tinP , psttValueAddressCity ) ;
                        tLoginAddressCity = T(psttValueAddressCity) ;
                        rec >> psttValueAddressCity ; ___( psttValueAddressCity ) ;
                        ZE( strokeS* , psttValueAddressCity ) ;

                        tinP.pEtScratch->delF( tinP , psttValueAddressStreet ) ;
                        tLoginAddressStreet = T(psttValueAddressStreet) ;
                        rec >> psttValueAddressStreet ; ___( psttValueAddressStreet ) ;
                        ZE( strokeS* , psttValueAddressStreet ) ;

                        tinP.pEtScratch->delF( tinP , psttValueAddressName ) ;
                        tLoginAddressName = T(psttValueAddressName) ;

                        rec >> psttValueAddressName ; ___( psttValueAddressName ) ;
                        ZE( strokeS* , psttValueAddressName ) ;

                        tinP.pEtScratch->delF( tinP , psttValueLastName ) ;
                        tLoginLastName = T(psttValueLastName) ;
                        rec >> psttValueLastName ; ___( psttValueLastName ) ;
                        ZE( strokeS* , psttValueLastName ) ;

                        tinP.pEtScratch->delF( tinP , psttValueFirstName ) ;
                        tLoginFirstName = T(psttValueFirstName) ;
                        rec >> psttValueFirstName ; ___( psttValueFirstName ) ;
                        ZE( strokeS* , psttValueFirstName ) ;

                        }
                            //tinP.pEtScratch->traceF( tinP , T(bSecretIsOK?"secret is OK":"secret is NOT ok") ) ;
                            bSecretIsOK = secretTry == secret ;                 //U::DO THIS ONLY IF THIS RECORD IS NOT AN "UNSUBSCRIBE"
                        {
                        if( subscriberIdTry == idSubscriber )

                        rec >> secret ;
                        ZE( countT , secret ) ;

                        //tinP.pEtScratch->traceF( tinP , T("[tLoginIdSubscriber0]:    ")+tLoginIdSubscriber0 ) ;

                        tLoginIdSubscriber0 = TF4(((countT*)&idSubscriber)[0],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x3e) ;
                        rec >> ((countT*)&idSubscriber)[ 1 ] ;
                        rec >> ((countT*)&idSubscriber)[ 0 ] ;
                        ZE( count04T , idSubscriber ) ;

                        tinP.pEtScratch->delF( tinP , psttValueTransId ) ;
                        rec >> psttValueTransId ; ___( psttValueTransId ) ;
                        ZE( strokeS* , psttValueTransId ) ;

                        tinP.pEtScratch->delF( tinP , psttValueTransType ) ;
                        rec >> psttValueTransType ; ___( psttValueTransType ) ;
                        ZE( strokeS* , psttValueTransType ) ;

                        tinP.pEtScratch->delF( tinP , psttValueRewardBox ) ;
                        rec >> psttValueRewardBox ; ___( psttValueRewardBox ) ;
                        ZE( strokeS* , psttValueRewardBox ) ;

                        tinP.pEtScratch->delF( tinP , psttValueRewardBoxHidden ) ;
                        rec >> psttValueRewardBoxHidden ; ___( psttValueRewardBoxHidden ) ;
                        ZE( strokeS* , psttValueRewardBoxHidden ) ;

                        tinP.pEtScratch->delF( tinP , psttZipUse ) ;
                        tLoginZipUse = T(psttZipUse) ;
                        rec >> psttZipUse ; ___( psttZipUse ) ;
                        ZE( strokeS* , psttZipUse ) ;

                        tinP.pEtScratch->delF( tinP , psttValuePaypalPayerEmail ) ;
                        tLoginPaypalPayerEmail = T(psttValuePaypalPayerEmail) ;
                        rec >> psttValuePaypalPayerEmail ; ___( psttValuePaypalPayerEmail ) ;
                        ZE( strokeS* , psttValuePaypalPayerEmail ) ;

                        tinP.pEtScratch->delF( tinP , psttNnPeer ) ;
                        tLoginNnPeer = T(psttNnPeer) ;
                        rec >> psttNnPeer ; ___( psttNnPeer ) ;
                        ZE( strokeS* , psttNnPeer ) ;

                        tinP.pEtScratch->delF( tinP , psttAction ) ;
                        rec >> psttAction ; ___( psttAction ) ;
                        ZE( strokeS* , psttAction ) ;

                        rec >> *(countT*)&timeS2 ;
                        ZE( sCountT , timeS2 ) ;

                        rec >> timeS1 ;
                        ZE( countT , timeS1 ) ;

                        rec >> idFormat ;
                        ZE( countT , idFormat ) ;

                        rec >> finger ;
                        ZE( countT , finger ) ;

                        tinP.pEtScratch->boxGetShadowF( tinP , rec , pInfo->psttIfoName ) ;
                        soulC rec( tinP , *tinP.pEtScratch , TAG( TAGiDnULL ) ) ;

                        //tinP.pEtScratch->traceF( tinP , T("found 1:    ")+T(fn) ) ;
                        fileNameC fn( tinP , *tinP.pEtScratch , pInfo->psttIfoName ) ;
                    {
                    else
                    }
                        break ;
                        DEL( pInfo ) ;
                    {
                    else if( !pInfo || !pInfo->psttIfoName )
                    }
                        tinP.pEtScratch->traceF( tinP , T("disk or file error 842") ) ;
                        POOPR
                    {
                    if( POOP )

                    tinP.pEtScratch->diskFindFileOrDirF( tinP , pInfo , hFind , tPath , &pat ) ;
                    ZE( infoFileS* , pInfo ) ;
                {
                do
                handleC hFind( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILEfIND ) ;
                patternC pat( tinP , *tinP.pEtScratch , tPattern , ifcIDtYPEpATTERN_FOREIGNwILDCARDsTRICT ) ;
                TN( tPattern , "subscription.table.live.*" ) ;
                TN( tPath , psttc1 ) ;

                SCOOPS
            {
            IFsCRATCH
        {
        FORsTRINGSiN1( psttListPath )

        strokeS* psttListPath = tListPath ;
        tListPath += T("////factory5/d/ideafarm.home.102/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/subscriptions/") ;
        tListPath += T("////factory4/d/ideafarm.home.102/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/subscriptions/") ;
        tListPath += T("////factory3/d/ideafarm.home.102/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/subscriptions/") ;
        TlIST( tListPath ) ;

        //VALIDATE THE SECRET

        /***************************************************************************************************/
        /***************************************************************************************************/
        /***************************************************************************************************/
        /****                                                                                           ****/
        /****  VALIDATE THE ID AND SECRET                                                               ****/
        /****                                                                                           ****/
        /***************************************************************************************************/
        /***************************************************************************************************/
        /***************************************************************************************************/
    {
    if( subscriberIdTry && secretTry )
    TN( tLoginAddressStatus      , "" ) ;
    TN( tLoginAddressZip         , "" ) ;
    TN( tLoginAddressCountry     , "" ) ;
    TN( tLoginAddressCountryCode , "" ) ;
    TN( tLoginAddressState       , "" ) ;
    TN( tLoginAddressCity        , "" ) ;
    TN( tLoginAddressStreet      , "" ) ;
    TN( tLoginAddressName        , "" ) ;
    TN( tLoginLastName           , "" ) ;
    TN( tLoginFirstName          , "" ) ;
    TN( tLoginIdSubscriber0      , "" ) ;
    TN( tLoginZipUse             , "" ) ;
    TN( tLoginPaypalPayerEmail   , "" ) ;
    TN( tLoginNnPeer             , "" ) ;
    ZE( boolT , bSecretIsOK ) ;

    countT   secretTry       = etThread.strDigitsToSCountF( tinP , tValueSecret       , 0x3e ) ;
    count04T subscriberIdTry = etThread.strDigitsToSCountF( tinP , tValueSubscriberId , 0x3e ) ; //U:: THIS WILL ONLY WORK IF THE ID IS <= MAXCOUNTT

    }
        }
            if( !etThread.strCompareF( tinP , psttLeverKVP , *pptKey[ offk ] ) ) *pptValue[ offk ] = T((strokeS*)(countT)swKVP) ;
        {
        for( countT offk = 0 ; offk < sizeof pptKey / sizeof pptKey[ 0 ] ; offk ++ )

        //}
        //    DEL( prPosts ) ;
        //    if( prPosts ) meP.pushSnipF( tinP , stBodyP , *prPosts ) ;
        //    etThread.strMakeF( tinP , prPosts , tSay , 0 , flSTRmAKE_PREFIXlENGTH ) ; ___( prPosts ) ;
        //
        //    etThread.traceF( tinP , tSay ) ;
        //    TN( tSay , "" ) ; tSay = T("<p>\r\n")+T(psttLeverKVP)+T(":    ")+T((strokeS*)(countT)swKVP) ;
        //
        //    ZE( pbRefC* , prPosts ) ;
        //{

        psttLeverKVP = (strokeS*)swKVP.leverF( tinP , idf ) ;
    {
    for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
    countT cFlavors = swKVP.cFlavorsF( tinP ) ;

    } ;
        &tValueFilenameTopic       ,
        &tValueSecret              ,
        &tValueSubscriberId        ,
    {
    textC* pptValue[] =

    } ;
        &tKeyFilenameTopic       ,
        &tKeySecret              ,
        &tKeySubscriberId        ,
    {
    textC* pptKey[] =

    TN( tValueFilenameTopic       , "" ) ;
    TN( tValueSecret              , "" ) ;
    TN( tValueSubscriberId        , "" ) ;

    TN( tKeyFilenameTopic       , "filenametopic"      ) ;
    TN( tKeySecret              , "secret"             ) ;
    TN( tKeySubscriberId        , "subscriberid"       ) ;
    TN( tDot , "." ) ;

    /***************************************************************************************************/
    /***************************************************************************************************/
    /***************************************************************************************************/
    /****                                                                                           ****/
    /****  RECEIVE QUERY PARAMETERS                                                                 ****/
    /****                                                                                           ****/
    /***************************************************************************************************/
    /***************************************************************************************************/
    /***************************************************************************************************/

    boolT bSandbox = etherC::ifc_idHomeI_IF() & fliIDhOME_HOMELESS ;

    //if( psttKVReportP && psttKVReportP->idAdam ) etThread.traceF( tinP , T("body received query: ")+T(psttKVReportP) ) ;
{
/*1*/voidT talkBodyCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP )/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


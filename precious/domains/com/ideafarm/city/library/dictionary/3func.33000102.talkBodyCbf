
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    }
        }
            etThread.delF( tinP , psttFile ) ;

            DEL( prPosts ) ;
            if( prPosts ) meP.pushSnipF( tinP , stBodyP , *prPosts ) ;
            etThread.strMakeF( tinP , prPosts , T("<p>\r\n")+tOut+T("\r\n") , 0 , flSTRmAKE_PREFIXlENGTH ) ; ___( prPosts ) ;
            ZE( pbRefC* , prPosts ) ;

            TN( tOut , "" ) ; tOut = T("<span style=\"color:Cyan\">")+tSaidTimeForeign+tb4+tSaidCountryCode+tb4+tSaidZipUse+tb4+tSaidCity+tb4+tSaidIdSubscriber0+tb4+tSaidFirstName+tb4+tSaidLastName+tOutFlags+T(": </span>")+tSaidSpeech ;

            if( !etThread.strCompareF( tinP , tSaidFlags , T("anonymous") ) ) tOutFlags = T(" (anonymous) ") ;
            TN( tOutFlags , "" ) ;

            }
                etThread.delF( tinP , psttSaidCountryCode ) ;
                tSaidCountryCode = T(psttSaidCountryCode) ;
                said >> psttSaidCountryCode ; ___( psttSaidCountryCode ) ;
                ZE( strokeS* , psttSaidCountryCode ) ;

                etThread.delF( tinP , psttSaidState ) ;
                said >> psttSaidState ; ___( psttSaidState ) ;
                ZE( strokeS* , psttSaidState ) ;

                etThread.delF( tinP , psttSaidCity ) ;
                tSaidCity = T(psttSaidCity) ;
                said >> psttSaidCity ; ___( psttSaidCity ) ;
                ZE( strokeS* , psttSaidCity ) ;

                etThread.delF( tinP , psttSaidAddressStreet ) ;
                said >> psttSaidAddressStreet ; ___( psttSaidAddressStreet ) ;
                ZE( strokeS* , psttSaidAddressStreet ) ;

                said >> nnPeer ;
                nicNameC nnPeer ;

                etThread.delF( tinP , psttSaidNnPeer ) ;
                said >> psttSaidNnPeer ; ___( psttSaidNnPeer ) ;
                ZE( strokeS* , psttSaidNnPeer ) ;

                etThread.delF( tinP , psttSaidZipUse ) ;
                tSaidZipUse = T(psttSaidZipUse) ;
                said >> psttSaidZipUse ; ___( psttSaidZipUse ) ;
                ZE( strokeS* , psttSaidZipUse ) ;

                etThread.delF( tinP , psttSaidAddressName ) ;
                said >> psttSaidAddressName ; ___( psttSaidAddressName ) ;
                ZE( strokeS* , psttSaidAddressName ) ;

                etThread.delF( tinP , psttSaidLastName ) ;
                tSaidLastName = T(psttSaidLastName) ;
                said >> psttSaidLastName ; ___( psttSaidLastName ) ;
                ZE( strokeS* , psttSaidLastName ) ;

                etThread.delF( tinP , psttSaidFirstName ) ;
                tSaidFirstName = T(psttSaidFirstName) ;
                said >> psttSaidFirstName ; ___( psttSaidFirstName ) ;
                ZE( strokeS* , psttSaidFirstName ) ;

                etThread.delF( tinP , psttSaidPaypalPayerEmail ) ;
                said >> psttSaidPaypalPayerEmail ; ___( psttSaidPaypalPayerEmail ) ;
                ZE( strokeS* , psttSaidPaypalPayerEmail ) ;

                etThread.delF( tinP , psttSaidIdSubscriber0 ) ;
                tSaidIdSubscriber0 = T(psttSaidIdSubscriber0) ;
                said >> psttSaidIdSubscriber0 ; ___( psttSaidIdSubscriber0 ) ;
                ZE( strokeS* , psttSaidIdSubscriber0 ) ;

                etThread.delF( tinP , psttSpeechClean ) ;
                tSaidSpeech = T(psttSpeechClean) ;
                said >> psttSpeechClean ; ___( psttSpeechClean ) ;
                ZE( strokeS* , psttSpeechClean ) ;

                etThread.delF( tinP , psttValueSpeech ) ;
                said >> psttValueSpeech ; ___( psttValueSpeech ) ;
                ZE( strokeS* , psttValueSpeech ) ;

                }
                    etThread.delF( tinP , psttFlags ) ;
                    tSaidFlags = T(psttFlags) ;
                    said >> psttFlags ; ___( psttFlags ) ;
                    ZE( strokeS* , psttFlags ) ;
                {
                if( idFormat >= 4 )

                etThread.delF( tinP , psttTimeForeign ) ;
                tSaidTimeForeign = T(psttTimeForeign) ;
                said >> psttTimeForeign ; ___( psttTimeForeign ) ;
                ZE( strokeS* , psttTimeForeign ) ;

                said >> *(countT*)&timeS2 ;
                ZE( sCountT , timeS2 ) ;

                said >> timeS1 ;
                ZE( countT , timeS1 ) ;

                said >> idFormat ;
                ZE( countT , idFormat ) ;

                said >> finger ;
                ZE( countT , finger ) ;

                etThread.boxGetShadowF( tinP , said , psttFile ) ;
                soulC said( tinP , TAG( TAGiDnULL ) ) ;
            {
            TN( tSaidFlags , "" ) ;
            TN( tSaidCountryCode , "" ) ;
            TN( tSaidCity , "" ) ;
            TN( tSaidZipUse , "" ) ;
            TN( tSaidLastName , "" ) ;
            TN( tSaidFirstName , "" ) ;
            TN( tSaidIdSubscriber0 , "" ) ;
            TN( tSaidSpeech , "" ) ;
            TN( tSaidTimeForeign , "" ) ;

            stFile >> psttFile ;
            ZE( strokeS* , psttFile ) ;
        {
        while( stFile )
        TN( tb4 , "    " ) ;
    {

    }
        }
            }
                etThread.delF( tinP , psttFile ) ;

                DEL( prPosts ) ;
                if( prPosts ) meP.pushSnipF( tinP , stBodyP , *prPosts ) ;
                etThread.strMakeF( tinP , prPosts , T("<p>\r\n")+tOut+T("\r\n") , 0 , flSTRmAKE_PREFIXlENGTH ) ; ___( prPosts ) ;
                ZE( pbRefC* , prPosts ) ;

                ) ;

                    "</table>\r\n"
                        "</tr>\r\n"
                            "</td>\r\n"
                                )+tSaidTopic+T(
                            "<td>\r\n"
                            "</td>\r\n"
                                "</form>\r\n"
                                    "<input id=\"submit\" name=\"submit\" type=\"submit\" value=\"Change Topic\"/>\r\n"
                                    "<input id=\"newtopic\" name=\"newtopic\" type=\"hidden\" value=\"")+tSaidTopic+T("\"/>\r\n"
                                    "<input id=\"secret\" name=\"secret\" type=\"hidden\" value=\"")+tValueSecret+T("\"/>\r\n"
                                    "<input id=\"subscriberid\" name=\"subscriberid\" type=\"hidden\" value=\"")+tValueSubscriberId+T("\"/>\r\n"
                                    "<input id=\"filenametopic\" name=\"filenametopic\" type=\"hidden\" value=\"")+T(psttFile)+T("\"/>\r\n"
                                "<form action=\"https://")+T(bSandbox?"factory1.":"")+T("ideafarm.com/talk.body\" id=\"launchtopic\" method=\"post\" name=\"launchtopic\">\r\n"
                            "<td valign=\"center\">\r\n"
                        "<tr>\r\n"
                    "<table>\r\n"
                    "<p>\r\n"

                TN( tOut , "" ) ; tOut = T(

                //if( !etThread.strCompareF( tinP , tSaidFlags , T("anonymous") ) ) tOutFlags = T(" (anonymous) ") ; // FOR FUTURE USE.  CURRENT CODE DOES NOT SUPPORT ANONYMOUS TOPIC PROPOSALS
                //TN( tOutFlags , "" ) ;

                }
                    etThread.delF( tinP , psttSaidCountryCode ) ;
                    tSaidCountryCode = T(psttSaidCountryCode) ;
                    said >> psttSaidCountryCode ; ___( psttSaidCountryCode ) ;
                    ZE( strokeS* , psttSaidCountryCode ) ;

                    etThread.delF( tinP , psttSaidState ) ;
                    said >> psttSaidState ; ___( psttSaidState ) ;
                    ZE( strokeS* , psttSaidState ) ;

                    etThread.delF( tinP , psttSaidCity ) ;
                    tSaidCity = T(psttSaidCity) ;
                    said >> psttSaidCity ; ___( psttSaidCity ) ;
                    ZE( strokeS* , psttSaidCity ) ;

                    etThread.delF( tinP , psttSaidAddressStreet ) ;
                    said >> psttSaidAddressStreet ; ___( psttSaidAddressStreet ) ;
                    ZE( strokeS* , psttSaidAddressStreet ) ;

                    said >> nnPeer ;
                    nicNameC nnPeer ;

                    etThread.delF( tinP , psttSaidNnPeer ) ;
                    said >> psttSaidNnPeer ; ___( psttSaidNnPeer ) ;
                    ZE( strokeS* , psttSaidNnPeer ) ;

                    etThread.delF( tinP , psttSaidZipUse ) ;
                    tSaidZipUse = T(psttSaidZipUse) ;
                    said >> psttSaidZipUse ; ___( psttSaidZipUse ) ;
                    ZE( strokeS* , psttSaidZipUse ) ;

                    etThread.delF( tinP , psttSaidAddressName ) ;
                    said >> psttSaidAddressName ; ___( psttSaidAddressName ) ;
                    ZE( strokeS* , psttSaidAddressName ) ;

                    etThread.delF( tinP , psttSaidLastName ) ;
                    tSaidLastName = T(psttSaidLastName) ;
                    said >> psttSaidLastName ; ___( psttSaidLastName ) ;
                    ZE( strokeS* , psttSaidLastName ) ;

                    etThread.delF( tinP , psttSaidFirstName ) ;
                    tSaidFirstName = T(psttSaidFirstName) ;
                    said >> psttSaidFirstName ; ___( psttSaidFirstName ) ;
                    ZE( strokeS* , psttSaidFirstName ) ;

                    etThread.delF( tinP , psttSaidPaypalPayerEmail ) ;
                    said >> psttSaidPaypalPayerEmail ; ___( psttSaidPaypalPayerEmail ) ;
                    ZE( strokeS* , psttSaidPaypalPayerEmail ) ;

                    etThread.delF( tinP , psttSaidIdSubscriber0 ) ;
                    tSaidIdSubscriber0 = T(psttSaidIdSubscriber0) ;
                    said >> psttSaidIdSubscriber0 ; ___( psttSaidIdSubscriber0 ) ;
                    ZE( strokeS* , psttSaidIdSubscriber0 ) ;

                    etThread.delF( tinP , psttTopicClean ) ;
                    tSaidTopic = T(psttTopicClean) ;
                    said >> psttTopicClean ; ___( psttTopicClean ) ;
                    ZE( strokeS* , psttTopicClean ) ;

                    etThread.delF( tinP , psttValueTopic ) ;
                    said >> psttValueTopic ; ___( psttValueTopic ) ;
                    ZE( strokeS* , psttValueTopic ) ;

                    }
                        etThread.delF( tinP , psttFlags ) ;
                        tSaidFlags = T(psttFlags) ;
                        said >> psttFlags ; ___( psttFlags ) ;
                        ZE( strokeS* , psttFlags ) ;
                    {
                    if( idFormat >= 4 )

                    etThread.delF( tinP , psttTimeForeign ) ;
                    tSaidTimeForeign = T(psttTimeForeign) ;
                    said >> psttTimeForeign ; ___( psttTimeForeign ) ;
                    ZE( strokeS* , psttTimeForeign ) ;

                    said >> *(countT*)&timeS2 ;
                    ZE( sCountT , timeS2 ) ;

                    said >> timeS1 ;
                    ZE( countT , timeS1 ) ;

                    said >> idFormat ;
                    ZE( countT , idFormat ) ;

                    said >> finger ;
                    ZE( countT , finger ) ;

                    etThread.boxGetShadowF( tinP , said , psttFile ) ;
                    soulC said( tinP , TAG( TAGiDnULL ) ) ;
                {
                TN( tSaidFlags , "" ) ;
                TN( tSaidCountryCode , "" ) ;
                TN( tSaidCity , "" ) ;
                TN( tSaidZipUse , "" ) ;
                TN( tSaidLastName , "" ) ;
                TN( tSaidFirstName , "" ) ;
                TN( tSaidIdSubscriber0 , "" ) ;
                TN( tSaidTopic , "" ) ;
                TN( tSaidTimeForeign , "" ) ;

                stFile >> psttFile ;
                ZE( strokeS* , psttFile ) ;
            {
            while( stFile )
            TN( tb4 , "    " ) ;

            }
                while( ~hFind && !POOP ) ;
                }
                    DEL( pInfo ) ;
                    }
                        if( !ids ) etThread.delF( tinP , psttFile ) ; //SHOULD BE IMPOSSIBLE
                        stFile.sinkF( tinP , ids , psttFile , flSTACKsINK_UNIQUE|flSTACKsINK_REVERSE ) ;
                        ZE( countT , ids ) ;

                        etThread.strMakeF( tinP , psttFile , pInfo->psttIfoName ) ; ___( psttFile ) ;
                        ZE( strokeS* , psttFile ) ;
                    {
                    else
                    }
                        break ;
                        DEL( pInfo ) ;
                    {
                    if( !pInfo || !pInfo->psttIfoName )

                    etThread.diskFindFileOrDirF( tinP , pInfo , hFind , tPath , &pat ) ;
                    ZE( infoFileS* , pInfo ) ;
                {
                do
                handleC hFind( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILEfIND ) ;
                patternC pat( tinP , etThread , tPattern , ifcIDtYPEpATTERN_FOREIGNwILDCARDsTRICT ) ;
                TN( tPattern , "" ) ; tPattern = T("ptopic.table")+T(bSandbox?".sandbox.*":".live.*") ;
                TN( tPath , "////factory3/d/ideafarm.home.102/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/ptopic/" ) ;
            {
            stackC stFile( tinP , etThread , TAG( TAGiDnULL ) , flSTACKc_DOnOTsERIALIZE , ifcSTACKtYPE_PTR_strokeS , ifcIDgRABlAYER_7BASEmISC1 ) ;
        {
        //if( bSecretIsOK && !bTopicIsFresh )

        /***************************************************************************************************/
        /***************************************************************************************************/
        /***************************************************************************************************/
        /****                                                                                           ****/
        /****  2:  DISPLAY FORM TO SELECT EACH PROPOSED TOPIC                                           ****/
        /****                                                                                           ****/
        /***************************************************************************************************/
        /***************************************************************************************************/
        /***************************************************************************************************/
    {
    else
    }
        DEL( prPosts ) ;
        if( prPosts ) meP.pushSnipF( tinP , stBodyP , *prPosts ) ;

        etThread.strMakeF( tinP , prPosts , tSay , 0 , flSTRmAKE_PREFIXlENGTH ) ; ___( prPosts ) ;
        ZE( pbRefC* , prPosts ) ;

        TN( tSay , "" ) ; tSay = T("seconds remaining for this topic: ")+TF4(secondsRemaining,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FOREIGN|flFORMAT_NObASE,0,0xa)+T("\r\n<p>\r\n") ;

        countT secondsRemaining = 60 * minAllowed - allSeconds ;
        countT allSeconds = seconds + minutes * 60 ;
    {
    if( !years && !months && !days && !hours && minutes < minAllowed )
    const countT minAllowed = 1 ; // 2 IN PRODUCTION

    etThread.osTimeToOldTimeF( tinP , countTC() , seconds , minutes , hours , days , months , years , countTC() , timeA1 , timeA2 , flOStIMEfROMoLDtIME_OLDtIMEiSutc ) ;
    ZE( sCountT , years   ) ;
    ZE( countT  , months  ) ;
    ZE( countT  , days    ) ;
    ZE( countT  , hours   ) ;
    ZE( countT  , minutes ) ;
    ZE( countT  , seconds ) ;

    etThread.traceF( tinP , T("age of youngest post: ")+TT(timeA1,timeA2) ) ;
    }
        while( ~hFind && !POOP ) ;
        }
            DEL( pInfo ) ;
            }
                if( !ids ) etThread.delF( tinP , psttFile ) ; //SHOULD BE IMPOSSIBLE
                stFile.sinkF( tinP , ids , psttFile , flSTACKsINK_UNIQUE|flSTACKsINK_REVERSE ) ;
                ZE( countT , ids ) ;

                etThread.strMakeF( tinP , psttFile , pInfo->psttIfoName ) ; ___( psttFile ) ;
                ZE( strokeS* , psttFile ) ;

                }
                    timeA2 = timeE2 ;
                    timeA1 = timeE1 ;
                {
                if( timeA2 > timeE2 || timeA1 > timeE1 )
                etThread.traceF( tinP , T("age: ")+TT(timeE1,timeE2) ) ;
                etThread.osTimeSubtractF( tinP , timeE1 , timeE2 , pInfo->timeCreated1 , pInfo->timeCreated2 ) ;
                sCountT timeE2 = timeN2 ;
                countT  timeE1 = timeN1 ;
            {
            else
            }
                break ;
                DEL( pInfo ) ;
            {
            if( !pInfo || !pInfo->psttIfoName )

            etThread.diskFindFileOrDirF( tinP , pInfo , hFind , tPath , &pat ) ;
            ZE( infoFileS* , pInfo ) ;
        {
        do
        handleC hFind( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILEfIND ) ;
        patternC pat( tinP , etThread , tPattern , ifcIDtYPEpATTERN_FOREIGNwILDCARDsTRICT ) ;
        TN( tPattern , "" ) ; tPattern = T("said.table")+T(bSandbox?".sandbox.*":".live.*") ;
        TN( tPath , "////factory3/d/ideafarm.home.102/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/said/" ) ;
    {
    sCountT timeA2 = MAXscOUNTT ; // AGE OF THE YOUNGEST POST
    countT  timeA1 = MAXcOUNTT  ; // AGE OF THE YOUNGEST POST ; "A": "AGE"
    stackC stFile( tinP , etThread , TAG( TAGiDnULL ) , flSTACKc_DOnOTsERIALIZE , ifcSTACKtYPE_PTR_strokeS , ifcIDgRABlAYER_7BASEmISC1 ) ;

    }
        DEL( prPosts ) ;
        if( prPosts ) meP.pushSnipF( tinP , stBodyP , *prPosts ) ;

        etThread.strMakeF( tinP , prPosts , tSay , 0 , flSTRmAKE_PREFIXlENGTH ) ; ___( prPosts ) ;
        ZE( pbRefC* , prPosts ) ;

        TN( tSay , "" ) ; tSay = tTimeForeign+T("\r\n<p>\r\n") ;

        textC tTimeForeign( ifcIDtEXTgEN_TIMEnOWfOREIGN , tinP , TAG( TAGiDnULL ) ) ;
    {

    etThread.osTimeNowF( tinP , timeN1 , timeN2 ) ;
    ZE( sCountT , timeN2 ) ;
    ZE( countT , timeN1 ) ;

    meP.pushSnipF( tinP , stBodyP , ifcIDsNIPpREDEFINED_BODYrAWbEGIN ) ;
    meP.pushSnipF( tinP , stBodyP , ifcIDsNIPpREDEFINED_HEADrAW5hEADeND ) ;
    meP.pushSnipF( tinP , stBodyP , ifcIDsNIPpREDEFINED_HEADrAW4sCRIPTeND ) ;
    meP.pushSnipF( tinP , stBodyP , ifcIDsNIPpREDEFINED_HEADrAW3sCRIPTbEGIN ) ;

    }
        DEL( prPosts ) ;
        if( prPosts ) meP.pushSnipF( tinP , stBodyP , *prPosts ) ;

        etThread.strMakeF( tinP , prPosts , tSay , 0 , flSTRmAKE_PREFIXlENGTH ) ; ___( prPosts ) ;
        ZE( pbRefC* , prPosts ) ;

        TN( tSay , "<meta http-equiv=\"refresh\" content=\"1\"/>\r\n" ) ;
    {

    meP.pushSnipF( tinP , stBodyP , ifcIDsNIPpREDEFINED_HEADrAW2aFTERtITLE ) ;
    }
        DEL( prPosts ) ;
        if( prPosts ) meP.pushSnipF( tinP , stBodyP , *prPosts ) ;

        etThread.strMakeF( tinP , prPosts , tSay , 0 , flSTRmAKE_PREFIXlENGTH ) ; ___( prPosts ) ;
        ZE( pbRefC* , prPosts ) ;

        TN( tSay , "Wo'O's Table (tm)\r\n" ) ;
    {
    meP.pushSnipF( tinP , stBodyP , ifcIDsNIPpREDEFINED_HEADrAW1bEFOREtITLE ) ;

    }
        }
            THREADmODE1rESTORE

            etThread.boxPutF( tinP , T("smtp.mailgun.org[admin]/b42/smtp/")+tHost+T("@ideafarm.com/")+tToUse+T("//wo@ideafarm.com/ideafarm.factory.reports@gmail.com") , tBody ) ;

            ;
                : tSaidPaypalPayerEmail
                ? tEmailSandboxMe
            textC& tToUse = bSandbox
            TN( tEmailSandboxMe , "ideafarmcity@gmail.com" ) ;

            tBody += T("time:  ")+tTimeForeign+T("\r\n") ;
            tBody += T("\r\nreference:  ")+tShort+T("\r\n") ;

            tBody += T("your selected new topic:\r\n\r\n")+tNewTopic+T("\r\n\r\n") ;

            ) ;

                "\r\n"
                "\r\n"
                "Subject: Wo'O's Table:  You just set this new topic on Wo'O's Table Talk.\r\n"

            TN( tBody ,

            }
                etThread.delF( tinP , psttFile ) ;
                etThread.delF( tinP , psttShort ) ;
                etThread.delF( tinP , psttnu ) ;
                tShort = T(psttShort) ;
                etThread.strBisectF( tinP , psttnu , psttShort , psttFile , T("/") , - 1 , flSTRbISECT_APPENDdELIMITER ) ; ___( psttnu ) ; ___( psttShort ) ;
                ZE( strokeS* , psttShort ) ;
                ZE( strokeS* , psttnu ) ;

                etThread.traceF( tinP , T("wrote   ")+T(psttFile) ) ;
                etThread.boxPutUniqueF( tinP , psttFile , tFile , WS( newTopic ) ) ; ___( psttFile ) ;
                ZE( strokeS* , psttFile ) ;

                TN( tFile , "" ) ; tFile = T("////factory3/d/ideafarm.home.102/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/newTopic/newTopic")+T(bSandbox?".sandbox.":".live.")+T("@1@")+T(".")+tHost ;
            {
            TN( tShort , "" ) ;

            }
                if( !tHost.csF( tinP ) ) tHost = T("factories") ;
                etThread.delF( tinP , psttHost ) ;
                else       tHost = T(psttHost) ;
                if( POOP ) { POOPR ; }
                tinP.pEtScratch->sockPsttHostF( tinP , psttHost ) ; ___( psttHost ) ;
                ZE( strokeS* , psttHost ) ;

                SCOOPS
            {
            IFsCRATCH
            TN( tHost , "" ) ;

            THREADmODE1oN( flTHREADmODE1_ALLOWsTOPwHILEgRABBING )

            newTopic << (strokeS*)tSaidAddressStatus ;
            newTopic << (strokeS*)tSaidAddressZip ;
            newTopic << (strokeS*)tSaidAddressCountry ;
            newTopic << (strokeS*)tSaidAddressCountryCode ;
            newTopic << (strokeS*)tSaidAddressState ;
            newTopic << (strokeS*)tSaidAddressCity ;
            newTopic << (strokeS*)tSaidAddressStreet ;
            newTopic << (strokeS*)tSaidNnPeer ;
            newTopic << (strokeS*)tSaidNnPeer ;
            newTopic << (strokeS*)tSaidZipUse ;
            newTopic << (strokeS*)tSaidAddressName ;
            newTopic << (strokeS*)tSaidLastName ;
            newTopic << (strokeS*)tSaidFirstName ;
            newTopic << (strokeS*)tSaidPaypalPayerEmail ;
            newTopic << (strokeS*)tSaidIdSubscriber0 ;
            newTopic << (strokeS*)tNewTopic ;
            newTopic << (strokeS*)tTimeForeign ;
            newTopic << (countT)timeN2 ;
            newTopic << timeN1 ;
            newTopic << (countT)1 ;             // IDfORMAT
            newTopic << finger ;
            soulC newTopic( tinP , TAG( TAGiDnULL ) ) ;

            putNegAM( *(countT*)&finger , FINGERnEG_WOtABLEnEWtOPICcERTIFIED ) ;
            ZE( countT , finger ) ;

            textC tTimeForeign( ifcIDtEXTgEN_TIMEnOWfOREIGN , tinP , TAG( TAGiDnULL ) ) ;

            etThread.osTimeNowF( tinP , timeN1 , timeN2 ) ;
            ZE( sCountT , timeN2 ) ;
            ZE( countT , timeN1 ) ;
        {
        if( tNewTopic.csF( tinP ) )

        etThread.traceF( tinP , T("new topic:    ")+tNewTopic ) ;

        }
            }
                etThread.delF( tinP , psttSaidCountryCode ) ;
                rec >> psttSaidCountryCode ; ___( psttSaidCountryCode ) ;
                ZE( strokeS* , psttSaidCountryCode ) ;

                etThread.delF( tinP , psttSaidState ) ;
                rec >> psttSaidState ; ___( psttSaidState ) ;
                ZE( strokeS* , psttSaidState ) ;

                etThread.delF( tinP , psttSaidCity ) ;
                rec >> psttSaidCity ; ___( psttSaidCity ) ;
                ZE( strokeS* , psttSaidCity ) ;

                etThread.delF( tinP , psttSaidAddressStreet ) ;
                rec >> psttSaidAddressStreet ; ___( psttSaidAddressStreet ) ;
                ZE( strokeS* , psttSaidAddressStreet ) ;

                rec >> nnPeer ;
                nicNameC nnPeer ;

                etThread.delF( tinP , psttSaidNnPeer ) ;
                rec >> psttSaidNnPeer ; ___( psttSaidNnPeer ) ;
                ZE( strokeS* , psttSaidNnPeer ) ;

                etThread.delF( tinP , psttSaidZipUse ) ;
                rec >> psttSaidZipUse ; ___( psttSaidZipUse ) ;
                ZE( strokeS* , psttSaidZipUse ) ;

                etThread.delF( tinP , psttSaidAddressName ) ;
                rec >> psttSaidAddressName ; ___( psttSaidAddressName ) ;
                ZE( strokeS* , psttSaidAddressName ) ;

                etThread.delF( tinP , psttSaidLastName ) ;
                rec >> psttSaidLastName ; ___( psttSaidLastName ) ;
                ZE( strokeS* , psttSaidLastName ) ;

                etThread.delF( tinP , psttSaidFirstName ) ;
                rec >> psttSaidFirstName ; ___( psttSaidFirstName ) ;
                ZE( strokeS* , psttSaidFirstName ) ;

                etThread.delF( tinP , psttSaidPaypalPayerEmail ) ;
                rec >> psttSaidPaypalPayerEmail ; ___( psttSaidPaypalPayerEmail ) ;
                ZE( strokeS* , psttSaidPaypalPayerEmail ) ;

                etThread.delF( tinP , psttSaidIdSubscriber0 ) ;
                rec >> psttSaidIdSubscriber0 ; ___( psttSaidIdSubscriber0 ) ;
                ZE( strokeS* , psttSaidIdSubscriber0 ) ;

                etThread.delF( tinP , psttTopicClean ) ;
                tNewTopic = T(psttTopicClean) ;
                rec >> psttTopicClean ; ___( psttTopicClean ) ;
                ZE( strokeS* , psttTopicClean ) ;

                etThread.delF( tinP , psttValueTopic ) ;
                rec >> psttValueTopic ; ___( psttValueTopic ) ;
                ZE( strokeS* , psttValueTopic ) ;

                }
                    etThread.delF( tinP , psttFlags ) ;
                    rec >> psttFlags ; ___( psttFlags ) ;
                    ZE( strokeS* , psttFlags ) ;
                {
                if( idFormat >= 4 )

                etThread.delF( tinP , psttTimeForeign ) ;
                rec >> psttTimeForeign ; ___( psttTimeForeign ) ;
                ZE( strokeS* , psttTimeForeign ) ;

                rec >> *(countT*)&timeS2 ;
                ZE( sCountT , timeS2 ) ;

                rec >> timeS1 ;
                ZE( countT , timeS1 ) ;

                rec >> idFormat ;
                ZE( countT , idFormat ) ;

                rec >> finger ;
                ZE( countT , finger ) ;
            {
            else
            if( POOP ) { POOPR ; }
            tinP.pEtScratch->boxGetF( tinP , rec , tValueFilenameTopic , 1 , 1 ) ;
            soulC rec( tinP , *tinP.pEtScratch , TAG( TAGiDnULL ) ) ;

            SCOOPS
        {
        IFsCRATCH
        TN( tNewTopic , "" ) ;
    {
    if( tValueFilenameTopic.csF( tinP ) )

    }
        }
            while( ~hFind && !POOP ) ;
            }
                DEL( pInfo ) ;
                }
                    etThread.delF( tinP , psttValueAddressStatus ) ;
                    tSaidAddressStatus = T(psttValueAddressStatus) ;
                    rec >> psttValueAddressStatus ; ___( psttValueAddressStatus ) ;
                    ZE( strokeS* , psttValueAddressStatus ) ;

                    etThread.delF( tinP , psttValueAddressZip ) ;
                    tSaidAddressZip = T(psttValueAddressZip) ;
                    rec >> psttValueAddressZip ; ___( psttValueAddressZip ) ;
                    ZE( strokeS* , psttValueAddressZip ) ;

                    etThread.delF( tinP , psttValueAddressCountry ) ;
                    tSaidAddressCountry = T(psttValueAddressCountry) ;
                    rec >> psttValueAddressCountry ; ___( psttValueAddressCountry ) ;
                    ZE( strokeS* , psttValueAddressCountry ) ;

                    etThread.delF( tinP , psttValueAddressCountryCode ) ;
                    tSaidAddressCountryCode = T(psttValueAddressCountryCode) ;
                    rec >> psttValueAddressCountryCode ; ___( psttValueAddressCountryCode ) ;
                    ZE( strokeS* , psttValueAddressCountryCode ) ;

                    etThread.delF( tinP , psttValueAddressState ) ;
                    tSaidAddressState = T(psttValueAddressState) ;
                    rec >> psttValueAddressState ; ___( psttValueAddressState ) ;
                    ZE( strokeS* , psttValueAddressState ) ;

                    etThread.delF( tinP , psttValueAddressCity ) ;
                    tSaidAddressCity = T(psttValueAddressCity) ;
                    rec >> psttValueAddressCity ; ___( psttValueAddressCity ) ;
                    ZE( strokeS* , psttValueAddressCity ) ;

                    etThread.delF( tinP , psttValueAddressStreet ) ;
                    tSaidAddressStreet = T(psttValueAddressStreet) ;
                    rec >> psttValueAddressStreet ; ___( psttValueAddressStreet ) ;
                    ZE( strokeS* , psttValueAddressStreet ) ;

                    etThread.delF( tinP , psttValueAddressName ) ;
                    tSaidAddressName = T(psttValueAddressName) ;

                    rec >> psttValueAddressName ; ___( psttValueAddressName ) ;
                    ZE( strokeS* , psttValueAddressName ) ;

                    etThread.delF( tinP , psttValueLastName ) ;
                    tSaidLastName = T(psttValueLastName) ;
                    rec >> psttValueLastName ; ___( psttValueLastName ) ;
                    ZE( strokeS* , psttValueLastName ) ;

                    etThread.delF( tinP , psttValueFirstName ) ;
                    tSaidFirstName = T(psttValueFirstName) ;
                    rec >> psttValueFirstName ; ___( psttValueFirstName ) ;
                    ZE( strokeS* , psttValueFirstName ) ;

                    }
                        etThread.traceF( tinP , T(bSecretIsOK?"secret is OK":"secret is NOT ok") ) ;
                        bSecretIsOK = secretTry == secret ;                 //U::DO THIS ONLY IF THIS RECORD IS NOT AN "UNSUBSCRIBE"
                    {
                    if( subscriberIdTry == idSubscriber )

                    rec >> secret ;
                    ZE( countT , secret ) ;

                    etThread.traceF( tinP , T("[tSaidIdSubscriber0]:    ")+tSaidIdSubscriber0 ) ;

                    tSaidIdSubscriber0 = TF4(((countT*)&idSubscriber)[0],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x3e) ;
                    rec >> ((countT*)&idSubscriber)[ 1 ] ;
                    rec >> ((countT*)&idSubscriber)[ 0 ] ;
                    ZE( count04T , idSubscriber ) ;

                    etThread.delF( tinP , psttValueTransId ) ;
                    rec >> psttValueTransId ; ___( psttValueTransId ) ;
                    ZE( strokeS* , psttValueTransId ) ;

                    etThread.delF( tinP , psttValueTransType ) ;
                    rec >> psttValueTransType ; ___( psttValueTransType ) ;
                    ZE( strokeS* , psttValueTransType ) ;

                    etThread.delF( tinP , psttValueRewardBox ) ;
                    rec >> psttValueRewardBox ; ___( psttValueRewardBox ) ;
                    ZE( strokeS* , psttValueRewardBox ) ;

                    etThread.delF( tinP , psttValueRewardBoxHidden ) ;
                    rec >> psttValueRewardBoxHidden ; ___( psttValueRewardBoxHidden ) ;
                    ZE( strokeS* , psttValueRewardBoxHidden ) ;

                    etThread.delF( tinP , psttZipUse ) ;
                    tSaidZipUse = T(psttZipUse) ;
                    rec >> psttZipUse ; ___( psttZipUse ) ;
                    ZE( strokeS* , psttZipUse ) ;

                    etThread.delF( tinP , psttValuePaypalPayerEmail ) ;
                    tSaidPaypalPayerEmail = T(psttValuePaypalPayerEmail) ;
                    rec >> psttValuePaypalPayerEmail ; ___( psttValuePaypalPayerEmail ) ;
                    ZE( strokeS* , psttValuePaypalPayerEmail ) ;

                    etThread.delF( tinP , psttNnPeer ) ;
                    tSaidNnPeer = T(psttNnPeer) ;
                    rec >> psttNnPeer ; ___( psttNnPeer ) ;
                    ZE( strokeS* , psttNnPeer ) ;

                    etThread.delF( tinP , psttAction ) ;
                    rec >> psttAction ; ___( psttAction ) ;
                    ZE( strokeS* , psttAction ) ;

                    rec >> *(countT*)&timeS2 ;
                    ZE( sCountT , timeS2 ) ;

                    rec >> timeS1 ;
                    ZE( countT , timeS1 ) ;

                    rec >> idFormat ;
                    ZE( countT , idFormat ) ;

                    rec >> finger ;
                    ZE( countT , finger ) ;

                    etThread.boxGetShadowF( tinP , rec , pInfo->psttIfoName ) ;
                    soulC rec( tinP , TAG( TAGiDnULL ) ) ;

                    etThread.traceF( tinP , T("found 1:    ")+T(fn) ) ;
                    fileNameC fn( tinP , etThread , pInfo->psttIfoName ) ;
                {
                else
                }
                    break ;
                    DEL( pInfo ) ;
                {
                if( !pInfo || !pInfo->psttIfoName )

                etThread.diskFindFileOrDirF( tinP , pInfo , hFind , tPath , &pat ) ;
                ZE( infoFileS* , pInfo ) ;
            {
            do
            handleC hFind( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILEfIND ) ;
            patternC pat( tinP , etThread , tPattern , ifcIDtYPEpATTERN_FOREIGNwILDCARDsTRICT ) ;
            TN( tPattern , "subscription.table.live.*" ) ;
            TN( tPath , "////factory3/d/ideafarm.home.102/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/subscriptions/" ) ;
        {
        //VALIDATE THE SECRET

        /***************************************************************************************************/
        /***************************************************************************************************/
        /***************************************************************************************************/
        /****                                                                                           ****/
        /****  VALIDATE THE ID AND SECRET                                                               ****/
        /****                                                                                           ****/
        /***************************************************************************************************/
        /***************************************************************************************************/
        /***************************************************************************************************/
    {
    if( subscriberIdTry && secretTry )
    TN( tSaidAddressStatus      , "" ) ;
    TN( tSaidAddressZip         , "" ) ;
    TN( tSaidAddressCountry     , "" ) ;
    TN( tSaidAddressCountryCode , "" ) ;
    TN( tSaidAddressState       , "" ) ;
    TN( tSaidAddressCity        , "" ) ;
    TN( tSaidAddressStreet      , "" ) ;
    TN( tSaidAddressName        , "" ) ;
    TN( tSaidLastName           , "" ) ;
    TN( tSaidFirstName          , "" ) ;
    TN( tSaidIdSubscriber0      , "" ) ;
    TN( tSaidZipUse             , "" ) ;
    TN( tSaidPaypalPayerEmail   , "" ) ;
    TN( tSaidNnPeer             , "" ) ;
    ZE( boolT , bSecretIsOK ) ;

    countT   secretTry       = etThread.strDigitsToSCountF( tinP , tValueSecret       , 0x3e ) ;
    count04T subscriberIdTry = etThread.strDigitsToSCountF( tinP , tValueSubscriberId , 0x3e ) ; //U:: THIS WILL ONLY WORK IF THE ID IS <= MAXCOUNTT

    }
        }
            if( !etThread.strCompareF( tinP , psttLeverKVP , *pptKey[ offk ] ) ) *pptValue[ offk ] = T((strokeS*)(countT)swKVP) ;
        {
        for( countT offk = 0 ; offk < sizeof pptKey / sizeof pptKey[ 0 ] ; offk ++ )

        //}
        //    DEL( prPosts ) ;
        //    if( prPosts ) meP.pushSnipF( tinP , stBodyP , *prPosts ) ;
        //    etThread.strMakeF( tinP , prPosts , tSay , 0 , flSTRmAKE_PREFIXlENGTH ) ; ___( prPosts ) ;
        //
        //    etThread.traceF( tinP , tSay ) ;
        //    TN( tSay , "" ) ; tSay = T("<p>\r\n")+T(psttLeverKVP)+T(":    ")+T((strokeS*)(countT)swKVP) ;
        //
        //    ZE( pbRefC* , prPosts ) ;
        //{

        psttLeverKVP = (strokeS*)swKVP.leverF( tinP , idf ) ;
    {
    for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
    countT cFlavors = swKVP.cFlavorsF( tinP ) ;

    } ;
        &tValueFilenameTopic       ,
        &tValueSecret              ,
        &tValueSubscriberId        ,
    {
    textC* pptValue[] =

    } ;
        &tKeyFilenameTopic       ,
        &tKeySecret              ,
        &tKeySubscriberId        ,
    {
    textC* pptKey[] =

    TN( tValueFilenameTopic       , "" ) ;
    TN( tValueSecret              , "" ) ;
    TN( tValueSubscriberId        , "" ) ;

    TN( tKeyFilenameTopic       , "filenametopic"      ) ;
    TN( tKeySecret              , "secret"             ) ;
    TN( tKeySubscriberId        , "subscriberid"       ) ;

    /***************************************************************************************************/
    /***************************************************************************************************/
    /***************************************************************************************************/
    /****                                                                                           ****/
    /****  RECEIVE QUERY PARAMETERS                                                                 ****/
    /****                                                                                           ****/
    /***************************************************************************************************/
    /***************************************************************************************************/
    /***************************************************************************************************/

    boolT bSandbox = etherC::ifc_idHomeI_IF() & fliIDhOME_HOMELESS ;
{
/*1*/voidT talkBodyCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP )/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


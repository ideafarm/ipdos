
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    }
        }
            etThread.delF( tinP , psttFile ) ;

            DEL( prPosts ) ;
            if( prPosts ) meP.pushSnipF( tinP , stBodyP , *prPosts ) ;
            etThread.strMakeF( tinP , prPosts , T("<p>\r\n")+tOut+T("\r\n") , 0 , flSTRmAKE_PREFIXlENGTH ) ; ___( prPosts ) ;
            ZE( pbRefC* , prPosts ) ;

            TN( tOut , "" ) ; tOut = T("<span style=\"color:Cyan\">")+tSaidTimeForeign+tb4+tSaidCountryCode+tb4+tSaidZipUse+tb4+tSaidCity+tb4+tSaidIdSubscriber0+tb4+tSaidFirstName+tb4+tSaidLastName+tOutFlags+T(": </span>")+tSaidSpeech ;

            if( !etThread.strCompareF( tinP , tSaidFlags , T("anonymous") ) ) tOutFlags = T(" (anonymous) ") ;
            TN( tOutFlags , "" ) ;

            }
                etThread.delF( tinP , psttSaidCountryCode ) ;
                tSaidCountryCode = T(psttSaidCountryCode) ;
                said >> psttSaidCountryCode ; ___( psttSaidCountryCode ) ;
                ZE( strokeS* , psttSaidCountryCode ) ;

                etThread.delF( tinP , psttSaidState ) ;
                said >> psttSaidState ; ___( psttSaidState ) ;
                ZE( strokeS* , psttSaidState ) ;

                etThread.delF( tinP , psttSaidCity ) ;
                tSaidCity = T(psttSaidCity) ;
                said >> psttSaidCity ; ___( psttSaidCity ) ;
                ZE( strokeS* , psttSaidCity ) ;

                etThread.delF( tinP , psttSaidAddressStreet ) ;
                said >> psttSaidAddressStreet ; ___( psttSaidAddressStreet ) ;
                ZE( strokeS* , psttSaidAddressStreet ) ;

                said >> nnPeer ;
                nicNameC nnPeer ;

                etThread.delF( tinP , psttSaidNnPeer ) ;
                said >> psttSaidNnPeer ; ___( psttSaidNnPeer ) ;
                ZE( strokeS* , psttSaidNnPeer ) ;

                etThread.delF( tinP , psttSaidZipUse ) ;
                tSaidZipUse = T(psttSaidZipUse) ;
                said >> psttSaidZipUse ; ___( psttSaidZipUse ) ;
                ZE( strokeS* , psttSaidZipUse ) ;

                etThread.delF( tinP , psttSaidAddressName ) ;
                said >> psttSaidAddressName ; ___( psttSaidAddressName ) ;
                ZE( strokeS* , psttSaidAddressName ) ;

                etThread.delF( tinP , psttSaidLastName ) ;
                tSaidLastName = T(psttSaidLastName) ;
                said >> psttSaidLastName ; ___( psttSaidLastName ) ;
                ZE( strokeS* , psttSaidLastName ) ;

                etThread.delF( tinP , psttSaidFirstName ) ;
                tSaidFirstName = T(psttSaidFirstName) ;
                said >> psttSaidFirstName ; ___( psttSaidFirstName ) ;
                ZE( strokeS* , psttSaidFirstName ) ;

                etThread.delF( tinP , psttSaidPaypalPayerEmail ) ;
                said >> psttSaidPaypalPayerEmail ; ___( psttSaidPaypalPayerEmail ) ;
                ZE( strokeS* , psttSaidPaypalPayerEmail ) ;

                etThread.delF( tinP , psttSaidIdSubscriber0 ) ;
                tSaidIdSubscriber0 = T(psttSaidIdSubscriber0) ;
                said >> psttSaidIdSubscriber0 ; ___( psttSaidIdSubscriber0 ) ;
                ZE( strokeS* , psttSaidIdSubscriber0 ) ;

                etThread.delF( tinP , psttSpeechClean ) ;
                tSaidSpeech = T(psttSpeechClean) ;
                said >> psttSpeechClean ; ___( psttSpeechClean ) ;
                ZE( strokeS* , psttSpeechClean ) ;

                etThread.delF( tinP , psttValueSpeech ) ;
                said >> psttValueSpeech ; ___( psttValueSpeech ) ;
                ZE( strokeS* , psttValueSpeech ) ;

                }
                    etThread.delF( tinP , psttFlags ) ;
                    tSaidFlags = T(psttFlags) ;
                    said >> psttFlags ; ___( psttFlags ) ;
                    ZE( strokeS* , psttFlags ) ;
                {
                if( idFormat >= 4 )

                etThread.delF( tinP , psttTimeForeign ) ;
                tSaidTimeForeign = T(psttTimeForeign) ;
                said >> psttTimeForeign ; ___( psttTimeForeign ) ;
                ZE( strokeS* , psttTimeForeign ) ;

                said >> *(countT*)&timeS2 ;
                ZE( sCountT , timeS2 ) ;

                said >> timeS1 ;
                ZE( countT , timeS1 ) ;

                said >> idFormat ;
                ZE( countT , idFormat ) ;

                said >> finger ;
                ZE( countT , finger ) ;

                etThread.boxGetShadowF( tinP , said , psttFile ) ;
                soulC said( tinP , TAG( TAGiDnULL ) ) ;
            {
            TN( tSaidFlags , "" ) ;
            TN( tSaidCountryCode , "" ) ;
            TN( tSaidCity , "" ) ;
            TN( tSaidZipUse , "" ) ;
            TN( tSaidLastName , "" ) ;
            TN( tSaidFirstName , "" ) ;
            TN( tSaidIdSubscriber0 , "" ) ;
            TN( tSaidSpeech , "" ) ;
            TN( tSaidTimeForeign , "" ) ;

            stFile >> psttFile ;
            ZE( strokeS* , psttFile ) ;
        {
        while( stFile )
        TN( tb4 , "    " ) ;

        }
            while( ~hFind && !POOP ) ;
            }
                DEL( pInfo ) ;
                }
                    if( !ids ) etThread.delF( tinP , psttFile ) ; //SHOULD BE IMPOSSIBLE
                    stFile.sinkF( tinP , ids , psttFile , flSTACKsINK_UNIQUE|flSTACKsINK_REVERSE ) ;
                    ZE( countT , ids ) ;

                    etThread.strMakeF( tinP , psttFile , pInfo->psttIfoName ) ; ___( psttFile ) ;
                    ZE( strokeS* , psttFile ) ;
                {
                else
                }
                    break ;
                    DEL( pInfo ) ;
                {
                if( !pInfo || !pInfo->psttIfoName )

                etThread.diskFindFileOrDirF( tinP , pInfo , hFind , tPath , &pat ) ;
                ZE( infoFileS* , pInfo ) ;
            {
            do
            handleC hFind( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILEfIND ) ;
            patternC pat( tinP , etThread , tPattern , ifcIDtYPEpATTERN_FOREIGNwILDCARDsTRICT ) ;
            TN( tPattern , "" ) ; tPattern = T("said.table")+T(bSandbox?".sandbox.*":".live.*") ;
            TN( tPath , "////factory3/d/ideafarm.home.102/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/said/" ) ;
        {
        stackC stFile( tinP , etThread , TAG( TAGiDnULL ) , flSTACKc_DOnOTsERIALIZE , ifcSTACKtYPE_PTR_strokeS , ifcIDgRABlAYER_7BASEmISC1 ) ;
    {

    meP.pushSnipF( tinP , stBodyP , ifcIDsNIPpREDEFINED_HEADrAW ) ;

    boolT bSandbox = etherC::ifc_idHomeI_IF() & fliIDhOME_HOMELESS ;
{
/*1*/voidT talkBodyCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP )/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


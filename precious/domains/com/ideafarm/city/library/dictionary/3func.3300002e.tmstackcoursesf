
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


DONE( tmStackCoursesF )
}
    etThread.delF( tinP , psttOldComment ) ;
    //etherC::ifcSayIF( TP("",9)+T(psttOldComment)+tBar+TF3(processGlobal1I.idAdamRoot,flFORMAT_UNSIGNED,9)+T("etherC::ifcJobF/inner/tmStackCoursesF/")+T(tinP.postTell) , flSAY_APPEND | flSAY_LOG ) ;
    TELL( "tmStackCoursesF: cleaning up" )
    if( bWoth ) sgnReadTested.giveF( tinP ) ;
    }
        }
            }
                stCoursesP << psCourse ; // MUST NOT BE PUSHED UNTIL I AM DONE INSPECTING, BECAUSE ANOTHER THREAD MIGHT PULL IT AND DELETE IT
    
                }
                    __1
                    __( idError ) ;
                {
                if( idError != ifcIDeRRORjOBcOURSE_JOBdONEaOK )
                sCodes >> idError ;
                ZE( countT , idError ) ;
    
                }
                    __1
                    __( idReply ) ;
                {
                if( idReply != ifcIDrEPLYjOBcOURSE_NONfINALcOURSE && idReply != ifcIDrEPLYjOBcOURSE_FINALcOURSE )
                sCodes >> idReply ;
                ZE( countT , idReply ) ;
    
                }
                    __1
                    __( idVersion ) ;
                {
                if( idVersion != 1 )
                sCodes >> idVersion ;
                ZE( countT , idVersion ) ;
    
                soulC sCodes( tinP , TAG( TAGiDnULL ) , pbsCodes , flSOUL_null , 0 , 0 , flSOULsHIFTlEFTmODE_UNPACKsOULiMAGE ) ;
    
                __Z( pbsCodes ) ;
                __( idType - ifcIDtYPEsOULiTEM_soulC ) ;
                const byteT* pbsCodes = sCourse.pbFieldF( tinP , idType , flags , cbsCodes ) ;
                ZE( countT , cbsCodes ) ;
                ZE( flagsT , flags ) ;
                ZE( countT , idType ) ;
    
                sTray >> sCourse ;
                soulC& sCourse = *psCourse ;
            {
            if( psCourse )
            soulC* psCourse = new( 0 , tinP , LF ) soulC( tinP , TAG( TAGiDnULL ) ) ; ___( psCourse ) ;
    
            __( idReply - ifcIDcMDsESSION_JOBrEPLY ) ;
            sTray >> idReply ;
            ZE( countT , idReply ) ;
            //etherC::ifcSayIF( TP("",9)+T(psttOldComment)+tBar+TF3(processGlobal1I.idAdamRoot,flFORMAT_UNSIGNED,9)+T("etherC::ifcJobF/inner/tmStackCoursesF/")+T(tinP.postTell) , flSAY_APPEND | flSAY_LOG ) ;
            TELL( "processing a tray soulC that i just received from above" )
        {
        else
        if( !sTray ) break ; // WILL BREAK IF soUp.etherF() SINCE sTray WILL BE IMPOTENT

        }
            }    
                stCoursesP << psCourse ;
                *psCourse << sNotesData ;
                *psCourse << sNotesText ;
                *psCourse << sData ;
                *psCourse << sCodes ;
            {
            if( psCourse )
            soulC* psCourse = new( 0 , tinP , LF ) soulC( tinP , TAG( TAGiDnULL ) ) ; ___( psCourse ) ;
    
            sCodes << (countT)ifcIDeRRORjOBcOURSE_JOBdONEwITHeRRORSsTATEaOK ; /*U: AM LYING HERE SINCE STATE MIGHT HAVE BEEN CORRUPTED*/
            sCodes << (countT)ifcIDrEPLYjOBcOURSE_FINALcOURSE ;
            sCodes << (countT)1 ; // idVersion
    
            soulC sNotesData( tinP , TAG( TAGiDnULL ) ) ;
            soulC sNotesText( tinP , TAG( TAGiDnULL ) ) ;
            soulC sData( tinP , TAG( TAGiDnULL ) ) ;
            soulC sCodes( tinP , TAG( TAGiDnULL ) ) ;

            stOrdersP << new( 0 , tinP , LF ) soulC( tinP , TAG( TAGiDnULL ) ) ;
            //etherC::ifcSayIF( TP("",9)+T(psttOldComment)+tBar+TF3(processGlobal1I.idAdamRoot,flFORMAT_UNSIGNED,9)+T("etherC::ifcJobF/inner/tmStackCoursesF/")+T(tinP.postTell) , flSAY_APPEND | flSAY_LOG ) ;
            TELL( "my upward socket is impotent: putting a final course onto stCoursesP" )
        {
        if( soUp.etherF( tinP ) )

        }
            //etherC::ifcSayIF( TP("",9)+T(psttOldComment)+tBar+TF3(processGlobal1I.idAdamRoot,flFORMAT_UNSIGNED,9)+T("etherC::ifcJobF/inner/tmStackCoursesF/")+T(tinP.postTell) , flSAY_APPEND | flSAY_LOG ) ;
            TELL( "returned from giving sgnReadTested" )
            sgnReadTested.giveF( tinP ) ;
            //etherC::ifcSayIF( TP("",9)+T(psttOldComment)+tBar+TF3(processGlobal1I.idAdamRoot,flFORMAT_UNSIGNED,9)+T("etherC::ifcJobF/inner/tmStackCoursesF/")+T(tinP.postTell) , flSAY_APPEND | flSAY_LOG ) ;
            TELL( "giving sgnReadTested" )
            bWoth = 0 ;
        {
        if( bWoth )
        //etText.strokeF( tinP , T("tmStackCoursesF/soUp.readF/-\r\n") ) ;
        soUp.readF( tinP , sTray ) ; // THIS LINE MAKES etDad IMPOTENT IF THE REMOTE 1140104 IS NOT ALIVE
        //etherC::ifcSayIF( TP("",9)+T(psttOldComment)+tBar+TF3(processGlobal1I.idAdamRoot,flFORMAT_UNSIGNED,9)+T("etherC::ifcJobF/inner/tmStackCoursesF/")+T(tinP.postTell) , flSAY_APPEND | flSAY_LOG ) ;
        TELL( "reading a tray soulC from above" )
        soulC sTray( tinP , TAG( TAGiDnULL ) ) ;
    {
    while( !etThread && !etDad && !stCoursesP.third )
    boolT bWoth = 1 ;

    //etherC::ifcSayIF( TP("",9)+T(psttOldComment)+tBar+TF3(processGlobal1I.idAdamRoot,flFORMAT_UNSIGNED,9)+T("etherC::ifcJobF/inner/tmStackCoursesF/")+T(tinP.postTell) , flSAY_APPEND | flSAY_LOG ) ;
    TN( tBar , "| " ) ;
    etherC&  etText        = etherC::etTextIF( tinP ) ; //U:
    strokeS* psttOldComment   =  (strokeS*)pTaskP->c6 ;
    stackC&  stOrdersP     =  *(stackC*)pTaskP->c5 ;
    signC&   sgnReadTested =   *(signC*)pTaskP->c4 ;
    socketC& soUp          = *(socketC*)pTaskP->c3 ;
    stackC&  stCoursesP    =  *(stackC*)pTaskP->c2 ;
    etherC&  etDad         =  *(etherC*)pTaskP->c1 ;
    TELL( "setting up" )
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 && pTaskP->c3 && pTaskP->c4 && pTaskP->c5 && pTaskP->c6 )
/*1*/TASK( tmStackCoursesF )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


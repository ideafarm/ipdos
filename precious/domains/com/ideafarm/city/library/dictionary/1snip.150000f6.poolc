
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


;
}
    friend TASKpROTO( tmPoolFlushF ) ;                                                                                                                                                                                                                             \
    friend class datum_listingVSP_C ;
    friend class listing_listingVSP_C ;
    friend class datum_countT_C ;

    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.350e201b.poolC.deleteEmptiesIfIF!||
    static voidT deleteEmptiesIfIF( tinS& tinP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.360e201a.poolC.deleteEmptiesIfF!||
    voidT deleteEmptiesIfF( tinS& tinP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.350e2019.poolC.glassIF!||
    static voidT glassIF( tinS& tinP , strokeS*& pstt1P ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.360e2018.poolC.glassF!||
    voidT glassF( tinS& tinP , strokeS*& psttP ) const ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/!||
    static voidT reportIF( tinS& tinP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.35015.poolC.reportIF!||
    static voidT reportIF( tinS& tinP , const countT*& pczLeverP , switchC& swTallyP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34013.poolC.flushF!||
    voidT flushF( tinS& tinP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.360e2016.poolC.reportF!||
    voidT reportF( tinS& tinP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.36014.poolC.reportF!||
    voidT reportF( tinS& tinP , const countT*& pczLeverP , switchC& swTallyP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34010.poolC.reportF!||
    voidT reportF( tinS& tinP , soulC& soulP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400c.poolC.walkF!||
    voidT walkF( tinS& tinP , slotsWalkCBFT pSlotsWalkCBFP , countT& cArgP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400b.poolC.postNameF!||
    const osTextT* postNameF( tinS& tinP ) const ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34009.poolC.operator_element!||
    byteT* operator []( const countT idAptP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34008.poolC.operator_element!||
    countT operator []( const byteT* pbP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400d.poolC.pDropNoteIF!||
    static dropNoteS* pDropNoteIF( tinS& tinP , const byteT* const pbP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34012.poolC.pPoolFromNameIF!||
    static poolC* pPoolFromNameIF( tinS& tinP , const osTextT* const postP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34011.poolC.pPoolIF!||
    static poolC* pPoolIF( tinS& tinP , const byteT* const pbP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34007.poolC.pDropNoteF!||
    dropNoteS* pDropNoteF( tinS& tinP , const byteT* const pbP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34006.poolC.operator_not!||
    boolT operator !( voidT ) const ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34005.poolC.operator_call!||
    voidT operator ()( tinS& tinP , byteT*& pbP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34004.poolC.newF!||
    voidT newF( tinS& tinP , const countT idLineP , const countT idiFileP , byteT*& pbP , const countT cbP , const flagsT flagsP = flPOOLcnEW_null ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34003.poolC.poolC!||
    poolC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const osTextT* const postNameP , const flagsT flagsP = flPOOLc_null , const countT idStateSpaceP = 0 , const countT expCbSlotMinP = - 1 , const countT expCbSlotMaxP = - 1 , const countT* pczHintPreallocationP = 0 , countT idMemorySpaceP = 0 ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34002.poolC.dt_poolC!||
    ~poolC( voidT ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34001.poolC.NEWdELcLASSb!||
    NEWdELcLASSpROTOS

    inline countT idMemorySpaceF( voidT ) const { return guts.idMemorySpace ; }
    inline countT idStateSpaceF( voidT ) const { return guts.idStateSpace ; }

    }
        return cba ;
        while( exp -- ) cba <<= 1 ;
        countT cba = 1 ;
        countT exp = idP >> 0x18 & 0xf ;
    {
    static inline countT cbAllocatedF( countT idP )

    inline countT dispenseUniqueListNameF( voidT ) { return ( - 1 + decv02AM( ((face_poolC_S*)(byteT*)napFace)->idListNameLath ) ) ; } //USES THE TOP OF THE countT RANGE ; DISPENSES DOWNWARD SO THAT MOST RECENT WILL BE ENCOUNTERED WOTH WHEN WALKING A LISTc

    inline aptC& aptListRootF( voidT ) { return ((face_poolC_S*)(byteT*)napFace)->aptListRoot ; } const // IT IS ILLEGAL FOR CODE OTHER THAN listC TO REFER TO aptListRootF

    public :

    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400f.poolC.ctFilesF!||
    voidT ctFilesF( tinS& tinP , const osTextT* const postNameP , const countT idStateSpaceP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400e.poolC.ctFaceF!||
    voidT ctFaceF( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const countT idStateSpaceP ) ;

    private :

    sexC*           pSexLifoConstructed ;                                   // USED TO DESTROY sexC IN REVERSE ORDER OF CONSTRUCTION

    public :

    guts_poolC_S&   guts ;
    napkinC         napGuts ;
    flagsT          flagsInstance ;
    poolC*          pNext ;
    napkinC         napFace ;
    batonC          batPoolCt ; //MUST BE CT EARLIEST AND DT LATH
    byteT           pbFileFace[ SIZEOF_fileC ] ;
    byteT           pb_batPoolCt[ CBzOMBIEbATONc ] ;

    ;
    }
        face_poolC_S( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP ) ;
        ~face_poolC_S( voidT ) ;
        NEWdELcLASSpROTOS

        countT          idListNameLath ;
        aptC            aptListRoot    ;
        countT          cRef           ;
        const flagsT    flFormat       ;
        const countT    idFormat       ;
        const countT    finger         ;
    {
    struct _export face_poolC_S

    ;
    }
        guts_poolC_S( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const osTextT* const postNameP , const flagsT flagsP , const countT idStateSpaceP , const countT expCbSlotMinP , const countT expCbSlotMaxP , countT idMemorySpaceP ) ;
        ~guts_poolC_S( voidT ) ;
        NEWdELcLASSpROTOS

        const countT    cBitsExpCbSlot ;
        const countT    expCbSlotMax ;
        const countT    expCbSlotMin ;
        grabC* const    pGrabNewElt ;
        byteT           pbzaGrab[ CsLOTsIZESmAX * sizeof( grabC )  ] ;
        slotsC*         ppSlots[  CsLOTsIZESmAX                    ] ;
        byteT           pbza[     CsLOTsIZESmAX * sizeof( slotsC ) ] ;
        osTextT         postName[ COSTpOOLnAMEmAX ] ;         // THIS VALUE MUST BE SHORTER THAN COSTpOOLnAMEmAX TO ALLOW FOR slotsC AND sexC APPENDAGES
        const countT    idMemorySpace ;
        const countT    idStateSpace ;    
        const flagsT    flagsCt ;
    {
    struct _export guts_poolC_S
{
/*1*/class _export poolC/*1*/

/**/

*/
/*


//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


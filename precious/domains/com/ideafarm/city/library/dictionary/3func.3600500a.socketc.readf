
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return cbActual ;
    if( tinP.pcUtility[ 1 ] ) pEther->traceF( tinP , T("readF / 0") , flTRACE_null , ifcIDtRACEdIVERT_7 ) ; //U:: TO FIND A BUG
    dec02AM( cFunctionsPending ) ;
    }
        if( tinP.pcUtility[ 1 ] ) pEther->traceF( tinP , T("readF / 1") , flTRACE_null , ifcIDtRACEdIVERT_7 ) ; //U:: TO FIND A BUG
        tinP.pAdamGlobal3->_socketC_.grab.ungrabF( tinP ) ;
        pOdometer->cbWrite += tinP.odoSockCbWrite - _odoSockCbWriteOpen ;
        pOdometer->cbRead  += tinP.odoSockCbRead  - _odoSockCbReadOpen  ;
        pOdometer = (sockOdometerS*)&(countT&)*tinP.pAdamGlobal3->_socketC_.pSwOdometer ;
        tinP.pAdamGlobal3->_socketC_.nnLever = nnPeer ;
        if( tinP.pcUtility[ 1 ] ) pEther->traceF( tinP , T("readF / 2") , flTRACE_null , ifcIDtRACEdIVERT_7 ) ; //U:: TO FIND A BUG
        tinP.pAdamGlobal3->_socketC_.grab.grabF( tinP , TAG( TAGiDnULL ) ) ;
        if( tinP.pcUtility[ 1 ] ) pEther->traceF( tinP , T("readF / 3") , flTRACE_null , ifcIDtRACEdIVERT_7 ) ; //U:: TO FIND A BUG
    
        bRead.ungrabF( tinP ) ;
    
        if( idleTimeAllowedRead ) FRESHtIMEaTOMIC( *pEther , timeLathRead.time1 , timeLathRead.time2 )
    
        THREADmODE1rESTORE
        if( tinP.pcUtility[ 1 ] ) pEther->traceF( tinP , T("readF / 4") , flTRACE_null , ifcIDtRACEdIVERT_7 ) ; //U:: TO FIND A BUG
        cbActual = pEther->sockReadF( tinP , handle , pbP , cbP , flagsP , time1P , time2P , F(flagsMode) & flSOCKETcmODE_CRYPTfOREIGNsSL ? ifcIDmODEsOCKETS_ENCRYPTED : ifcIDmODEsOCKETS_NOTeNCRYPTED ) ;
        if( tinP.pcUtility[ 1 ] ) pEther->traceF( tinP , T("readF / 5") , flTRACE_null , ifcIDtRACEdIVERT_7 ) ; //U:: TO FIND A BUG
        THREADmODE1oN( flTHREADmODE1_ALLOWsTOPwHILEgRABBING )

        if( tinP.pcUtility[ 1 ] ) pEther->traceF( tinP , T("readF / 6") , flTRACE_null , ifcIDtRACEdIVERT_7 ) ; //U:: TO FIND A BUG
        bRead.grabF( tinP , TAG( TAGiDnULL ) ) ;
        if( tinP.pcUtility[ 1 ] ) pEther->traceF( tinP , T("readF / 7") , flTRACE_null , ifcIDtRACEdIVERT_7 ) ; //U:: TO FIND A BUG
    
        const countT _odoSockCbWriteOpen = tinP.odoSockCbWrite ;
        const countT _odoSockCbReadOpen  = tinP.odoSockCbRead  ;
    
        _IO_
        if( tinP.pcUtility[ 1 ] ) pEther->traceF( tinP , T("readF / 8") , flTRACE_null , ifcIDtRACEdIVERT_7 ) ; //U:: TO FIND A BUG
    
        }
            }
                return 0 ;
                dec02AM( cFunctionsPending ) ;
            {
            if( *pEther )

            FV( flSOCKETcrEAD , flagsP ) ;
            __Z( cbP ) ;
            __Z( pbP ) ;

            }
                return 0 ;
                dec02AM( cFunctionsPending ) ;
            {
            if( *pEther )
        {
        IFbEcAREFUL    
        SCOOPP
        if( tinP.pcUtility[ 1 ] ) pEther->traceF( tinP , T("readF / 9") , flTRACE_null , ifcIDtRACEdIVERT_7 ) ; //U:: TO FIND A BUG
    {
    ZE( countT , cbActual ) ;
    inc02AM( cFunctionsPending ) ;
    if( tinP.pcUtility[ 1 ] ) pEther->traceF( tinP , T("readF / a") , flTRACE_null , ifcIDtRACEdIVERT_7 ) ; //U:: TO FIND A BUG
{
/*1*/countT socketC::readF( tinS& tinP , byteT* const pbP , const countT cbP , const flagsT flagsP , const countT time1P , const sCountT time2P )/*1*/

/**/
*/
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/1snip.00100fd.flSOCKETcrEAD!||
 flagsP
 cbP
 pbP
arguments
see the flSOCKETc symbolic constants for flags that can be specified
evaluates to the actual number of bytes read
gets the specified number of bytes from the peer
  \<A HREF=\"5.9420104.1.1.0.html\"\>9420104:  WAKEsHOW( "example.simplest.func.107000b.socketC.readF" )\</A\>
 simplest
examples
\<A HREF=\"5.107000b.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$readF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


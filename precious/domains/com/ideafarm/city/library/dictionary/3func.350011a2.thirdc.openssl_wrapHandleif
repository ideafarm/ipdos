
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}


    _OUT_

    #endif

        }
            __( ec ) ;
            if( ec ) etherC::etTextIF( tinP ).traceF( tinP , T("openSsl_wrapSocketIF / exception caught") ) ;
                                c_openSsl_wrapSocketIF( &ec , processGlobal1I.openSsl_pWrapF , handleP.osF( ifcIDtYPEhANDLE_SOCKET ) , (SSL*)handleP.cNote2F() ) ;
            ZE( countT , ec ) ;
            //CS:CODEsYNC: DUPLICATED CODE: 350011a3 350011a2

            handleP.cNote2F() = (countT)pWrap ; //U:: LEAK
        {
        if( !POOP )

        __Z( pWrap ) ;
        __( ec ) ;
        if( ec ) etherC::etTextIF( tinP ).traceF( tinP , T("openSsl_wrapHandleIF / exception caught") ) ;
        SSL* pWrap = c_openSsl_getWrapperIF( &ec , processGlobal1I.openSsl_pWrapperF , (SSL_CTX*)handleP.cNote1F() ) ;
        ZE( countT , ec ) ;

        hContextP.resetF() ;
        handleP.cNote1F() = hContextP.osF( ifcIDtYPEhANDLE_openSslContext ) ; //U:: LEAK

    #elif defined( __NT__ )
    #ifdef __OS2__

    _INoLD_

    }
        if( POOP ) return ;
        __Z(  ~hContextP ) ;
        __( handleP.cNote2F() ) ;
        __( handleP.cNote1F() ) ;
        __Z( handleP.idTypeF() == ifcIDtYPEhANDLE_SOCKET ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL
{
/**//*1*/voidT thirdC::openSsl_wrapHandleIF( tinS& tinP , handleC& handleP , handleC& hContextP )/*1*/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


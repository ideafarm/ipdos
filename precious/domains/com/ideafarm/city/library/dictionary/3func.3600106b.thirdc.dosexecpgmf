
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    _OUT_

    #endif

        dosWaitChildF( tinP , valueP , idDeathTypeP , osPidP ) ;
        dosExecPgmF( tinP , osTidP , osPidP , postExeP , postArgsP , flagsP | flPROCESShIRE_REGISTERpROCESShANDLE , phOutP , phErrorP , phInP , postUserP , postPasswordP , flagsLogonP , postDomainP ) ;

    #elif defined( __NT__ )

        valueP = info.codeResult ;
        else                                            __( info.codeTerminate ) ;
        else if( info.codeTerminate == TC_HARDERROR   ) idDeathTypeP = ifcPROCESSdEATH_HARDWAREfAILURE ;
        else if( info.codeTerminate == TC_EXCEPTION   ) idDeathTypeP = ifcPROCESSdEATH_SOFTWAREfAILURE ;
        else if( info.codeTerminate == TC_KILLPROCESS ) idDeathTypeP = ifcPROCESSdEATH_MURDERED        ;
             if( info.codeTerminate == TC_EXIT        ) idDeathTypeP = ifcPROCESSdEATH_NORMAL          ;
        BOSpOOP
        BOSI( WHATsfr , BOSfAIL , DosExecPgm( postBadGuy , sizeof postBadGuy , EXEC_SYNC , postArgsP , 0 , &info , postExeP ) )
        RESULTCODES info ;
        osTextT postBadGuy[ 0x80 ] ;

    #ifdef __OS2__

    _INoLD_

    }
        if( POOP ) return ;
        FV( flPROCESShIRE , flagsP )
        __Z( postExeP ) ;
        __( idDeathTypeP ) ;
        __( valueP ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL
    SCOOP
{
/*1*/voidT thirdC::dosExecPgmF( tinS& tinP , countT& osTidP , countT& osPidP , countT& valueP , countT& idDeathTypeP , const osTextT* const postExeP , const osTextT* const postArgsP , const flagsT flagsP , const handleC* phOutP , const handleC* phErrorP , const handleC* phInP , const osTextT* const postUserP , const osTextT* const postPasswordP , const flagsT flagsLogonP , const osTextT* const postDomainP )/*1*/

/**/
*/
  it is illegal to set a value other than the default when calling from the definition of an adam
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/1snip.00101db.flPROCESShIRE!||
 flagsP
 postArgsP
  example: "\\ideafarm.home.1\\domains\\com\\ideafarm\\city\\park\\7use\\01000020.ipdos-we"
 postExeP
 idDeathTypeP
 valueP
arguments
constructs a process and waits for it to die
it is illegal to refer to this symbol in the definition of an adam
\<A HREF=\"5.1020073.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$dosExecPgmF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//



//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


//VISIBLE

REST
etThread.osProcessIdPhaseAdamF( tinP , ifcIDpHASEhANDOFFoLD_SHUTTINGdOWN ) ;

etThread.delF( tinP , psttnu ) ;
etThread.faceHearF( tinP , psttnu ) ;
etThread.strokeF( tinP , T("\r\npress the enter key") ) ;
sDoneRude.waitF( tinP ) ;
sDoneRush.waitF( tinP ) ;
sDoneNormal.waitF( tinP ) ;
sDoneIdle.waitF( tinP ) ;

++ sGo ;
etThread.strokeF( tinP , T("    go!\r\n") ) ;
etThread.osSleepF( tinP , TOCK ) ;
etThread.strokeF( tinP , T("    get set!") ) ;
etThread.osSleepF( tinP , TOCK ) ;
etThread.strokeF( tinP , T("on your mark!") ) ;
etThread.osSleepF( tinP , TOCK ) ;
etThread.delF( tinP , psttnu ) ;
etThread.faceHearF( tinP , psttnu ) ;
etThread.strokeF( tinP , T("\r\npress the enter key to give the sign") ) ;
ZE( strokeS* , psttnu ) ;
etThread.osSleepF( tinP , TOCK ) ;

bFace.ungrabF( tinP ) ;

{ ZE( countT , tidnu ) ; etThread.osThreadF( tinP , tidnu , tmF   , &sDoneRude   , flTHREADlAUNCH_null , 0 , 'R' , (countT)&sGo , (countT)&bFace ) ; }
//etThread.osThreadSwitchingDesireF( tinP , ifcTHREADpRIORITY_SPINLOCK ) ;

{ ZE( countT , tidnu ) ; etThread.osThreadF( tinP , tidnu , tmF   , &sDoneRush   , flTHREADlAUNCH_null , 0 , 'r' , (countT)&sGo , (countT)&bFace ) ; }
//etThread.osThreadSwitchingDesireF( tinP , ifcTHREADpRIORITY_RUSH ) ;

{ ZE( countT , tidnu ) ; etThread.osThreadF( tinP , tidnu , tmF   , &sDoneNormal , flTHREADlAUNCH_null , 0 , 'n' , (countT)&sGo , (countT)&bFace ) ; }
//etThread.osThreadSwitchingDesireF( tinP , ifcTHREADpRIORITY_NORMAL ) ;

{ ZE( countT , tidnu ) ; etThread.osThreadF( tinP , tidnu , tmF   , &sDoneIdle   , flTHREADlAUNCH_null , 0 , 'i' , (countT)&sGo , (countT)&bFace ) ; }
//etThread.osThreadSwitchingDesireF( tinP , ifcTHREADpRIORITY_LAZIEST ) ;

bFace.grabF( tinP , TAG( TAGiDnULL ) ) ;

signC  sGo( tinP , TAG( TAGiDnULL ) ) ;
batonC bFace( tinP , TAG( TAGiDnULL ) ) ;

signC sDoneRude( tinP , TAG( TAGiDnULL ) ) ;
signC sDoneRush( tinP , TAG( TAGiDnULL ) ) ;
signC sDoneNormal( tinP , TAG( TAGiDnULL ) ) ;
signC sDoneIdle( tinP , TAG( TAGiDnULL ) ) ;

TODO

DONE( tmF )
}
    while( cTries -- ) etThread.strokeF( tinP , sttd ) ;
    countT cTries = 0x100 ;

    psGo->waitF( tinP ) ;
    pbFace->ungrabF( tinP ) ;
    etThread.strokeF( tinP , T(" thread is waiting for the sign\r\n") ) ;
    }
        default                      : { __1                   ; break ; }
        case ifcTHREADpRIORITY_SPINLOCK   : { etThread.strokeF( tinP , T("rude  ") ) ; break ; }
        case ifcTHREADpRIORITY_RUSH   : { etThread.strokeF( tinP , T("rush  ") ) ; break ; }
        case ifcTHREADpRIORITY_NORMAL : { etThread.strokeF( tinP , T("normal") ) ; break ; }
        case ifcTHREADpRIORITY_LAZIEST   : { etThread.strokeF( tinP , T("idle  ") ) ; break ; }
    {
    switch( //etThread.osThreadSwitchingDesireF( tinP ) )
    pbFace->grabF( tinP , TAG( TAGiDnULL ) ) ;
{
if( psGo )
batonC* pbFace = (batonC*)( pTaskP ? pTaskP->c3 : 0 ) ;
signC*  psGo   =  (signC*)( pTaskP ? pTaskP->c2 : 0 ) ;
strokeS sttd   =            pTaskP ? pTaskP->c1 : 0   ;
TASK( tmF )

/*1*/WAKEhIDE( "example.simplest.snip.001007f.ifcTHREADpRIORITY" )/*1*/
/**/
*/
\<A HREF=\"5.e700104.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//



//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST
etThread.osProcessIdPhaseAdamF( tinP , ifcIDpHASEhANDOFFoLD_SHUTTINGdOWN ) ;

}
    DEL( pc2o ) ;
    }
        etThread.delF( tinP , psttEmail ) ;
        strokeS* psttEmail = (strokeS*)pc2o->c1 ;
    {
    if( pc2o )
    stOrders >> pc2o ;
    ZE( count2S* , pc2o ) ;
{
while( stOrders )

etThread.delF( tinP , pbForm  ) ;
etThread.delF( tinP , postnu  ) ;

}
    etThread.osSleepF( tinP , TUCK * 0x40 ) ;
    etThread.strokeF( tinP , T("\r")+TF1(etThread.os_cAllKidThreadsI_IF(tinP)-cKidsBefore)+T(" clients are currently being served") ) ;
{
while( etThread.os_cAllKidThreadsI_IF( tinP ) > cKidsBefore )

}
    etThread = 0 ;
    }
        //U: CONJ: LEAK pso HERE.  NEED TO DEL IT
        if( pso && !ether ) { ZE( countT , tid ) ; etThread.osThreadF( tinP , tid , tmServeF , 0 , flTHREADlAUNCH_null , 0 , (countT)pcp , (countT)pso ) ; }
        etThread.strokeF( tinP , T("\r")+TF1(++idClient) ) ;
        sock.acceptF( tinP , pso , idPortPeer , nnPeer , countTC() ) ;
        ZE( countT , idPortPeer ) ;
        nicNameC nnPeer ;
        ZE( socketC* , pso ) ;
    {
    while( !etThread )
    ZE( countT , idClient ) ;
    sock.listenF( tinP ) ;
    sock.bindF( tinP , 8008 ) ;
    socketC sock( tinP , etThread , TAG( TAGiDnULL ) ) ;
{
while( !ether )
const countT cKidsBefore = etThread.os_cAllKidThreadsI_IF( tinP ) ;

const countT pcp[] = { 0 , (countT)postnu , (countT)pbForm , cbForm , (countT)pbThankYou , cbThankYou , (countT)&cFormsSent , (countT)&cOrdersReceived , (countT)&stOrders } ;
ZE( countT , cOrdersReceived ) ;
ZE( countT , cFormsSent ) ;

etThread.newF( tinP , LF , postnu , COSTnu ) ;
ZE( osTextT* , postnu ) ;

stackC stOrders( tinP , ether , TAG( TAGiDnULL ) , flSTACKc_FIFO , ifcSTACKtYPE_PTR_count2S ) ;

}
    cbThankYou = etThread.strMakeF( tinP , LF , pbThankYou , T("HTTP/1.0 200\r\nContent-Type: text/html\r\nContent-Length: ")+TF4(tBody.csF(tinP),flFORMAT_NObASE,0,0xa)+T("\r\n\r\n")+tBody ) ; ___( pbThankYou ) ;

    ) ;

        "Thank you for your order!  It has been processed successfully, and the shipment is already on its way to you!"

    TN( tBody ,
{
ZE( countT   , cbThankYou ) ;
ZE( osTextT* , pbThankYou ) ;

}
    cbForm = etThread.strMakeF( tinP , LF , pbForm , T("HTTP/1.0 200\r\nContent-Type: text/html\r\nContent-Length: ")+TF4(tBody.csF(tinP),flFORMAT_NObASE,0,0xa)+T("\r\n\r\n")+tBody ) ; ___( pbForm ) ;

    ) ;

        "</FORM>\r\n"
        "<INPUT TYPE=SUBMIT VALUE=\"Order Now!\">\r\n"
        "Number of foobars that you are ordering: <INPUT NAME=\"qty\" SIZE=\"32\" VALUE=\"1\"><BR>\r\n"
        "Your email address"": <INPUT NAME=\"emailBillTo\" SIZE=\"32\"> <BR>\r\n"
        "<FORM METHOD=\"GET\" ACTION=\"http://city.center.ideafarm.com:8008/o\">\r\n"

    TN( tBody ,
{
ZE( countT   , cbForm ) ;
ZE( osTextT* , pbForm ) ;

LAUNCHhEAReNTER( tmHearEnterF , 8008 ) ;

etThread.strokeF( tinP , T("\"Lena\"\r\n\r\nMediaPlex Http Server: Order Taker\r\n\r\npress the Enter key to fire me\r\n\r\n") ) ;

TODO

DONE( tmServeF )
}
    DEL( pso ) ;
    etThread = 0 ;
    if( !bAbort ) pso->readF( tinP , (osTextT*)pcp[ 1 ] , COSTnu ) ;

    }
        default : { bAbort = 1 ; break ; }
        }
            break ;
            etThread.delF( tinP , postr ) ;
            pso->writeF( tinP , postr , costr ) ;
            etThread.delF( tinP , psttBody ) ;
            countT costr = etThread.strMakeF( tinP , LF , postr , T("HTTP/1.0 200\r\nContent-Type: text/html\r\nContent-Length: ")+TF4(psttBody->idAdam,flFORMAT_NObASE,0,0xa)+T("\r\n\r\n")+T(psttBody) ) ; ___( postr ) ;
            ZE( osTextT* , postr ) ;

            }
                etThread.strFuseF( tinP , psttBody , tFooter ) ; ___( psttBody ) ;

                ) ;

                    "Thank you for selling through the MediaPlex Advertising Network!</pre></html>"
                    "\r\n"
                    "To obtain assistance, see <A HREF=\"http://www.mediaplex.com\">here</A>!\r\n"
                    "To view the MediaPlex Channel Advertising Campaign Report for this campaign, click <A HREF=\"http://city.center.ideafarm.com:8006/r\">here</A>.\r\n"
                    "To obtain a current version, click <A HREF=\"http://city.center.ideafarm.com:8008/r\">here</A>.\r\n"
                    "This report was generated by the MediaPlex, Inc. Advertising Network for Datek Online\r\n"
                    "\r\n"
                    "\r\n"
                    "\r\n"
                    "\r\n"

                TN( tFooter ,

                stOrders.ungrabF( tinP ) ;

                else { etThread.strFuseF( tinP , psttBody , T("(none)") ) ; ___( psttBody ) ; }
                }
                    etThread.strFuseF( tinP , psttBody , T("\r\n\r\n\r\n\r\n")+TF4(cQtyTotal,flFORMAT_NObASE,0xc,0xa)+T("    total orders so far") ) ; ___( psttBody ) ;

                    while( handle ) ;
                    }
                        }
                            cQtyTotal += pc2o->c2 ;
                            etThread.strFuseF( tinP , psttBody , T("\r\n")+TF4(pc2o->c2,flFORMAT_NObASE,12,0xa)+T("    \"")+T(psttEmail)+T("\"") ) ; ___( psttBody ) ;
                            strokeS* psttEmail = (strokeS*)pc2o->c1 ;
                        {
                        if( pc2o )
                        count2S* pc2o = (count2S*)stOrders.downF( tinP , handle ) ;
                    {
                    do
                    handleC handle( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;

                    ZE( countT , cQtyTotal ) ;
                {
                if( stOrders )

                etThread.strMakeF( tinP , LF , psttBody , tTitle+TF4(cFormsSent,flFORMAT_NObASE,0xc,0xa)+T("    Datek Online order forms displayed by the MediaPlex, Inc. Advertising Network\r\n\r\n")+TF4(cOrdersReceived,flFORMAT_NObASE,0xc,0xa)+T("    Completed Datek Online order forms received by the MediaPlex, Inc. Advertising System\r\n                (This information in these orders has been forwarded on to Datek Online for processing.)\r\n\r\n\r\n\r\nOrder Detail:\r\n\r\n")+TPS("qty",0xc,S1C('-'))+T("    ")+TPS("customerEmail",0x30,S1C('-'))+T("\r\n\r\n") , 0x1000 * (countT)stOrders + 0x1000 ) ; ___( psttBody ) ;

                stOrders.grabF( tinP , TAG( TAGiDnULL ) ) ;

                ) ;

                    "\r\n"
                    "\r\n"
                    "Online Orders Summary:\r\n"
                    "\r\n"
                    "\r\n"
                    "\r\n"
                    "\r\n"
                    "                is formatted and sent immediately to the requesting Datek Online manager's browser for display.\r\n"
                    "                It is generated on request, and is current as of the time that the request is received.  Its content\r\n"
                    "Description:    This page reports the Datek Online sales activity generated by the MediaPlex, Inc. Advertising Network.\r\n"
                    "\r\n"
                    "Scope:          This page reports the results of MediaPlex Campaign #143557.\r\n"
                    "\r\n"
                    "Short Title:    MediaPlex Channel Sales Report: Campaign #143557\r\n"
                    "\r\n"
                    "\r\n"
                    "<html><pre>Datek Online        \"Your tool to invest...\"\r\n"

                TN( tTitle ,
            {
            ZE( strokeS* , psttBody ) ;
        {
        case 'r' :
        }
            break ;
            pso->writeF( tinP , (byteT*)pcp[ 4  ] , pcp[ 5 ] ) ;
            cOrdersReceived ++ ;

            }
                }
                    stOrders << pc2o ;
                    pc2o->c2 = cOrdered ;
                    pc2o->c1 = (countT)psttEmail ;
                {
                if( pc2o )
                etThread.newF( tinP , LF , pc2o ) ; ___( pc2o ) ;
                ZE( count2S* , pc2o ) ;
            {

            }
                etThread.delF( tinP , psttl ) ;

                }
                    etThread.delF( tinP , psttw ) ;
                    cOrdered = etThread.strDigitsToSCountF( tinP , psttw , 0xa , 1 ) ;
                    etThread.strSubstringF( tinP , psttw , idf , sttq , T(" HTTP/") , psttl ) ; ___( psttw ) ;
                    ZE( strokeS* , psttw ) ;
                    etThread.strSubstringF( tinP , psttEmail , idf , sttq , T("&qty=") , psttl ) ; ___( psttEmail ) ;
                {
                if( 1 == etThread.strIdF( tinP , idf , sttq , T("?emailBillTo=") , psttl ) )
                strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
                countT idf = 1 ;
                etThread.strFromUrlF( tinP , psttl ) ; ___( psttl ) ;
                pso->readWoLineF( tinP , psttl , 0x1000 ) ;
                ZE( strokeS* , psttl ) ;
            {
            ZE( countT   , cOrdered ) ;            
            ZE( strokeS* , psttEmail ) ;
        {
        case 'o' :
        case 'f' : { pso->writeF( tinP , (byteT*)pcp[ 2  ] , pcp[ 3 ] ) ; cFormsSent ++ ; break ; }
    {
    switch( postc[ 5 ] )
    ZE( boolT , bAbort ) ;

    pso->readF( tinP , postc , sizeof postc ) ;
    osTextT postc[ 0x6 ] ;

    pso->etherF( tinP , etThread ) ;
    stackC&  stOrders        = *(stackC*)pcp[ 8 ] ;
    countT&  cOrdersReceived = *(countT*)pcp[ 7 ] ;
    countT&  cFormsSent      = *(countT*)pcp[ 6 ] ;
    socketC* pso             = (socketC*)pTaskP->c2 ;
    countT*  pcp             = (countT*) pTaskP->c1 ;
{
//if( pTaskP && pTaskP->c1 && pTaskP->c2 )
TASK( tmServeF )

#define COSTnu 0x1000

tmHEAReNTER( tmHearEnterF )

/*1*/WAKEhIDE( "mediaplex.http.server.orderTaker" )/*1*/
/**/
*/
listens to port 8008_9
http server: order taker
mediaplex
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//



//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return cItems ;

    _OUT_
    else __1
    }
        }
            ether.delF( tinP , pstt1m ) ;
            soulP << pstt1m ;
        {
        if( pstt1m  )

        ether.delF( tinP , psttR ) ;
        cItems = ether.diskFindFileOrDirF( tinP , pstt1m , fnLike.pathF() , &pat , &soulP , pGrabP , 0 , cMaxP ) ; ___( pstt1m ) ;
        ZE( strokeS* , pstt1m ) ;
        
        patternC pat( tinP , ether , fnLike , ifcIDtYPEpATTERN_FOREIGNwILDCARDmICROSOFT ) ;
        fileNameC fnLike( tinP , ether , psttR ) ;

        ether.strFuseF( tinP , psttR , psttName ) ; ___( psttR ) ;
        ether.strMakeF( tinP , psttR , T("///hose/") , psttName->idAdam ) ; ___( psttR ) ;
        ZE( strokeS* , psttR ) ;
    {
    else if( !psttHost->idAdam && !ether.strCompareF( tinP , psttType , T("hose") ) )
    }
        }
            ether.delF( tinP , pstt1m ) ;
            soulP << pstt1m ;
        {
        if( pstt1m )

        ether.delF( tinP , psttM ) ;
        cItems = ether.diskFindFileOrDirF( tinP , pstt1m , fnLike.pathF() , &pat , &soulP , pGrabP , 0 , cMaxP ) ; ___( pstt1m ) ;
        ZE( strokeS* , pstt1m ) ;

        patternC pat( tinP , ether , fnLike , ifcIDtYPEpATTERN_FOREIGNwILDCARDmICROSOFT ) ;
        fileNameC fnLike( tinP , ether , psttM ) ;

        //U::SOUL: cItems = ether.diskFindFileOrDirF( tinP , soulP , fnLike.pathF() , &pat , 0 , cMaxP ) ;
        //U::patternC pat( tinP , ether , fnLike , ifcIDtYPEpATTERN_FOREIGNwILDCARDmICROSOFT ) ;
        //U::fileNameC fnLike( tinP , ether , psttM ) ;

        ether.delF( tinP , psttR ) ;
        ether.diskMapFileNameF( tinP , psttM , psttR ) ; ___( psttM ) ;
        ZE( strokeS* , psttM ) ;
        ether.strFuseF( tinP , psttR , psttName ) ; ___( psttR ) ;
        ether.strMakeF( tinP , psttR , T("///") , psttName->idAdam ) ; ___( psttR ) ;
        ZE( strokeS* , psttR ) ;
    {
    else if( !psttHost->idAdam && !psttType->idAdam )
    }
        ether.delF( tinP , psttRaw ) ;
        ether.delF( tinP , psttWord ) ;
        ether.strFuseSeparateF( tinP , soulP , psttWord , 0 , 0 , pGrabP ) ;
        ether.strSubstringF( tinP , psttWord , idf , sttq , S1C(' ') , psttRaw ) ; ___( psttWord ) ;
        ether.delF( tinP , psttWord ) ;
        ether.strFuseSeparateF( tinP , soulP , psttWord , 0 , 0 , pGrabP ) ;
        ether.strSubstringF( tinP , psttWord , idf , sttq , S1C(' ') , psttRaw ) ; ___( psttWord ) ;
        ether.delF( tinP , psttWord ) ;
        ether.strSubstringF( tinP , psttWord , idf , sttq , S1C(' ') , psttRaw ) ; ___( psttWord ) ;
        strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
        countT idf = 1 ;
        ZE( strokeS* , psttWord ) ;
        }
            __( rc != 211 ) ;
            countT rc = pSControl->readWoReplyF( tinP , psttRaw ) ; ___( psttRaw ) ;
        {
        if( !POOP )
        { textC txt = T("group ")+T(psttName)+T("\r\n") ; pSControl->writeF( tinP , (osTextT*)txt ) ; }
        ZE( strokeS* , psttRaw ) ;
    {
    else if( psttHost->idAdam && !ether.strCompareF( tinP , psttType , T("news") ) && pSControl )
    }
        ether.delF( tinP , psttReply ) ;

        }
            if( idf ) { ether.strSubstringF( tinP , psttLine , idf , sttq , T("\r\n") , psttReply ) ; ___( psttLine ) ; }
            ether.delF( tinP , psttLine ) ;
            }
                }
                    ether.strFuseSeparateF( tinP , soulP , TF1(idi)+T(" ")+TF1(cbi) , 0 , 0 , pGrabP ) ;
                    cItems ++ ;

                    }
                        ether.delF( tinP , psttw ) ;
                        cbi = ether.strDigitsToSCountF( tinP , psttw , 0xa , 1 ) ;
                        ether.strSubstringF( tinP , psttw , idf , sttq , T(" ") , psttLine , 1 ) ; ___( psttw ) ;

                        ether.delF( tinP , psttw ) ;
                        idi = ether.strDigitsToSCountF( tinP , psttw , 0xa , 1 ) ;
                        ether.strSubstringF( tinP , psttw , idf , sttq , T(" ") , psttLine , 1 ) ; ___( psttw ) ;

                        strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
                        countT idf = 1 ;
                        ZE( strokeS* , psttw ) ;
                    {
                    ZE( countT , cbi ) ;
                    ZE( countT , idi ) ;
                {
                if( !cMaxP || cItems < cMaxP )
            {
            if( psttLine->idAdam )
        {
        while( !ether && psttLine )
        ether.strSubstringF( tinP , psttLine , idf , sttq , T("\r\n") , psttReply ) ; ___( psttLine ) ;
        strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
        countT idf = 1 ;
        ZE( strokeS* , psttLine ) ;

        pSControl->readWoMultilineF( tinP , psttReply , T(".") , TUCK/*csttEstimateP*//*U::SOUL*/ ) ; ___( psttReply ) ;
        ZE( strokeS* , psttReply ) ;

        verifyReplyF( tinP ) ;
        pSControl->writeF( tinP , (osTextT*)T("list\r\n") ) ;
    {
    else if( psttHost->idAdam && !ether.strCompareF( tinP , psttType , T("pop") ) && pSControl )
    }
        verifyReplyF( tinP , 226 ) ;
        verifyReplyF( tinP , 150 ) ;

        }
            ether.delF( tinP , pstt1Prefix ) ;
            ether.delF( tinP , psttEntry ) ;
            __NZ( psttEntry ) ;
            }
                }
                    ether.strFuseF( tinP , psttEntry , psttIn4 ) ; ___( psttEntry ) ;
                    if( !psttEntry ) { ether.strMakeF( tinP , psttEntry , pstt1Prefix ) ; ___( psttEntry ) ; }
                    psttIn4[ CSpREFIX ] = bIn ;
                {
                else
                }
                    ether.delF( tinP , psttEntry ) ;
                    }
                        ether.strFuseSeparateF( tinP , soulP , psttEntry , 0 , 0 , pGrabP ) ;
                        cItems ++ ;
                    {
                    if( !cMaxP || cItems < cMaxP )
                {
                if( bIn == '\n' )

                cbIn ++ ;
            {
            while( !ether && sData.readF( tinP , &bIn , 1 , flSOCKETcrEAD_STILLhUNGRYiSoK ) )
            psttIn4[ CSpREFIX ] = 0 ;
            SETpREFIX( psttIn4 , 1 , 0 ) ;
            strokeS psttIn4[ CSpREFIX + 1 ] ;
            ZE( byteT , bIn ) ;
            ZE( countT , cbIn ) ;

            ZE( strokeS* , psttEntry ) ;

            ether.strFuseF( tinP , pstt1Prefix , T("///") ) ; ___( pstt1Prefix ) ;
            ether.strFuseF( tinP , pstt1Prefix , psttType ) ; ___( pstt1Prefix ) ;
            ether.strFuseF( tinP , pstt1Prefix , T("/") ) ; ___( pstt1Prefix ) ;
            ether.strMakeF( tinP , pstt1Prefix , psttHost , 4 + ( psttType ? psttType->idAdam : 0 ) ) ; ___( pstt1Prefix ) ;
            ZE( strokeS* , pstt1Prefix ) ;
        {
        if( !POOP )

        sData.connectF( tinP , idPortData , nicNameData ) ;
        socketC sData( tinP , ether , TAG( TAGiDnULL ) ) ;

        { textC txt = T("nlst ")+T(psttName)+T("\r\n") ; pSControl->writeF( tinP , (osTextT*)txt ) ; }

        }
            __Z( idPortData ) ;
            __Z( nicNameData ) ;
            __( rc != 227 ) ;
            ether.delF( tinP , psttReply ) ;
            readNicNameIdPortF( tinP , nicNameData , idPortData , psttReply ) ;
            countT rc = pSControl->readWoReplyF( tinP , psttReply ) ; ___( psttReply ) ;
            ZE( strokeS* , psttReply ) ;
        {
        if( !POOP )
        ZE( countT , idPortData ) ;
        nicNameC nicNameData ;

        pSControl->writeF( tinP , (osTextT*)T("pasv\r\n") ) ;
    {
    if( psttHost->idAdam && !ether.strCompareF( tinP , psttType , T("ftp") ) && pSControl )

    ZE( countT , cItems ) ;

    _INoLD_

    }
        if( POOP ) return 0 ;
        __Z( psttName ) ;
        __Z( psttType ) ;
        __Z( psttHost ) ;
        if( POOP ) return 0 ;
    {
    IFbEcAREFUL
    SCOOP
{
/*1*/countT boxC::menuF( tinS& tinP , soulC& soulP , grabC* pGrabP , const countT cMaxP )/*1*/
/**/
*/
  if not 0 then this is the maximum nunber of items reported in pstt1P and in the returned value
  can be 0
 cMaxP
 pGrabP
 soulP
arguments
this function will fail if the resulting length of pstt1P would be larger than about 0x100000 strokes
evaluates to the number of matching items
 //hose/name: lists the hoses that match /hose/name
 ///name: lists the files that match //name
  each line consists of two numbers separated by a blank
 host//news/group: obtains the range of item id's available for the group
   the second number is the item's size, in bytes
   the first number is the item's id
  each line consists of two numbers separated by a blank
 host//pop:  obtains a list of the mail items waiting to be retrieved
 host//ftp/name:  obtains the "nlst name"
obtains a menu
  \<A HREF=\"5.c120104.1.1.0.html\"\>c120104:  WAKEsHOW( "example.simplest.func.109000e.boxC.menuF" )\</A\>
  \<A HREF=\"5.1a20104.1.1.0.html\"\>1a20104:  WAKEsHOW( "example.simplest.func.109000e.boxC.menuF" )\</A\>
 simplest
examples
\<A HREF=\"5.109000e.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$menuF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


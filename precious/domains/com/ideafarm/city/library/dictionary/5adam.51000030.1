
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


//VISIBLE

REST
etThread.osProcessIdPhaseAdamF( tinP , ifcIDpHASEhANDOFFoLD_SHUTTINGdOWN ) ;

}
    etThread.delF( tinP , pstto ) ;
    etThread.strokeF( tinP , T("in IdeaFarm " "(tm) City, that time is ")+T(pstto)+T("\r\n\r\n") ) ;
    etThread.strFromTimeF( tinP , pstto , time1 , time2 ) ; ___( pstto ) ;
    ZE( strokeS* , pstto ) ;
    etThread.osTimeFromOldTimeF( tinP , time1 , time2 , ye , mo , da , hh , mm , ss , hh ) ;
    ZE( sCountT , time2 ) ;
    ZE( countT , time1 ) ;

    }
        etThread.delF( tinP , pstti ) ;
        }
            }
                }
                    }
                        }
                            if( pstti->idAdam ) ms = etThread.strDigitsToSCountF( tinP , pstti , 10 ) ;
                            etThread.faceHearF( tinP , pstti ) ;
                            etThread.delF( tinP , pstti ) ;
                            etThread.strokeF( tinP , T("(optional) enter a one to three digit decimal millisecond (0-999): ") ) ;

                            ss = etThread.strDigitsToSCountF( tinP , pstti , 10 ) ;
                        {
                        if( pstti->idAdam )
                        etThread.faceHearF( tinP , pstti ) ;
                        etThread.delF( tinP , pstti ) ;
                        etThread.strokeF( tinP , T("(optional) enter a one or two digit decimal second (0-59): ") ) ;

                        mm = etThread.strDigitsToSCountF( tinP , pstti , 10 ) ;
                    {
                    if( pstti->idAdam )
                    etThread.faceHearF( tinP , pstti ) ;
                    etThread.delF( tinP , pstti ) ;
                    etThread.strokeF( tinP , T("(optional) enter a one or two digit decimal minute (0-59): ") ) ;

                    hh = etThread.strDigitsToSCountF( tinP , pstti , 10 ) ;
                {
                if( pstti->idAdam )
                etThread.faceHearF( tinP , pstti ) ;
                etThread.delF( tinP , pstti ) ;
                etThread.strokeF( tinP , T("(optional) enter a one or two digit decimal hour (0-23): ") ) ;

                da = etThread.strDigitsToSCountF( tinP , pstti , 10 ) - 1 ;
            {
            if( pstti->idAdam )
            etThread.faceHearF( tinP , pstti ) ;
            etThread.delF( tinP , pstti ) ;
            etThread.strokeF( tinP , T("(optional) enter a one or two digit decimal date (1-31): ") ) ;

            mo = etThread.strDigitsToSCountF( tinP , pstti , 10 ) - 1 ;
        {
        if( pstti->idAdam )
        etThread.faceHearF( tinP , pstti ) ;
        etThread.strokeF( tinP , T("(optional) enter a one or two digit decimal month (1-12): ") ) ;

        if( bMyQuit ) break ;    
        etThread.delF( tinP , pstti ) ;
        ye = etThread.strDigitsToSCountF( tinP , pstti , 10 ) - 1 ;
        const boolT bMyQuit = pstti->idAdam ? 0 : 1 ;
        etThread.faceH earF( tinP , pstti ) ;
        etThread.strokeF( tinP , T("(optional) enter a four digit decimal year (e.g. \"1998\"): ") ) ;
        ZE( strokeS* , pstti ) ;
    {
    ZE( countT , ms ) ;
    ZE( countT , ss ) ;
    ZE( countT , mm ) ;
    ZE( countT , hh ) ;
    ZE( countT , da ) ;
    ZE( countT , mo ) ;
    ZE( countT , ye ) ;
{
while( !ether )

TODO

/*1*/WAKEhIDE( "tool.newTimeFromOldTime" )/*1*/
/**/
*/
displays IdeaFarm " "(tm) City time for a specified old time
\<A HREF=\"5.f200104.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//



//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


//VISIBLE

REST

//etThread.loafIF( tinP ) ;
etThread.traceF( tinP , T("ok") ) ;

}
    etThread.delF( tinP , psttr ) ;

    //etThread.strokeF( tinP , T("\r\n\r\nthis report has been copied onto this computer's clipboard\r\n \r\n")+T(psttr) ) ;
    //etThread.osClipboardLetGoF( tinP ) ;
    //etThread.osClipboardWriteF( tinP , psttr ) ;
    //etThread.osClipboardGrabF( tinP ) ;
    //etThread.traceF( tinP , T("copying report to clipboard") ) ;

    etThread.delF( tinP , postr ) ;
    etThread.boxPutF( tinP , T("///ideafarm/upload/dictionary.measurements.txt") , postr , costr ) ;
    countT costr = etThread.strMakeF( tinP , postr , psttr ) ; ___( postr ) ;
    ZE( osTextT* , postr ) ;

    measurements.strReportF( tinP , psttr ) ; ___( psttr ) ;
    ZE( strokeS* , psttr ) ;
    etThread.traceF( tinP , T("writing report") ) ;

    FORsTRINGSiNsPANNEDcOMBINEDtAIL1
    }
        etThread.winSetTitleF( tinP , TF1(cToDo) ) ;
        etThread.strokeF( tinP , T("\f")+TF1(cToDo) ) ;

        inspectF( tinP , etThread , measurements , psttc1 ) ;

        if( etThread.strIdF( tinP , T(".ico") , psttc1 ) ) continue ;
        if( ether ) break ;

        etThread.traceF( tinP , T("inspecting [cRemaining]:    ")+TF2(--cToDo,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
    {
    FORsTRINGSiNsPANNEDcOMBINEDhEAD1( soul1m )
    etThread.traceF( tinP , T("inspecting files") ) ;

    countT cToDo  = etThread.boxMenuF( tinP , soul1m , T("///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/*") ) ;
    soulC soul1m( tinP , TAG( TAGiDnULL ) , flSOUL_null , "soul.clean.menu" , TOCK << 6 ) ;
    etThread.traceF( tinP , T("getting the file list") ) ;
{
measurementsS measurements( tinP , etThread ) ;

TODO

}
    etThread.delF( tinP , psttNet ) ;
    mP.tallies.cLines += etThread.strCLinesF( tinP , psttNet , tc ) ;
    TN( tc , "\r\n" ) ;

    mP.tallies.cExamples ++ ;
    )
        etThread.strIdF( tinP , T("\"example.") , psttNet )
        &&
        etThread.strIdF( tinP , T("/dictionary/5adam.") , psttFileNameP )
    (
    if

    mP.tallies.cStrokes += costDef ;

    mP.tallies.cDefAll ++ ;

    if( !POOP ) ++ *pcTally ;
    __Z( pcTally ) ;

    etThread.delF( tinP , psttShort ) ;

    else                                                                    pcTally = &mP.tallies.cMiscUnregognized          ;
    else if( 1 == etThread.strIdF( tinP , T("8text."      ) , psttShort ) ) pcTally = &mP.tallies.cMisc                      ;
    else if( 1 == etThread.strIdF( tinP , T("7reso."      ) , psttShort ) ) pcTally = &mP.tallies.cResource                  ;
    else if( 1 == etThread.strIdF( tinP , T("6arch.5adam.") , psttShort ) ) pcTally = &mP.tallies.cDefAdamArchived           ;
    else if( 1 == etThread.strIdF( tinP , T("5adam.51012" ) , psttShort ) ) pcTally = &mP.tallies.cDefAdamScratch            ;
    else if( 1 == etThread.strIdF( tinP , T("5adam.51001" ) , psttShort ) ) pcTally = &mP.tallies.cDefAdamStarter            ;
    else if( 1 == etThread.strIdF( tinP , T("5adam.51000" ) , psttShort ) ) pcTally = &mP.tallies.cDefAdam                   ;
    else if( 1 == etThread.strIdF( tinP , T("4boot."      ) , psttShort ) ) pcTally = &mP.tallies.cDefLoader                 ;
    else if( 1 == etThread.strIdF( tinP , T("3func.36"    ) , psttShort ) ) pcTally = &mP.tallies.cDefFunctionMemberInstance ;
    else if( 1 == etThread.strIdF( tinP , T("3func.35"    ) , psttShort ) ) pcTally = &mP.tallies.cDefFunctionMemberStatic   ;
    else if( 1 == etThread.strIdF( tinP , T("3func.34"    ) , psttShort ) ) pcTally = &mP.tallies.cDefFunctionMemberMacros   ;
    else if( 1 == etThread.strIdF( tinP , T("3func.33"    ) , psttShort ) ) pcTally = &mP.tallies.cDefFunctionGlobal2        ;
    else if( 1 == etThread.strIdF( tinP , T("3func.32"    ) , psttShort ) ) pcTally = &mP.tallies.cDefFunctionGlobal1        ;
    else if( 1 == etThread.strIdF( tinP , T("3func.31"    ) , psttShort ) ) pcTally = &mP.tallies.cDefFunctionAsm            ;
    else if( 1 == etThread.strIdF( tinP , T("3func.30"    ) , psttShort ) ) pcTally = &mP.tallies.cPlainCLanguageFunctions   ;
    else if( 1 == etThread.strIdF( tinP , T("2glob."      ) , psttShort ) ) pcTally = &mP.tallies.cDefGlobal                 ;
    else if( 1 == etThread.strIdF( tinP , T("1snip.1d"    ) , psttShort ) ) pcTally = &mP.tallies.cDefInlineFunction         ;
    else if( 1 == etThread.strIdF( tinP , T("1snip.1c"    ) , psttShort ) ) pcTally = &mP.tallies.cDefInlineFunctionAsm      ;
    else if( 1 == etThread.strIdF( tinP , T("1snip.1b"    ) , psttShort ) ) pcTally = &mP.tallies.cDefGlobalDeclaration      ;
    else if( 1 == etThread.strIdF( tinP , T("1snip.1a"    ) , psttShort ) ) pcTally = &mP.tallies.cDefIncludeSnippetSpecial  ;
    else if( 1 == etThread.strIdF( tinP , T("1snip.19"    ) , psttShort ) ) pcTally = &mP.tallies.cDefIncludeSnippet         ;
    else if( 1 == etThread.strIdF( tinP , T("1snip.18"    ) , psttShort ) ) pcTally = &mP.tallies.cAsmInclude                ;
    else if( 1 == etThread.strIdF( tinP , T("1snip.17"    ) , psttShort ) ) pcTally = &mP.tallies.cDefFunctionPrototype      ;
    else if( 1 == etThread.strIdF( tinP , T("1snip.16"    ) , psttShort ) ) pcTally = &mP.tallies.cDefFunctionPrototypeAsm   ;
    else if( 1 == etThread.strIdF( tinP , T("1snip.15"    ) , psttShort ) ) pcTally = &mP.tallies.cDefClass                  ;
    else if( 1 == etThread.strIdF( tinP , T("1snip.14"    ) , psttShort ) ) pcTally = &mP.tallies.cDefTypedefFunction        ;
    else if( 1 == etThread.strIdF( tinP , T("1snip.13"    ) , psttShort ) ) pcTally = &mP.tallies.cDefTypedefVariable2       ;
    else if( 1 == etThread.strIdF( tinP , T("1snip.12"    ) , psttShort ) ) pcTally = &mP.tallies.cDefTypedefVariable1       ;
    else if( 1 == etThread.strIdF( tinP , T("1snip.112"   ) , psttShort ) ) pcTally = &mP.tallies.cDefSymbol                 ;
    else if( 1 == etThread.strIdF( tinP , T("1snip.111"   ) , psttShort ) ) pcTally = &mP.tallies.cDefSymbolEarly            ;
         if( 1 == etThread.strIdF( tinP , T("1snip.0"     ) , psttShort ) ) pcTally = &mP.tallies.cMisc                      ;

    ZE( countT* , pcTally )

    etThread.delF( tinP , psttDir ) ;
    etThread.strBisectF( tinP , psttDir , psttShort , psttFileNameP , T("/") , - 1 , flSTRbISECT_APPENDdELIMITER ) ; ___( psttDir ) ; ___( psttShort ) ;
    ZE( strokeS* , psttShort ) ;
    ZE( strokeS* , psttDir ) ;

    etThread.delF( tinP , postDef ) ;
    etThread.strRemoveBlankLinesF( tinP , psttNet , T(postDef) ) ; ___( psttNet ) ;
    ZE( strokeS* , psttNet ) ;

    etThread.boxGetShadowF( tinP , postDef , costDef , psttFileNameP ) ; ___( postDef ) ;
    ZE( countT   , costDef ) ;
    ZE( osTextT* , postDef ) ;

    //etThread.traceF( tinP , psttFileNameP ) ;
{
voidT inspectF( tinS& tinP , etherC& etThread , measurementsS& mP , const strokeS* const psttFileNameP )

}
    ) ; ___( psttP ) ;

        TP("cMiscUnregognized"             ,0x1b)+TF4(tallies.cMiscUnregognized             ,flFORMAT_FOREIGN|flFORMAT_NObIGITvALUES|flFORMAT_NObASE,0xa,0xa)+tc
        TP("cMisc"                         ,0x1b)+TF4(tallies.cMisc                         ,flFORMAT_FOREIGN|flFORMAT_NObIGITvALUES|flFORMAT_NObASE,0xa,0xa)+tc+
        TP("cResource"                     ,0x1b)+TF4(tallies.cResource                     ,flFORMAT_FOREIGN|flFORMAT_NObIGITvALUES|flFORMAT_NObASE,0xa,0xa)+tc+
        TP("cDefAdamArchived"              ,0x1b)+TF4(tallies.cDefAdamArchived              ,flFORMAT_FOREIGN|flFORMAT_NObIGITvALUES|flFORMAT_NObASE,0xa,0xa)+tc+
        TP("cDefAdamScratch"               ,0x1b)+TF4(tallies.cDefAdamScratch               ,flFORMAT_FOREIGN|flFORMAT_NObIGITvALUES|flFORMAT_NObASE,0xa,0xa)+tc+
        TP("cDefAdamStarter"               ,0x1b)+TF4(tallies.cDefAdamStarter               ,flFORMAT_FOREIGN|flFORMAT_NObIGITvALUES|flFORMAT_NObASE,0xa,0xa)+tc+
        TP("cDefAdam"                      ,0x1b)+TF4(tallies.cDefAdam                      ,flFORMAT_FOREIGN|flFORMAT_NObIGITvALUES|flFORMAT_NObASE,0xa,0xa)+tc+
        TP("cDefLoader"                    ,0x1b)+TF4(tallies.cDefLoader                    ,flFORMAT_FOREIGN|flFORMAT_NObIGITvALUES|flFORMAT_NObASE,0xa,0xa)+tc+
        TP("cDefFunctionMemberInstance"    ,0x1b)+TF4(tallies.cDefFunctionMemberInstance    ,flFORMAT_FOREIGN|flFORMAT_NObIGITvALUES|flFORMAT_NObASE,0xa,0xa)+tc+
        TP("cDefFunctionMemberStatic"      ,0x1b)+TF4(tallies.cDefFunctionMemberStatic      ,flFORMAT_FOREIGN|flFORMAT_NObIGITvALUES|flFORMAT_NObASE,0xa,0xa)+tc+
        TP("cDefFunctionMemberMacros"      ,0x1b)+TF4(tallies.cDefFunctionMemberMacros      ,flFORMAT_FOREIGN|flFORMAT_NObIGITvALUES|flFORMAT_NObASE,0xa,0xa)+tc+
        TP("cDefFunctionGlobal2"           ,0x1b)+TF4(tallies.cDefFunctionGlobal2           ,flFORMAT_FOREIGN|flFORMAT_NObIGITvALUES|flFORMAT_NObASE,0xa,0xa)+tc+
        TP("cDefFunctionGlobal1"           ,0x1b)+TF4(tallies.cDefFunctionGlobal1           ,flFORMAT_FOREIGN|flFORMAT_NObIGITvALUES|flFORMAT_NObASE,0xa,0xa)+tc+
        TP("cDefFunctionAsm"               ,0x1b)+TF4(tallies.cDefFunctionAsm               ,flFORMAT_FOREIGN|flFORMAT_NObIGITvALUES|flFORMAT_NObASE,0xa,0xa)+tc+
        TP("cPlainCLanguageFunctions"      ,0x1b)+TF4(tallies.cPlainCLanguageFunctions      ,flFORMAT_FOREIGN|flFORMAT_NObIGITvALUES|flFORMAT_NObASE,0xa,0xa)+tc+
        TP("cDefGlobal"                    ,0x1b)+TF4(tallies.cDefGlobal                    ,flFORMAT_FOREIGN|flFORMAT_NObIGITvALUES|flFORMAT_NObASE,0xa,0xa)+tc+
        TP("cDefInlineFunction"            ,0x1b)+TF4(tallies.cDefInlineFunction            ,flFORMAT_FOREIGN|flFORMAT_NObIGITvALUES|flFORMAT_NObASE,0xa,0xa)+tc+
        TP("cDefInlineFunctionAsm"         ,0x1b)+TF4(tallies.cDefInlineFunctionAsm         ,flFORMAT_FOREIGN|flFORMAT_NObIGITvALUES|flFORMAT_NObASE,0xa,0xa)+tc+
        TP("cDefGlobalDeclaration"         ,0x1b)+TF4(tallies.cDefGlobalDeclaration         ,flFORMAT_FOREIGN|flFORMAT_NObIGITvALUES|flFORMAT_NObASE,0xa,0xa)+tc+
        TP("cDefIncludeSnippetSpecial"     ,0x1b)+TF4(tallies.cDefIncludeSnippetSpecial     ,flFORMAT_FOREIGN|flFORMAT_NObIGITvALUES|flFORMAT_NObASE,0xa,0xa)+tc+
        TP("cDefIncludeSnippet"            ,0x1b)+TF4(tallies.cDefIncludeSnippet            ,flFORMAT_FOREIGN|flFORMAT_NObIGITvALUES|flFORMAT_NObASE,0xa,0xa)+tc+
        TP("cAsmInclude"                   ,0x1b)+TF4(tallies.cAsmInclude                   ,flFORMAT_FOREIGN|flFORMAT_NObIGITvALUES|flFORMAT_NObASE,0xa,0xa)+tc+
        TP("cDefFunctionPrototype"         ,0x1b)+TF4(tallies.cDefFunctionPrototype         ,flFORMAT_FOREIGN|flFORMAT_NObIGITvALUES|flFORMAT_NObASE,0xa,0xa)+tc+
        TP("cDefFunctionPrototypeAsm"      ,0x1b)+TF4(tallies.cDefFunctionPrototypeAsm      ,flFORMAT_FOREIGN|flFORMAT_NObIGITvALUES|flFORMAT_NObASE,0xa,0xa)+tc+
        TP("cDefClass"                     ,0x1b)+TF4(tallies.cDefClass                     ,flFORMAT_FOREIGN|flFORMAT_NObIGITvALUES|flFORMAT_NObASE,0xa,0xa)+tc+
        TP("cDefTypedefFunction"           ,0x1b)+TF4(tallies.cDefTypedefFunction           ,flFORMAT_FOREIGN|flFORMAT_NObIGITvALUES|flFORMAT_NObASE,0xa,0xa)+tc+
        TP("cDefTypedefVariable2"          ,0x1b)+TF4(tallies.cDefTypedefVariable2          ,flFORMAT_FOREIGN|flFORMAT_NObIGITvALUES|flFORMAT_NObASE,0xa,0xa)+tc+
        TP("cDefTypedefVariable1"          ,0x1b)+TF4(tallies.cDefTypedefVariable1          ,flFORMAT_FOREIGN|flFORMAT_NObIGITvALUES|flFORMAT_NObASE,0xa,0xa)+tc+
        TP("cDefSymbol"                    ,0x1b)+TF4(tallies.cDefSymbol                    ,flFORMAT_FOREIGN|flFORMAT_NObIGITvALUES|flFORMAT_NObASE,0xa,0xa)+tc+
        TP("cDefSymbolEarly"               ,0x1b)+TF4(tallies.cDefSymbolEarly               ,flFORMAT_FOREIGN|flFORMAT_NObIGITvALUES|flFORMAT_NObASE,0xa,0xa)+tc+
        TP("cLines"                        ,0x1b)+TF4(tallies.cLines                        ,flFORMAT_FOREIGN|flFORMAT_NObIGITvALUES|flFORMAT_NObASE,0xa,0xa)+tc+
        TP("cStrokes"                      ,0x1b)+TF4(tallies.cStrokes                      ,flFORMAT_FOREIGN|flFORMAT_NObIGITvALUES|flFORMAT_NObASE,0xa,0xa)+tc+
        TP("cExamples"                     ,0x1b)+TF4(tallies.cExamples                     ,flFORMAT_FOREIGN|flFORMAT_NObIGITvALUES|flFORMAT_NObASE,0xa,0xa)+tc+
        TP("cDefAll"                       ,0x1b)+TF4(tallies.cDefAll                       ,flFORMAT_FOREIGN|flFORMAT_NObIGITvALUES|flFORMAT_NObASE,0xa,0xa)+tc+
        T("time:    ")+TT(timeN1,timeN2)+T("    ( ")+tOldTime+T(" )")+tc+tc+
        T("IPDOS (tm) IdeaFarm (tm) Piggyback Distributed Operating System\r\nSource Code Tallies\r\n\r\n")+

    ether.strMakeF( tinP , psttP ,
    TN( tc , "\r\n" ) ;

    ;

        +T(" UTC")
        +tDow
        +T(" ")
        +TF4(mm,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FOREIGN|flFORMAT_NObASE|flFORMAT_FILLzE,2,0xa)
        +TF4(hh,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FOREIGN|flFORMAT_NObASE|flFORMAT_FILLzE,2,0xa)
        +T("@")
        +TF4(d+1,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FOREIGN|flFORMAT_NObASE|flFORMAT_FILLzE,2,0xa)
        +TF4(m+1,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FOREIGN|flFORMAT_NObASE|flFORMAT_FILLzE,2,0xa)
        TF4(y+1,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FOREIGN|flFORMAT_NObASE|flFORMAT_FILLzE,4,0xa)

    TN( tOldTime , "" ) ; tOldTime = 

    }
        case 6 : { tDow = T("Saturday") ; break ; }
        case 5 : { tDow = T("Friday") ; break ; }
        case 4 : { tDow = T("Thursday") ; break ; }
        case 3 : { tDow = T("Wednesday") ; break ; }
        case 2 : { tDow = T("Tuesday") ; break ; }
        case 1 : { tDow = T("Monday") ; break ; }
        case 0 : { tDow = T("Sunday") ; break ; }
    {
    switch( dow )
    TN( tDow , "" ) ;

    ether.osTimeToOldTimeF( tinP , ms , ss , mm , hh , d , m , y , dow , timeN1 , timeN2 , flOStIMEtOoLDtIME_OLDtIMEiSutc ) ;
    ZE( countT , dow ) ;
    ZE( sCountT , y ) ;
    ZE( countT , m ) ;
    ZE( countT , d ) ;
    ZE( countT , hh ) ;
    ZE( countT , mm ) ;
    ZE( countT , ss ) ;
    ZE( countT , ms ) ;

    ether.osTimeNowF( tinP , timeN1 , timeN2 ) ;
    ZE( sCountT , timeN2 ) ;
    ZE( countT , timeN1 ) ;
{
voidT measurementsS::strReportF( tinS& tinP , strokeS*& psttP )

}
    ether.memSetF( tinP , (byteT*)&tallies , sizeof tallies ) ;
{
ether( etherP )
measurementsS::measurementsS( tinS& tinP , etherC& etherP ) :

;
}
    voidT strReportF( tinS& tinP , strokeS*& psttP ) ;
    measurementsS( tinS& tinP , etherC& etherP ) ;

    } tallies ;

        countT cMiscUnregognized ;                  //
        countT cMisc ;                              // "8text."     "1snip.0"
        countT cResource ;                          // "7reso."
        countT cDefAdamArchived ;                   // "6arch.5adam."
        countT cDefAdamScratch ;                    // "5adam.51012"
        countT cDefAdamStarter ;                    // "5adam.51001"
        countT cDefAdam ;                           // "5adam.51000"
        countT cDefLoader ;                         // "4boot."
        countT cDefFunctionMemberInstance ;         // "3func.36"
        countT cDefFunctionMemberStatic ;           // "3func.35"
        countT cDefFunctionMemberMacros ;           // "3func.34"
        countT cDefFunctionGlobal2 ;                // "3func.33"
        countT cDefFunctionGlobal1 ;                // "3func.32"
        countT cDefFunctionAsm ;                    // "3func.31"
        countT cPlainCLanguageFunctions ;           // "3func.30"
        countT cDefGlobal ;                         // "2glob."
        countT cDefInlineFunction ;                 // "1snip.1d"
        countT cDefInlineFunctionAsm ;              // "1snip.1c"
        countT cDefGlobalDeclaration ;              // "1snip.1b"
        countT cDefIncludeSnippetSpecial ;          // "1snip.1a"
        countT cDefIncludeSnippet ;                 // "1snip.19"
        countT cAsmInclude ;                        // "1snip.18"
        countT cDefFunctionPrototype ;              // "1snip.17"
        countT cDefFunctionPrototypeAsm ;           // "1snip.16"
        countT cDefClass ;                          // "1snip.15"
        countT cDefTypedefFunction ;                // "1snip.14"
        countT cDefTypedefVariable2 ;               // "1snip.13"
        countT cDefTypedefVariable1 ;               // "1snip.12"
        countT cDefSymbol ;                         // "1snip.112"
        countT cDefSymbolEarly ;                    // "1snip.111"

        countT cLines ;
        countT cStrokes ;
        countT cExamples ;
        countT cDefAll ;
    {
    struct

    etherC& ether ;
{
struct measurementsS

/*1*/WAKEsHOWtEXT( "tool.dictionary.measurements" )/*1*/
/**/
*/
\<A HREF=\"5.0940104.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


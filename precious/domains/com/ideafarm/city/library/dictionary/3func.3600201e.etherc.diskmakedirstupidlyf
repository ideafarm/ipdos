
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return bExisted ;
    _OUT_
    }
        third.delF( tinP , post ) ;
        bExisted = third.dosCreateDirF( tinP , osFileNameC( tinP , third , post ) ) ;
        delF( tinP , pstt ) ;
        strMakeF( tinP , post , pstt ) ; ___( post ) ;
        ZE( osTextT* , post ) ;
        diskMapFileNameF( tinP , pstt , psttP ) ; ___( pstt ) ;
        ZE( strokeS* , pstt ) ;
    {
    ZE( boolT , bExisted ) ;
    _INoLD_

    }
        if( POOP ) return 0 ;
        __( psttP[ CSpREFIX - 1 + psttP->idAdam ].idAdam - '/' ) ;
        if( POOP ) return 0 ;
        __Z( psttP ) ;
        if( POOP ) return 0 ;
    {
    IFbEcAREFUL
    SCOOP
{
/*1*/boolT etherC::diskMakeDirStupidlyF( tinS& tinP , const strokeS* const psttP )/*1*/

/**/
*/
  T("///x/") (special case): nothing will be done except to verify that drive x exists
    T("///ideafarm/ephemeral/tmp/1030023/") must already exist
    T("///ideafarm/ephemeral/tmp/"        ) must already exist
   this will succeed only if the parent directories already exist
  example: T("///ideafarm/ephemeral/tmp/1030023/mydir/")
   file names cannot end with '/'
   directory names must end with '/'
  must end with '/'
 psttP
arguments
  \<A HREF=\"5.1310104.1.1.0.html\"\>1310104:  WAKEsHOW( "example.simplest.func.1030023.etherC.diskMakeDirStupidlyF" )\</A\>
 simplest
examples
\<A HREF=\"5.1030023.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$diskMakeDirStupidlyF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//



//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return flagsRC ;

    UNGRABtINaRGS( ifcIDtYPEtINaRGiNuSE_LIST )
    }
        DELzOMBIE( ppHand[  !offWoth ] ) ;
        _IO_
    {
    }
        ppHand[ offWoth ]->resetF() ;
        _IO_
    {

    }
        //CONoUTrAW( "\r\n" ) ;
        //CONoUTrAW( tinP.pPoolUse->postNameF( tinP ) ) ;
        //CONoUTrAW5( "opened list [pPoolUse,pList]: " , tinP.pPoolUse , " " , pList , " " ) ; //U::

        hListP.osF( ifcIDtYPEhANDLE_LISTING , (countT)pList ) ;
        if( !( pList->flagsi & fliLISTINGc_MIXINlIST ) ) { BLAMMO ; }
    {
    if( pList )

    // pList NOW POINTS TO THE SPECIFIED listC OBJECT; offWoth POINTS TO THIS FINAL *pList, WHICH IS OPEN (GRABBED)
    }
        }
            break ;
            if( !( F(flagsP) & flLISToPEN_IFnOTeXISTS ) ) flagsRC &= ~( F(flLISToPENrETURNcODE_LISTeXISTED) ) ;
        {
        if( !pList )

        offWoth = !offWoth ;
        offn ++ ;

        __( !pList && !( F(flagsP) & ( flLISToPEN_IFeXISTS | flLISToPEN_IFnOTeXISTS ) ) ) ;
        if( pList && !( pList->flagsi & fliLISTINGc_MIXINlIST ) ) { BLAMMO ; }

        POPtINaRGS
        pList = (listC*)tinP.ta.pushed.u.listWalk.util.pcP[ 2 ] ;
        if( F(flagsWalk) & flLISTwALKrETURNcODE_NEWlISTING ) flagsRC &= ~( F(flLISToPENrETURNcODE_LISTeXISTED) ) ;
        flagsT flagsWalk = pList->walkF( tinP , idGrabLayerP ) ;
        tinP.ta.pushed.u.listWalk.util.pcP[ 2 ]               = 0 ;
        tinP.ta.pushed.u.listWalk.util.pcP[ 1 ]               = flagsP & flagsMask ;
        tinP.ta.pushed.u.listWalk.util.pcP[ 0 ]               = pczKidP[ offn ] ;
        tinP.ta.pushed.u.listWalk.cbf.ppPreallocatedListsP    = ppPreallocatedListsP ;
        tinP.ta.pushed.u.listWalk.walk.pHandleHiP             = ppHand[ 1 ] ;
        tinP.ta.pushed.u.listWalk.walk.pHandleLoP             = ppHand[ 0 ] ;
        tinP.ta.pushed.u.listWalk.walk.pOffWothP              = &offWoth ;
        tinP.ta.pushed.u.listWalk.walk.pHandleRootP           = &hListDadP ;

        ;
            : flLISTwALK_CALLERgRABBEDrOOT | flLISTwALK_DOnOTuNGRABoOTHaTeNDoFwALK
            ? flLISTwALK_CALLERgRABBEDrOOT | flLISTwALK_DOnOTuNGRABoOTHaTeNDoFwALK | flLISTwALK_RETAINrOOT
        tinP.ta.pushed.u.listWalk.walk.flagsWalkP = !offn && F(flagsP) & flLISToPEN_RETAINrOOT

        tinP.ta.pushed.u.listWalk.walk.pListWalkCBFP = listWalkAttachListIfCBF ;
        PUSHtINaRGS

        if( !pczKidP[ offn + 1 ] ) flagsMask = - 1 ;
    {
    while( pczKidP[ offn ] )
    flagsT flagsMask = ~( F(flLISToPEN_IFnOTeXISTS) ) ;
    ZE( countT , offn ) ;
    flagsRC |= flLISToPENrETURNcODE_LISTeXISTED ;

    ZE( countT , offWoth ) ;
    ppHand[ 1 ] = new( 0 , tinP , pbHi , SIZEOF_handleC ) handleC( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_LISTING ) ;
    ppHand[ 0 ] = new( 0 , tinP , pbLo , SIZEOF_handleC ) handleC( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_LISTING ) ;
    handleC* ppHand[ 2 ] ;

    byteT* const pbHi = pbBoth + SIZEOF_handleC ;
    byteT* const pbLo = pbBoth ;
    byteT pbBoth[ 2 * SIZEOF_handleC ] ;

    if( pList && !( pList->flagsi & fliLISTINGc_MIXINlIST ) ) { BLAMMO ; }
    __Z( pList ) ;
    listC* pList = (listC*)hListDadP.osF( ifcIDtYPEhANDLE_LISTING ) ;

    listC* pListRoot = (listC*)(byteT*)aptRoot ;
    aptC& aptRoot = PUSE.aptListRootF() ;

    //}
    //    }
    //        off ++ ;
    //
    //        }
    //            BLAMMO ;
    //        {
    //        if( pczKidP[ off ] == LISTnAME_STRETCHbEGINcOUNT && ( !off || pczKidP[ off - 1 ] == LISTnAME_ROOTaPPLICATION ) )
    //    {
    //    while( pczKidP[ off ] )
    //    ZE( countT , off ) ;
    //{
    //U::TO FIND A BUG

    LNV( pczKidP )
    GRABtINaRGS( ifcIDtYPEtINaRGiNuSE_LIST )

    _IO_

    }
        if( POOP ) return flagsRC ;
        __( !*pczKidP ) ;
        if( POOP ) return flagsRC ;
        __( F(flagsP) & flLISToPEN_IFeXISTS && F(flagsP) & flLISToPEN_IFnOTeXISTS ) ;
        FV( flLISToPEN , flagsP ) ;
        __Z( pczKidP ) ;
        __Z( hListDadP ) ;
        __( ~hListP ) ;
        if( POOP ) return flagsRC ;
    {
    IFbEcAREFUL

    flagsT flagsRC = flLISToPENrETURNcODE_null ;
{
/*1*/flagsT listC::openIF( tinS& tinP , handleC& hListP , handleC& hListDadP , const countT* const pczKidP , const flagsT flagsP , const countT idGrabLayerP , listC** const ppPreallocatedListsP )/*1*/

/**/
*/
 ppPreallocatedListsP
 flagsP
  for each offset, a listC object will be constructed in the current pool if one is not already registered in the listC object specified by the prior offset
   the 0'th offset specifies the name of a listC object that is registered in the root listC object
  specifies the fully qualified name of a listC object relative to the root listC object
  i will modify elements in this string, replacing osTextT* values with numeric values obtained by looking the osTextT up in the dictionary of the current pool
  a countT value is a valid listC name iff BM_HIGH is set
  each element of this null terminated string must either be a valid list name or the address of a null terminated string of osTextT
  must not be 0 or null length
 pczNameP
  this handle will remain open until after i return
  open handle to a listC in the current pool
 hListFromP
 tinP
arguments
i open the specified listC object, creating all specified dad lists in the current pool that do not exist
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


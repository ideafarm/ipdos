
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return *this ;

    }
        else { ether.strMakeF( tinP , psttEmail , datum.psttEmail ) ; ___( psttEmail ) ; }
        }
            }
                ether.delF( tinP , psttd ) ;
                ether.strMakeF( tinP , psttEmail , T(psttd)+T("\r\n")+T(datum.psttEmail) ) ; ___( psttEmail ) ;
                strokeS* psttd = psttEmail ; psttEmail = 0 ;
            {
            if( ether.strCompareF( tinP , psttEmail , datum.psttEmail ) )
        {
        if( psttEmail )
    {
    if( datum.psttEmail )

    if( !psttZip ) { ether.strMakeF( tinP , psttZip , datum.psttZip ) ; ___( psttZip ) ; }
    const datumEmailZipC& datum = *(datumEmailZipC*)&plateP ;
    TINSL
{
plateC& datumEmailZipC::operator +=( plateC& plateP )

}
    return psttRpt ;

    ether.strMakeF( tinP , psttRpt , psttEmail ) ; ___( psttRpt ) ;

    ether.delF( tinP , psttRpt ) ; //U::RECALC ONLY IF STALE
    TINSL
{
datumEmailZipC::operator const strokeS*( voidT )

}
    }
        }
            ether.delF( tinP , psttk ) ;

            }
                soulP >> *ppsttv ;
                ether.delF( tinP , *ppsttv ) ;
            {
            if( ppsttv )

            else if( !ether.strCompareF( tinP , psttk , T("zip"     ) ) ) { ppsttv = &psttZip      ; }
            else if( !ether.strCompareF( tinP , psttk , T("note"    ) ) ) { ppsttv = &psttNote     ; }
            else if( !ether.strCompareF( tinP , psttk , T("language") ) ) { ppsttv = &psttLanguage ; }
            else if( !ether.strCompareF( tinP , psttk , T("email"   ) ) ) { ppsttv = &psttEmail    ; }
                 if( !ether.strCompareF( tinP , psttk , T("country" ) ) ) { ppsttv = &psttOldCountry  ; }
            ZE( strokeS** , ppsttv ) ;
        {
        else
        if( !psttk ) soulP >> psttk ;
    {
    while( soulP )
    ZE( strokeS* , psttk ) ;
{
psttZip( 0 )
psttNote( 0 ) ,
psttLanguage( 0 ) ,
psttEmail( 0 ) ,
psttOldCountry( 0 ) ,
psttRpt( 0 ) ,
ether( etherP ) ,
datumEmailZipC::datumEmailZipC( tinS& tinP , etherC& etherP , soulC& soulP ) :

}
{
psttZip( 0 )
psttNote( 0 ) ,
psttLanguage( 0 ) ,
psttEmail( 0 ) ,
psttOldCountry( 0 ) ,
psttRpt( 0 ) ,
ether( *tinP.pEther ) ,
datumEmailZipC::datumEmailZipC( tinS& tinP ) :

}
    return scSgn ;

    }
        }
            break ;
            COMPARE( psttEmail )
        {
        case idMODEeMAILzIPsORT_EAIL :
        }
            break ;
            COMPARE( psttZip )
        {
        case idMODEeMAILzIPsORT_ZIP :
        }
            break ;
            if( !scSgn ) COMPARE( psttNote )
            if( !scSgn ) COMPARE( psttZip )
            COMPARE( psttEmail )
        {
        case idMODEeMAILzIPsORT_eMAILzIPnOTE :
        }
            break ;
            if( !scSgn ) COMPARE( psttNote )
            if( !scSgn ) COMPARE( psttEmail )
            COMPARE( psttZip )
        {
        case idMODEeMAILzIPsORT_ZIPeMAILnOTE :
    {
    switch( idSortMode )
    ZE( sCountT , scSgn ) ;

    TINSL
    datumEmailZipC& datum = *(datumEmailZipC*)&plateP ;
{
sCountT datumEmailZipC::operator -( const plateC& plateP ) const

}
    return *this ;

    SETsTRING( psttZip )
    SETsTRING( psttNote )
    SETsTRING( psttLanguage )
    SETsTRING( psttEmail )
    SETsTRING( psttOldCountry )
    SETsTRING( psttRpt )

    datumEmailZipC& datum = *(datumEmailZipC*)&plateP ;
    TINSL
{
plateC& datumEmailZipC::operator =( plateC& plateP )

}
    ether.delF( tinP , psttZip ) ;
    ether.delF( tinP , psttNote ) ;
    ether.delF( tinP , psttLanguage ) ;
    ether.delF( tinP , psttEmail ) ;
    ether.delF( tinP , psttOldCountry ) ;
    ether.delF( tinP , psttRpt ) ;
    TINSL
{
datumEmailZipC::~datumEmailZipC( voidT )

}
    return *this ;
{
plateC& datumEmailZipC::operator >>( soulC& sP )

}
    return new( 0 , tinP , idLineP , idiFileP ) datumEmailZipC( tinP ) ;
{
datumEmailZipC* datumEmailZipC::newF( tinS& tinP , const countT idLineP , const countT idiFileP , p oolC& poolOldSetOldP )

NEWdELcLASS( 1 , datumEmailZipC )

}
    idSortMode = idSortModeP ;
{
voidT datumEmailZipC::setModeF( const countT idSortModeP )

countT datumEmailZipC::idSortMode = idMODEeMAILzIPsORT_eMAILzIPnOTE ;


#include postHEADER

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


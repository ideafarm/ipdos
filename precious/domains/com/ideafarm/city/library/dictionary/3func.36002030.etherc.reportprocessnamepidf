
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    strMakeF( tinP , LF , psttSuffixP , T("") ) ; ___( psttSuffixP ) ;
    strMakeF( tinP , LF , psttPrefixP , T("") ) ; ___( psttPrefixP ) ;
    strFuseF( tinP , psttUniqueP , T(".report.process.name.pid") ) ; ___( psttUniqueP ) ;
    strUniqueF( tinP , psttUniqueP ) ; ___( psttUniqueP ) ;

    strConvertToLowerCaseF( tinP , psttP ) ;

    delF( tinP , psttRaw ) ;
    }
        }
            delF( tinP , psttLine ) ;
            }
                delF( tinP , psttTid  ) ;
                delF( tinP , psttName ) ;
                delF( tinP , psttSid  ) ;
                delF( tinP , psttPPid ) ;
                delF( tinP , psttPid  ) ;

                }
                    delF( tinP , postName ) ;
                    strFuseF( tinP , psttP , T(iffn)+T("\t")+T(psttPid) ) ; ___( psttP ) ;
                    ifFileNameC iffn( tinP , third , postName ) ;
                    delF( tinP , psttName ) ;
                    strMakeF( tinP , LF , postName , psttName ) ; ___( postName ) ;
                    ZE( osTextT* , postName ) ;

                    else         { strFuseF( tinP , psttP , T("\r\n") ) ; ___( psttP ) ; }
                    if( fFirst ) fFirst = 0 ;
                {
                if( psttTid && !strCompareF( tinP , psttTid , T("01") ) )

                if( idfl ) { strSubstringF( tinP , psttTid  , idfl , sttql , T(" ") , psttLine , 1 ) ; ___( psttTid ) ; }
                if( idfl ) { strSubstringF( tinP , psttName , idfl , sttql , T(" ") , psttLine , 1 ) ; ___( psttName ) ; }
                if( idfl ) { strSubstringF( tinP , psttSid  , idfl , sttql , T(" ") , psttLine , 1 ) ; ___( psttSid ) ; }
                if( idfl ) { strSubstringF( tinP , psttPPid , idfl , sttql , T(" ") , psttLine , 1 ) ; ___( psttPPid ) ; }
                if( idfl ) { strSubstringF( tinP , psttPid  , idfl , sttql , T(" ") , psttLine , 1 ) ; ___( psttPid ) ; }
                delF( tinP , psttPid ) ;
                strSubstringF( tinP , psttPid  , idfl , sttql , T(" ") , psttLine , 1 ) ; ___( psttPid ) ;
                strokeS sttql( (countT)0 , sc_IGNOREqUOTES ) ;
                countT idfl = 1 ;
                ZE( strokeS* , psttTid ) ;
                ZE( strokeS* , psttName ) ;
                ZE( strokeS* , psttSid ) ;
                ZE( strokeS* , psttPPid ) ;
                ZE( strokeS* , psttPid ) ;
                // psttLine IS ETHER A PRIMARY THREAD LINE (PROCESS LINE) OR A SECONDARY THREAD LINE.  AT FIRST, WE''LL ASSUME THAT IT IS A PROCESS LINE.  THEN WE''LL CHECK
            {
            else if( fInSection )
            else if( !strCompareF( tinP , psttLine , T("                    System Semaphore Information"                           ) ) ) fInSection = 0 ;
            else if( !strCompareF( tinP , psttLine , T("  ID        ID        ID       Name       ID    Priority   Block ID   State") ) ) fInSection = 1 ;
            if( psttLine && !psttLine->idAdam ) ;
            strSubstringF( tinP , psttLine , idfr , sttqr , T("\r\n") , psttRaw ) ; ___( psttLine ) ;
            ZE( strokeS* , psttLine ) ;
        {
        while( !POOP && idfr )
        boolT fFirst = 1 ;
        strokeS sttqr( (countT)0 , sc_IGNOREqUOTES ) ;
        countT idfr = 1 ;
        ZE( boolT , fInSection ) ;
    {

    }
        delF( tinP , pstte ) ;
        strFromProcessF( tinP , psttRaw , pstte , T("///d/os2/pstat.exe") ) ; ___( psttRaw ) ; //U: ASSUME: OS/2 IS INSTALLED ON DRIVE C AND DIAGNOSTIC OPTIONS HAVE BEEN INSTALLED. ALSO, ASSUMES RUNNING ON OS/2 //U:NT
        ZE( strokeS* , pstte ) ;
    {
    ZE( strokeS* , psttRaw ) ;
    _IO_

    }
        if( POOP ) return ;
        __NZ( psttP ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL
    SCOOP
{
/**//*1*/voidT etherC::reportProcessNamePidF( tinS& tinP , strokeS*& psttP , strokeS*& psttPrefixP , strokeS*& psttSuffixP , strokeS*& psttUniqueP )/*1*/
*/
 psttUniqueP
 psttSuffixP
 psttPrefixP
 psttP
arguments
it is illegal to refer to this symbol in the definition of an adam
\<A HREF=\"5.1030037.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$reportProcessNamePidF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


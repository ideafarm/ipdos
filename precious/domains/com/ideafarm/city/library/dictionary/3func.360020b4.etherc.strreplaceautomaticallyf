
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    _OUT_
    delF( tinP , psttDelimiter ) ;

    }
        }
            delF( tinP , psttPair ) ;
            }
                idf = 1 ; // NEED TO RESCAN FROM THE BEGINNING CAUSE HAVE MODIFIED THE STRING
                delF( tinP , psttNew ) ;
                delF( tinP , psttOld ) ;
                strReplaceF( tinP , psttP , 0 , psttOld , psttNew , csttExtraP ) ;
                strReplaceF( tinP , psttP , 0 , T(psttDelimiter) + T(psttPair) + T(psttDelimiter) , T("") , csttExtraP ) ;
                }
                    strSubstringF( tinP , psttNew , idfp , sttqp , S1C('/') , psttPair ) ; ___( psttNew ) ;
                    strSubstringF( tinP , psttOld , idfp , sttqp , S1C('/') , psttPair ) ; ___( psttOld ) ;
                    strokeS sttqp( (countT)0 , sc_IGNOREqUOTES ) ;
                    countT idfp = 1 ;
                {
                ZE( strokeS* , psttNew ) ;
                ZE( strokeS* , psttOld ) ;
            {
            if( idcFound == idClass )
        {
        if( psttPair )
        strSubstringDelimitedF( tinP , psttPair , idcFound , idf , sttq , psttP ) ; ___( psttPair ) ;
        idcFound = 0 ;
    {
    while( idf && !POOP )
    countT idf = 1 ;
    strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
    ZE( countT , idcFound ) ;
    ZE( strokeS* , psttPair ) ;

    }
        delF( tinP , psttId ) ;
        strMakeF( tinP , psttDelimiter , T("/*") + T(psttId) + T("*/") ) ; ___( psttDelimiter ) ;
        strFromF( tinP , psttId , idClass ) ; ___( psttId ) ;
        ZE( strokeS* , psttId ) ;
    {
    ZE( strokeS* , psttDelimiter ) ;

    }
        POSTPONEtEST( psttP ) ;
        strMakeF( tinP , psttP , psttOldP , psttOldP[ 2 ].idAdam + csttExtraP ) ; // CALLER MUST TAG ___( psttP ) ;
    {
    if( psttOldP )
    const countT idClass = idClassP ? idClassP : 2 ;

    _INoLD_

    }
        if( POOP ) return ;
        __( !psttP && !psttOldP ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL
    SCOOP
{
/**//*1*/voidT etherC::strReplaceAutomaticallyF( tinS& tinP , strokeS*& psttP , const strokeS* const psttOldP , const countT idClassP , const countT csttExtraP )/*1*/
*/
  use csttExtraP to specify additional extra strokes
  i always preserve the extra strokes that are present in the source string
  can be 0
 csttExtraP
  if ze then class 2 will be used
  if not ze, then must be 0x1000 or greater
  can be 0
 idClassP
 psttOldP
 psttP
arguments
there is no way to specify a slash as part of either of the two strings in the pair
a replacement pair consists of two strings separated by a slash
  position does not effect either the result or the efficiency of this command
 the position of the replacement pair in the source string has no effect on the result
 replacements are made in the order in which the pairs are encountered
 all occurances, including the one in each replacement pair, will be replaced
  in this example, AAAA will be replaced with aaaaaa
  in the example, 2 is the class of the delimited substrings to interpret as replacement pairs
 example of a replacement pair (remove the embedded blanks): / *2* /AAAA/aaaaaa/ *2* /
each replacement pair is eliminated from the result
scans for replacement pairs and then performs the replacement
  \<A HREF=\"5.5b10104.1.1.0.html\"\>5b10104:  WAKEsHOW( "example.simplest.func.10300ce.etherC.strReplaceAutomaticallyF" )\</A\>
 simplest
examples
\<A HREF=\"5.10300ce.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$strReplaceAutomaticallyF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


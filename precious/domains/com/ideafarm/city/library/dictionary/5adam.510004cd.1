
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etThread.loafIF( tinP ) ;
sgnGo.giveF( tinP ) ;
etThread.strokeF( tinP , T("giving sign\r\n") ) ;
etThread.osSleepF( tinP , TOCK ) ;
etThread.strokeF( tinP , T("all are ready. will give sign in a tock\r\n") ) ;
while( cReady < CgORILLAS ) etThread.osSleepF( tinP , TUCK * 0x40 ) ;
while( cTries -- ) etThread.osThreadF( tinP , countTC() , tmnF , 0 , flTHREADlAUNCH_null , 0 , (countT)&cReady , (countT)&sgnGo ) ;
ZE( countT , cReady ) ;
countT cTries = CgORILLAS ;
signC sgnGo( tinP , TAG( TAGiDnULL ) ) ;

TODO

DONE( tmnF )
(*thirdC::third_pcDebugG_IF()) -- ;
}
    (*thirdC::third_pcDebugG_IF()) ++ ;
    sgnGo.waitF( tinP ) ;
    inc02AM( cReady ) ;

    while( !POOP ) if( !poolOld.poolNewF( tinP , LF , 0x10 ) ) break ;
    p oolC poolOld( tinP , TAG( TAGiDnULL ) , T("tmnF.")+TF1(tinP.monitor.idThread) , 0x10000 ) ;

    signC&  sgnGo  =  *(signC*)pTaskP->c2 ;
    countT& cReady = *(countT*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 )
TASK( tmnF )

#define CgORILLAS 0x10

/*1*/WAKEhIDE( "gorilla.thirdC.dosOpenSharedMemIF" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//


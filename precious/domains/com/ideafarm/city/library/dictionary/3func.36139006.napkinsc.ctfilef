
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    _OUT_

    new( 0 , tinP , pbDockFile + offDockP * sizeof( fileC ) , sizeof( fileC ) ) fileC( tinP , ostoName , access , share , flagsDetails , how , flFILEaTTR_null , flFILEc_null ) ;

    //tinP.pEther->traceF( tinP , T(ostoName) ) ;

    flagsT flagsDetails = flOPENdETAILS_DOnOTvALIDATE | flOPENdETAILS_LOCrANsEQ | flOPENdETAILS_NOcACHE ;
    countT how          = ifcOPENhOW_nCeO  ;
    countT share        = ifcOPENsHARE_WR  ;
    countT access       = ifcOPENaCCESS_WR ; //CANNOT SPECIFY READ ONLY HERE BECAUSE napkinC MIGHT NEED TO FORMAT ITSELF EVEN IF I AM ONLY GOING TO READ THE DATA SECTION OF THE NAPKIN

    }
        OStEXTA( ostoName , osName ) ;

        ether.delF( tinP , psttm ) ;
        osFileNameC osName( tinP , ether , T(psttm) ) ;
        ether.diskMapFileNameF( tinP , psttm , tName ) ; ___( psttm ) ;
        ZE( strokeS* , psttm ) ;
        etherC& ether = *tinP.pEther ;

        ctFileNameIF( tinP , tName , postNameP ) ;
        TN( tName , "" ) ;
    {
    OStEXT( ostoName , TUCK << 2 )              //20200509@1034: INCREASED FROM TUCK TO TUCK << 2

    _INoLD_

    }
        if( POOP ) return ;
        __Z( postNameP ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL    
{
/*1*/voidT napkinsC::ctFileF( tinS& tinP , const countT offDockP , const osTextT* const postNameP )/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


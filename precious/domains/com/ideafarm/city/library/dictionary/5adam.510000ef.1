
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


//VISIBLE

REST
etThread.osProcessIdPhaseAdamF( tinP , ifcIDpHASEhANDOFFoLD_SHUTTINGdOWN ) ;

}
    ++ s ; etThread.osSleepF( tinP , TOCK * 8 ) ;
    sleepC s( tinP , TAG( TAGiDnULL ) ) ;
{
third.s_shutdown2IF( tinP ) ;

}
    third.s_writeF( tinP , handleJob , (byteT*)&cTries , sizeof cTries ) ;
    third.s_acceptF( tinP , handleJob , idPortPeer , nnPeer , handleServer , countTC() ) ;
    ZE( countT , idPortPeer ) ;
    nicNameC nnPeer ;
{
while( !ether && cTries -- )
countT cTries = 4 ;

{ ZE( countT , tnu ) ; etThread.osThreadF( tinP , tnu , tmF , 0 , flTHREADlAUNCH_null , 0 , idPort ) ; } ;
{ ZE( countT , tnu ) ; etThread.osThreadF( tinP , tnu , tmF , 0 , flTHREADlAUNCH_null , 0 , idPort ) ; } ;
{ ZE( countT , tnu ) ; etThread.osThreadF( tinP , tnu , tmF , 0 , flTHREADlAUNCH_null , 0 , idPort ) ; } ;
{ ZE( countT , tnu ) ; etThread.osThreadF( tinP , tnu , tmF , 0 , flTHREADlAUNCH_null , 0 , idPort ) ; } ;

third.s_listenF( tinP , handleServer ) ;
countT idPort = third.s_bindF( tinP , handleServer ) ;
third.s_socketIF( tinP , handleServer ) ;
handleC handleServer( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_SOCKET ) ;
third.s_setupIF( tinP ) ;

thirdC& third = ether ;

TODO

DONE( tmF )

etThread.strokeF( tinP , T("by READING, the secondary thread received the value ")+TF1(cTries)+T("\r\n") ) ;
__( sizeof cTries != third.s_readF( tinP , (byteT*)&cTries , sizeof cTries , handleClient ) ) ;

}
    etThread.strokeF( tinP , T("by peeking, the secondary thread received the value ")+TF1(cTries)+T("\r\n") ) ;
    __( sizeof cTries != third.s_peekF( tinP , handleClient , (byteT*)&cTries , sizeof cTries ) ) ;
{
for( countT ii = 1 ; ii <= 8 ; ii ++ )

ZE( countT , cTries ) ;

etThread.strokeF( tinP , T("secondary thread is connected to port ")+TF1(idPort)+T("\r\n") ) ;
third.s_connectIF( tinP , handleClient , idPort ) ;
third.s_socketIF( tinP , handleClient ) ;
handleC handleClient( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_SOCKET ) ;

thirdC& third = ether ;
const countT idPort = pTaskP ? pTaskP->c1 : 0 ;
TASK( tmF )

/*1*/WAKEhIDE( "example.simplest.func.102003f.thirdC.s_peekF" )/*1*/
/**/
*/
\<A HREF=\"5.fe00104.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//



//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    _OUT_
    if( pBaton ) pBaton->ungrabF( tinP ) ;
    }
        while( !third && ~hDown ) ;
        }
            }
                stackk.extractF( 0 , tinP ) ;

                }
                    default                            : { _INoLD_ __( idLeverType ) ; __1                                              ; _OUT_ break ; }
                    case ifcIDtYPElEVER_PTR_soulC      : { _INoLD_ soulC*    pcl =    (soulC*)*(countT*)pbLB ; DEL( pcl )               ; _OUT_ break ; }
                    case ifcIDtYPElEVER_BLOBdOOMED           : { _INoLD_ byteT*    pbl =    (byteT*)*(countT*)pbLB ; third.delF( tinP , pbl ) ; _OUT_ break ; }
                    case ifcIDtYPElEVER_PTR_nicNameC   : { _INoLD_ nicNameC* pcl = (nicNameC*)*(countT*)pbLB ; third.delF( tinP , pcl ) ; _OUT_ break ; }
                    case ifcIDtYPElEVER_PTR_osTextT    : { _INoLD_ osTextT*  pcl =  (osTextT*)*(countT*)pbLB ; third.delF( tinP , pcl ) ; _OUT_ break ; }
                    case ifcIDtYPElEVER_PTR_plateC     : { _INoLD_ plateC*   pcl =   (plateC*)*(countT*)pbLB ; DEL( pcl )               ; _OUT_ break ; }
                    case ifcIDtYPElEVER_PTR_strokeS    : { _INoLD_ strokeS*  pcl =  (strokeS*)*(countT*)pbLB ; third.delF( tinP , pcl ) ; _OUT_ break ; }
                    case ifcIDtYPElEVER_PTR_countT     : { _INoLD_ countT*   pcl =   (countT*)*(countT*)pbLB ; third.delF( tinP , pcl ) ; _OUT_ break ; }
                    case ifcIDtYPElEVER_PTR_BLOB       : { _INoLD_ byteT*    pbl =    (byteT*)*(countT*)pbLB ; third.delF( tinP , pbl ) ; _OUT_ break ; }
                    case ifcIDtYPElEVER_PTR_lenPrefixedCountT :
                    case ifcIDtYPElEVER_countT         : { _INoLD_                                                                        _OUT_ break ; }
                    case ifcIDtYPElEVER_tid            :
                    }
                        break ;
                        _OUT_
                        third.delF( tinP , *(countT**)&ppsttl ) ;
                        }
                            while( ppsttl[ off ] ) third.delF( tinP , ppsttl[ off ++ ] ) ;
                            ZE( countT , off ) ;
                        {
                        if( ppsttl )
                        strokeS** ppsttl = *(strokeS***)pbLB ;
                        _INoLD_
                    {
                    case ifcIDtYPElEVER_PTR_ptrStrokeS :
                {
                switch( idLeverType )
            {
            if( pbLB && !((countT*)pbLB)[ offcP ] )
            byteT* pbLB = (byteT*)&stackk.downF( tinP , hDown ) ;
        {
        do
        handleC hDown( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
    {
    if( stackk )
    else if( osTidOwner != tinP.osTid && !bDying && !( F(stackk.flagsF(tinP)) & flSTACKc_ALLOWmULTIPLEuNSERIALIZED ) ) BLAMMO ;
    else if( !osTidOwner ) osTidOwner = tinP.osTid ;
    if( pBaton ) pBaton->grabF( tinP , TAG( TAGiDnULL ) ) ;
    _INoLD_
    
    }
        if( third ) return ;
        __( offcP > cbData / sizeof( countT ) ) ;
        if( third ) return ;
    {
    IFbEcAREFUL
    SCOOP
{
/*1*/voidT switchC::freeNullsF( tinS& tinP , const countT offcP )/*1*/

/**/
*/
  2: ooth countT object of data
  1: woth countT object of data
  0: the lever value
 offcP
 tinP
arguments
for speed, only a single countT object in the data (or the lever) is inspected
\<A HREF=\"5.1200023.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$freeNullsF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//



//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etherC::loafIF( tinP ) ;
etThread.traceF( tinP , T("ok") ) ;

etThread.delF( tinP , pstth ) ;
etThread.traceF( tinP , pstth ) ;
calc.queryStringF( tinP , etThread , pstth ) ; ___( pstth ) ;
ZE( strokeS* , pstth ) ;

}
    DEL( pInfo ) ;
    }
        etThread.delF( tinP , pbBuffer ) ;
        }
            }
                calc.eatF( pbBuffer , cbNow ) ;
                etThread.fileReadF( tinP , pbBuffer , cbNow , fi ) ;

                cDoLo -= cbNow ;
                if( cDoLo < cbNow ) cDoHi -- ;

                if( !cDoHi && cbNow > cDoLo ) cbNow = cDoLo ;
                countT cbNow = cbChunk ;
            {
            while( cDoHi || cDoLo )

            countT cDoHi = 0   ;
            countT cDoLo = pInfo->cbUsed ;
        {
        if( pbBuffer )

        etThread.newF( tinP , LF , pbBuffer , cbChunk ) ; ___( pbBuffer ) ;
        ZE( byteT* , pbBuffer ) ;

        ;
            : TOCK
            ? pInfo->cbUsed
        countT cbChunk = pInfo->cbUsed < TOCK
    {
    if( !POOP )

    __Z( pInfo ) ;
    etThread.diskFileQueryF( tinP , pInfo , fi ) ; ___( pInfo ) ;
    ZE( infoFileS* , pInfo ) ;

    fileC fi( tinP , (strokeS*)T("///d/tmp/x/foo.ttt") , ifcOPENaCCESS_R , ifcOPENsHARE_R , flOPENdETAILS_LOCsEQ , ifcOPENhOW_nFeO ) ;
{
hasherC calc ;

etThread.traceF( tinP , T("i calculate an md5 hash") ) ;

TODO

/*1*/WAKEsHOWtEXT( "example.other.1snip.1500016f.hasherC.big.input.file" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


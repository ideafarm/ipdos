
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST                                  


}
    sockc.writeF( tinP , sOut , 0 , 0 , 0 ) ;
    sockc.connectF( tinP , idps , nicNameC() , 0 , 0 , 0 ) ;
    socketC sockc( tinP , etThread , TAG( TAGiDnULL ) , 0 , flSOCKETc_null , 0 , 0 , 0 , 0 , 0 ) ;

    sOut << (countT)0x44444444 ;
    sOut << (countT)0x33333333 ;
    sOut << (countT)0x22222222 ;
    sOut << (countT)0x11111111 ;
    soulC sOut( tinP , TAG( TAGiDnULL ) ) ;
{

etThread.osSleepF( tinP , TOCK ) ;

etThread.osThreadF( TaRG1( tmWorkF ) ) ;

TODO                                  

DONE( tmWorkF )

CONoUTrAW( postBuffer ) ;

}
    CONoUTrAW3( "" , vv , "\r\n" ) ;
    sIn >> vv ;
    ZE( countT , vv ) ;
{
while( sIn )

DEL( psoa ) ;
psoa->readF( tinP , sIn , 0 , 0 ) ;
soulC sIn( tinP , TAG( TAGiDnULL ) ) ;

socks.acceptF( tinP , psoa , idpPeer , nnPeer , bRefuse ) ;
ZE( boolT , bRefuse ) ;
nicNameC nnPeer ;
ZE( countT , idpPeer ) ;
ZE( socketC* , psoa ) ;

socks.listenF( tinP ) ;
idps = socks.bindF( tinP , 0 , nicNameC() , 0 , 0 ) ;

socketC socks( tinP , etThread , TAG( TAGiDnULL ) , 0 , flSOCKETc_null , 0 , 0 , 0 , 0 , 0 ) ;

TASK( tmWorkF )

osTextT postBuffer[ TUCK ] ;
countT idps ;


/*1*/WAKEsHOWtEXT( "example.simplest.1snip.1500000d.socketc.marriage.model.encryption" )/*1*/
/**/
*/
 recommendation: this can be used on top of OpenSSL (foreign encryption) or can be used when speed but not strength is required
 the design objective was to have a fast and effective encryption
 in practice, as implemented by socketC, the entire history consists of the entire history for the connection
 the concept was to require an eavesdropper to observe the entire history of communication between oo endpoints in order to decypher any subsequent part of the communication
 it is a "homemade" encryption, with unknown strength
 marriage model encryption uses the entire history of a point to point communication to encode each succeeding byte
when reading and writing soulC instances, socketC's default behavior is t encrypt using marriage model encryption
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

}
    }
        ++ s ; ether.osSleepF( tinP , bFail ? TOCK * 0x10 : TICK ) ;
        sleepC s( tinP , TAG( TAGiDnULL ) ) ;
    {
    if( !ether )
    
    etThread.delF( tinP , pstt1m ) ;
    }
        }
            }
                break ;
                bFail = 1 ;
                etThread.strokeF( tinP , T(" failed\r\n") ) ;
            {
            else
            }
                tinP.pEtScratch->boxZapF( tinP , psttc1 , 1 ) ;
                etThread.strokeF( tinP , T(" aok\r\n") ) ;
            {
            if( !POOP )

            etThread.delF( tinP , postm ) ;
            if( postm && costm ) tinP.pEtScratch->boxPutF( tinP , tHead , postm , costm , 1 ) ;
            tinP.pEtScratch->boxGetShadowF( tinP , postm , costm , psttc1 , 1 ) ; ___( postm ) ;
            ZE( countT   , costm ) ;
            ZE( osTextT* , postm ) ;
        
            SCOOPS
        {
        IFsCRATCH

        etThread.strokeF( tinP , psttc1 ) ;
    {
    FORsTRINGSiN1( pstt1m )
    ZE( boolT , bFail ) ;
    etThread.boxMenuF( tinP , soul , tDepository+T("*") , 0 , 1 ) ; ___( pstt1m ) ;
    ZE( strokeS* , pstt1m ) ;
{
while( !ether && !etThread )
TN( tcr , "\r\n" ) ;
handleC hDirChange( tinP , TAG( TAGiDnULL ) ) ;
TN( tHead , "" ) ; tHead = T("ideafarm.com//smtp/" ifcEMAIL_OLDfROM "/" ifcEMAIL_OLDfROM "") ;
    
etThread.diskMakeDirIfNeededF( tinP , tDepository ) ;
TN( tDepository , "///ideafarm/ephemeral/domains/com/ideafarm/data/" ) ;

etThread.osThreadF( TaRG1( tmWatchCeeF ) ) ;

TODO

DONE( tmWatchCeeF )

}
    }
        ++ s ; ether.osSleepF( tinP , bFail ? TOCK * 0x10 : TICK ) ;
        sleepC s( tinP , TAG( TAGiDnULL ) ) ;
    {
    if( !ether )
    
    etThread.delF( tinP , pstt1m ) ;
    }
        }
            }
                break ;
                bFail = 1 ;
                etThread.strokeF( tinP , T(" failed\r\n") ) ;
            {
            else
            }
                tinP.pEtScratch->boxZapF( tinP , psttc1 , 1 ) ;
                etThread.strokeF( tinP , T(" aok\r\n") ) ;
            {
            if( !POOP )

            etThread.delF( tinP , postm ) ;
            if( postm ) tinP.pEtScratch->boxPutF( tinP , tHead , postm , costm , 1 ) ;
            tinP.pEtScratch->boxGetShadowF( tinP , postm , costm , psttc1 , 1 ) ; ___( postm ) ;
            ZE( countT   , costm ) ;
            ZE( osTextT* , postm ) ;
        
            SCOOPS
        {
        IFsCRATCH

        etThread.strokeF( tinP , psttc1 ) ;
    {
    FORsTRINGSiN1( pstt1m )
    ZE( boolT , bFail ) ;

    }
        ++ s ; ether.osSleepF( tinP , TOCK ) ;
        sleepC s( tinP , TAG( TAGiDnULL ) ) ;
    {
    if( cFiles ) //TO GIVE THE WRITER TIME TO CLOSE THE FILE (CURRENT TAGGING PROTOCOL IS FLAWED AND CAN CAUSE ME TO DELETE A FILE IF I SEE THE TAG JUST BEFORE IT IS REMOVED)

    countT cFiles = etThread.boxMenuF( tinP , soul , tDepository+T("ideafarm.rpt.*") , 0 , 1 ) ; ___( pstt1m ) ;
    ZE( strokeS* , pstt1m ) ;
{
while( !ether && !etThread )
TN( tcr , "\r\n" ) ;
handleC hDirChange( tinP , TAG( TAGiDnULL ) ) ;
TN( tHead , "" ) ; tHead = T("ideafarm.com//smtp/" ifcEMAIL_OLDfROM "/" ifcEMAIL_OLDfROM "") ;
    
TN( tDepository , "///d/" ) ;

TASK( tmWatchCeeF )

/*1*/WAKEhIDE( "ifcIDaDAM_DATA.kernel.data" )/*1*/
/**/
*/
/*
//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//



//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return !cb1P ? 0 : cbuOld ;

    _OUT_

    if( offPageEnd != offPageStart && F(flagsP) & flBOOK0cwRITE_FLUSHaTpAGE ) thirdC::flushViewOfFileIF( tinP , (const byteT*)( offPageStart * cbPage ) , ( offPageEnd - offPageStart ) * cbPage ) ;

    const countT offPageEnd = (countT)pbc / cbPage  ;

    __NZ( F(flagsP) & flBOOK0cwRITE_SETrEMAINING && F(flagsResultP) & flBOOK0cwRITErESULT_WROTElATHbYTE ) ;  //THIS VERIFIES THAT SETrEMAINING DID NOT WRITE THE LATH BYTE, WHICH SHOUJLD BE IMPOSSIBLE
    if( pbc == pbBody + pHead->cbBody && cbuOld < pHead->cbBody && ( F(flagsP) & flBOOK0cwRITE_SETrEMAINING || cb1P || cbFill ) ) flagsResultP |= flBOOK0cwRITErESULT_WROTElATHbYTE ;

    }
        }
            if( setIfZeAM( pHead->cbFill , cbFill ) )     { BLAMMO ; } //THE BLAMMO SHOULD BE IMPOSSIBLE
                                                              thirdC::c_memsetIF( tinP , pbc , cbFill , FILLbYTE_BOOK0c ) ; pbc += cbFill ;
        {
        if( cbFill )

        if( F(flagsP) & flBOOK0cwRITE_TAILfINGER      )     { putNegAM( *(countT*)pbc , FINGERnEG_BOOK0cwRITEtAIL )       ; pbc += sizeof( countT ) ; }

        if( F(flagsP) & flBOOK0cwRITE_FLUSHb4tAIL     )       thirdC::flushViewOfFileIF( tinP , pbStart , pbc - pbStart ) ;

        if( cb2P                                      )     { thirdC::c_memcpyIF( tinP , pbc , pb2P , cb2P )              ; pbc += cb2P             ; }
        if( pb1P )                                            thirdC::c_memcpyIF( tinP , pbc , pb1P , cb1P )              ; pbc += cb1P             ; // INTENTIONAL CONDITIONAL MEMCPY FOLLOWED BY UNCONDITIONAL INCREMENT OF pbc

        if( pcOffWroteP ) *pcOffWroteP = pbc - pbBody ;

        if( F(flagsP) & flBOOK0cwRITE_HEADfINGER2     )     { putNegAM( *(countT*)pbc , FINGERnEG_BOOK0cwRITEhEAD2 )      ; pbc += sizeof( countT ) ; }
        if( F(flagsP) & flBOOK0cwRITE_HEADcBdATA      )     { *(countT*)pbc = cb1P                                        ; pbc += sizeof( countT ) ; }
        if( F(flagsP) & flBOOK0cwRITE_HEADiDfORMAT    )     { *(countT*)pbc = ifcIDfORMAT_BOOK0hEAD                       ; pbc += sizeof( countT ) ; }
        if( F(flagsP) & flBOOK0cwRITE_HEADfINGER1     )     { putNegAM( *(countT*)pbc , FINGERnEG_BOOK0cwRITEhEAD1 )      ; pbc += sizeof( countT ) ; }
    {
    else
    }
        }
            thirdC::c_memsetIF( tinP , pbc , cb1P , bSet ) ; pbc += cb1P  ;
            cb1P = pHead->cbBody - cbuOld - 1 ; // 1 IS SUBTRACTED TO PREVENT THE LATH BYTE FROM BEING SET ; THIS IS TO AVOID UNDESIRED CLOSURE O A booksC bookC INSTANCE ; AN APP THAT WANTS TO SET THE LATH BYTE MUST DO IT EXPLICITLY WITH AN OO'TH CALL TO writeF
            byteT bSet = (byteT)cb1P ;
        {
        else
        if( cbuOld >= pHead->cbBody - 1 ) cb1P = 0 ;
    {
    if( F(flagsP) & flBOOK0cwRITE_SETrEMAINING )

    const countT offPageStart = (countT)pbc / cbPage  ;
    byteT* pbc = pbStart ;
    byteT* const pbStart = pbBody + cbuOld ;
    static const countT cbPage = thirdC::os_cbPage_IF( tinP ) ; //A:ASSUME: PAGE SIZE DOES NOT CHANGE DURING LIFE OF BASE OS GEN

    if( F(flagsP) & flBOOK0cwRITE_PURGE ) cbuOld = 0 ;

    if( F(flagsP) & flBOOK0cwRITE_FLUSHbOOKhEADoNcHANGE ) thirdC::flushViewOfFileIF( tinP , (byteT*)pHead , sizeof( bookHeadS ) ) ;

    }
        }
            if( ( !cbw && !cbFill ) || cbuOld == setIfEqualsAM( pHead->cbUsed , cbuNew , cbuOld ) ) break ;

            ;
                : cbw + cbFill + cbuOld
                ? cbw + cbFill
            countT cbuNew = F(flagsP) & flBOOK0cwRITE_PURGE

            if( !cbw && F(flagsP) & flBOOK0cwRITE_ELSEfILLtOeND ) cbFill = cbAvailable ;

            ;
                    : 0
                    ? cb1P + cb2P + cbHeadTail
                : cb1P
                ? cbAsk
            const countT cbw = F(flagsP) & flBOOK0cwRITE_SETrEMAINING

            }
                }
                    }
                        cb2P = 0 ;
                        cb1P = cbDo ;
                    {
                    else
                    if( cb1P <= cbDo ) cb2P = cbDo - cb1P ;

                    countT cbDo = cbAvailable - cbHeadTail ;
                {
                else
                if( F(flagsP) & flBOOK0cwRITE_ALLoRnONE || cbAvailable <= cbHeadTail ) cb2P = cb1P = 0 ;

                flagsResultP |= flBOOK0cwRITErESULT_COULDnOTwRITEaLL ;

                }
                    continue ;
                    setIfEqualsAM( pHead->cbUsed , 0 , cbuOld ) ;
                {
                if( F(flagsP) & flBOOK0cwRITE_PURGEiFfULL )
            {
            if( cbAsk > cbAvailable ) // CAN ONLY BE TRUE IF pb1P

            ;
                    : 0
                    ? cbAvailable - 1                                               // "- 1" IS TO AVOID WRITING LATH BYTE, MOTIVATED BY THE PRESUMPTION THAT CALLER IS ABOUT TO USE THE BYTES THAT I AM SETTING (SEE barryC FOR EXAMPLE)
                : cbAvailable
                ? cb1P + cb2P + cbHeadTail
            const countT cbAsk = !( F(flagsP) & flBOOK0cwRITE_SETrEMAINING )

            ;
                : pHead->cbBody - cbuOld
                ? pHead->cbBody
            const countT cbAvailable = F(flagsP) & flBOOK0cwRITE_PURGE
     
            }
                continue ;
                ++ s ; thirdC::dosSleepWinkIF( tinP ) ;
            {
            if( !cbuOld && !( F(pHead->flags) & flBOOKhEADs_PRIORbOOKnOTcONTINUEDhERE ) && !( F(flagsP) & flBOOK0cwRITE_CONTINUEfROMpRIOR ) )
    
            cbuOld = pHead->cbUsed ;
        {
        for(;;)
        sleepC s( tinP , TAG( TAGiDnULL ) ) ;
    {
    ZE( countT , cbFill ) ;
    ZE( countT , cbuOld ) ;
    flagsResultP = flBOOK0cwRITErESULT_null ;

    if( F(flagsP) & flBOOK0cwRITE_TAILfINGER   ) cbHeadTail += sizeof( countT ) ;
    if( F(flagsP) & flBOOK0cwRITE_HEADfINGER2  ) cbHeadTail += sizeof( countT ) ;
    if( F(flagsP) & flBOOK0cwRITE_HEADcBdATA   ) cbHeadTail += sizeof( countT ) ;
    if( F(flagsP) & flBOOK0cwRITE_HEADiDfORMAT ) cbHeadTail += sizeof( countT ) ;
    if( F(flagsP) & flBOOK0cwRITE_HEADfINGER1  ) cbHeadTail += sizeof( countT ) ;
    ZE( countT , cbHeadTail ) ;

    _INoLD_

    }
        // if( POOP ) return 0 ;
        // __( !( F(flagsP) & flBOOK0cwRITE_TAILfINGER   ) ) ;
        // __( !( F(flagsP) & flBOOK0cwRITE_HEADfINGER2  ) ) ;
        // __( !( F(flagsP) & flBOOK0cwRITE_HEADcBdATA   ) ) ;
        // __( !( F(flagsP) & flBOOK0cwRITE_HEADiDfORMAT ) ) ;
        // __( !( F(flagsP) & flBOOK0cwRITE_HEADfINGER1  ) ) ;
        // //TO FIND A BUG.  RETAIN THESE TESTS UNTIL CODE IS WRITTEN THAT WOULD VIOLATE THEM INTENTIONALLY
        // 20130902@1313: COMMENTED OUT THIS BUG TRAP BECAUSE IT NEVER TRAPPED ANYTHING AND IT IS NOT COMPATIBLE WITH bksTrace

        if( POOP ) return 0 ;
        __( pb1P && !( F(flagsP) & flBOOK0cwRITE_ALLOWoDDlENGTH ) && ( cb1P + cb2P ) % sizeof( countT ) ) ;
        if( POOP ) return 0 ;
        __( flagsResultP ) ;
        __NZ( !pb2P && cb2P ) ;
        __NZ( !pb1P && pb2P ) ;
        __NZ( !pb1P &&    F(flagsP) & flBOOK0cwRITE_SETrEMAINING   &&  cb1P >= TUCK ) ;
        __NZ( !pb1P && !( F(flagsP) & flBOOK0cwRITE_SETrEMAINING ) && !cb1P         ) ;
        __NZ(  pb1P &&    F(flagsP) & flBOOK0cwRITE_SETrEMAINING                    ) ;
        if( POOP ) return 0 ;
        FV( flBOOK0cwRITE , flagsP ) ;
        if( POOP ) return 0 ;
    {
    IFbEcAREFUL    
{
/*1*/countT book0C::writeF( tinS& tinP , flagsT& flagsResultP , const byteT* const pb1P , countT& cb1P , const byteT* const pb2P , countT& cb2P , const flagsT flagsP , countT* const pcOffWroteP )/*1*/

/**/
*/
  that offset differs from the offset in my returned value iff wo or more of the optional header fields is ordered
  if not 0 then *pcOffWroteP will be set to the offset at which i wrote the body of the specified bytes
 pcOffWroteP
  flBOOK0cwRITE_SETrEMAINING: interprets (byteT)cb1P as a "set character" and sets all remaining bytes to this value
 flagsP
  on return, will be the number of bytes written from pb2P
  if  pb2P then specifies the number of bytes at pb2P
  if !pb2P then must be 0
 cb2P
  if not 0 then points to oo'th piece of input
  is normally 0
  can be 0
 pb2P
   if !pb1P will be the number of fill bytes written
  on return, will be the number of bytes written from pb1P
  if  pb1P then must not be 0 and specifies the number of bytes at pb1P to copy
  if !pb1P then specifies the fill value
  if !pb1P then can be 0 and must be < TUCK
 cb1P
 every byte of the remainder of the book will be set to (byteT)cb1P  
   else cb1P bytes are "written" by reserving them without writing anything to them
   if flBOOK0cwRITE_SETrEMAINING then all remaining bytes are set to (byteT)c1P
  if 0 then my behavior depends upon whether flBOOK0cwRITE_SETrEMAINING is set
  normally is not 0
  can be 0
 pb1P
 flagsResultP
 tinP
parameters
i evaluate to the offset at which i wrote the specified bytes
 the !pb1P functionality is referred to as "set" (i.e. "setting the bytes")
 in this code and in documentation, "fill" always refers to the flBOOK0cwRITE_ELSEfILLtOeND functionality
  !pb1P specifies that the remaining bytes be set to (byteT)cb1P
  flBOOK0cwRITE_ELSEfILLtOeND: specifies that the remaining bytes be set to FILLbYTE_BOOK0c when there is not enough room in the book to perform the write
 oo distinct "fill" operations are supported
filling versus setting
 for example, application code can build a header image and then write the concatenation of the header image and the data
for application convenience, i optionally accept input in oo pieces, which i will concatenate
the caller must check cb1P to verify that all bytes were written
if there is insufficient space, i will fill the available space and silently not write the remaining bytes
i append byte values to the end of the current contents of the book
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


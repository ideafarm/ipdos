
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etherC::loafIF( tinP ) ;
etThread.traceF( tinP , T("ok") ) ;

}
    }
        etThread.delF( tinP , pstt2sans ) ;
        etThread.delF( tinP , pstt1sans ) ;
        etThread.delF( tinP , pstt2 ) ;
        etThread.delF( tinP , pstt1 ) ;

        etThread.traceF( tinP , pstt2sans ) ;
        etThread.traceF( tinP , pstt1sans ) ;
        etThread.traceF( tinP , tLine ) ;

        }
            }
                etThread.diskMoveFileOrDirF( tinP , tDscDoneFolder+tShort , tDscFolder+tShort ) ;

                }
                    etThread.delF( tinP , psttShort ) ;
                    tShort = T(psttShort) ;
                    etThread.delF( tinP , psttnu ) ;
                    etThread.strBisectF( tinP , psttnu , psttShort , ppsttName[ offn ] , tSlash , - 1 , flSTRbISECT_APPENDdELIMITER ) ; ___( psttnu ) ; ___( psttShort ) ;
                    ZE( strokeS* , psttShort ) ;
                    ZE( strokeS* , psttnu ) ;
                {
                TN( tShort , "" ) ;
            {
            for( countT offn = 0 ; offn <= 1 ; offn ++ )

            strokeS* ppsttName[] = { pstt1 , pstt2 } ;
        {
        if( !etThread.strCompareF( tinP , pstt1sans , pstt2sans ) )

        ___( pstt2sans ) ;
        if( etThread.strSubstringF( tinP , pstt2sans , idf2 , sttq , tSss , pstt2 , 0 , TUCK ) && !idf2 ) etThread.strFuseF( tinP , pstt2sans , tJpg ) ;
        idf2 = 1 ;
        ZE( strokeS* , pstt2sans ) ;

        ___( pstt1sans ) ;
        if( etThread.strSubstringF( tinP , pstt1sans , idf2 , sttq , tSss , pstt1 , 0 , TUCK ) && !idf2 ) etThread.strFuseF( tinP , pstt1sans , tJpg ) ;
        countT idf2 = 1 ;
        ZE( strokeS* , pstt1sans ) ;

        // ".0600x0000.jpg"  (EXAMPLE OF SIZE SUFFIX)

        swsNameByIdPic >> pstt2 ;
        swsNameByIdPic >> pstt1 ;
        ZE( strokeS* , pstt2 ) ;
        ZE( strokeS* , pstt1 ) ;
    {
    while( swsNameByIdPic >= 2 )
    cLeverIdPic = swsNameByIdPic.leverF( tinP , idf ) ;
{
for( countT idf = 1 ; idf <= cFlavors && !ether && !POOP ; idf ++ )
countT cFlavors = swsNameByIdPic.cFlavorsF( tinP ) ;

TN( tSlash , "/" ) ;

;

    +S2(sa_SSSaNDeND,sc_ccSSS)
        +T(".jpg")
        +S2(sa_SSSmARKnUMERIC9,sc_cSSSmARK)
        +S3(3,sc_ccSSSrEPEAT,3)
        +T("x")
        +S2(sa_SSSmARKnUMERIC9,sc_cSSSmARK)
        +S3(3,sc_ccSSSrEPEAT,3)
        +T(".")
    +S2(sa_SSSaND,sc_ccSSS)
    T("")

TN( tSss , "" ) ; tSss =
TN( tJpg , ".jpg" ) ;

TN( tb4 , "    " ) ;
TN( tLine , "------------------" ) ;

//etThread.traceF( tinP , tSay+TF2(idf,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF2(cLeverIdPic,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF2(cFiles,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
//TN( tSay , "[idf,idPic,cFiles]:    " ) ;

while( ~hFind && !ether && !POOP ) ;
}
    DEL( pInfo ) ;
    }
        }
            }
                swsNameByIdPic << psttName ;
                cLeverIdPic = etThread.strDigitsToSCountF( tinP , psttDigits , 0xa , 1 ) ;

                etThread.strConvertToLowerCaseF( tinP , psttName ) ;
                etThread.strMakeF( tinP , LF , psttName , pInfo->psttIfoName ) ; ___( psttName ) ;
                ZE( strokeS* , psttName ) ;
            {
            if( etThread.strIsDigitsF( tinP , psttDigits , 0xa ) )
            etThread.strSubstringF( tinP , psttDigits , idf , sttq , sttDot , pInfo->psttIfoName ) ; ___( psttDigits ) ;
            ZE( strokeS* , psttDigits ) ;
        {
        if( etThread.strIdF( tinP , idf , sttq , tDotDsc , pInfo->psttIfoName , idl , 1 ) )
        ZE( countT , idl ) ;
        countT idf = 1 ;
    {
    if( pInfo )
    etThread.diskFindFileOrDirOldF( tinP , pInfo , hFind , tLike ) ;
{
do
ZE( infoFileS* , pInfo ) ;
handleC hFind( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILEfIND ) ;

switchStackC swsNameByIdPic( tinP , etThread , TAG( TAGiDnULL ) , flSTACKc_DOnOTsERIALIZE , cLeverIdPic , flSTACKc_DOnOTsERIALIZE , ifcSTACKtYPE_PTR_strokeS ) ;
ZE( countT , cLeverIdPic ) ;

strokeS sttq( 0 , sc_IGNOREqUOTES ) ;
strokeS sttDot( '.' ) ;
TN( tDotDsc    , ".dsc" ) ;
TN( tLike      , "" ) ; tLike = tDscFolder+T("*.jpg") ;

TN( tDscDoneFolder , "///d/ideafarm.home.101/IdeaFarm (tm)/SYSTEM/arc.jpg/dsc/done/" ) ;
TN( tDscFolder     , "///d/ideafarm.home.101/IdeaFarm (tm)/SYSTEM/arc.jpg/dsc/" ) ;

TODO

/*1*/WAKEsHOWtEXT( "tool.inspect.jpg.dsc.files" )/*1*/
/**/
*/
 |  
 | !ideafarm.6.20090905@1440.001.000b31d6.e7363bec.ab10f1c3.archiveold.gather.to.!.000b31d6.e7363bec.dsc00013.0600x0000.jpg
 | !ideafarm.6.20090905@1440.001.000b31d6.e7363bec.ab10f1c3.archiveold.gather.to.!.000b31d6.e7363bec.dsc00013.jpg
 |  
example
if there are exactly oo and wo name is exactly the other name with a dimension suffix inserted then i move both files to a "done" directory 
for each dsc serial number, i accumulate the file names
i inspect a directory that is assumed to contain all dsc jpg files from the archive
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


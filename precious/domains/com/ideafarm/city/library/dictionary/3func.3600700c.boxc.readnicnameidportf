
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    _OUT_
    ether.strSubstringF( tinP , psttw , idf , sttq , S1C(')') , psttP ) ; ___( psttw ) ; *( (byteT*)&idPortP + 0 ) = (byteT)ether.strDigitsToSCountF( tinP , psttw , 0xa , 1 ) ; ether.delF( tinP , psttw ) ;
    ether.strSubstringF( tinP , psttw , idf , sttq , S1C(',') , psttP ) ; ___( psttw ) ; *( (byteT*)&idPortP + 1 ) = (byteT)ether.strDigitsToSCountF( tinP , psttw , 0xa , 1 ) ; ether.delF( tinP , psttw ) ;
    ether.strSubstringF( tinP , psttw , idf , sttq , S1C(',') , psttP ) ; ___( psttw ) ; *( (byteT*)&nicNameP + 0 ) = (byteT)ether.strDigitsToSCountF( tinP , psttw , 0xa , 1 ) ; ether.delF( tinP , psttw ) ;
    ether.strSubstringF( tinP , psttw , idf , sttq , S1C(',') , psttP ) ; ___( psttw ) ; *( (byteT*)&nicNameP + 1 ) = (byteT)ether.strDigitsToSCountF( tinP , psttw , 0xa , 1 ) ; ether.delF( tinP , psttw ) ;
    ether.strSubstringF( tinP , psttw , idf , sttq , S1C(',') , psttP ) ; ___( psttw ) ; *( (byteT*)&nicNameP + 2 ) = (byteT)ether.strDigitsToSCountF( tinP , psttw , 0xa , 1 ) ; ether.delF( tinP , psttw ) ;
    ether.strSubstringF( tinP , psttw , idf , sttq , S1C(',') , psttP ) ; ___( psttw ) ; *( (byteT*)&nicNameP + 3 ) = (byteT)ether.strDigitsToSCountF( tinP , psttw , 0xa , 1 ) ; ether.delF( tinP , psttw ) ;

    ether.delF( tinP , psttw ) ;
    ether.strSubstringF( tinP , psttw , idf , sttq , S1C('(') , psttP ) ; ___( psttw ) ;
    ZE( strokeS* , psttw ) ;
    strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
    countT idf = 1 ;

    nicNameP = idPortP = 0 ;
    _INoLD_

    }
        if( POOP ) return ;
    {
    IFbEcAREFUL    
    SCOOP
{
/*1*/voidT boxC::readNicNameIdPortF( tinS& tinP , nicNameC& nicNameP , countT& idPortP , const strokeS* const psttP )/*1*/

/**/
*/
 psttP
 idPortP
 nicNameP
arguments
 the strokes delimited by '(' and ')' must be a comma delimited set of 6 base 10 numbers, with no blanks
 the strokes after the first ')' do not matter
 the strokes before the first '(' do not matter
parses psttP, which is assumed to be in the form T("arbitrary (h4,h3,h2,h1,p2,p1) arbitrary")
U: only supports 32 bit nicName values (IPv4)
it is illegal to refer to this symbol in the definition of an adam
\<A HREF=\"5.109000c.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$readNicNameIdPortF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


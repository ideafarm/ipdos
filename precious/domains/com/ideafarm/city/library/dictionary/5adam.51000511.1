
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

}
    while( cRelays ) { ++ s ; etThread.osSleepF( tinP , TUCK * 0x40 ) ; }

//U::    /*if( etherC::ifc_idHomeIdisk_IF() == 1 )*/ etThread.osThreadF( TaRG1( tmTestF ) ) ;

    }
        ++ s ; etThread.osSleepF( tinP , TOCK ) ;
        cRelays ++ ; etThread.osThreadF( TaRG1( tmRelayF ) , (countT)&cRelays ) ;
    {
    while( cDo -- )
    countT cDo = 1 ;
    sleepC s( tinP , TAG( TAGiDnULL ) ) ;
{
ZE( countT , cRelays ) ;
    
}
    host.idpTeat = idPortC() ;
    homeS& host = homeS::homeIF() ;
{

TODO

DONE( tmRelayF )
}
    cRelaysP -- ;
    relayC relay( tinP , etThread , bReady ) ;
    ZE( boolT , bReady ) ;
    countT& cRelaysP = *(countT*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 )
TELL( "setting up" )
TASK( tmRelayF )

DONE( tmTestF )

}
    ++ s ; ether.osSleepF( tinP , TOCK >> 2 ) ;

    etThread.cioPutF( tinP , bQuit , c8c , sGift , &sTo , &sToMediator ) ;
{
while( !ether )
sleepC s( tinP , TAG( TAGiDnULL ) ) ;

count8S c8c( 1 , 2 , 3 , 4 ) ;
ZE( boolT , bQuit ) ;

soulC sToMediator( tinP , TAG( TAGiDnULL ) ) ;
soulC sTo( tinP , TAG( TAGiDnULL ) ) ;


sGift << (strokeS*)tMsg ;
TN( tMsg , "" ) ; tMsg = T("banged [nnMe,idHome]:    ")+T(nnMe)+T("    ")+TF2(processGlobal1S::_processGlobal1I_IF().idHome,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ;
soulC sGift( tinP , TAG( TAGiDnULL ) ) ;

nicNameC nnMe = socketC::nicNameIF( tinP , etThread , 0 ) ;

etThread.cioSetGetF( tinP , cioGetF ) ;

etThread.traceF( tinP , T("napped") ) ;
}
    ++ s ; ether.osSleepF( tinP , TOCK << 2 ) ;
    sleepC s( tinP , TAG( TAGiDnULL ) ) ;
{
etThread.traceF( tinP , T("napping") ) ;

TASK( tmTestF )

}
    }
        DEL( psPayloadP ) ; //OPTIONAL
        etherP.delF( tinP , pczChannelP ) ; //OPTIONAL
        etherP.delF( tinP , psttMsg ) ;

        etherP.traceF( tinP , T("cioGetF [channel,message]: ")+TF2(pczChannelP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" \"")+T(psttMsg)+T("\"") ) ;

        *psPayloadP >> psttMsg ; ___( psttMsg ) ;
        ZE( strokeS* , psttMsg ) ;
    {
    if( idPayloadTypeP == ifcIDtYPEgIFT_APPLICATION )

    //etherP.traceF( tinP , T("cioGetF [idPayloadTypeP]: ")+TF2(idPayloadTypeP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
{
voidT cioGetF( tinS& tinP , etherC& etherP , const boolT& bQuitP , const countT idPayloadTypeP , soulC*& psPayloadP , countT*& pczChannelP , countT& cArgP , const idPortTimeC& idptOriginP )

/*1*/WAKEhIDE( "ifcIDaDAM_KERNEL3BANG" )/*1*/
/**/
*/
i am an object oriented rewrite of ff40104, which works
i began as an exact copy of ff40104
obsoletes ff40104
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//



//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return flagsRC ;

    _OUT_

    }
        tinP.ta.pushed.listWalk.walk.flagsWalkP   = savePushed   ;
        tinP.ta.retained.listWalk.walk.flagsWalkP = saveRetained ;

        flagsRC |= list.walkF( tinP , idGrabLayerP ) ;

                              tinP.ta.retained.listWalk.walk.flagsWalkP |= flLISTwALK_null ;        //20180510@1127: NOT USED; RETAINED FOR FUTURE USE
        flagsT saveRetained = tinP.ta.retained.listWalk.walk.flagsWalkP ;

                              tinP.ta.pushed.listWalk.walk.flagsWalkP |= flLISTwALK_CALLERgRABBEDrOOT ;
        flagsT savePushed   = tinP.ta.pushed.listWalk.walk.flagsWalkP ;

        if( !( list.flagsi & fliLISTINGc_MIXINlIST ) ) { BLAMMO ; }
        listC& list = *(listC*)hList.osF( ifcIDtYPEhANDLE_LISTING ) ;
    {
    if( ~hList )

    __( !hList && !( F(flagsP) & flLISToPEN_IFeXISTS ) ) ;
    if( F( openIF( tinP , hList , pczNameP , flagsP , idGrabLayerP ) ) & flLISToPENrETURNcODE_LISTeXISTED ) flagsRC |= flLISTwALKrETURNcODE_LISTeXISTED ;
    handleC hList( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_LISTING ) ;

    LNV( pczNameP )

    _INoLD_

    }
        if( POOP ) return flagsRC ;
        __(  tinP.ta.pushed.listWalk.walk.pbHandleRootP ) ;
        __(  tinP.ta.pushed.listWalk.walk.ppHandleRootP ) ;
        __(  tinP.ta.pushed.listWalk.walk.pHandleHiP ) ;
        __(  tinP.ta.pushed.listWalk.walk.pHandleLoP ) ;
        __(  tinP.ta.pushed.listWalk.walk.pOffWothP ) ;
        FV( flLISTwALK , tinP.ta.pushed.listWalk.walk.flagsWalkP ) ;
        __(  tinP.ta.pushed.listWalk.walk.cRecurseP ) ;
        __( !tinP.ta.pushed.listWalk.walk.pListWalkCBFP ) ;
        __( !( F(tinP.flagsThreadMode2) & flTHREADmODE2_TINaRGSpUSHED ) ) ; //INTENDED TO FORCE APPLICATION CODE TO PUSH THE TIN ARGS AND SET THEM BEFORE EACH CALL TO ME
        FV( flLISToPEN , flagsP ) ;
        if( POOP ) return flagsRC ;
        __( *pczNameP - LISTnAME_ROOT ) ;
        if( POOP ) return flagsRC ;
        __Z( pczNameP ) ;
        if( POOP ) return flagsRC ;
    {
    IFbEcAREFUL

    flagsT flagsRC = flLISTwALKrETURNcODE_null ;
{
/*1*/flagsT listC::walkIF( tinS& tinP , countT* const pczNameP , const flagsT flagsP , const countT idGrabLayerP )/*1*/

/**/
*/
  after creating and walking to obtain the specified listC object, i walk it
  for each offset, a listC object will be constructed in the current pool if one is not already registered in the listC object specified by the prior offset
   the 0'th offset specifies the name of a listC object that is registered in the root listC object
  specifies the fully qualified name of a listC object relative to the root listC object
   if 0 or null length, then the root listC object will be walked
  i will modify elements in this string, replacing osTextT* values with numeric values obtained by looking the osTextT up in the dictionary of the current pool
  the ze'th element must be either LISTnAME_ROOTaPPLICATION or LISTnAME_ROOTsYSTEM2
  must not be 0 or null length
 pczNameP
  pcArg3 see listC::walkF
  pcArg2 see listC::walkF
  pcArg1 see listC::walkF
 tinP
arguments
all documentation for listC::walkF applies to me unless noted otherwise here
caller must set tinP. ta.a.pc1 tinP. ta.a.pc2 tinP. ta.a.pc3 using CLEARaRGS
i walk the specified listC object, creating all specified dad lists in the current pool that do not exist
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


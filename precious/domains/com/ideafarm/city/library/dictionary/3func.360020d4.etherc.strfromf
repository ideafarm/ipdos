
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    _OUT_

    }
        if( bNeg ) strFuseF( tinP , psttP , T("-") ) ;_WQ
        if( psttP && !psttP->idAdam ) { strFuseF( tinP , psttP , T("0") ) ; ___( psttP ) ; }
        strResizeF( tinP , psttP , - 1 , S1C('0') , 1 , 1 ) ;_WQ
        }
            delF( tinP , psttw ) ;_WQ
            strFuseF( tinP , psttP , psttw ) ; ___( psttP ) ;_WQ
            else                { strFromF( tinP , psttw , pcv[ off ] , flFORMAT_UNSIGNED                   , 0 ) ; ___( psttw ) ; }
            if( off < ccv - 1 ) { strFromF( tinP , psttw , pcv[ off ] , flFORMAT_UNSIGNED|flFORMAT_FILLzE , 8 ) ; ___( psttw ) ; }
            ZE( strokeS* , psttw ) ;_WQ
        {
        for( countT off = 0 ; off < ccv ; off ++ )

        }
            POSTPONEtEST( psttP ) ;_WQ
            strMakeF( tinP , psttP , T("") , cstta + csttExtraP ) ; //CALLER MUST TAG
            if( cstta < csP ) cstta = csP ;_WQ
            countT cstta = cbits + 5 ;_WQ
        {

        while( ccv > 1 && !pcv[ ccv - 1 ] ) ccv -- ;_WQ
    {
    if( !POOP )

    __Z( pcv ) ;_WQ
    __Z( ccv ) ;    
    countT  ccv = cbits / SC ;_WQ
    __( cbits % SC ) ;_WQ
    countT  cbits = value ;_WQ
    countT* pcv = value ;_WQ
    ZE( countT* , pcCopy ) ;_WQ

    if( bNeg ) value = - value ;_WQ
    const boolT bNeg = value < sCountC( tinP , *this ) ;_WQ
    sCountC value( valueP ) ;_WQ

    _INoLD_

    }
        if( POOP ) return ;
        __( F(flagsFormatP) ) ; //U: SUPPORT FORMATTING
        __( radixP ) ; //U:
        __(  tinP.strokeMode.idCasteDefault && radixP > 0x10000 ) ;_WQ
        __( !tinP.strokeMode.idCasteDefault && radixP > 64 ) ;_WQ
        __( radixP && radixP < 2 ) ;_WQ
        __NZ( psttP ) ;_WQ
        if( POOP ) return ;
    {
    IFbEcAREFUL
    SCOOP
{
/*1*/voidT etherC::strFromF( tinS& tinP , strokeS*& psttP , const sCountC& valueP , const flagsT flagsFormatP , const countT csP , const countT radixP , const countT csttExtraP )/*1*/

/**/
*/
 csttExtraP
  U: support radix other than 16_9
  if 0 then radix 16_9 is implied
  must be 0
 radixP
  if more strokes are needed to represent the number, psttP will be longer than csP
  minimum length of the final string
 csP
  the value is formatted as unsigned
   formatting is not supported for this overload
  must be 0
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/1snip.001004c.flFORMAT!||
 flagsFormatP
  this is the value that is to be represented as a string of digits
 valueP
  will be set to contain the string
 psttP
arguments
 if valueP is negative, it will be displayed by interpreting its bits as an unsigned number
valueP must be nonnegative to display correctly
  \<A HREF=\"5.3e10104.1.1.0.html\"\>3e10104:  WAKEsHOW( "example.simplest.func.10300f2.etherC.strFromF" )\</A\>
 simplest
examples
\<A HREF=\"5.10300f2.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$strFromF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


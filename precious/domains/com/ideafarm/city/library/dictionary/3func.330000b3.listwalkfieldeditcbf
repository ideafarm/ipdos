
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return flagsRC ;

    else                                                        cNotDeletedP ++ ;
    else if( F(flagsRC) & flLISTwALKcALLbACKrETURNcODE_DELETE ) cDeletedP    ++ ;
    if( !pListingP ) ;

    }
        }
            }
                THREADmODE2rESTORE
                }
                    }
                        }
                            }
                                  ppOutNextP                  = &(*ppOutNextP)->pNext ;
                                (*ppOutNextP)->vspListing     = *ppvspListing[ offi ] ;
                                (*ppOutNextP)->vspCountString = *ppvspcz[      offi ] ;
                                (*ppOutNextP)->vspBlob        = *ppvspbz[      offi ] ;
                                (*ppOutNextP)->vspCount       = *ppvspc[       offi ] ;
                                (*ppOutNextP)->idPlate        = idCallP ;
                            {
                            if( *ppOutNextP )
                            __( !*ppOutNextP ) ;
                            *ppOutNextP = new( 0 , tinP , idLineNewP , idiFileNewP ) fieldEditParamOutC ; ___( *ppOutNextP ) ;
                            __( !!*ppOutNextP ) ;
                        {
                        if( ppOutNextP )
                        __Z( ppOutNextP ) ;
                    {
                    else
                    }
                        }
                            pOutP->vspListing     = *ppvspListing[ offi ] ;
                            pOutP->vspCountString = *ppvspcz[      offi ] ;
                            pOutP->vspBlob        = *ppvspbz[      offi ] ;
                            pOutP->vspCount       = *ppvspc[       offi ] ;
                            pOutP->idPlate        = idCallP ;
                            ppOutNextP = &pOutP->pNext ;
                        {
                        if( pOutP )
                        __Z( pOutP ) ;
                        pOutP = new( 0 , tinP , idLineNewP , idiFileNewP ) fieldEditParamOutC ; ___( pOutP ) ;
                    {
                    if( !pOutP )
                                        
                    puseC puseat( tinP , ifcIDpOOL_ADAMtEMP ) ;
                {
                THREADmODE2oN( flTHREADmODE2_UNLOCKpOOLiDENTITY )
            {
            if( F(inP.flags) & flFIELDeDIT_QUERY )
        {
        if( (const voidT*)*ppvspc[ offi ] || (const voidT*)*ppvspbz[ offi ] || (const voidT*)*ppvspcz[ offi ] || (const voidT*)*ppvspListing[ offi ] )
    {
    for( countT offi = 0 ; offi < sizeof ppvspc / sizeof ppvspc[ 0 ] ; offi ++ )

    listingVSP*   ppvspListing[] = { &vspListingNew , &vspListingOld } ;
    countStrzVSP* ppvspcz[]      = { &vspczNew      , &vspczOld      } ;
    blobVSP*      ppvspbz[]      = { &vspbzNew      , &vspbzOld      } ;
    countVSP*     ppvspc[]       = { &vspcNew       , &vspcOld       } ;
    // **** REPORT OLD AND NEW VALUES ****

    }
        }
            flagsRC |= flLISTwALKcALLbACKrETURNcODE_QUIT ;
        {
        if( F(inP.flags) & flFIELDeDIT_QUERY && !( F(inP.flags) & flFIELDeDIT_MODEaLL ) )

        }
            ;
                : flLISTwALKcALLbACKrETURNcODE_DELETE | flLISTwALKcALLbACKrETURNcODE_QUIT
                ? flLISTwALKcALLbACKrETURNcODE_DELETE
            flagsRC |= F(inP.flags) & flFIELDeDIT_MODEaLL
        {
        if( F(inP.flags) & flFIELDeDIT_DELETE )
    {
    if( (const countT*)vspcOld || (const osTextT*)vspbzOld || (const countT*)vspczOld || (const listingC*)vspListingOld )

    }
        }
            }
                }
                    }
                        default                             : {break ; }
                        case ifcIDtYPEmIXINdATUM_listingVSP : { if( !F(inP.flagsTypeMask) || F(inP.flagsTypeMask) & flFIELDeDITtYPEmASK_LISTINGsp ) { listingVSP vspValue =             *(list_listingVSP_C*)pListingP ; if( (const listingC*)vspValue && ( !inP.pBool_listingC_ptr_ok || boolC::orIF( inP.pBool_listingC_ptr_ok , (countT)(const listingC*)vspValue ) ) && ( !inP.pBool_listingC_ptr_no || !boolC::orIF( inP.pBool_listingC_ptr_no , (countT)(const listingC*)vspValue ) ) ) { listingVSP   vsp( vspValue , vspDatumListingCBF   , (countT)(const listingC*)vspValue ) ; vspListingOld = vsp ; } } break ; }
                        case ifcIDtYPEmIXINdATUM_countTstrz : { if( !F(inP.flagsTypeMask) || F(inP.flagsTypeMask) & flFIELDeDITtYPEmASK_COUNTsTRZ ) { countT*    pValue   =    (countT*)*(list_countTstrz_C*)pListingP ; if( pValue                    && ( !inP.pBool_countTstrz_ok   || boolC::orIF( inP.pBool_countTstrz_ok   ,                            pValue ) ) && ( !inP.pBool_countTstrz_no   || !boolC::orIF( inP.pBool_countTstrz_no   ,                            pValue ) ) ) { countStrzVSP vsp( pValue   , vspDatumCountStrzCBF , (countT)pListingP                 ) ; vspczOld      = vsp ; } } break ; }
                        case ifcIDtYPEmIXINdATUM_blob       : { if( !F(inP.flagsTypeMask) || F(inP.flagsTypeMask) & flFIELDeDITtYPEmASK_BLOB      ) { osTextT*   pValue   =         (osTextT*)*(list_blob_C*)pListingP ; if( pValue                    && ( !inP.pBool_blob_ok         || boolC::orIF( inP.pBool_blob_ok         ,                            pValue ) ) && ( !inP.pBool_blob_no         || !boolC::orIF( inP.pBool_blob_no         ,                            pValue ) ) ) { blobVSP      vsp( pValue   , vspDatumBlobCBF      , (countT)pListingP                 ) ; vspbzOld      = vsp ; } } break ; }
                        case ifcIDtYPEmIXINdATUM_countT     : { if( !F(inP.flagsTypeMask) || F(inP.flagsTypeMask) & flFIELDeDITtYPEmASK_COUNT     ) { countT*    pValue   =        (countT*)*(list_countT_C*)pListingP ; if( pValue                    && ( !inP.pBool_countT_ok       || boolC::orIF( inP.pBool_countT_ok       ,                           *pValue ) ) && ( !inP.pBool_countT_no       || !boolC::orIF( inP.pBool_countT_no       ,                           *pValue ) ) ) { countVSP     vsp( pValue   , vspDatumCountCBF     , (countT)pListingP                 ) ; vspcOld       = vsp ; /*if( tinP.pEther ) tinP.pEther->traceF( tinP , T("listWalkFieldEditCBF cursored countT [listing_countT_C*,countT*,countT]:   ")+TF2((countT)pListingP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2((countT)(countT*)*(listing_countT_C*)pListingP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(*(countT*)*(listing_countT_C*)pListingP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;*/ } } break ; }
                    {
                    switch( pListingP->idTypeDatumF() ) //CS:CODEsYNC: 00104b0 21e0006 21e0002 21e0008 21e0009 220000e
                {
                else
                }
                    }
                        default                             : {break ; }
                        case ifcIDtYPEmIXINdATUM_listingVSP : { if( !F(inP.flagsTypeMask) || F(inP.flagsTypeMask) & flFIELDeDITtYPEmASK_LISTINGsp ) { listingVSP vspValue =          *(listing_listingVSP_C*)pListingP ; if( (const listingC*)vspValue && ( !inP.pBool_listingC_ptr_ok || boolC::orIF( inP.pBool_listingC_ptr_ok , (countT)(const listingC*)vspValue ) ) && ( !inP.pBool_listingC_ptr_no || !boolC::orIF( inP.pBool_listingC_ptr_no , (countT)(const listingC*)vspValue ) ) ) { listingVSP   vsp( vspValue , vspDatumListingCBF   , (countT)(const listingC*)vspValue ) ; vspListingOld = vsp ; } } break ; }
                        case ifcIDtYPEmIXINdATUM_countTstrz : { if( !F(inP.flagsTypeMask) || F(inP.flagsTypeMask) & flFIELDeDITtYPEmASK_COUNTsTRZ ) { countT*    pValue   = (countT*)*(listing_countTstrz_C*)pListingP ; if( pValue                    && ( !inP.pBool_countTstrz_ok   || boolC::orIF( inP.pBool_countTstrz_ok   ,                            pValue ) ) && ( !inP.pBool_countTstrz_no   || !boolC::orIF( inP.pBool_countTstrz_no   ,                            pValue ) ) ) { countStrzVSP vsp( pValue   , vspDatumCountStrzCBF , (countT)pListingP                 ) ; vspczOld      = vsp ; } } break ; }
                        case ifcIDtYPEmIXINdATUM_blob       : { if( !F(inP.flagsTypeMask) || F(inP.flagsTypeMask) & flFIELDeDITtYPEmASK_BLOB      ) { osTextT*   pValue   =      (osTextT*)*(listing_blob_C*)pListingP ; if( pValue                    && ( !inP.pBool_blob_ok         || boolC::orIF( inP.pBool_blob_ok         ,                            pValue ) ) && ( !inP.pBool_blob_no         || !boolC::orIF( inP.pBool_blob_no         ,                            pValue ) ) ) { blobVSP      vsp( pValue   , vspDatumBlobCBF      , (countT)pListingP                 ) ; vspbzOld      = vsp ; } } break ; }
                        case ifcIDtYPEmIXINdATUM_countT     : { if( !F(inP.flagsTypeMask) || F(inP.flagsTypeMask) & flFIELDeDITtYPEmASK_COUNT     ) { countT*    pValue   =     (countT*)*(listing_countT_C*)pListingP ; if( pValue                    && ( !inP.pBool_countT_ok       || boolC::orIF( inP.pBool_countT_ok       ,                           *pValue ) ) && ( !inP.pBool_countT_no       || !boolC::orIF( inP.pBool_countT_no       ,                           *pValue ) ) ) { countVSP     vsp( pValue   , vspDatumCountCBF     , (countT)pListingP                 ) ; vspcOld       = vsp ; /*if( tinP.pEther ) tinP.pEther->traceF( tinP , T("listWalkFieldEditCBF cursored countT [listing_countT_C*,countT*,countT]:   ")+TF2((countT)pListingP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2((countT)(countT*)*(listing_countT_C*)pListingP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(*(countT*)*(listing_countT_C*)pListingP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;*/ } } break ; }
                    {
                    switch( pListingP->idTypeDatumF() ) //CS:CODEsYNC: 00104b0 21e0006 21e0002 21e0008 21e0009 220000e
                {
                if( !( flagsi & fliLISTINGc_MIXINlIST ) )
            {
            if( flagsi & fliLISTINGc_MIXINdATUM )
            flagsT flagsi = pListingP->flagsF() ;
        {
        // **** REMEMBER THE CURSORED VALUE ****

        }
            }
                }
                    }
                        }
                            vspListingNew = vsp ;
                            listingVSP vsp( pNew , vspDatumListingCBF , (countT)pNew ) ;
                        {
                        if( F(inP.flags) & flFIELDeDIT_MODEqUERYnEW && ( !F(inP.flagsTypeMask) || F(inP.flagsTypeMask) & flFIELDeDITtYPEmASK_LISTINGsp ) )
                        listing_listingVSP_C* pNew = new( 0 , tinP , idLineNewP , idiFileNewP ) listing_listingVSP_C( tinP , *tinP.ta.pushed.listWalk.cbf.pDadP , *inP.pListingValue ) ; ___( pNew ) ;
                        flagsRC |= flLISTwALKcALLbACKrETURNcODE_QUIT ;
                    {
                    else if( inP.pListingValue && ( ifcIDtYPEmIXINdATUM_listingVSP   < pListingP->idTypeDatumF() || ( (const listingC*)vspListingValue && 0 > *(const listing_listingVSP_C*)inP.pListingValue - *(const listing_listingVSP_C*)(const listingC*)vspListingValue ) ) )
                    }
                        }
                            vspczNew = vsp ;
                            countStrzVSP vsp( (countT*)*pNew , vspDatumCountStrzCBF , (countT)pNew ) ;
                        {
                        if( F(inP.flags) & flFIELDeDIT_MODEqUERYnEW && ( !F(inP.flagsTypeMask) || F(inP.flagsTypeMask) & flFIELDeDITtYPEmASK_COUNTsTRZ ) )
                        listing_countTstrz_C* pNew = new( 0 , tinP , idLineNewP , idiFileNewP ) listing_countTstrz_C( tinP , *tinP.ta.pushed.listWalk.cbf.pDadP , inP.pczValue ) ; ___( pNew ) ;
                        flagsRC |= flLISTwALKcALLbACKrETURNcODE_QUIT ;
                    {
                    else if( inP.pczValue      && ( ifcIDtYPEmIXINdATUM_countTstrz  < pListingP->idTypeDatumF() || ( pczValue       && 0 > thirdC::c_strcmpIF( tinP , inP.pczValue , pczValue )                                                          ) ) )
                    }
                        }
                            vspbzNew = vsp ;
                            blobVSP vsp( (osTextT*)*pNew , vspDatumBlobCBF , (countT)pNew ) ;
                        {
                        if( F(inP.flags) & flFIELDeDIT_MODEqUERYnEW && ( !F(inP.flagsTypeMask) || F(inP.flagsTypeMask) & flFIELDeDITtYPEmASK_BLOB ) )
                        listing_blob_C* pNew = new( 0 , tinP , idLineNewP , idiFileNewP ) listing_blob_C( tinP , *tinP.ta.pushed.listWalk.cbf.pDadP , idLineNewP , idiFileNewP , inP.pbzValue ) ; ___( pNew ) ;
                        flagsRC |= flLISTwALKcALLbACKrETURNcODE_QUIT ;
                    {
                    else if( inP.pbzValue    && ( ifcIDtYPEmIXINdATUM_blob < pListingP->idTypeDatumF() || ( pbzValue     && 0 > thirdC::c_strcmpIF( tinP , inP.pbzValue , pbzValue )                                                      ) ) )
                    }
                        }
                            vspcNew = vsp ;
                            countVSP vsp( (countT*)*pNew , vspDatumCountCBF , (countT)pNew ) ;
                        {
                        if( F(inP.flags) & flFIELDeDIT_MODEqUERYnEW && ( !F(inP.flagsTypeMask) || F(inP.flagsTypeMask) & flFIELDeDITtYPEmASK_COUNT ) )
                        listing_countT_C* pNew = new( 0 , tinP , idLineNewP , idiFileNewP ) listing_countT_C( tinP , *tinP.ta.pushed.listWalk.cbf.pDadP , inP.cValue ) ; ___( pNew ) ;
                        flagsRC |= flLISTwALKcALLbACKrETURNcODE_QUIT ;
                    {
                    if(      inP.cValue        && ( ifcIDtYPEmIXINdATUM_countT      < pListingP->idTypeDatumF() || ( pcValue        && inP.cValue < *pcValue                                                                                             ) ) )
                {
                )
                    )
                        !( F(flagsWalkP) & flLISTwALK_MATCHsEEN )
                        ||
                        !( F(inP.flags) & flFIELDeDIT_MODEuNIQUE )
                    (
                    &&
                    ( F(inP.flags) & flFIELDeDIT_PUSH )
                (
                else if
                }
                    }
                        vspczNew = vsp ;
                        countStrzVSP vsp( (countT*)*pNew , vspDatumCountStrzCBF , (countT)pNew ) ;
                    {
                    if( F(inP.flags) & flFIELDeDIT_MODEqUERYnEW && ( !F(inP.flagsTypeMask) || F(inP.flagsTypeMask) & flFIELDeDITtYPEmASK_COUNTsTRZ ) )
                    listing_countTstrz_C* pNew = new( 0 , tinP , idLineNewP , idiFileNewP ) listing_countTstrz_C( tinP , *tinP.ta.pushed.listWalk.cbf.pDadP , 0 ) ; ___( pNew ) ;
                    flagsRC |= flLISTwALKcALLbACKrETURNcODE_QUIT ;
                {
                else if( F(inP.flags) & flFIELDeDIT_PUSHnULLcOUNTsTRZ )
                }
                    }
                        vspbzNew = vsp ;
                        blobVSP vsp( (osTextT*)*pNew , vspDatumBlobCBF , (countT)pNew ) ;
                    {
                    if( F(inP.flags) & flFIELDeDIT_MODEqUERYnEW && ( !F(inP.flagsTypeMask) || F(inP.flagsTypeMask) & flFIELDeDITtYPEmASK_BLOB ) )
                    listing_blob_C* pNew = new( 0 , tinP , idLineNewP , idiFileNewP ) listing_blob_C( tinP , *tinP.ta.pushed.listWalk.cbf.pDadP , idLineNewP , idiFileNewP , 0 ) ; ___( pNew ) ;
                    flagsRC |= flLISTwALKcALLbACKrETURNcODE_QUIT ;
                {
                else if( F(inP.flags) & flFIELDeDIT_PUSHnULLbLOB )
                }
                    }
                        vspcNew = vsp ;
                        countVSP vsp( (countT*)*pNew , vspDatumCountCBF , (countT)pNew ) ;
                    {
                    if( F(inP.flags) & flFIELDeDIT_MODEqUERYnEW && ( !F(inP.flagsTypeMask) || F(inP.flagsTypeMask) & flFIELDeDITtYPEmASK_COUNT ) )
                    listing_countT_C* pNew = new( 0 , tinP , idLineNewP , idiFileNewP ) listing_countT_C( tinP , *tinP.ta.pushed.listWalk.cbf.pDadP , 0 ) ; ___( pNew ) ;
                    flagsRC |= flLISTwALKcALLbACKrETURNcODE_QUIT ;
                {
                if( F(inP.flags) & flFIELDeDIT_PUSHnULLcOUNT )

                flagsWalkP |= flLISTwALK_MATCHsEEN ;
                )
                    )
                        ( inP.pListingValue && (const listingC*)vspListingValue && !( *(const listing_listingVSP_C*)inP.pListingValue - *(const listing_listingVSP_C*)(const listingC*)vspListingValue ) )
                        ||
                        ( inP.pczValue && pczValue && !thirdC::c_strcmpIF( tinP , inP.pczValue , pczValue ) )
                        ||
                        ( inP.pbzValue && pbzValue && !thirdC::c_strcmpIF( tinP , inP.pbzValue , pbzValue ) )
                        ||
                        ( inP.cValue && pcValue && inP.cValue == *pcValue )
                    (
                    &&
                    !( F(flagsWalkP) & flLISTwALK_MATCHsEEN )
                (
                if

                }
                    }
                        default                              : { BLAMMO                                                    ; break ; }
                        case ifcIDtYPEmIXINdATUM_listingVSP  : { vspListingValue =          *(list_listingVSP_C*)pListingP ; break ; }
                        case ifcIDtYPEmIXINdATUM_countTstrz  : { pczValue        = (countT*)*(list_countTstrz_C*)pListingP ; break ; }
                        case ifcIDtYPEmIXINdATUM_blob        : { pbzValue        =      (osTextT*)*(list_blob_C*)pListingP ; break ; }
                        case ifcIDtYPEmIXINdATUM_countT      : { pcValue         =     (countT*)*(list_countT_C*)pListingP ; break ; }
                    {
                    switch( pListingP->idTypeDatumF() ) //CS:CODEsYNC: 00104b0 21e0006 21e0002 21e0008 21e0009 220000e
                {
                else
                }
                    }
                        default                              : { BLAMMO                                                       ; break ; }
                        case ifcIDtYPEmIXINdATUM_listingVSP  : { vspListingValue =          *(listing_listingVSP_C*)pListingP ; break ; }
                        case ifcIDtYPEmIXINdATUM_countTstrz  : { pczValue        = (countT*)*(listing_countTstrz_C*)pListingP ; break ; }
                        case ifcIDtYPEmIXINdATUM_blob        : { pbzValue        =      (osTextT*)*(listing_blob_C*)pListingP ; break ; }
                        case ifcIDtYPEmIXINdATUM_countT      : { pcValue         =     (countT*)*(listing_countT_C*)pListingP ; break ; }
                    {
                    switch( pListingP->idTypeDatumF() ) //CS:CODEsYNC: 00104b0 21e0006 21e0002 21e0008 21e0009 220000e
                {
                if( !( flagsi & fliLISTINGc_MIXINlIST ) )
                listingVSP         vspListingValue ;
                ZE( countT*    , pczValue ) ;
                ZE( osTextT*   , pbzValue ) ;
                ZE( countT*    , pcValue ) ;
            {
            if( flagsi & fliLISTINGc_MIXINdATUM )
            flagsT flagsi = pListingP->flagsF() ;
        {
        if( F(inP.flags) & flFIELDeDIT_MODEpUSHsINK )
        // **** SINK ****

        }
            else         flagsRC |= flLISTwALKcALLbACKrETURNcODE_DELETE ;
            if( cKeepP ) cKeepP -- ;

            flagsRC &= ~( F(flLISTwALKcALLbACKrETURNcODE_QUIT) ) ;
        {
        if( F(inP.flags) & flFIELDeDIT_PURGE )
    {
    else
    }
        }
            }
                }
                    }
                        vspListingNew = vsp ;
                        listingVSP vsp( pNew , vspDatumListingCBF , (countT)pNew ) ;
                    {
                    if( F(inP.flags) & flFIELDeDIT_MODEqUERYnEW && ( !F(inP.flagsTypeMask) || F(inP.flagsTypeMask) & flFIELDeDITtYPEmASK_LISTINGsp ) )
                    listing_listingVSP_C* pNew = new( 0 , tinP , idLineNewP , idiFileNewP ) listing_listingVSP_C( tinP , *tinP.ta.pushed.listWalk.cbf.pDadP , *inP.pListingValue ) ; ___( pNew ) ;
                {
                else if( inP.pListingValue )
                }
                    }
                        vspczNew = vsp ;
                        countStrzVSP vsp( (countT*)*pNew , vspDatumCountStrzCBF , (countT)pNew ) ;
                    {
                    if( F(inP.flags) & flFIELDeDIT_MODEqUERYnEW && ( !F(inP.flagsTypeMask) || F(inP.flagsTypeMask) & flFIELDeDITtYPEmASK_COUNTsTRZ ) )
                    listing_countTstrz_C* pNew = new( 0 , tinP , idLineNewP , idiFileNewP ) listing_countTstrz_C( tinP , *tinP.ta.pushed.listWalk.cbf.pDadP , inP.pczValue ) ; ___( pNew ) ;
                {
                else if( inP.pczValue )
                }
                    }
                        vspbzNew = vsp ;
                        blobVSP vsp( (osTextT*)*pNew , vspDatumBlobCBF , (countT)pNew ) ;
                    {
                    if( F(inP.flags) & flFIELDeDIT_MODEqUERYnEW && ( !F(inP.flagsTypeMask) || F(inP.flagsTypeMask) & flFIELDeDITtYPEmASK_BLOB ) )
                    listing_blob_C* pNew = new( 0 , tinP , idLineNewP , idiFileNewP ) listing_blob_C( tinP , *tinP.ta.pushed.listWalk.cbf.pDadP , idLineNewP , idiFileNewP , inP.pbzValue , inP.cbzValue ) ; ___( pNew ) ;
                {
                else if( inP.pbzValue || inP.cbzValue )
                }
                    }
                        vspcNew = vsp ;
                        countVSP vsp( (countT*)*pNew , vspDatumCountCBF , (countT)pNew ) ;
                    {
                    if( F(inP.flags) & flFIELDeDIT_MODEqUERYnEW && ( !F(inP.flagsTypeMask) || F(inP.flagsTypeMask) & flFIELDeDITtYPEmASK_COUNT ) )
                    listing_countT_C* pNew = new( 0 , tinP , idLineNewP , idiFileNewP ) listing_countT_C( tinP , *tinP.ta.pushed.listWalk.cbf.pDadP , inP.cValue ) ; ___( pNew ) ;
                {
                else if( inP.cValue )
                }
                    }
                        }
                            vspcNew = vsp ;
                            countVSP vsp( (countT*)*pNew , vspDatumCountCBF , (countT)pNew ) ;
                        {
                        if( F(inP.flags) & flFIELDeDIT_MODEqUERYnEW && ( !F(inP.flagsTypeMask) || F(inP.flagsTypeMask) & flFIELDeDITtYPEmASK_COUNT ) )
                        listing_countT_C* pNew = new( 0 , tinP , idLineNewP , idiFileNewP ) listing_countT_C( tinP , *tinP.ta.pushed.listWalk.cbf.pDadP , idSerialNew ) ; ___( pNew ) ;
                    {
                    if( !POOP )
    
                    __Z( idSerialNew ) ;
                    }
                        idSerialNew =  tinP.pEther->ifcGetNextSerialNumberF( tinP , inP.postzIdSerialSpace ) ;
                        puseC puseat( tinP , ifcIDpOOL_ADAMtEMP ) ;
                    {
                    ZE( countT , idSerialNew ) ;
                {
                if( inP.postzIdSerialSpace )

                flagsRC |= flLISTwALKcALLbACKrETURNcODE_QUIT ;
            {
            else if( F(inP.flags) & flFIELDeDIT_PUSH )
            }
                }
                    vspczNew = vsp ;
                    countStrzVSP vsp( (countT*)*pNew , vspDatumCountStrzCBF , (countT)pNew ) ;
                {
                if( F(inP.flags) & flFIELDeDIT_MODEqUERYnEW && ( !F(inP.flagsTypeMask) || F(inP.flagsTypeMask) & flFIELDeDITtYPEmASK_COUNTsTRZ ) )
                listing_countTstrz_C* pNew = new( 0 , tinP , idLineNewP , idiFileNewP ) listing_countTstrz_C( tinP , *tinP.ta.pushed.listWalk.cbf.pDadP , 0 ) ; ___( pNew ) ;
                flagsRC |= flLISTwALKcALLbACKrETURNcODE_QUIT ;
            {
            else if( F(inP.flags) & flFIELDeDIT_PUSHnULLcOUNTsTRZ )
            }
                }
                    vspbzNew = vsp ;
                    blobVSP vsp( (osTextT*)*pNew , vspDatumBlobCBF , (countT)pNew ) ;
                {
                if( F(inP.flags) & flFIELDeDIT_MODEqUERYnEW && ( !F(inP.flagsTypeMask) || F(inP.flagsTypeMask) & flFIELDeDITtYPEmASK_BLOB ) )
                listing_blob_C* pNew = new( 0 , tinP , idLineNewP , idiFileNewP ) listing_blob_C( tinP , *tinP.ta.pushed.listWalk.cbf.pDadP , idLineNewP , idiFileNewP , 0 ) ; ___( pNew ) ;
                flagsRC |= flLISTwALKcALLbACKrETURNcODE_QUIT ;
            {
            else if( F(inP.flags) & flFIELDeDIT_PUSHnULLbLOB )
            }
                }
                    vspcNew = vsp ;
                    countVSP vsp( (countT*)*pNew , vspDatumCountCBF , (countT)pNew ) ;
                {
                if( F(inP.flags) & flFIELDeDIT_MODEqUERYnEW && ( !F(inP.flagsTypeMask) || F(inP.flagsTypeMask) & flFIELDeDITtYPEmASK_COUNT ) )
                listing_countT_C* pNew = new( 0 , tinP , idLineNewP , idiFileNewP ) listing_countT_C( tinP , *tinP.ta.pushed.listWalk.cbf.pDadP , 0 ) ; ___( pNew ) ;
                flagsRC |= flLISTwALKcALLbACKrETURNcODE_QUIT ;
            {
            if( F(inP.flags) & flFIELDeDIT_PUSHnULLcOUNT )
        {
        )
            )
                !( F(flagsWalkP) & flLISTwALK_MATCHsEEN )
                ||
                !( F(inP.flags) & flFIELDeDIT_MODEuNIQUE )
                ||
                !( F(inP.flags) & flFIELDeDIT_MODEpUSHsINK )
            (
            &&
            )
                idCallP == 1
                ||
                !( F(inP.flags) & flFIELDeDIT_MODEpUSHiFnOTeXIST )
            (
            &&
            !bEarlyPush
        (
        if
        // **** WALK EPILOG ****
    {
    if( !pListingP )    
    listingVSP   vspListingOld ;
    countStrzVSP vspczOld ;
    blobVSP      vspbzOld ;
    countVSP     vspcOld ;

    }
        }
            }
                }
                    vspListingNew = vsp ;
                    listingVSP vsp( pNew , vspDatumListingCBF , (countT)pNew ) ;
                {
                if( F(inP.flags) & flFIELDeDIT_MODEqUERYnEW && ( !F(inP.flagsTypeMask) || F(inP.flagsTypeMask) & flFIELDeDITtYPEmASK_LISTINGsp ) )
                listing_listingVSP_C* pNew = new( 0 , tinP , idLineNewP , idiFileNewP ) listing_listingVSP_C( tinP , *tinP.ta.pushed.listWalk.cbf.pDadP , *inP.pListingValue ) ; ___( pNew ) ;
            {
            else if( inP.pListingValue )
            }
                }
                    vspczNew = vsp ;
                    countStrzVSP vsp( (countT*)*pNew , vspDatumCountStrzCBF , (countT)pNew ) ;
                {
                if( F(inP.flags) & flFIELDeDIT_MODEqUERYnEW && ( !F(inP.flagsTypeMask) || F(inP.flagsTypeMask) & flFIELDeDITtYPEmASK_COUNTsTRZ ) )
                listing_countTstrz_C* pNew = new( 0 , tinP , idLineNewP , idiFileNewP ) listing_countTstrz_C( tinP , *tinP.ta.pushed.listWalk.cbf.pDadP , inP.pczValue ) ; ___( pNew ) ;
            {
            else if( inP.pczValue )
            }
                }
                    vspbzNew = vsp ;
                    blobVSP vsp( (osTextT*)*pNew , vspDatumBlobCBF , (countT)pNew ) ;
                {
                if( F(inP.flags) & flFIELDeDIT_MODEqUERYnEW && ( !F(inP.flagsTypeMask) || F(inP.flagsTypeMask) & flFIELDeDITtYPEmASK_BLOB ) )
                listing_blob_C* pNew = new( 0 , tinP , idLineNewP , idiFileNewP ) listing_blob_C( tinP , *tinP.ta.pushed.listWalk.cbf.pDadP , idLineNewP , idiFileNewP , inP.pbzValue , inP.cbzValue ) ; ___( pNew ) ;
            {
            else if( inP.pbzValue || inP.cbzValue )
            }
                }
                    vspcNew = vsp ;
                    countVSP vsp( (countT*)*pNew , vspDatumCountCBF , (countT)pNew ) ;
                {
                if( F(inP.flags) & flFIELDeDIT_MODEqUERYnEW && ( !F(inP.flagsTypeMask) || F(inP.flagsTypeMask) & flFIELDeDITtYPEmASK_COUNT ) )

                //if( tinP.pEther ) tinP.pEther->traceF( tinP , T("listWalkFieldEditCBF pushing countT [listing_countT_C*,countT*,countT]:   ")+TF2((countT)pNew,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2((countT)(countT*)*pNew,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2((countT)*(countT*)*pNew,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;

                listing_countT_C* pNew = new( 0 , tinP , idLineNewP , idiFileNewP ) listing_countT_C( tinP , *tinP.ta.pushed.listWalk.cbf.pDadP , inP.cValue ) ; ___( pNew ) ;
            {
            else if( inP.cValue )
            }
                }
                    }
                        vspcNew = vsp ;
                        countVSP vsp( (countT*)*pNew , vspDatumCountCBF , (countT)pNew ) ;
                    {
                    if( F(inP.flags) & flFIELDeDIT_MODEqUERYnEW && ( !F(inP.flagsTypeMask) || F(inP.flagsTypeMask) & flFIELDeDITtYPEmASK_COUNT ) )
                    listing_countT_C* pNew = new( 0 , tinP , idLineNewP , idiFileNewP ) listing_countT_C( tinP , *tinP.ta.pushed.listWalk.cbf.pDadP , idSerialNew ) ; ___( pNew ) ;
                {
                if( !POOP )

                __Z( idSerialNew ) ;
                }
                    idSerialNew =  tinP.pEther->ifcGetNextSerialNumberF( tinP , inP.postzIdSerialSpace ) ;
                    puseC puseat( tinP , ifcIDpOOL_ADAMtEMP ) ;
                {
                ZE( countT , idSerialNew ) ;
            {
            if( inP.postzIdSerialSpace )
            flagsRC |= flLISTwALKcALLbACKrETURNcODE_QUIT ;
        {
        else if( F(inP.flags) & flFIELDeDIT_PUSH )
        }
            }
                vspczNew = vsp ;
                countStrzVSP vsp( (countT*)*pNew , vspDatumCountStrzCBF , (countT)pNew ) ;
            {
            if( F(inP.flags) & flFIELDeDIT_MODEqUERYnEW && ( !F(inP.flagsTypeMask) || F(inP.flagsTypeMask) & flFIELDeDITtYPEmASK_COUNTsTRZ ) )
            listing_countTstrz_C* pNew = new( 0 , tinP , idLineNewP , idiFileNewP ) listing_countTstrz_C( tinP , *tinP.ta.pushed.listWalk.cbf.pDadP , 0 ) ; ___( pNew ) ;
            flagsRC |= flLISTwALKcALLbACKrETURNcODE_QUIT ;
        {
        else if( F(inP.flags) & flFIELDeDIT_PUSHnULLcOUNTsTRZ )
        }
            }
                vspbzNew = vsp ;
                blobVSP vsp( (osTextT*)*pNew , vspDatumBlobCBF , (countT)pNew ) ;
            {
            if( F(inP.flags) & flFIELDeDIT_MODEqUERYnEW && ( !F(inP.flagsTypeMask) || F(inP.flagsTypeMask) & flFIELDeDITtYPEmASK_BLOB ) )
            listing_blob_C* pNew = new( 0 , tinP , idLineNewP , idiFileNewP ) listing_blob_C( tinP , *tinP.ta.pushed.listWalk.cbf.pDadP , idLineNewP , idiFileNewP , 0 ) ; ___( pNew ) ;
            flagsRC |= flLISTwALKcALLbACKrETURNcODE_QUIT ;
        {
        else if( F(inP.flags) & flFIELDeDIT_PUSHnULLbLOB )
        }
            }
                vspcNew = vsp ;
                countVSP vsp( (countT*)*pNew , vspDatumCountCBF , (countT)pNew ) ;
            {
            if( F(inP.flags) & flFIELDeDIT_MODEqUERYnEW && ( !F(inP.flagsTypeMask) || F(inP.flagsTypeMask) & flFIELDeDITtYPEmASK_COUNT ) )
            listing_countT_C* pNew = new( 0 , tinP , idLineNewP , idiFileNewP ) listing_countT_C( tinP , *tinP.ta.pushed.listWalk.cbf.pDadP , 0 ) ; ___( pNew ) ;
            flagsRC |= flLISTwALKcALLbACKrETURNcODE_QUIT ;
        {
        if( F(inP.flags) & flFIELDeDIT_PUSHnULLcOUNT )
    {
    if( bEarlyPush )
    // **** EARLY PUSH ****

    ;
        && !( F(inP.flags) & flFIELDeDIT_MODEpUSHsINK       )
        && !( F(inP.flags) & flFIELDeDIT_MODEpUSHfIFO       )
           !( F(inP.flags) & flFIELDeDIT_MODEpUSHiFnOTeXIST )
    const boolT bEarlyPush =

    listingVSP   vspListingNew ;
    countStrzVSP vspczNew ;
    blobVSP      vspbzNew ;
    countVSP     vspcNew ;

    //}
    //    CONoUTrAW9( "pushing [cValue,pbzValue,pczValue,pListingValue]: " , inP.cValue , " " , inP.pbzValue , " " , inP.pczValue , " " , inP.pListingValue , "\r\n" ) ;
    //{
    //if( F(inP.flags) & flFIELDeDIT_PUSH )
    //FOR DEBUGGING

    }
        countT foo = 2 ;
    {
    if( idIn == 2 )
    countT idIn = 1 + incv02AM( idInLath ) ;
    static countT idInLath ;

    ;
        : flLISTwALKcALLbACKrETURNcODE_DOnOTwALKmE | flLISTwALKcALLbACKrETURNcODE_QUIT
        ? flLISTwALKcALLbACKrETURNcODE_DOnOTwALKmE

        || inP.pBool_listingC_ptr_ok
        || inP.pBool_listingC_ptr_no
        || inP.pBool_countT_ok
        || inP.pBool_countT_no
        || inP.pBool_countTstrz_ok
        || inP.pBool_countTstrz_no
        || inP.pBool_blob_ok
        || inP.pBool_blob_no
        || F(inP.flags) & flFIELDeDIT_MODEpUSHsINK
        || F(inP.flags) & flFIELDeDIT_MODEpUSHfIFO
           F(inP.flags) & flFIELDeDIT_MODEaLL

    flagsT flagsRC =

    const countT             idiFileNewP  =                          tinP.ta.pushed.listWalk.util.pcP[ 7 ] ;
    const countT             idLineNewP   =                          tinP.ta.pushed.listWalk.util.pcP[ 6 ] ;
    countT&                  cDeletedP    =                          tinP.ta.pushed.listWalk.util.pcP[ 5 ] ;
    countT&                  cNotDeletedP =                          tinP.ta.pushed.listWalk.util.pcP[ 4 ] ;
    countT&                  cKeepP       =                          tinP.ta.pushed.listWalk.util.pcP[ 3 ] ;
    fieldEditParamOutC**&    ppOutNextP   = *(fieldEditParamOutC***)&tinP.ta.pushed.listWalk.util.pcP[ 2 ] ;
    const fieldEditParamInC& inP          =     *(fieldEditParamInC*)tinP.ta.pushed.listWalk.util.pcP[ 1 ] ;
    fieldEditParamOutC*&     pOutP        =   *(fieldEditParamOutC**)tinP.ta.pushed.listWalk.util.pcP[ 0 ] ;
    flagsT&                  flagsWalkP   =                          tinP.ta.pushed.listWalk.walk.flagsWalkP ;

    listingC* pListingP = tinP.ta.pushed.listWalk.cbf.pListingP ;
    countT    idCallP  = tinP.ta.pushed.listWalk.cbf.idCallP ;
{
/*1*/flagsT listWalkFieldEditCBF( tinS& tinP )/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


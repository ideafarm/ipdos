
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    _OUT_

    #endif

        }
            }
                 //LOGrAWtID4( "WM_PAINT [idRowMin,idRowMax]: " , idRowMinP , " " , idRowMaxP ) ;
                 //LOGrAWtID6( "********************************************************************************\r\nWM_PAINT [cRows,bottom,top]: " , pw->mRowsF() , " " , pInfo->rcPaint.bottom , " " , pInfo->rcPaint.top ) ;

                idRowMaxP = winIfRowIF( pInfo->rcPaint.top , pw->mRowsF() ) ;
                idColMaxP = winIfColIF( pInfo->rcPaint.right - 1 ) ;
                idRowMinP = winIfRowIF( pInfo->rcPaint.bottom - 1 , pw->mRowsF() ) ;
                idColMinP = winIfColIF( pInfo->rcPaint.left ) ;
            {
            if( pw )

            *pswPaintInfoFromDrawingHandle = (countT)pInfo ;
            *pswWinFromDrawDuringPaint = hWindowP.osF( ifcIDtYPEhANDLE_WINDOW ) ;
            lever_swPaintInfoFromDrawingHandle = lever_swWinFromDrawDuringPaint = hDrawP.osF( ifcIDtYPEhANDLE_DRAWpRIVATE ) ;
    
            if( pInfo ) hDrawP.osF( ifcIDtYPEhANDLE_DRAWpRIVATE , tinP.brcRaw ) ;
        {
        else
        if( tinP.bosFail ) delF( tinP , pbInfo ) ;

        BOS( WHATgbd , BOSoK , BeginPaint( (HWND)hWindowP.osF( ifcIDtYPEhANDLE_WINDOW ) , pInfo ) )

        PAINTSTRUCT* pInfo = (PAINTSTRUCT*)pbInfo ;
        c_memsetIF( tinP , pbInfo , sizeof( PAINTSTRUCT ) ) ;
        newF( tinP , LF , pbInfo , sizeof( PAINTSTRUCT ) ) ; ___CT( pbInfo ) ;
        ZE( byteT* , pbInfo ) ;

    #elif defined( __NT__ )

        //U:

    #if defined( __OS2__ )

    windowOldC* pw = windowOldC::pWindowIF( tinP , hWindowP ) ;

    _INoLD_

    }
        if( POOP ) return ;
        __( idRowMaxP ) ;
        __( idColMaxP ) ;
        __( idRowMinP ) ;
        __( idColMinP ) ;
        __Z( pswPaintInfoFromDrawingHandle ) ;
        __Z( pswWinFromDrawDuringPaint ) ;
        __Z( hWindowP ) ;
        __NZ( hDrawP ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL
    SCOOP
{
/*1*/voidT thirdC::winBeginPaintF( tinS& tinP , handleC& hDrawP , const handleC& hWindowP , sCountT& idColMinP , sCountT& idRowMinP , sCountT& idColMaxP , sCountT& idRowMaxP )/*1*/

/**/
*/
  must be 0
 idRowMaxP
  must be 0
 idColMaxP
  must be 0
 idRowMinP
  must be 0
 idColMinP
 wP
  caller must check to see whether is null
  will silently remain null if no device context is available
  normally, will be set
  must be 0
 hDrawP
 tinP
arguments
 for example, do not call me against a thirdC object that is explicitly constructed in the definition of an adam
my thirdC object must be contained within an etherC object that is fully constructed
\<A HREF=\"5.10200be.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$winBeginPaintF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


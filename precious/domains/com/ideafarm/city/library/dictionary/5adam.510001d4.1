
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


//VISIBLE

REST
etThread.osProcessIdPhaseAdamF( tinP , ifcIDpHASEhANDOFFoLD_SHUTTINGdOWN ) ;

HEAReNTER( etThread )
etThread.strokeF( tinP , T("\r\npress the enter key") ) ;

}
    }
        etThread.delF( tinP , pc5i ) ;
        etThread.strokeF( tinP , T("pc5i contains {")+TF1(pc5i->c1)+T(",")+TF1(pc5i->c2)+T(",")+TF1(pc5i->c3)+T(",")+TF1(pc5i->c4)+T(",")+TF1(pc5i->c5)+T("}\r\n") ) ;
    {
    if( pc5i )

    stack >> pc5i ;
    ZE( count5S* , pc5i ) ;
{
while( stack )

pushF( tinP , etThread , stack , 3 , 8 ) ;
pushF( tinP , etThread , stack , 1 , 6 ) ;

stackC stack( tinP , etThread , TAG( TAGiDnULL ) , flSTACKc_null , ifcSTACKtYPE_PTR_count5S ) ;

TODO

}
    }
        }
            if( !idSlot ) etThread.delF( tinP , pc5o ) ;
            stackP.sinkF( tinP , idSlot , pc5o , flSTACKsINK_UNIQUE ) ;
            ZE( countT , idSlot ) ;

            pc5o->c5 = value ;
            pc5o->c4 = 4 ;
            pc5o->c3 = 3 ;
            pc5o->c2 = 2 ;
            pc5o->c1 = 1 ;
        {
        if( pc5o )
        etThread.newF( tinP , LF , pc5o ) ;
        ZE( count5S* , pc5o ) ;
    {
    for( countT value = cMinP ; value <= cMaxP ; value ++ )
{
voidT pushF( tinS& tinP , etherC& etThread , stackC& stackP , const countT cMinP , const countT cMaxP )

/*1*/WAKEhIDE( "example.simplest.func.1150020.stackC.sinkF" )/*1*/
/**/
*/
\<A HREF=\"5.6d10104.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


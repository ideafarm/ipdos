
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    _OUT_
    
    //U:: }
    //U::     OStEXTA( *postP , postPenanceP )
    //U::     OStEXTA( *postP , pposta[ 7 ] )
    //U::     OStEXTC( *postP , idFileP , 0 )
    //U::     OStEXTC( *postP , tinP.pLFstep[ ( ( tinP.monitor.idStep & OFFsLOTtINsTEPmAX ) << 1 ) + 1 ] , 0 )
    //U::     OStEXTA( *postP , pposta[ 6 ] )
    //U::     OStEXTC( *postP , idLineP , 0 )
    //U::     OStEXTC( *postP , tinP.pLFstep[ ( tinP.monitor.idStep & OFFsLOTtINsTEPmAX ) << 1 ] & 0xfffffff , 0 )
    //U::     OStEXTA( *postP , pposta[ 5 ] )
    //U::     OStEXTA( *postP , postSinP )
    //U::     OStEXTA( *postP , pposta[ 4 ] )
    //U::     OStEXTC( *postP , processGlobal1I.idAdamRoot , 0 )
    //U::     OStEXTA( *postP , pposta[ 3 ] )
    //U::     OStEXTA( *postP , tinP.postThreadName )
    //U::     OStEXTA( *postP , pposta[ 2 ] )
    //U::     OStEXTC( *postP , tinP.monitor.idThread , 0 )
    //U::     OStEXTA( *postP , pposta[ 1 ] )
    //U::     OStEXTcLEAR( *postP )
    //U::     ZE( countT , ecnu ) ;
    //U:: {
    //U:: if( postoP )


    }
        thirdC::c_strncpyIF( tinP , postP , ostot , ostot.costF() + 1 ) ;
        tinP.pEther->newF( tinP , LF , postP , ostot.costF() + 1 ) ; ___( postP ) ;

        OStEXTA( ostot , postPenanceP )
        OStEXTA( ostot , pposta[ 7 ] )
        OStEXTC( ostot , idFileP , 0 )
        OStEXTC( ostot , tinP.pLFstep[ ( ( tinP.monitor.idStep & OFFsLOTtINsTEPmAX ) << 1 ) + 1 ] , 0 )
        OStEXTA( ostot , pposta[ 6 ] )
        OStEXTC( ostot , idLineP , 0 )
        OStEXTC( ostot , tinP.pLFstep[ ( tinP.monitor.idStep & OFFsLOTtINsTEPmAX ) << 1 ] & 0xfffffff , 0 )
        OStEXTA( ostot , pposta[ 5 ] )
        OStEXTA( ostot , postSinP )
        OStEXTA( ostot , pposta[ 4 ] )
        OStEXTC( ostot , processGlobal1I.idAdamRoot , 0 )
        OStEXTA( ostot , pposta[ 3 ] )
        OStEXTA( ostot , tinP.postThreadName )
        OStEXTA( ostot , pposta[ 2 ] )
        OStEXTC( ostot , tinP.monitor.idThread , 0 )
        OStEXTA( ostot , pposta[ 1 ] )
        OStEXT( ostot , 0x400 )
    {
    if( tinP.pEther )

    //U::postoP = new( costx + 1 , tinP ) osTextC( costx + 1 ) ;

    costx += 8 * 4 ; // 4 IS THE NUMBER OF c_itoa CONCATENATIONS
    costx += thirdC::c_strlenIF( tinP , postPenanceP ) ;
    costx += thirdC::c_strlenIF( tinP , postSinP ) ;
    }
        for( countT off = 0 ; off < cElts ; off ++ ) costx += thirdC::c_strlenIF( tinP , pposta[ off ] ) ;
        countT cElts = sizeof pposta / sizeof pposta[ 0 ] ;
    {
    ZE( countT , costx ) ;

    } ;
        ".  " ,
        " of file " ,
        ", at raw line " ,
        ", " ,
        "\", of an adam of class " ,
        ", \"" ,
        "Thread " ,
        "<notUsed>" ,
    {
    osTextT* pposta[] =

    _INoLD_

    }
        if( POOP ) return ;
        __NZ( postP ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL        
{
/*1*/voidT __export postFromTinGF( tinS& tinP , const countT idLineP , const countT idFileP , osTextT*& postP , const osTextT* postSinP , const osTextT* postPenanceP )/*1*/
/**/
*/
  else it will be allocated from the default poolOld
  if tinP.pEther is not 0 then postP will be allocated from *tinP.pEther's poolOld
  must be 0
 postP
  can be 0
 tinP
arguments
\<A HREF=\"5.0c00010.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$postFromTinF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//



//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    _OUT_

    tinP.pAdamGlobal5->_soulC_grabTrace.ungrabF( tinP ) ;

    }
        }
            if( (*tinP.pAdamGlobal1->_soulC_.pStkTrace)( (countT)this ) ) tinP.pAdamGlobal1->_soulC_.pStkTrace->extractF( 0 , tinP ) ;
            flTrace = flTRACEsOULc_null ;
            LOGrAW( tSay ) ;
            TN( tSay , "" ) ; tSay = TP("soulC trace OFF: ",0x20)+TF1((countT)this)+(psttP?T(" ")+T(psttP):T(""))+T("\r\n") ;
        {
        if( !( -- cNestTrace ) || F(flagsP) & flTRACEsOULc_PURGE )
    {
    else if( cNestTrace )
    }
        flTrace |= flagsP ;
        }
            tinP.pAdamGlobal1->_soulC_.pStkTrace->sinkF( tinP , countTC() , (countT)this ) ;
            LOGrAW( tSay ) ;
            TN( tSay , "" ) ; tSay = TP("soulC trace ON : ",0x20)+TF1((countT)this)+(psttP?T(" ")+T(psttP):T(""))+T("\r\n") ;
        {
        if( 1 == ++ cNestTrace )
    {
    if( F(flagsP) & flTRACEsOULc_ON )

    if( !tinP.pAdamGlobal1->_soulC_.pStkTrace ) { BLAMMO ; }
    tinP.pAdamGlobal5->_soulC_grabTrace.grabF( tinP , TAG( TAGiDnULL ) ) ;

    _INoLD_

    }
        if( POOP ) return ;
        FV( flTRACEsOULc , flagsP ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL
{
/*1*/voidT soulC::traceF( tinS& tinP , const flagsT flagsP , const strokeS* const psttP )/*1*/

/**/
*/
traceIF must have been called to turn on tracing for the soulC class
i register myself for tracing
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


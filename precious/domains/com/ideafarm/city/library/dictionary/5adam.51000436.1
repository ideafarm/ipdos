
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


//VISIBLE

CELL( jobFillCourseF , jobHearOrderF , 0 )

}
    if( ether && *tinP.zEtScratch && cArgP && c8argP.c1 && sNotesTextP && sNotesDataP && idChatSessionP ) ;

    }
        }
            break ;

            etThread.delF( tinP , psttw2 ) ;
            sDataP << psttw2 ;

            etThread.delF( tinP , psttw ) ;
            etThread.strMakeF( tinP , psttw2 , T("job done by ")+TF1(DDNUMB)+T(" cell ")+T(psttw)+T(" (")+T(idhMe)+T(")") ) ; ___( psttw2 ) ;
            ZE( strokeS* , psttw2 ) ;

            etThread.sockPsttHostF( tinP , psttw , idhMe ) ; ___( psttw ) ;
            nicNameC idhMe = socketC::nicNameIF( tinP , etThread ) ;
            ZE( strokeS* , psttw ) ;
        {
        case 1 :
    {
    switch( idCourseP )

    __( idAdamP - DDNUMB ) ;
{
voidT jobFillCourseF( tinS& tinP , etherC& ether , etherC& etThread , soulC& sDataP , soulC& sNotesTextP , soulC& sNotesDataP , const countT idCourseP , const countT idAdamP , const countT idChatSessionP , soulC& sOrderP , countT& cArgP , count8S& c8argP )

}
    if( cArgP && c8argP.c1 && sOrderP && ether && idChatSessionP ) ;

    __( idAdamP - DDNUMB ) ;
{
voidT jobHearOrderF( tinS& tinP , etherC& ether , etherC& etThread , const countT idAdamP , const countT idChatSessionP , soulC& sOrderP , countT& cArgP , count8S& c8argP )

/*1*/WAKEhIDE( "example.simplest.jobber" )/*1*/
/**/
*/
the work cell replies the deliverable to the acceptor cell, who replies it to the client
the job is relayed to a randomly chosen cell
any cell can accept a job
 it is scaleless in that no code knows or cares how many cells comprise the entity
 it is stateless in that all state information needed to do a job must be contained within the job definition
 it is symmetric in that it is composed of functionally identical cells
the standard adam is a symmetric, stateless, scaleless multicellular life form
the function of a standard adam life form is to accept jobs via chat and reply synchronously with deliverables via chat
i define the adam sentient multicellular object that does jobs for clients
i demonstrate the standard structure of an adam definition
\<A HREF=\"5.9340104.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


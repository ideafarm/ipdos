
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    ctF( tinP , &windowP , idColP , idRowP , cColP , cRowP , cColClientP , cRowClientP , bRootP , bNotVisibleP , cTriesP , pPaperToBackCBFP , cPaperToBackArgP ) ;
    //NOT SERIALIZED BECAUSE CT/DT FUNCTION
    SCOOP
{
//signShown( tinP , TAG( TAGiDnULL ) ) ,
swKeyName(                 tinP , ether , TAG( TAGiDnULL ) , flSTACKc_DOnOTsERIALIZE | flSTACKc_ALLOWmULTIPLEuNSERIALIZED , leverIdKey )
leverIdKey( 0 ) ,
swKey(                     tinP , ether , TAG( TAGiDnULL ) , flSTACKc_DOnOTsERIALIZE | flSTACKc_ALLOWmULTIPLEuNSERIALIZED , psttlKeyName ) ,
swKeyLathDown(             tinP , ether , TAG( TAGiDnULL ) , flSTACKc_DOnOTsERIALIZE | flSTACKc_ALLOWmULTIPLEuNSERIALIZED , psttlKeyName ) ,
psttlKeyName( 0 ) ,
idKeyLathDown( 0 ) ,
idKeyLathDownLag( 0 ) ,
hDrawWindow( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_DRAWpRIVATE ) ,
mIdRowOsOrigin( 0.0 ) ,
mIdColOsOrigin( 0.0 ) ,
mIdRowFrameInDad( idRowP ) ,
mIdColFrameInDad( idColP ) ,
mIdRowInDad( idRowP + tinP.pAdamGlobal1->_thirdC_.mRowsAdjForWinFrame ) ,
mIdColInDad( idColP + tinP.pAdamGlobal1->_thirdC_.mColsAdjForWinFrame ) ,
idWindow( ++ tinP.pAdamGlobal1->_windowOldC_.idWindowLath ) ,
hWindow( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_WINDOW ) ,
bDoomed( 0 ) ,
cReferences( 0 ) ,
backOldC( tinP , etherP , cPapersP ) ,
/*1*/windowOldC::windowOldC( tinS& tinP , etherC& etherP , const countT cPapersP , const windowOldC& windowP , const countT cTriesP , const boolT bNotVisibleP , const sCountT idColP , const sCountT idRowP , const countT cColP , const countT cRowP , const countT cColClientP , const countT cRowClientP , const boolT bRootP , paperToBackCBFT pPaperToBackCBFP , countT cPaperToBackArgP )/*1*/ :

/**/
*/
 bNotVisibleP
 bRootP
 windowP
  tinP.monitor.idThread must be thirdC::idThreadWindow
  must not be 0
 tinP
arguments
 in other words, it is to ensure that the object is programmatically deletable i.e. not on the stack or in static memory
 this is to ensure that the windowOldC object can be d eleted automatically by calling DEL() on its "this" value
must only be constructed in the poolOld associated with etherP
the following note is obsoleted by addition of poolOld and ether members and needs to be rewritten
 it will be serviced by thread 1
a windowOldC object can be constructed on any thread
it is illegal to refer to this symbol in the definition of an adam
\<A HREF=\"5.1440005.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


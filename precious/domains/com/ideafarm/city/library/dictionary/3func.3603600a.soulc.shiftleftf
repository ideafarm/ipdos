
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//

 
}
    return *this ;

    if( idTypeShiftP == ifcIDtYPEsOULiTEM_baseSoilXxxxCptr && F(flags) & flSOUL_LIVE ) ( **(baseSoilXxxxC**)pbP )( tinP , *this ) ; //THIS LINE MAKES THE soulC OBJECT A FORTH-LIKE EXECUTION ENGINE

    }
        }
            cFields ++ ;

            }
                }
                    #endif
                        //U: OTHERWISE, REARRANGE THE BYTES SO THAT THEY ARE IN ORDER OF INCREASING NUMERICAL SIGNIFICANCE
                        //U: FOR NON 386 HARDWARE (CAN DO MEMCOPY IFF LEAST SIGNIF NUMERIC BYTE IS AT LOWEST ADDRESS, AS ON INTEL HARDWARE
                    #else
                        }
                            aImage.prependF(  tinP , (byteT*)&idJot , sizeof idJot ) ;
                            countT idJot = pJot->writeF( tinP , (byteT*)pci , sizeof pci , pbP , cbp ) ;
                        {
                        else
                        }
                            aImage.prependF( tinP , (byteT*)pci , sizeof pci ) ;
                            aImage.prependF( tinP , pbP , cbp ) ;
                        {
                        if( !pJot )
                    #if defined( __386__ )
                {
                else
                }
                    }
                        aImage.prependF(  tinP , (byteT*)&idJot , sizeof idJot ) ;
                        countT idJot = pJot->writeF( tinP , (byteT*)pci , sizeof pci , pbP , cbp ) ;
                    {
                    else
                    }
                        aImage.prependF( tinP , (byteT*)pci , sizeof pci ) ;
                        aImage.prependF( tinP , pbP , cbp ) ;
                    {
                    if( !pJot )
                {
                if( !( F(flagsItemP) & flSOULiTEM_MADEoFcOUNToBJECTS ) )
            {
            else
            }
                }
                    #endif
                        //U: OTHERWISE, REARRANGE THE BYTES SO THAT THEY ARE IN ORDER OF INCREASING NUMERICAL SIGNIFICANCE
                        //U: FOR NON 386 HARDWARE (CAN DO MEMCOPY IFF LEAST SIGNIF NUMERIC BYTE IS AT LOWEST ADDRESS, AS ON INTEL HARDWARE
                    #else
                        }
                            aImage.appendF(  tinP , (byteT*)&idJot , sizeof idJot ) ;
                            countT idJot = pJot->writeF( tinP , (byteT*)pci , sizeof pci , pbP , cbp ) ;
                        {
                        else
                        }
                            aImage.appendF( tinP , pbP , cbp ) ;
                            aImage.appendF( tinP , (byteT*)pci , sizeof pci ) ;
                        {
                        if( !pJot )
                    #if defined( __386__ )
                {
                else
                }
                    }
                        aImage.appendF(  tinP , (byteT*)&idJot , sizeof idJot ) ;
                        countT idJot = pJot->writeF( tinP , (byteT*)pci , sizeof pci , pbP , cbp ) ;
                    {
                    else
                    }
                        aImage.appendF( tinP , pbP , cbp ) ;
                        aImage.appendF( tinP , (byteT*)pci , sizeof pci ) ;
                    {
                    if( !pJot )
                {
                if( !( F(flagsItemP) & flSOULiTEM_MADEoFcOUNToBJECTS ) )
            {
            if( !( F(flags) & flSOUL_LIFO ) )

            countT cbi   = sizeof pci + cbp ;
            countT pci[] = { 2 * sizeof( countT ) + cbp , idTypeShiftP , flagsItemP | ( cbP ? flSOULiTEM_null : flSOULiTEM_TERMINATEDbYnULL ) } ; //CS:CODEsYNC: 1120051a 3603600a
            countT cbp = cbP ? cbP : thirdC::c_strlenIF( tinP , pbP ) + 1 ;
        {
        else
        }
            cFields ++ ;
            }
                }
                    aImage.prependF(  tinP , (byteT*)&idJot , sizeof idJot ) ;
                    countT idJot = pJot->writeF( tinP , (byteT*)pci , cbi ) ;
                {
                else
                if( !pJot ) aImage.prependF( tinP , (byteT*)pci , cbi ) ;
            {
            else
            }
                }
                    aImage.appendF(  tinP , (byteT*)&idJot , sizeof idJot ) ;
                    countT idJot = pJot->writeF( tinP , (byteT*)pci , cbi ) ;
                {
                else
                if( !pJot ) aImage.appendF(  tinP , (byteT*)pci , cbi ) ;
            {
            if( !( F(flags) & flSOUL_LIFO ) )

            countT cbi   = sizeof pci ;
            countT pci[] = { 2 * sizeof( countT ) , idTypeShiftP , flagsItemP | flSOULiTEM_NULLpTR } ;
        {
        if( !pbP )

        //U:: INACCURATE? LOOKS LIKE countT countT countT
        //DATA FORMAT IS byteT (used for idType), byteT (used for flags), byteT (used for flags2) FOLLOWED BY 0 OR MORE BYTES
    {
    else
    }
        if( bFail ) removeAllF( tinP ) ;

        }
            pbc += cbo ;

            }
                cFields ++ ;

                }
                    }
                        aImage.prependF(  tinP , (byteT*)&idJot , sizeof idJot ) ;
                        countT idJot = pJot->writeF( tinP , pbc , cbo ) ;
                    {
                    else
                    if( !pJot ) aImage.prependF( tinP , pbc , cbo ) ;
                {
                else
                }
                    }
                        aImage.appendF(  tinP , (byteT*)&idJot , sizeof idJot ) ;
                        countT idJot = pJot->writeF( tinP , pbc , cbo ) ;
                    {
                    else
                    if( !pJot ) aImage.appendF(  tinP , pbc , cbo ) ;
                {
                if( !( F(flags) & flSOUL_LIFO ) )
            {
            else if( bWant )
            else if( pbe < pbc + cbo ) bFail = 1 ; //DETECTS BAD cbo WITHOUT WRAPAROUND
                 if( pbc > pbc + cbo ) bFail = 1 ; //DETECTS BAD cbo WITH    WRAPAROUND
            countT cbo = sizeof( countT ) + *(countT*)pbc ;

            if( pcExcludeP &&  bHitF(    idi , pcExcludeP ) ) bWant = 0 ;
            if( pcIncludeP && !bHitF( ++ idi , pcIncludeP ) ) bWant = 0 ;
            boolT bWant = 1 ;
        {
        while( pbc < pbe )
        ZE( countT , idi ) ;
        ZE( boolT , bFail ) ;

        const byteT* const pbe = pbc + cbP ;
        const byteT* pbc = pbP ;
        // ALLOCATE AND FILL A NEW IMAGE FOR EACH OBJECT IN THE SOUL IMAGE pbP

        }
            cbP      = *(countT*)pbP ; pbP += sizeof( countT ) ;
            idFormat = *(countT*)pbP ; pbP += sizeof( countT ) ;
                                       pbP += sizeof( countT ) ;
        {
        if( F(flagsModeP) & flSOULsHIFTlEFTmODE_UNPACKsOULiMAGE )
        ZE( countT , idFormat ) ;
    {
    )
        F(flagsModeP) & flSOULsHIFTlEFTmODE_UNPACKsOULiMAGEpART
        ||
        F(flagsModeP) & flSOULsHIFTlEFTmODE_UNPACKsOULiMAGE
    (
    if

    if( postNameJot && !pJot ) pJot = new( 0 , tinP , LF ) jotC( tinP , postNameJot , flJOTc_WRITE | flJOTc_DELETE | flJOTc_PRIVATE , cbJotDataBook ) ; ___( pJot ) ;
    //U:: BUG: RACE CONDITION: MULTITHREADED CALL COLLISION COULD RESULT IN LEAK, WHICH COULD CAUSE INABILITY TO DELETE THE BACKING FILES ; FIX BY USING setIfZeAM AND IMPOTENCE IF COLLISION DETECTED ; ALT: ENFORCE REQUIREMENT THAT soulC ONLY BE REFERENCED BY CT'ING THREAD

    _IO_

    }
        if( POOP ) return *this ;

        }
            __NZ( pcExcludeP ) ;
            __NZ( pcIncludeP ) ;
            __Z(  cbP ) ;
            __Z(  pbP ) ;
            __NZ( F(flagsModeP) & flSOULsHIFTlEFTmODE_UNPACKsOULiMAGE ) ;
        {
        if( F(flagsModeP) & flSOULsHIFTlEFTmODE_UNPACKsOULiMAGEpART )

        }
            __( getNegAM( *(countT*)pbP ) - FINGERnEG_SOULc ) ; //20131205@1756: THERE MIGHT BE SOME DECADES OLD FILES IN THE ARCHIVE THAT CONTAIN SOUL IMAGES WHICH DO NOT CONTAIN THIS PREFIX FINGERPRINT
        {
        if( F(flagsModeP) & flSOULsHIFTlEFTmODE_UNPACKsOULiMAGE )

        if( POOP ) return *this ;

        }
            __NZ( pcExcludeP ) ;
            __NZ( pcIncludeP ) ;
            __NZ( cbP ) ;
            __Z(  pbP ) ;
            __NZ( F(flagsModeP) & flSOULsHIFTlEFTmODE_UNPACKsOULiMAGEpART ) ;
        {
        if( F(flagsModeP) & flSOULsHIFTlEFTmODE_UNPACKsOULiMAGE )   //20131205@1749: IMPOTENCE ON EXCEPTION ; PRIOR CODE JUST RETURNED SILENTLY WITHOUT SETTING IMPOTENCE

        if( POOP ) return *this ;
    {
    IFbEcAREFUL    
    SCOOP
{
/*1*/soulC& soulC::shiftLeftF( tinS& tinP , const countT idTypeShiftP , const byteT* pbP , countT cbP , const flagsT flagsItemP , const flagsT flagsModeP , const countT* const pcIncludeP , const countT* const pcExcludeP )/*1*/

/**/
*/
  specifying an id value on this list that is not present in the image has no effect
  if not 0 then only an item whose id is not on this list will be shifted in (regardless of whether the item is on the inclusion list)
  can be 0
 pcExcludeP
  specifying an id value on this list that is not present in the image has no effect
  if not 0 then only an item whose id is on this list (and also not on the exclusion list) will be shifted in
  can be 0
 pcIncludeP
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/1snip.0010110.ifbSOUL!||
 flagsModeP
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/1snip.0010113.flSOULiTEM!||
 flagsItemP
  if 0 then the terminating null byteT will be stored
 cbP
 pbP
 idTypeShiftP
 tinP
arguments
\<A HREF=\"5.14e000a.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$shiftLeftF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//



//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


;
}
    voidT deregisterHeartF( voidT ) ;
    voidT registerHeartF( voidT ) ;
    voidT setIdAdamF( const countT idAdamP ) ;
    adamGlobal1S( voidT ) ;
    ~adamGlobal1S( voidT ) ;
    NEWdELcLASSpROTOS

    countT                      cSpins4 ;
    countT                      cSpins3 ;
    countT                      cSpins2 ;
    countT                      cSpins1 ;
    etherC*                     pEtThreadMain ;
    translateStateFT            pTranslateStateCallerCBF ;
    stackC*                     _deviceC_pStkJob ;
    flagsT                      _deviceC_flagsHelper ;
    countT                      _deviceC_cHelper ;
    countT                      _deviceC_cMe ;
    measureT                    m01DrawSmooth ;
    sadamsC*                    pSadams ;
    countT                      cThreadsWatched ;
    byteT*                      pbDebug ; //AVAILABLE FOR DEBUGGING; EXAMPLE: if( tinP.pAdamGlobal1->pbDebug == (byteT*)this ) { CONoUTrAW( "fooey\r\n" ) ; }
    booksC*                     pBksLog ;
    const countT                idMemorySpace ;

    const osTextT*              postServiceName ;
    countT                      pcServiceStatus[ 7 ] ; //ASSUME: MATCHES sizeof( SERVICE_STATUS )
    countT                      pcExitsWhere[ 1 + CsOURCEfILES ] ;
    countT                      pcDebug[ 1 + OFFmAXdEBUG ] ;
    poolC*                      pPoolHomePerm ;
    poolC*                      pPoolAdamPerm ;
    poolC*                      pPoolScratch  ;
    poolC*                      pPoolHomeTemp ;
    poolC*                      pPoolAdamTemp ;
    const grabC*                pGrabWatch ;
    countT                      oshServiceStatus ;
    const countT                idSerialAdam ;
    countT                      idPhaseAdamNoHandoffOld ;
    countT                      idPhaseAdam      ;
    countT                      idTellLath ;
    const countT                idGroupFireAll ;
    countT                      idEventSadamsLath ;
    const countT                idCell ;
    const countT                idAdam ;
    countT                      idiFileBlammoCt ;
    countT                      idLineBlammoCt ;
    countT                      idiFileBlammo ;
    countT                      idLineBlammo ;
    flagsT                      flagsAdamState ;
    flagsT                      flagsAdam ;
    countT                      cYieldHighWater ;
    adamC*                      _adamC_pAdam ;

    processGlobal7S* const       pProcessGlobal7 ;
    processGlobal6S* const       pProcessGlobal6 ;
    processGlobal5S* const       pProcessGlobal5 ;
    processGlobal4S* const       pProcessGlobal4 ;
    processGlobal3S* const       pProcessGlobal3 ;
    processGlobal2S* const       pProcessGlobal2 ;
    processGlobal1S* const       pProcessGlobal1 ; //THESE ARE HERE FOR SPEED AND ALSO FOR THE CONVENIENCE OF THE MONITOR

    byteT                       pbzphp[ sizeof( poolC ) ] ;
    byteT                       pbzpap[ sizeof( poolC ) ] ;
    byteT                       pbzpsc[ sizeof( poolC ) ] ;
    byteT                       pbzpht[ sizeof( poolC ) ] ;

    ag1_windowOldC_C            _windowOldC_ ;
    ag1_thugC_C                 _thugC_ ;
    ag1_tableC_C                _tableC_ ;
    ag1_switchC_C               _switchC_ ;
    ag1_strokeS_C               _strokeS_ ;
    ag1_stackC_C                _stackC_ ;
    ag1_soixlOldSpaceC_C        _soixlOldSpaceC_ ;
    ag1_soulC_C                 _soulC_ ;
    ag1_rootWordC_C             _rootWordC_ ;
    ag1_relayC_C                _relayC_ ;
    ag1_pulpOldC_C              _pulpOldC_ ;
    ag1_paperOldC_C             _paperOldC_ ;
    ag1_neverUsedC_C            _neverUsedC_ ;
    ag1_masterC_C               _masterC_ ;
    ag1_lexC_C                  _lexC_ ;
    ag1_grabC_C                 _grabC_ ;
    ag1_grabNotesS_C            _grabNotesS_ ;
    ag1_bitsC_C                 _bitsC_ ;
    ag1_backOldC_C              _backOldC_ ;
    ag1_etherC_C                _etherC_ ;
    ag1_thirdC_C                _thirdC_ ;

    public :
    static countT               idSerialAdamLath ;
    private :
{
/*1*/struct adamGlobal1S/*1*/

//MOST GLOBALS ARE HERE, INCLUDING ALL "STATIC MEMBERS" OF CLASSES

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


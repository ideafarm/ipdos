
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    if( bFail ) { BLAMMO ; }
    bFail = setsockopt( sd , IPPROTO_IPV6 , IPV6_JOIN_GROUP , (char*)&groupAddrCard , sizeof groupAddrCard ) ;

    groupAddrCard.ipv6mr_interface = 0 ;
    inet_pton( AF_INET6 , postAddrP , &groupAddrCard.ipv6mr_multiaddr ) ;
    memset( &groupAddrCard , 0 , sizeof groupAddrCard ) ;
    ipv6_mreq groupAddrCard ;

    if( bFail ) { BLAMMO ; }
    bFail = setsockopt( sd , IPPROTO_IPV6 , IPV6_MULTICAST_LOOP , (const char*)&on , sizeof on ) ;
    on = 1 ;

    if( bFail ) { BLAMMO ; }
    bFail = setsockopt( sd , IPPROTO_IPV6 , IPV6_MULTICAST_HOPS , (const char*)&hops , sizeof hops ) ;
    int hops = 255 ;

    if( bFail ) { BLAMMO ; }
    bFail = setsockopt( sd , IPPROTO_IPV6 , IPV6_MULTICAST_IF , (const char*)&ifidx , sizeof ifidx ) ;
    int ifidx = 0 ;

    if( bFail ) { BLAMMO ; }
    int bFail = setsockopt( sd , SOL_SOCKET , SO_REUSEADDR , (const char*)&on , sizeof on ) ;
    int on = 1 ;

    int sd = handleP.osF( ifcIDtYPEhANDLE_SOCKET ) ;

    _IO_

    }
        if( POOP ) return ;
        __Z( handleP ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL    
    SCOOP
{
/*1*/voidT thirdC::s_optionMulticastF( tinS& tinP , const handleC& handleP , const osTextT* const postAddrP )/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//

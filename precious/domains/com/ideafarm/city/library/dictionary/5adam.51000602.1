
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//

                            
REST

//etherC::loafIF( tinP ) ;
etThread.traceF( tinP , T("ok") ) ;

THREADmODE1rESTORE
THREADmODE2rESTORE
}
    etThread.traceF( tinP , T("cleaning up") ) ;
    //listC::chatterIF( tinP , count2S( LISTnAME_ROOT ) , flLISTwALKcHATTER_IGNOREgRABBEDbIT ) ;
    //etThread.traceF( tinP , T("chatter2 :  root") ) ;
    listC::chatterIF( tinP , count3S( LISTnAME_ROOT , LISTnAME_ROOTsYSTEM3 ) ) ;
    etThread.traceF( tinP , T("chatter2 :  system3") ) ;
    listC::chatterIF( tinP , count3S( LISTnAME_ROOT , LISTnAME_ROOTsYSTEM2 ) ) ;
    etThread.traceF( tinP , T("chatter2 :  system2") ) ;
    listC::chatterIF( tinP , count3S( LISTnAME_ROOT , LISTnAME_ROOTaPPLICATION ) ) ;
    etThread.traceF( tinP , T("chatter2 :  application") ) ;

    }
        TRACEfIELDoUT( etThread , "field1" , TUCK << 2 ) ;
        listC::fieldIF( tinP , pOut , hRecord , pczField1 , _1_queryC() + _1_modeAllC() , LF ) ;
        etThread.traceF( tinP , T("querying field1 all") ) ;

        DELlIST( fieldEditParamOutC , pOut ) ;
        listC::fieldIF( tinP , pOut , hRecord , pczField1 , _1_deleteC() , LF ) ;
        etThread.traceF( tinP , T("deleting wo value in field1") ) ;

        listC::openIF( tinP , hRecord , pczRecord ) ;
        handleC hRecord( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_LISTING ) ;
    {
    etThread.traceF( tinP , T("reopening record to delete a field value") ) ;

    listC::chatterIF( tinP , count3S( LISTnAME_ROOT , LISTnAME_ROOTsYSTEM3 ) ) ;
    etThread.traceF( tinP , T("chatter 1:  system3") ) ;
    listC::chatterIF( tinP , count3S( LISTnAME_ROOT , LISTnAME_ROOTsYSTEM2 ) ) ;
    etThread.traceF( tinP , T("chatter 1:  system2") ) ;
    listC::chatterIF( tinP , count3S( LISTnAME_ROOT , LISTnAME_ROOTaPPLICATION ) ) ;
    etThread.traceF( tinP , T("chatter 1:  application") ) ;

    }
        TRACEfIELDoUT( etThread , "field1" , TUCK << 2 ) ;
        , LF ) ;

            + _1_no_above_C( "eeeee" )
            + _1_no_below_C( "ccc" )
            + _1_no_above_C( 0x66666666 )
            + _1_no_below_C( 0x44444444 )
            + _1_modeAllC()
            _1_queryC()

        listC::fieldIF( tinP , pOut , hRecord , pczField1 ,
        etThread.traceF( tinP , T("querying field1 specifying ranges") ) ;

        }
            }
                DELlIST( fieldEditParamOutC , pOut ) ;
                listC::fieldIF( tinP , pOut , hRecord , pczField1 , _1_pushC( postv[ offv ] ) , LF ) ;
            {
            for( countT offv = 0 ; offv < sizeof postv / sizeof postv[ 0 ] ; offv ++ )
            etThread.traceF( tinP , T("pushing psText string values to field1") ) ;

            } ;
                "hhhhhhhh"
                "ggggggg" ,
                "ffffff" ,
                "eeeee" ,
                "dddd" ,
                "ccc" ,
                "bb" ,
                "a" ,
            {
            osTextT* postv[] =

            }
                //if( vv == 0x22222222 ) break ;
                DELlIST( fieldEditParamOutC , pOut ) ;
                listC::fieldIF( tinP , pOut , hRecord , pczField1 , _1_pushC( vv ) , LF ) ;
            {
            for( countT vv = 0x11111111 ; vv <= 0x88888888 ; vv += 0x11111111 )
            etThread.traceF( tinP , T("pushing count values to field1") ) ;
        {

        listC::openIF( tinP , hRecord , pczRecord ) ;
        handleC hRecord( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_LISTING ) ;
    {
    ZE( fieldEditParamOutC* , pOut ) ;

    listC::dictionaryReplaceOsTextIF( tinP , pczField1 ) ;
    countT pczField1[] = { (countT)"field1" , 0 } ;

    listC::dictionaryReplaceOsTextIF( tinP , pczRecord ) ;
    countT pczRecord[] = { LISTnAME_ROOT , LISTnAME_ROOTaPPLICATION , (countT)"joeblow" , 0 } ;

    grabitC grabitx( tinP , TAG( TAGiDnULL ) ) ;
{
THREADmODE2oN( flTHREADmODE2_UNLOCKpOOLiDENTITY )
THREADmODE1oN( flTHREADmODE1_ALLOWsTOPwHILEgRABBING )

TODO

// 
// 
// 20180508@1412:  WITH MINOR CHANGES (ADDED THREAD MODE FLAGS AND ADDED LISTnAME_ROOT), RUNS AOK BUT QUIT QUALITY DEFECT: DOES NOT QUIT COMPLETELY
// 2011.12.31: TESTED AOK
// 
// MAINTENANCE HISTORY

/*1*/WAKEsHOWtEXT( "example.other.func.220000e.listC.fieldIF" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


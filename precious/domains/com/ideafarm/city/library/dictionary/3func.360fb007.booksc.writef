
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return idBook ;

    THREADmODE3rESTORE

    hw >> hJotP ;

    //}
    //    CONoUTrAW( TF2(pcp,flFORMAT_PREFIXED)+tcr ) ;
    //    TN( tcr , "\r\n" ) ;
    //
    //    countT pcp[] = { 2 , a.c1 , a.c2 } ;
    //    const HANDLEaPPnOTEScOUNTcLASS& a = hw ;
    //{

    countT idBook = writeF( tinP , pb1P , cb1P , pb2P , cb2P , flBOOKScwRITE_ALLoRnONE | flBOOKScwRITE_ALLOWoDDlENGTH | flagsP , &hw ) ;
    handleC hw( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_BOOKS ) ;

    THREADmODE3oN( /*U:: flTHREADmODE3_POOLaLLOCATEfROMhEAP*/ flTHREADmODE3_null )

    _IO_

    }
        if( POOP ) return 0 ;
    {
    IFbEcAREFUL
{
/*1*/countT booksC::writeF( tinS& tinP , handle0111C& hJotP , const byteT* const pb1P , const countT cb1P , const byteT* const pb2P , const countT cb2P , const flagsT flagsP )/*1*/

/**/
*/
use me when the application code will not know and cannot calculate cb1P+cb2P so that cb1P+cb2P must be stored within hJotP
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


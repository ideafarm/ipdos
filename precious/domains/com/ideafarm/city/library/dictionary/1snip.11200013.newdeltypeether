
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


    }
        third.newF( tinP , LF , pP , cP ) ; /*___( pP ) ; */            \
        DROPnOTEdOESnOTwANTmE                                           \
        _IO_                                                            \
    {                                                                   \
    voidT etherC::newF( tinS& tinP , const countT idLineP , const countT idiFileP , typeP*& pP , const countT cP )     \
                                                                        \
    }                                                                   \
        third.delF( tinP , pP ) ;                                       \
        _IO_                                                            \
    {                                                                   \
    voidT etherC::delF( tinS& tinP , typeP*& pP )                       \
                                                                        \
#define NEWdELtYPEeTHER(typeP)                                          \
/*1*//*NEWdELtYPEeTHER(typeP)*//*1*/
/**/
*/
 the normal qualifications for the C++ language apply
using the "new" "d elete" operators results in calling constructors and destructors
 example: strokeS
for other types, you can either use me or use the "new" "d elete" operators
 example: countT
for some types, i am the only legal way to dynamically allocate storage for the type
  the constructor for each has not been called, and by using etherC::delF, the overhead of calling destructors is avoided
 for example, i can be used to obtain an uninitialized string of strokeS objects
for each such type, i can be used to quickly obtain uninitialized storage
see the definition of the etherC class for a list of the types for which i am defined
i define an etherC::newF etherC::delF pair of overloads for the specified type
  \<A HREF=\"5.fa30104.1.1.0.html\"\>fa30104:  WAKEsHOW( "example.simplest.snip.11000013.NEWdELtYPEeTHER" )\</A\>
 simplest
examples
\<A HREF=\"5.11000013.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//


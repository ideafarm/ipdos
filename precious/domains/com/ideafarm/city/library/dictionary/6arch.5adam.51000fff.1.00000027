
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//

                            
REST

etThread.delF( tinP , pstt1m ) ;
}
    etThread.delF( tinP , psttp2 ) ;
    etThread.delF( tinP , psttp1 ) ;
    }
        etThread.delF( tinP , psttp23 ) ;
        etThread.delF( tinP , psttp22 ) ;
        etThread.delF( tinP , psttp21 ) ;
        t22lag = t22 ;

        }
            etThread.diskMoveFileOrDirF( tinP , T(psttp1)+ts+tNew , psttc1 ) ;
            etThread.strokeF( tinP , T(psttp1)+ts+tNew+tcr ) ;
    
            tNew = tNewPart1 + sttDot + tNewIdi + sttDot + T(psttp23) ; 

            //storeMapF( tinP , etThread , poolMap , psttp22 , tNewIdi ) ;

            ;
                : tNewPart2 +            TF3(idMe,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES|flFORMAT_FOREIGN|flFORMAT_FILLzE,6)
                ? tNewPart2 + tFungNew + TF3(idMe,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES|flFORMAT_FOREIGN|flFORMAT_FILLzE,3)
            tNewIdi = bFung
        {
        if( tNewPart1.csF( tinP ) )

        else tNewPart1 = tNull ;
        }
            }
                idMe = idl51 ;

                if( etThread.strCompareF( tinP , t22 , t22lag ) ) idl51 ++ ;

                tNewPart2 += tSub1 ;
            {
            if( 1 == etThread.strIdF( tinP , t51 , psttp22 ) )

            tNewPart2 = tNewPart25 ;
            tNewPart1 = tNewPart15 ;
        {
        else if( 1 == etThread.strIdF( tinP , t5 , psttp21 ) )
        }
                 if( 1 == etThread.strIdF( tinP , t41 , psttp22 ) ) { tNewPart2 += tSub1 ; idMe = ++ idl41 ; }

            tNewPart2 = tNewPart24 ;
            tNewPart1 = tNewPart14 ;
        {
        else if( 1 == etThread.strIdF( tinP , t4 , psttp21 ) )
        }
            }
                idMe = ++ idl33 ;

                if( etThread.strCompareF( tinP , tFungOldLath , tFungOld ) ) { tFungOldLath = tFungOld ; tFungNew = TF3(++idFung,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES|flFORMAT_FOREIGN|flFORMAT_FILLzE,3) ; idl33 = 0 ; }
                bFung = 1 ;

                etThread.delF( tinP , psttFung ) ;
                TN( tFungOld , "" ) ; tFungOld = T(psttFung) ;
                etThread.strSubstringF( tinP , psttFung , idf2 , idl2 , psttp22 ) ; ___( psttFung ) ;
                ZE( strokeS* , psttFung ) ;
                countT idl2 = 4 ;
                countT idf2 = 1 ;

                tNewPart2 += tSub3 ;
            {
            else
            else if( 1 == etThread.strIdF( tinP , t32 , psttp22 ) ) { tNewPart2 += tSub2 ; idMe = ++ idl32 ; }
                 if( 1 == etThread.strIdF( tinP , t31 , psttp22 ) ) { tNewPart2 += tSub1 ; idMe = ++ idl31 ; }

            tNewPart2 = tNewPart23 ;
            tNewPart1 = tNewPart13 ;
        {
        else if( 1 == etThread.strIdF( tinP , t3 , psttp21 ) )
        }
                 if( 1 == etThread.strIdF( tinP , t21 , psttp22 ) ) { tNewPart2 += tSub1 ; idMe = ++ idl21 ; }

            tNewPart2 = tNewPart22 ;
            tNewPart1 = tNewPart12 ;
        {
        else if( 1 == etThread.strIdF( tinP , t2 , psttp21 ) )
        }
            else if( 1 == etThread.strIdF( tinP , t1d , psttp22 ) ) { tNewPart2 += tSubd ; idMe = ++ idl1d ; }
            else if( 1 == etThread.strIdF( tinP , t1c , psttp22 ) ) { tNewPart2 += tSubc ; idMe = ++ idl1c ; }
            else if( 1 == etThread.strIdF( tinP , t1b , psttp22 ) ) { tNewPart2 += tSubb ; idMe = ++ idl1b ; }
            else if( 1 == etThread.strIdF( tinP , t1a , psttp22 ) ) { tNewPart2 += tSuba ; idMe = ++ idl1a ; }
            else if( 1 == etThread.strIdF( tinP , t19 , psttp22 ) ) { tNewPart2 += tSub9 ; idMe = ++ idl19 ; }
            else if( 1 == etThread.strIdF( tinP , t18 , psttp22 ) ) { tNewPart2 += tSub8 ; idMe = ++ idl18 ; }
            else if( 1 == etThread.strIdF( tinP , t17 , psttp22 ) ) { tNewPart2 += tSub7 ; idMe = ++ idl17 ; }
            else if( 1 == etThread.strIdF( tinP , t16 , psttp22 ) ) { tNewPart2 += tSub6 ; idMe = ++ idl16 ; }
            else if( 1 == etThread.strIdF( tinP , t15 , psttp22 ) ) { tNewPart2 += tSub5 ; idMe = ++ idl15 ; }
            else if( 1 == etThread.strIdF( tinP , t14 , psttp22 ) ) { tNewPart2 += tSub4 ; idMe = ++ idl14 ; }
            else if( 1 == etThread.strIdF( tinP , t13 , psttp22 ) ) { tNewPart2 += tSub3 ; idMe = ++ idl13 ; }
            else if( 1 == etThread.strIdF( tinP , t12 , psttp22 ) ) { tNewPart2 += tSub2 ; idMe = ++ idl12 ; }
                 if( 1 == etThread.strIdF( tinP , t11 , psttp22 ) ) { tNewPart2 += tSub1 ; idMe = ++ idl11 ; }

            tNewPart2 = tNewPart21 ;
            tNewPart1 = tNewPart11 ;
        {
        if( 1 == etThread.strIdF( tinP , t1 , psttp21 ) )
        ZE( boolT , bFung ) ;
        ZE( countT , idMe ) ;

        tNewPart2 = tNewPart1 = tNull ;

        t22 = T(psttp22) ;
        etThread.strSubstringF( tinP , psttp23 , idf , countTC() , psttp2 ) ; ___( psttp23 ) ;
        etThread.strSubstringF( tinP , psttp22 , idf , sttq , sttDot , psttp2 ) ; ___( psttp22 ) ;
        etThread.strSubstringF( tinP , psttp21 , idf , sttq , sttDot , psttp2 ) ; ___( psttp21 ) ;
        ZE( strokeS* , psttp23 ) ;
        ZE( strokeS* , psttp22 ) ;
        ZE( strokeS* , psttp21 ) ;
        countT idf = 1 ;
    {
    etThread.strBisectF( tinP , psttp1 , psttp2 , psttc1 , 0 , - 1 ) ; ___( psttp1 ) ; ___( psttp2 ) ;
    ZE( strokeS* , psttp2 ) ;
    ZE( strokeS* , psttp1 ) ;
{
FORsTRINGSiN1( pstt1m )
etThread.boxMenuF( tinP , soul , T("///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/*") ) ; ___( pstt1m ) ;
//etThread.boxMenuF( tinP , soul , T("///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/5adam.4000050?.*") ) ; ___( pstt1m ) ;
ZE( strokeS* , pstt1m ) ;

TN( t22lag , "" ) ;
TN( t22 , "" ) ;
TN( tNew , "" ) ;
TN( tNewIdi , "" ) ;
ZE( countT , idFung ) ;
TN( tFungNew , "" ) ;
TN( tFungOldLath , "" ) ;

TN( tSubd  , "d" ) ;
TN( tSubc  , "c" ) ;
TN( tSubb  , "b" ) ;
TN( tSuba  , "a" ) ;
TN( tSub9  , "9" ) ;
TN( tSub8  , "8" ) ;
TN( tSub7  , "7" ) ;
TN( tSub6  , "6" ) ;
TN( tSub5  , "5" ) ;
TN( tSub4  , "4" ) ;
TN( tSub3  , "3" ) ;
TN( tSub2  , "2" ) ;
TN( tSub1  , "1" ) ;

TN( tNewPart2  , "" ) ;
TN( tNewPart25 , "5" ) ;
TN( tNewPart24 , "4" ) ;
TN( tNewPart23 , "3" ) ;
TN( tNewPart22 , "2" ) ;
TN( tNewPart21 , "1" ) ;

TN( tNewPart1  , "" ) ;
TN( tNewPart15 , "5adam" ) ;
TN( tNewPart14 , "4boot" ) ;
TN( tNewPart13 , "3func" ) ;
TN( tNewPart12 , "2glob" ) ;
TN( tNewPart11 , "1snip" ) ;

ZE( countT , idl51 ) ;
TN( t51 , "400" ) ;
TN( t5  , "5adam" ) ;
ZE( countT , idl41 ) ;
TN( t41 , "010" ) ;
TN( t4  , "4boot" ) ;
ZE( countT , idl33 ) ;
TN( t33 , "???" ) ; //UNIQUE 3 STROKES
ZE( countT , idl32 ) ;
TN( t32 , "0b0" ) ;
ZE( countT , idl31 ) ;
TN( t31 , "0d0" ) ;
TN( t3  , "3func" ) ;
ZE( countT , idl21 ) ;
TN( t21 , "0a0"  ) ;
TN( t2  , "2glob" ) ;
ZE( countT , idl1d ) ;
TN( t1d , "00a" ) ;
ZE( countT , idl1c ) ;
TN( t1c , "009" ) ;
ZE( countT , idl1b ) ;
TN( t1b , "008" ) ;
ZE( countT , idl1a ) ;
TN( t1a , "005f" ) ;
ZE( countT , idl19 ) ;
TN( t19 , "0050" ) ;
ZE( countT , idl18 ) ;
TN( t18 , "007" ) ;
ZE( countT , idl17 ) ;
TN( t17 , "004" ) ;
ZE( countT , idl16 ) ;
TN( t16 , "006" ) ;
ZE( countT , idl15 ) ;
TN( t15 , "003" ) ;
ZE( countT , idl14 ) ;
TN( t14 , "0022" ) ;
ZE( countT , idl13 ) ;
TN( t13 , "0021" ) ;
ZE( countT , idl12 ) ;
TN( t12 , "0020" ) ;
ZE( countT , idl11 ) ;
TN( t11 , "001" ) ;
TN( t1  , "1snip" ) ;

strokeS sttq( 0 , sc_IGNOREqUOTES ) ;
strokeS sttDot( '.' ) ;
TN( ts , "/" ) ;
TN( t0 , "0" ) ;
TN( tcr , "\r\n" ) ;
TN( tNull , "" ) ;

//poolC poolMap( tinP , TAG( TAGiDnULL ) , "idiMap" , flPOOLc_null , ifcIDsTATEsPACE_MULTIPLEaDAMS ) ;

TODO

}
    etThread.delF( tinP , pczOld ) ;
    THREADmODE2rESTORE
    }
        DELlIST( fieldEditParamOutC , pOut ) ;
        listC::fieldIF( tinP , pOut , hRec , pczField1 , _1_pushC( idiNew ) , LF ) ;
        ZE( fieldEditParamOutC* , pOut ) ;
        
        listC::openIF( tinP , hRec , pczRecord ) ;
        handleC hRec( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_LISTING ) ;

        listC::dictionaryReplaceOsTextIF( tinP , pczField1 ) ;
        countT pczField1[] = { (countT)"idiNew" , 0 } ;
        
        listC::dictionaryReplaceOsTextIF( tinP , pczRecord ) ;
        countT pczRecord[] = { LISTnAME_ROOTaPPLICATION , (countT)"idiMapOldToNew" , 0 } ;
        
        grabitC grabitx( tinP , TAG( TAGiDnULL ) ) ;
        puseC   puMap( tinP , poolP ) ;
    {
    THREADmODE2oN( flTHREADmODE2_UNLOCKpOOLiDENTITY /*| flTHREADmODE2_ALLOWcONSTRUCTIONoFlISTINGc | flTHREADmODE2_ALLOWdESTRUCTIONoFlISTINGc | flTHREADmODE2_ALLOWnEWdROPnOTiNaDAMtEMP*/ ) ;

    etherC::strStretchIF( tinP , pczOld , count8S( LISTnAME_ROOTaPPLICATION ) , idiOld ) ; ___( pczOld ) ;
    ZE( countT* , pczOld ) ;

    LOGrAW5F( "storeMapF [idiOld,idiNew]: " , idiOld , " " , idiNew , "\r\n" ) ;

    countT idiNew = etThread.strDigitsToSCountF( tinP , psttNewP , 0 , 1 ) ;
    countT idiOld = etThread.strDigitsToSCountF( tinP , psttOldP , 0 , 1 ) ;
{
voidT storeMapF( tinS& tinP , etherC& etThread , poolC& poolP , strokeS* psttOldP , strokeS* psttNewP )

/*1*/WAKEsHOW( "tool.migrate.dictionary.renumber.file.idi" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


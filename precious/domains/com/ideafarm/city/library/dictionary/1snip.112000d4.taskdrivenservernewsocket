
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


    {
    if( pso )                                                                                                               \
                                                                                                                            \
    }                                                                                                                       \
        __( bFail ) ;                                                                                                       \
        }                                                                                                                   \
            }                                                                                                               \
                }                                                                                                           \
                    bFail = 1 ;                                                                                             \
                    POOPR                                                                                                   \
                {                                                                                                           \
                if( POOP )                                                                                                  \
                DEL( psoDoomed ) ;                                                                                          \
                TELL( "TASKdRIVENsERVER: cleaning up after referring client to the newly created socket" )                  \
                __( bRefuse ) ;                                                                                             \
                sol2.acceptF( tinP , pso , idPortPeer , nnPeer , bRefuse ) ; ___( pso ) ;                                   \
                ZE( boolT , bRefuse ) ;                                                                                   \
                ZE( countT , idPortPeer ) ;                                                                               \
                nicNameC nnPeer ;                                                                                           \
                TELL( "TASKdRIVENsERVER: waiting for the client to connect to the referral port" )                          \
                psoDoomed->writeF( tinP , _sOut ) ;                                                                         \
                TELL( "TASKdRIVENsERVER: referring the client to a newly created listening socketC" )                       \
                pso = 0 ;                                                                                                   \
                socketC* psoDoomed = pso ;                                                                                  \
                sol2.listenF( tinP ) ;                                                                                      \
                _sOut << sol2.bindF( tinP ) ;                                                                               \
                socketC sol2( tinP , *tinP.pEtScratch , TAG( TAGiDnULL ) ) ;                                                \
                soulC _sOut( tinP , *tinP.pEtScratch , TAG( TAGiDnULL ) , flSOUL_null , ifcIDcMDsESSION_NEWsOCKETrEPLY ) ;  \
            {                                                                                                               \
            else                                                                                                            \
            }                                                                                                               \
                pso->writeF( tinP , _sErr ) ;                                                                               \
                TELL( "TASKdRIVENsERVER: writing a ifcIDcMDsESSION_ERROR soulC" )                                           \
                soulC _sErr( tinP , *tinP.pEtScratch , TAG( TAGiDnULL ) , flSOUL_null , ifcIDcMDsESSION_ERROR ) ;           \
                POOPR                                                                                                       \
            {                                                                                                               \
            if( bFail )                                                                                                     \
            bFail = POOP || _sIn.cFieldF( tinP ) != ifcIDcMDsESSION_NEWsOCKET ;                                             \
            pso->readF( tinP , _sIn ) ;                                                                                     \
            TELL( "TASKdRIVENsERVER: reading a soulC" )                                                                     \
            soulC _sIn( tinP , *tinP.pEtScratch , TAG( TAGiDnULL ) ) ;                                                      \
            SCOOPS                                                                                                          \
        {                                                                                                                   \
        ZE( boolT , bFail ) ;                                                                                             \
    {                                                                                                                       \
    IFsCRATCH                                                                                                               \
                                                                                                                            \
    TASKdRIVENsERVER( taskFP )                                                                                              \
                                                                                                                            \
#define TASKdRIVENsERVERnEWsOCKET(taskFP)                                                                                   \

/*1*//*TASKdRIVENsERVERnEWsOCKET*//*1*/
/**/
*/
 iow, pso not 0 is guaranteed for the code between me and DONEdRIVENsERVER
if pso is 0 after i have executed, the code between me and DONEdRIVENsERVER will not be executed
  in this case, i will block until my process has been fired, and pso will be 0 when i deblock
 this will also occur if i write the private idPort value aok but the client never connects to it
  in this case, the accept will fail and return immediately, *tinP.pEtScratch will be impotent, and pso will be 0
 this will occur if the write of the private idPort value to the client fails
note that pso can be 0 after i have executed
\<A HREF=\"5.0010143.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//



//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return pStack ? *pStack : stnu ;

    if( pBaton ) pBaton->ungrabF( tinP ) ;

    }
        (countT&)swMe = (countT)pStack ;
        __Z( pStack ) ;
        pStack = new( 0 , tinP , LF ) stackC( tinP , third , TAG( TAGiDnULL ) , flagsStack , idType , idGrabLayer , swMe.pLeverLathRefF( tinP ) , 0 , pCbF ) ; ___BITScT( pStack , 0xf30 ) ;
    {
    if( !pStack )
    stackC* pStack = (stackC*)(countT)swMe ;
    _IO_
    else if( osTidOwner != tinP.osTid && !bDying && !( F(flagsSwitch) & flSTACKc_ALLOWmULTIPLEuNSERIALIZED ) ) BLAMMO ;
    else if( !osTidOwner ) osTidOwner = tinP.osTid ;
    if( pBaton ) pBaton->grabF( tinP , TAG( TAGiDnULL ) ) ;

    }
        if( third ) return *this ;
    {
    IFbEcAREFUL    

    SCOOP
    TINSL
{
/*1*/switchStackC::operator stackC& ( voidT )/*1*/

/**/
*/
use me to create a flavor without adding any plates
take care to avoid using the reference that i return after freeing the associated flavor!
i will allocate such a stack if there isn't already wo
i evaluate to a reference to the stackC for the current lever value
\<A HREF=\"5.121007b.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


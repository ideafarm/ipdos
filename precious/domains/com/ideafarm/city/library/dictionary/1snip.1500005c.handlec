
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


//SIZEOF handleC AND linkedC MUST BE MULTIPLES OF sizeof( countT )

;
}
 FRIENDS_handleC
/**/

 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34015.handleC.cInstancesIF!||
 static countT cInstancesIF( voidT ) ;

 inline operator <<( handle1111C& hP ) { tinS& tinP = *pTinF() ; if( hP.osh == oshInvalid ) { ZE( countT* , pcb ) ; *pcb = 0xbbaabb33 ; } closeIfF() ; osPidOwner = dosGetInfoBlocksIdProcessIF( tinP ) ; osh = hP.osh ; cNote = hP.cNote ; c2AppNote.c1 = hP.c1 ; c2AppNote.c2 = hP.c2 ; }
 inline operator <<( handle0111C& hP ) { tinS& tinP = *pTinF() ;                                                                                                                                                       ; cNote = hP.cNote ; c2AppNote.c1 = hP.c1 ; c2AppNote.c2 = hP.c2 ; }
 inline operator <<( handle1011C& hP ) { tinS& tinP = *pTinF() ; if( hP.osh == oshInvalid ) { ZE( countT* , pcb ) ; *pcb = 0xbbaabb33 ; } closeIfF() ; osPidOwner = dosGetInfoBlocksIdProcessIF( tinP ) ; osh = hP.osh                    ; c2AppNote.c1 = hP.c1 ; c2AppNote.c2 = hP.c2 ; }
 inline operator <<( handle0011C& hP ) { tinS& tinP = *pTinF() ;                                                                                                                                                                          ; c2AppNote.c1 = hP.c1 ; c2AppNote.c2 = hP.c2 ; }
 inline operator <<( handle1110C& hP ) { tinS& tinP = *pTinF() ; if( hP.osh == oshInvalid ) { ZE( countT* , pcb ) ; *pcb = 0xbbaabb33 ; } closeIfF() ; osPidOwner = dosGetInfoBlocksIdProcessIF( tinP ) ; osh = hP.osh ; cNote = hP.cNote ; c2AppNote.c1 = hP.c1                        ; }
 inline operator <<( handle0110C& hP ) { tinS& tinP = *pTinF() ;                                                                                                                                                       ; cNote = hP.cNote ; c2AppNote.c1 = hP.c1                        ; }
 inline operator <<( handle1010C& hP ) { tinS& tinP = *pTinF() ; if( hP.osh == oshInvalid ) { ZE( countT* , pcb ) ; *pcb = 0xbbaabb33 ; } closeIfF() ; osPidOwner = dosGetInfoBlocksIdProcessIF( tinP ) ; osh = hP.osh                    ; c2AppNote.c1 = hP.c1                        ; }
 inline operator <<( handle0010C& hP ) { tinS& tinP = *pTinF() ;                                                                                                                                                                          ; c2AppNote.c1 = hP.c1                        ; }
 inline operator <<( handle1100C& hP ) { tinS& tinP = *pTinF() ; if( hP.osh == oshInvalid ) { ZE( countT* , pcb ) ; *pcb = 0xbbaabb33 ; } closeIfF() ; osPidOwner = dosGetInfoBlocksIdProcessIF( tinP ) ; osh = hP.osh ; cNote = hP.cNote                                               ; }
 inline operator <<( handle0100C& hP ) { tinS& tinP = *pTinF() ;                                                                                                                                                       ; cNote = hP.cNote                                               ; }
 inline operator <<( handle1000C& hP ) { tinS& tinP = *pTinF() ; if( hP.osh == oshInvalid ) { ZE( countT* , pcb ) ; *pcb = 0xbbaabb33 ; } closeIfF() ; osPidOwner = dosGetInfoBlocksIdProcessIF( tinP ) ; osh = hP.osh                                                                  ; }

 inline operator >>( handle1111C& hP ) { if( osh == oshInvalid ) { ZE( countT* , pcb ) ; *pcb = 0xbbaabb11 ; } hP.osh = osh ; hP.cNote = cNote ; hP.c1 = c2AppNote.c1 ; hP.c2 = c2AppNote.c2 ; resetF() ; }
 inline operator >>( handle0111C& hP ) { if( osh == oshInvalid ) { ZE( countT* , pcb ) ; *pcb = 0xbbaabb11 ; }                hP.cNote = cNote ; hP.c1 = c2AppNote.c1 ; hP.c2 = c2AppNote.c2 ; resetF() ; }
 inline operator >>( handle1011C& hP ) { if( osh == oshInvalid ) { ZE( countT* , pcb ) ; *pcb = 0xbbaabb11 ; } hP.osh = osh                    ; hP.c1 = c2AppNote.c1 ; hP.c2 = c2AppNote.c2 ; resetF() ; }
 inline operator >>( handle0011C& hP ) { if( osh == oshInvalid ) { ZE( countT* , pcb ) ; *pcb = 0xbbaabb11 ; }                                   hP.c1 = c2AppNote.c1 ; hP.c2 = c2AppNote.c2 ; resetF() ; }
 inline operator >>( handle1110C& hP ) { if( osh == oshInvalid ) { ZE( countT* , pcb ) ; *pcb = 0xbbaabb11 ; } hP.osh = osh ; hP.cNote = cNote ; hP.c1 = c2AppNote.c1                        ; resetF() ; }
 inline operator >>( handle0110C& hP ) { if( osh == oshInvalid ) { ZE( countT* , pcb ) ; *pcb = 0xbbaabb11 ; }                hP.cNote = cNote ; hP.c1 = c2AppNote.c1                        ; resetF() ; }
 inline operator >>( handle1010C& hP ) { if( osh == oshInvalid ) { ZE( countT* , pcb ) ; *pcb = 0xbbaabb11 ; } hP.osh = osh                    ; hP.c1 = c2AppNote.c1                        ; resetF() ; }
 inline operator >>( handle0010C& hP ) { if( osh == oshInvalid ) { ZE( countT* , pcb ) ; *pcb = 0xbbaabb11 ; }                                   hP.c1 = c2AppNote.c1                        ; resetF() ; }
 inline operator >>( handle1100C& hP ) { if( osh == oshInvalid ) { ZE( countT* , pcb ) ; *pcb = 0xbbaabb11 ; } hP.osh = osh ; hP.cNote = cNote                                               ; resetF() ; }
 inline operator >>( handle0100C& hP ) { if( osh == oshInvalid ) { ZE( countT* , pcb ) ; *pcb = 0xbbaabb11 ; }                hP.cNote = cNote                                               ; resetF() ; }
 inline operator >>( handle1000C& hP ) { if( osh == oshInvalid ) { ZE( countT* , pcb ) ; *pcb = 0xbbaabb11 ; } hP.osh = osh                                                                  ; resetF() ; }

 inline countT cNoteF( voidT ) const { return cNote ; }
 inline countT idTypeF( voidT ) const { return idType ; }
 inline operator       HANDLEaPPnOTEScOUNTcLASS&( voidT )       { return c2AppNote ; }
 inline operator const HANDLEaPPnOTEScOUNTcLASS&( voidT ) const { return c2AppNote ; }
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34004.handleC.resetF!||
 voidT resetF( voidT ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34011.handleC.operator_notnot!||
 boolT operator ~( voidT ) const ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34006.handleC.operator_not!||
 boolT operator !( voidT ) const ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400e.handleC.cNoteF!||
 countT& cNoteF( voidT ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400c.handleC.cloneF!||
 voidT cloneF( const handleC& oshP , const countT osPidOwnerToP , const handleC& hProcessToP , const handleC& hProcessFromP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400b.handleC.operator_shiftLeft!||
 voidT operator <<( handleC& oshP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400f.handleC.operator_assign!||
 voidT operator =( const countT cP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400a.handleC.operator_assign!||
 voidT operator =( const handleC& oshP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34005.handleC.closeIfF!||
 voidT closeIfF( voidT ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400d.handleC.operator_notEquals!||
 boolT operator !=( const handleC& oshP ) const ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34009.handleC.operator_equals!||
 boolT operator ==( const handleC& oshP ) const ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34008.handleC.osF!||
 voidT osF( const countT idTypeVerifyP , const countT oshP , const countT osPidOwnerP = 0 , const countT cNoteP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34007.handleC.osF!||
 countT osF( const countT idTypeVerifyP ) const ;
/*commands*/

 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34016.handleC.operator_shiftRight!||
 const baseSoilXxxxC& operator >>( soulC& slP ) const ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34014.handleC.operator_shiftRight!||
 baseSoilXxxxC& operator >>( soulC& slP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34013.handleC.operator_shiftLeft!||
 baseSoilXxxxC& operator <<( soulC& slP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34012.handleC.operator_call!||
 voidT operator ()( tinS& tinP , soulC& slP ) ;
/*soixlOld*/

 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34010.handleC.handleC!||
 handleC( const handleC& oshP , const osTextT* const postNameP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34003.handleC.handleC!||
 handleC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const countT idTypeP = 0 , const flagsT flagsP = flHANDLEc_null , const osTextT* const postNameP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34002.handleC.dt_handleC!||
 ~handleC( voidT ) ;
 NEWdELcLASSpROTOS
/* birth , death */

/**/

 public :

 HANDLEaPPnOTEScOUNTcLASS c2AppNote ; //NOT USED BY ANY FUNCTIONALITY RELATED TO OPENING OR CLOSING THE HANDLE; USED TO STORE INFORMATION ABOUT THE BACKING OBJECT THAT IS NEEDED TO USE THAT OBJECT; EXAMPLE: NUMBER OF ROWS IN A BITMAP OBJECT
 countT cNote ;
 countT osPidOwner ;
 countT osh ;
 countT oshInvalid ;
 const countT idType ; 
 const osTextT* const postName ;
 byteT pbzLinked[ sizeof( linkedC ) ] ;
{
/*1*/class _export handleC : public baseSoilXxxxC/*1*/

//CODE SYNC: 0050011 0030078 0030050 003009a: SIZEOF_handleC MUST BE MULTIPLE OF sizeof( countT )

/**/
*/
\<A HREF=\"5.1500005c.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


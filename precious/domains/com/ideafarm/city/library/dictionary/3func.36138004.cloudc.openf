
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    _OUT_

    bHandle.ungrabF( tinP ) ;

    }
        //ether.traceF( tinP , T("[tUrlCloudAgent]: ")+tUrlCloudAgent ) ;
        //ether.traceF( tinP , T("[tHost]: ")+tHost ) ;

        ether.delF( tinP , psttUrlCloudAgent ) ;
        ether.delF( tinP , psttHost ) ;

        tUrlCloudAgent = T(psttUrlCloudAgent) ;
        tHost          = T(psttHost) ;

        }
            ether.strSubstringF( tinP , psttUrlCloudAgent , idfShort , idlShort , tUrl ) ; ___( psttUrlCloudAgent ) ;
            ether.strSubstringF( tinP , psttHost          , idfHost  , idlHost  , tUrl ) ; ___( psttHost          ) ;
            ZE( countT , idlShort ) ;
            countT idlHost = idfShort - 1 ;
            idfHost ++ ;
        {
        if( idfHost && idfShort )
        ZE( strokeS* , psttUrlCloudAgent ) ;
        ZE( strokeS* , psttHost  ) ;

        countT idfShort = ether.strIdF( tinP , strokeS( '/' ) , tUrl , 3 ) ;
        countT idfHost  = ether.strIdF( tinP , strokeS( '/' ) , tUrl , 2 ) ;

        //ether.traceF( tinP , T("cloud opened [tUrl]: ")+tUrl ) ;

        ;
            : cloudInfo.tRackspacePublicUrl
            ? cloudInfo.tRackspaceInternalUrl
        textC& tUrl = F(flagsCt) & flCLOUDc_USEiNTERNALlAN

        cloudInfoS& cloudInfo = *(cloudInfoS*)hCloud.osF( ifcIDtYPEhANDLE_CLOUD ) ;
    {
    if( !POOP )

    ether.delF( tinP , postBody ) ;
    }
        wordF( tinP , openScratch , stPath , tIn ) ;
        stackC stPath( tinP , ether , TAG( TAGiDnULL ) , flSTACKc_DOnOTsERIALIZE , ifcSTACKtYPE_PTR_strokeS ) ;
        cloudOpenScratchS openScratch( tinP , idCloudP , psttBuildingP ) ;

        }
            }
                tIn = T(postJson) ;

                }
                    }
                        case '}' : { if( !( -- idLevel ) ) bNix = 1 ; break ; }
                        case ']' :

                        case '{' : {        ++ idLevel              ; break ; }
                        case '[' :
                    {
                    switch( *postc )

                    }
                        break ;
                        *postc = 0 ;
                    {
                    if( bNix )
                {
                for( osTextT* postc = postJson ; *postc ; postc ++ )
                ZE( boolT  , bNix ) ;
                ZE( countT , idLevel ) ;
            {
            if( postJson )

            if( postJsonSq && postJsonSq < postJson ) postJson = postJsonSq ;
            osTextT* postJson   = thirdC::c_strstrIF( tinP , postBody , "{" ) ;
            osTextT* postJsonSq = thirdC::c_strstrIF( tinP , postBody , "[" ) ;
        {
        TN( tIn , "" ) ; // WILL CONTAIN A SINGLE, TRIMMED JSON WORD
    {
    if( !POOP )

    //LOGrAW( "\r\n-------------------------------------------------------------------------------------\r\n" ) ;
    //LOGrAW( postBody ) ; //U::TO CRAFT
    //LOGrAW( "\r\nopenF [JSON postBody]:\r\n-------------------------------------------------------------------------------------\r\n" ) ;

    // **************************************************************************************************************************************************
    // **************************************************************************************************************************************************
    // **************************************************************************************************************************************************
    // **************************************************************************************************************************************************
    // ****                                                                                                                                          ****
    // **** SAMPLE JSON TEXT THAT I MUST PARSE (END)                                                                                                 ****
    // ****                                                                                                                                          ****
    // **************************************************************************************************************************************************
    // **************************************************************************************************************************************************
    // **************************************************************************************************************************************************
    // **************************************************************************************************************************************************
    // 
    // }
    //     }
    //         }
    //             }
    //                 "id":"921871"
    //                 ,
    //                 "name":"921871"
    //             {
    //             :
    //             "tenant"
    //             ,
    //             "id":"AAA_5-V7Na9UdhJVlmTwuP4K5fCwt0dm89MhEGj9cLeird2tDA21Zm91Ni97Jw-Q3NCEcBSSCLEJCuOejAPvlfQHAISTuyu570xXxkf5YPBeGXCO6vXKpMw9sFqzJV5SRRs6iO_-4MJ3mA"
    //             ,
    //             "RAX-AUTH:authenticatedBy":["APIKEY"]
    //             ,
    //             "expires":"2016-07-03T16:01:36.956Z"
    //         {
    //         :
    //         "token"
    //         ,
    //         }
    //             "id":"dd6192d72eb24966802a7199af266166"
    //             ,
    //             "name":"ipdos.01"
    //             ,
    //             ]
    //                 {"name":"object-store:admin","description":"Object Store Admin Role for Account User","id":"10000256"}
    //                 ,
    //                 {"name":"identity:default","description":"Default Role.","id":"2"}
    //                 ,
    //                 {"name":"object-store:default","tenantId":"MossoCloudFS_921871","description":"A Role that allows a user access to keystone Service methods","id":"5"}
    //                 ,
    //                 {"name":"compute:default","tenantId":"921871","description":"A Role that allows a user access to keystone Service methods","id":"6"}
    //             [
    //             :
    //             "roles"
    //             ,
    //             "RAX-AUTH:defaultRegion":"IAD"
    //         {
    //         :
    //         "user"
    //         ,
    //         ]
    //             }
    //                 "type":"rax:object-cdn"
    //                 ,
    //                 "name":"cloudFilesCDN"
    //                 ,
    //                 ]
    //                     {"tenantId":"MossoCloudFS_921871","publicURL":"https:\/\/cdn1.clouddrive.com\/v1\/MossoCloudFS_921871","region":"DFW"}
    //                     ,
    //                     {"tenantId":"MossoCloudFS_921871","publicURL":"https:\/\/cdn6.clouddrive.com\/v1\/MossoCloudFS_921871","region":"HKG"}
    //                     ,
    //                     {"tenantId":"MossoCloudFS_921871","publicURL":"https:\/\/cdn4.clouddrive.com\/v1\/MossoCloudFS_921871","region":"SYD"}
    //                     ,
    //                     {"tenantId":"MossoCloudFS_921871","publicURL":"https:\/\/cdn5.clouddrive.com\/v1\/MossoCloudFS_921871","region":"IAD"}
    //                 [
    //                 :
    //                 "endpoints"
    //             {
    //             ,
    //             }
    //                 "type":"object-store"
    //                 ,
    //                 "name":"cloudFiles"
    //                 ,
    //                 ]
    //                     {"tenantId":"MossoCloudFS_921871","publicURL":"https:\/\/storage101.dfw1.clouddrive.com\/v1\/MossoCloudFS_921871","internalURL":"https:\/\/snet-storage101.dfw1.clouddrive.com\/v1\/MossoCloudFS_921871","region":"DFW"}
    //                     ,
    //                     {"tenantId":"MossoCloudFS_921871","publicURL":"https:\/\/storage101.hkg1.clouddrive.com\/v1\/MossoCloudFS_921871","internalURL":"https:\/\/snet-storage101.hkg1.clouddrive.com\/v1\/MossoCloudFS_921871","region":"HKG"}
    //                     ,
    //                     {"tenantId":"MossoCloudFS_921871","publicURL":"https:\/\/storage101.syd2.clouddrive.com\/v1\/MossoCloudFS_921871","internalURL":"https:\/\/snet-storage101.syd2.clouddrive.com\/v1\/MossoCloudFS_921871","region":"SYD"}
    //                     ,
    //                     {"tenantId":"MossoCloudFS_921871","publicURL":"https:\/\/storage101.iad3.clouddrive.com\/v1\/MossoCloudFS_921871","internalURL":"https:\/\/snet-storage101.iad3.clouddrive.com\/v1\/MossoCloudFS_921871","region":"IAD"}
    //                 [
    //                 :
    //                 "endpoints"
    //             {
    //             ,
    //             }
    //                 "type":"rax:monitor"
    //                 ,
    //                 "name":"cloudMonitoring"
    //                 ,
    //                 ]
    //                     {"tenantId":"921871","publicURL":"https:\/\/monitoring.api.rackspacecloud.com\/v1.0\/921871"}
    //                 [
    //                 :
    //                 "endpoints"
    //             {
    //             ,
    //             }
    //                 "type":"rax:sites"
    //                 ,
    //                 "name":"cloudSites"
    //                 ,
    //                 ]
    //                     {"tenantId":"921871","publicURL":"https:\/\/sites.api.rackspacecloud.com\/v1.0\/921871","region":"DFW"}
    //                 [
    //                 :
    //                 "endpoints"
    //             {
    //             ,
    //             }
    //                 "type":"image"
    //                 ,
    //                 "name":"cloudImages"
    //                 ,
    //                 ]
    //                     {"tenantId":"921871","publicURL":"https:\/\/hkg.images.api.rackspacecloud.com\/v2","region":"HKG"}
    //                     ,
    //                     {"tenantId":"921871","publicURL":"https:\/\/syd.images.api.rackspacecloud.com\/v2","region":"SYD"}
    //                     ,
    //                     {"tenantId":"921871","publicURL":"https:\/\/dfw.images.api.rackspacecloud.com\/v2","region":"DFW"}
    //                     ,
    //                     {"tenantId":"921871","publicURL":"https:\/\/iad.images.api.rackspacecloud.com\/v2","region":"IAD"}
    //                 [
    //                 :
    //                 "endpoints"
    //             {
    //             ,
    //             }
    //                 "type":"rax:cloudmetrics"
    //                 ,
    //                 "name":"cloudMetrics"
    //                 ,
    //                 ]
    //                     {"tenantId":"921871","publicURL":"https:\/\/global.metrics.api.rackspacecloud.com\/v2.0\/921871","region":"IAD"}
    //                 [
    //                 :
    //                 "endpoints"
    //             {
    //             ,
    //             }
    //                 "type":"network"
    //                 ,
    //                 "name":"cloudNetworks"
    //                 ,
    //                 ]
    //                     {"tenantId":"921871","publicURL":"https:\/\/dfw.networks.api.rackspacecloud.com\/v2.0","region":"DFW"}
    //                     ,
    //                     {"tenantId":"921871","publicURL":"https:\/\/syd.networks.api.rackspacecloud.com\/v2.0","region":"SYD"}
    //                     ,
    //                     {"tenantId":"921871","publicURL":"https:\/\/iad.networks.api.rackspacecloud.com\/v2.0","region":"IAD"}
    //                     ,
    //                     {"tenantId":"921871","publicURL":"https:\/\/hkg.networks.api.rackspacecloud.com\/v2.0","region":"HKG"}
    //                 [
    //                 :
    //                 "endpoints"
    //             {
    //             ,
    //             }
    //                 "type":"rax:feeds"
    //                 ,
    //                 "name":"cloudFeeds"
    //                 ,
    //                 ]
    //                     {"tenantId":"921871","publicURL":"https:\/\/hkg.feeds.api.rackspacecloud.com\/921871","internalURL":"https:\/\/atom.prod.hkg1.us.ci.rackspace.net\/921871","region":"HKG"}
    //                     ,
    //                     {"tenantId":"921871","publicURL":"https:\/\/iad.feeds.api.rackspacecloud.com\/921871","internalURL":"https:\/\/atom.prod.iad3.us.ci.rackspace.net\/921871","region":"IAD"}
    //                     ,
    //                     {"tenantId":"921871","publicURL":"https:\/\/syd.feeds.api.rackspacecloud.com\/921871","internalURL":"https:\/\/atom.prod.syd2.us.ci.rackspace.net\/921871","region":"SYD"}
    //                     ,
    //                     {"tenantId":"921871","publicURL":"https:\/\/ord.feeds.api.rackspacecloud.com\/921871","internalURL":"https:\/\/atom.prod.ord1.us.ci.rackspace.net\/921871","region":"ORD"}
    //                     ,
    //                     {"tenantId":"921871","publicURL":"https:\/\/dfw.feeds.api.rackspacecloud.com\/921871","internalURL":"https:\/\/atom.prod.dfw1.us.ci.rackspace.net\/921871","region":"DFW"}
    //                 [
    //                 :
    //                 "endpoints"
    //             {
    //             ,
    //             }
    //                 "type":"orchestration"
    //                 ,
    //                 "name":"cloudOrchestration"
    //                 ,
    //                 ]
    //                     {"tenantId":"921871","publicURL":"https:\/\/hkg.orchestration.api.rackspacecloud.com\/v1\/921871","region":"HKG"}
    //                     ,
    //                     {"tenantId":"921871","publicURL":"https:\/\/syd.orchestration.api.rackspacecloud.com\/v1\/921871","region":"SYD"}
    //                     ,
    //                     {"tenantId":"921871","publicURL":"https:\/\/iad.orchestration.api.rackspacecloud.com\/v1\/921871","region":"IAD"}
    //                     ,
    //                     {"tenantId":"921871","publicURL":"https:\/\/dfw.orchestration.api.rackspacecloud.com\/v1\/921871","region":"DFW"}
    //                 [
    //                 :
    //                 "endpoints"
    //             {
    //             ,
    //             }
    //                 "type":"rax:queues"
    //                 ,
    //                 "name":"cloudQueues"
    //                 ,
    //                 ]
    //                     {"tenantId":"921871","publicURL":"https:\/\/hkg.queues.api.rackspacecloud.com\/v1\/921871","internalURL":"https:\/\/snet-hkg.queues.api.rackspacecloud.com\/v1\/921871","region":"HKG"}
    //                     ,
    //                     {"tenantId":"921871","publicURL":"https:\/\/iad.queues.api.rackspacecloud.com\/v1\/921871","internalURL":"https:\/\/snet-iad.queues.api.rackspacecloud.com\/v1\/921871","region":"IAD"}
    //                     ,
    //                     {"tenantId":"921871","publicURL":"https:\/\/dfw.queues.api.rackspacecloud.com\/v1\/921871","internalURL":"https:\/\/snet-dfw.queues.api.rackspacecloud.com\/v1\/921871","region":"DFW"}
    //                     ,
    //                     {"tenantId":"921871","publicURL":"https:\/\/syd.queues.api.rackspacecloud.com\/v1\/921871","internalURL":"https:\/\/snet-syd.queues.api.rackspacecloud.com\/v1\/921871","region":"SYD"}
    //                 [
    //                 :
    //                 "endpoints"
    //             {
    //             ,
    //             }
    //                 "type":"rax:bigdata"
    //                 ,
    //                 "name":"cloudBigData"
    //                 ,
    //                 ]
    //                     {"versionId":"1","tenantId":"921871","publicURL":"https:\/\/iad.bigdata.api.rackspacecloud.com\/v1.0\/921871","versionList":"https:\/\/iad.bigdata.api.rackspacecloud.com\/","versionInfo":"httpis:\/\/iad.bigdata.api.rackspacecloud.com\/v1.0","region":"IAD"}
    //                     ,
    //                     {"versionId":"2","tenantId":"921871","publicURL":"https:\/\/iad.bigdata.api.rackspacecloud.com\/v2\/921871","versionList":"https:\/\/iad.bigdata.api.rackspacecloud.com\/","versionInfo":"https:\/\/iad.bigdata.api.rackspacecloud.com\/v2","region":"IAD"}
    //                     ,
    //                     {"versionId":"1","tenantId":"921871","publicURL":"https:\/\/dfw.bigdata.api.rackspacecloud.com\/v1.0\/921871","versionList":"https:\/\/dfw.bigdata.api.rackspacecloud.com\/","versionInfo":"https:\/\/dfw.bigdata.api.rackspacecloud.com\/v1.0","region":"DFW"}
    //                     ,
    //                     {"versionId":"2","tenantId":"921871","publicURL":"https:\/\/dfw.bigdata.api.rackspacecloud.com\/v2\/921871","versionList":"https:\/\/dfw.bigdata.api.rackspacecloud.com\/","versionInfo":"https:\/\/dfw.bigdata.api.rackspacecloud.com\/v2","region":"DFW"}
    //                 [
    //                 :
    //                 "endpoints"
    //             {
    //             ,
    //             }
    //                 "type":"rax:dns"
    //                 ,
    //                 "name":"cloudDNS"
    //                 ,
    //                 ]
    //                     {"tenantId":"921871","publicURL":"https:\/\/dns.api.rackspacecloud.com\/v1.0\/921871"}
    //                 [
    //                 :
    //                 "endpoints"
    //             {
    //             ,
    //             }
    //                 "type":"identity"
    //                 ,
    //                 "name":"Cloud Auth Service"
    //                 ,
    //                 ]
    //                     {"tenantId":"921871","publicURL":"https:\/\/identity.api.rackspacecloud.com\/v2.0","region":"DFW"}
    //                 [
    //                 :
    //                 "endpoints"
    //             {
    //             ,
    //             }
    //                 "type":"rax:cdn"
    //                 ,
    //                 "name":"rackCDN"
    //                 ,
    //                 ]
    //                     {"tenantId":"921871","publicURL":"https:\/\/global.cdn.api.rackspacecloud.com\/v1.0\/921871","internalURL":"https:\/\/global.cdn.api.rackspacecloud.com\/v1.0\/921871","region":"DFW"}
    //                 [
    //                 :
    //                 "endpoints"
    //             {
    //             ,
    //             }
    //                 "type":"volume"
    //                 ,
    //                 "name":"cloudBlockStorage"
    //                 ,
    //                 ]
    //                     {"tenantId":"921871","publicURL":"https:\/\/iad.blockstorage.api.rackspacecloud.com\/v1\/921871","region":"IAD"}
    //                     ,
    //                     {"tenantId":"921871","publicURL":"https:\/\/dfw.blockstorage.api.rackspacecloud.com\/v1\/921871","region":"DFW"}
    //                     ,
    //                     {"tenantId":"921871","publicURL":"https:\/\/syd.blockstorage.api.rackspacecloud.com\/v1\/921871","region":"SYD"}
    //                     ,
    //                     {"tenantId":"921871","publicURL":"https:\/\/hkg.blockstorage.api.rackspacecloud.com\/v1\/921871","region":"HKG"}
    //                 [
    //                 :
    //                 "endpoints"
    //             {
    //             ,
    //             }
    //                 "type":"rax:database"
    //                 ,
    //                 "name":"cloudDatabases"
    //                 ,
    //                 ]
    //                     {"tenantId":"921871","publicURL":"https:\/\/iad.databases.api.rackspacecloud.com\/v1.0\/921871","region":"IAD"}
    //                     ,
    //                     {"tenantId":"921871","publicURL":"https:\/\/syd.databases.api.rackspacecloud.com\/v1.0\/921871","region":"SYD"}
    //                     ,
    //                     {"tenantId":"921871","publicURL":"https:\/\/dfw.databases.api.rackspacecloud.com\/v1.0\/921871","region":"DFW"}
    //                     ,
    //                     {"tenantId":"921871","publicURL":"https:\/\/hkg.databases.api.rackspacecloud.com\/v1.0\/921871","region":"HKG"}
    //                 [
    //                 :
    //                 "endpoints"
    //             {
    //             ,
    //             }
    //                 "type":"rax:load-balancer"
    //                 ,
    //                 "name":"cloudLoadBalancers"
    //                 ,
    //                 ]
    //                     {"tenantId":"921871","publicURL":"https:\/\/iad.loadbalancers.api.rackspacecloud.com\/v1.0\/921871","region":"IAD"}
    //                     ,
    //                     {"tenantId":"921871","publicURL":"https:\/\/syd.loadbalancers.api.rackspacecloud.com\/v1.0\/921871","region":"SYD"}
    //                     ,
    //                     {"tenantId":"921871","publicURL":"https:\/\/dfw.loadbalancers.api.rackspacecloud.com\/v1.0\/921871","region":"DFW"}
    //                     ,
    //                     {"tenantId":"921871","publicURL":"https:\/\/hkg.loadbalancers.api.rackspacecloud.com\/v1.0\/921871","region":"HKG"}
    //                 [
    //                 :
    //                 "endpoints"
    //             {
    //             ,
    //             }
    //                 "type":"compute"
    //                 ,
    //                 "name":"cloudServersOpenStack"
    //                 ,
    //                 ]
    //                     {"versionId":"2","tenantId":"921871","publicURL":"https:\/\/dfw.servers.api.rackspacecloud.com\/v2\/921871","versionList":"https:\/\/dfw.servers.api.rackspacecloud.com\/","versionInfo":"https:\/\/dfw.servers.api.rackspacecloud.com\/v2","region":"DFW"}
    //                     ,
    //                     {"versionId":"2","tenantId":"921871","publicURL":"https:\/\/syd.servers.api.rackspacecloud.com\/v2\/921871","versionList":"https:\/\/syd.servers.api.rackspacecloud.com\/","versionInfo":"https:\/\/syd.servers.api.rackspacecloud.com\/v2","region":"SYD"}
    //                     ,
    //                     {"versionId":"2","tenantId":"921871","publicURL":"https:\/\/hkg.servers.api.rackspacecloud.com\/v2\/921871","versionList":"https:\/\/hkg.servers.api.rackspacecloud.com\/","versionInfo":"https:\/\/hkg.servers.api.rackspacecloud.com\/v2","region":"HKG"}
    //                     ,
    //                     {"versionId":"2","tenantId":"921871","publicURL":"https:\/\/iad.servers.api.rackspacecloud.com\/v2\/921871","versionList":"https:\/\/iad.servers.api.rackspacecloud.com\/","versionInfo":"https:\/\/iad.servers.api.rackspacecloud.com\/v2","region":"IAD"}
    //                 [
    //                 :
    //                 "endpoints"
    //             {
    //             ,
    //             }
    //                 "type":"rax:backup"
    //                 ,
    //                 "name":"cloudBackup"
    //                 ,
    //                 ]
    //                     {"tenantId":"921871","publicURL":"https:\/\/iad.backup.api.rackspacecloud.com\/v1.0\/921871","region":"IAD"}
    //                     ,
    //                     {"tenantId":"921871","publicURL":"https:\/\/hkg.backup.api.rackspacecloud.com\/v1.0\/921871","region":"HKG"}
    //                     ,
    //                     {"tenantId":"921871","publicURL":"https:\/\/syd.backup.api.rackspacecloud.com\/v1.0\/921871","region":"SYD"}
    //                     ,
    //                     {"tenantId":"921871","publicURL":"https:\/\/dfw.backup.api.rackspacecloud.com\/v1.0\/921871","region":"DFW"}
    //                 [
    //                 :
    //                 "endpoints"
    //             {
    //             ,
    //             }
    //                 "type":"rax:autoscale"
    //                 ,
    //                 "name":"autoscale"
    //                 ,
    //                 ]
    //                     {"tenantId":"921871","publicURL":"https:\/\/dfw.autoscale.api.rackspacecloud.com\/v1.0\/921871","region":"DFW"}
    //                     ,
    //                     {"tenantId":"921871","publicURL":"https:\/\/hkg.autoscale.api.rackspacecloud.com\/v1.0\/921871","region":"HKG"}
    //                     ,
    //                     {"tenantId":"921871","publicURL":"https:\/\/iad.autoscale.api.rackspacecloud.com\/v1.0\/921871","region":"IAD"}
    //                     ,
    //                     {"tenantId":"921871","publicURL":"https:\/\/syd.autoscale.api.rackspacecloud.com\/v1.0\/921871","region":"SYD"}
    //                 [
    //                 :
    //                 "endpoints"
    //             {
    //         [
    //         :
    //         "serviceCatalog"
    //     {
    //     :
    //     "access"
    // {
    // 
    // **************************************************************************************************************************************************
    // **************************************************************************************************************************************************
    // **************************************************************************************************************************************************
    // **************************************************************************************************************************************************
    // ****                                                                                                                                          ****
    // **** WHAT FOLLOWS WAS OBTAINED BY LOGGING postBody AND THEN MANUALLY FORMATTING FOR READABILITY BY ADDING NEWLINES AND INDENTATION            ****
    // ****                                                                                                                                          ****
    // **** SAMPLE JSON TEXT THAT I MUST PARSE                                                                                                       ****
    // ****                                                                                                                                          ****
    // **************************************************************************************************************************************************
    // **************************************************************************************************************************************************
    // **************************************************************************************************************************************************
    // **************************************************************************************************************************************************

    // 
    //   IF PATH IS "access" / "serviceCatalog"                AND ENCOUNTER "}"            THEN CLEAR flCLOUDoPENsCRATCH_CLOUDfILES tMaybePublicUrl2 tMaybeInternalUrl2 AFTER CONDITIONALLY STORING tMaybePublicUrl2 tMaybeInternalUrl2 INTO tPublicURL tInternalURL
    // 
    //   valueF: IF PATH IS "access" / "serviceCatalog" / "name"       AND VALUE IS "cloudFiles"    THEN SET flCLOUDoPENsCRATCH_CLOUDfILES
    // 
    //   IF PATH IS "access" / "serviceCatalog" / "endpoints"  AND ENCOUNTER "}"            THEN CLEAR flCLOUDoPENsCRATCH_MYrEGION tMaybePublicUrl1 tMaybeInternalUrl1 AFTER CONDITIONALLY STORING tMaybePublicUrl1  tMaybeInternalUrl1 INTO tMaybePublicUrl2 tMaybeInternalUrl2
    // 
    //   valueF: IF PATH IS "access" / "serviceCatalog" / "endpoints" / "region" AND VALUE IS "IAD" THEN SET flCLOUDoPENsCRATCH_MYrEGION
    // 
    //   valueF: IF PATH IS "access" / "serviceCatalog" / "endpoints" / "internalURL"               THEN STORE VALUE INTO tMaybeInternalUrl1
    // 
    //   valueF: IF PATH IS "access" / "serviceCatalog" / "endpoints" / "publicURL"                 THEN STORE VALUE INTO tMaybePublicUrl1
    // 
    //  FOR OBTAINING publicURL
    // 
    // PARSING RULES

    }
        }
            }
                THREADmODE1rESTORE ;
                }
                    etPrime.osSleepF( tinP , TOCK ) ;
                    sleepC s( tinP , TAG( TAGiDnULL ) ) ;
                {
                THREADmODE1oN( flTHREADmODE1_ALLOWsTOPwHILEgRABBING ) ; // CALLER MIGHT HAVE GRABBED MY HANDLE TO PREVENT ACCESS WHILE MOMENTARILY CLOSED

                etRock.traceF( tinP , T("cloudC::openF: could not obtain authorization reply; will retry after 1 tock") ) ;
                POOPR
            {
            else
            if( !POOP ) break ;

            }
                }
                    if( !POOP ) { __Z( costBody == ss.readF( tinP , postBody , costBody ) ) ; }

                    __Z( postBody ) ;
                    ether.newF( tinP , LF , postBody , costBody ) ; ___( postBody ) ;
                {
                else
                }
                    }
                        }
                            }
                                }
                                   __( idFail ) ;

                                    LOGrAW( "\r\n\r\n---- end ------------------------------------\r\n" ) ;
                                    LOGrAW( postBody ) ;
                                    LOGrAW( "\r\ncloudC::openF: unexpected character received after receiving:\r\n\r\n" ) ;
                                    etRock.traceF( tinP , T("cloudC::openF: unexpected character received [idFail,ostWo]: ")+TF2(idFail,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" ")+TF2(ostWo,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ; 
                                {
                                if( idFail )

                                }
                                    }
                                        else if( ostWo != '\n'                  ) idFail = 6 ;
                                        else if( !ss.readF( tinP , &ostWo , 1 ) ) idFail = 5 ; // '\n'
                                        else if( ostWo != '\r'                  ) idFail = 4 ;
                                             if( !ss.readF( tinP , &ostWo , 1 ) ) idFail = 3 ; // '\r'
                                    {
                                    if( !POOP )

                                    }
                                        }
                                            costDo   -= costGot ;
                                            costBody += costGot ;
                                        {
                                        if( !POOP )

                                        __Z( costGot ) ;
                                        countT costGot = ss.readF( tinP , postBody + costBody , costDo ) ;
                                    {
                                    while( costDo && !POOP )
                                {
                                else
                                else if( ostWo != '\n'                  ) idFail = 2 ;
                                     if( !ss.readF( tinP , &ostWo , 1 ) ) idFail = 1 ; // '\n'
                                osTextT ostWo ;

                                ZE( countT , idFail ) ;
                            {
                            else
                            if( !costDo ) break ;

                            offl = - 1 ;
                            countT costDo = ether.strDigitsToSCountF( tinP , T(postLengthBuffer) , 0 , 1 ) ;
                            thirdC::c_strlwrIF( tinP , postLengthBuffer) ;
                            postLengthBuffer[ offl ] = 0 ;
                        {
                        if( postLengthBuffer[ offl ] == '\r' )
                        
                        if( !ss.readF( tinP , postLengthBuffer + offl , 1 ) ) { BLAMMO ; } ;
                    {
                    for( countT offl = 0 ; !POOP && offl < sizeof postLengthBuffer - 1 ; offl ++ )

                    osTextT  postLengthBuffer[ TUCK ] = { 0 } ;

                    __Z( postBody ) ;
                    ether.newF( tinP , LF , postBody , TOCK ) ; ___( postBody ) ; //CAPACITY LIMIT FOR BODY

                    __NZ( costBody ) ;
                {
                if( bChunked )
            {
            if( !POOP )

            __Z( costBody || bChunked ) ;
            }
                }
                    }
                        else if( !POOP ) offb = - 1 ;
                             if( !offb ) break ;

                        }
                            }
                                bChunked = !!ether.strIdF( tinP , tChunked , tLine ) ;
                            {
                            else if( 1 == ether.strIdF( tinP , tTransferEncoding , tLine ) )
                            }
                                ether.delF( tinP , psttw ) ;
                                costBody = ether.strDigitsToSCountF( tinP , psttw , 0xa , 1 ) ;
                                ether.strSubstringF( tinP , psttw , idf , idl , psttLine ) ; ___( psttw ) ;
                                ZE( strokeS* , psttw ) ;

                                ZE( countT , idl ) ;
                                while( psttLine[ CSpREFIX - 1 + idf ] == sttBlank ) idf ++ ;
                                countT idf = tContentLength.csF( tinP ) + 1 ;
                                strokeS* psttLine = tLine ;
                            {
                            if( 1 == ether.strIdF( tinP , tContentLength , tLine ) )
                            strokeS sttBlank( ' ' ) ;
                        {
                        if( !POOP )

                        }
                            __NZ( ostLF != '\n' ) ;
                            __Z( ss.readF( tinP , &ostLF , 1 ) ) ;
                            osTextT ostLF ;

                            }
                                //ether.traceF( tinP , T("header line: ")+T(postLineBuffer) ) ;
                                postLineBuffer[ offb ] = 0 ;
                            {
                            if( offb )
                        {
                        if( !POOP )

                        }
                            }
                                __( !ether.strIdF( tinP , tReplyCode200_OK , tLine ) ) ;

                                }
                                    break ;
                                    etherC::etRockIF( tinP ).traceF( tinP , T("authorization refused") ) ;
                                {
                                if( POOP )
                                __NZ( 1 == ether.strIdF( tinP , tReplyCode401_Unauthorized , tLine ) ) ;
                            {
                            if( !POOP )

                            __Z( offb ) ;
                            bWoth = 0 ;
                        {
                        if( bWoth )

                        TN( tLine , postLineBuffer ) ;
                        postLineBuffer[ offb ] = 0 ;
                    {
                    if( !POOP && postLineBuffer[ offb ] == '\r' )         // IF I HAVE A LINE OF HEADER

                    __Z( ss.readF( tinP , postLineBuffer + offb , 1 ) ) ;
                {
                for( offb = 0 ; !POOP && offb < sizeof postLineBuffer ; offb ++ )
                TN( tChunked , "chunked" ) ;
                TN( tTransferEncoding , "Transfer-Encoding:" ) ;
                TN( tContentLength , "Content-Length:" ) ;
                boolT bWoth = 1 ;
                ZE( countT , offb ) ;
                osTextT postLineBuffer[ TOCK ] ;
            {
            if( !POOP )
            ZE( boolT  , bChunked ) ;
            ZE( countT , costBody ) ;

            ss.writeF( tinP , (osTextT*)tSay , (countT)tSay.csF( tinP ) ) ;
            //etRock.traceF( tinP , T("cloudC::openF / perhaps connected to ")+tRackApiIdentity ) ;
            ss.connectF( tinP , 443 , socketC::nicNameIF( tinP , ether , tRackApiIdentity ) ) ;
            //etRock.traceF( tinP , T("cloudC::openF / connecting        to ")+tRackApiIdentity ) ;

            socketC ss( tinP , etScratch , TAG( TAGiDnULL ) , ifcSOCKETtYPE_STREAM , flSOCKETc_CRYPTfOREIGNsSL ) ;
        {
        while( !POOP && !etPrime )

        etherC& etScratch = *tinP.pEtScratch ;

        SCOOPS
    {
    IFsCRATCH
    ZE( osTextT* , postBody ) ;

    etherC& etRock  = etherC::etRockIF( tinP ) ;
    etherC& etPrime = etherC::etPrimeIF( tinP ) ;

    tSay += TF4(tSayBody.csF(tinP),flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FOREIGN|flFORMAT_NObASE,0,0xa)+T("\r\n\r\n")+tSayBody ;
    ) ;

        "Content-Length: "
        "Content-Type: application/json\r\n"
        "Accept: application/json\r\n"
        "Host: identity.api.rackspacecloud.com\r\n"
        "User-Agent: IPDOS (tm)\r\n"
        "POST /v2.0/tokens HTTP/1.1\r\n"

    TN( tSay , 
    TN( tRackApiIdentity , "identity.api.rackspacecloud.com" ) ;

    ) ;

        "}\r\n"
        "   }\r\n"
        "      }\r\n"
        "\"\r\n"

    tSayBody += T(

    tSayBody += T(psttKeyP) ;

    ) ;

        "         \"apiKey\": \""
        "\",\r\n"

    tSayBody += T(

    tSayBody += T(psttUserP) ;

    ) ;

        "         \"username\": \""
        "      {\r\n"
        "      \"RAX-KSKEY:apiKeyCredentials\":\r\n"
        "   {\r\n"
        "   \"auth\":\r\n"
        "{\r\n"

    TN( tSayBody ,

    }
        hCloud.osF( ifcIDtYPEhANDLE_CLOUD , (countT)pch ) ;
        cloudInfoS* pch = new( 0 , tinP , LF ) cloudInfoS( tinP , ifcIDcLOUD_RACKSPACE ) ; ___( pch ) ;
    {
    bHandle.grabF( tinP , TAG( TAGiDnULL ) ) ;

    _INoLD_

    }
        if( POOP ) return ;
        __Z( psttKeyP ) ;
        __Z( psttUserP ) ;
        __Z( psttBuildingP ) ;
        __Z( idCloudP ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL

    SCOOP
{
/*1*/voidT cloudC::openF( tinS& tinP , const countT idCloudP , const strokeS* const psttBuildingP , const strokeS* const psttUserP , const strokeS* const psttKeyP )/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


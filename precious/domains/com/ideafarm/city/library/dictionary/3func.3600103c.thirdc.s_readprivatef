
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return offo ;
    _OUT_

    if( time1P || time2P ) { __( s_unregisterTimeoutF( tinP , handleP ) ) ; }

    }
            c_zReverseByteOrderF( tinP , pbP , offo ) ;
        if( !POOP && offo && F(flagsP) & flSOCKETcrEAD_CONVERTbYTEoRDER )
    
        if( !fhok && !fTinyNibbles && cbToDo ) __( cbToDo ) ;
    {

    PRO = cbToDo ; PROSHO ;
    }
        }
            if( !cbNew || fJustOne ) break ;

            cbToDo             -= cbNew ;
            offo               += cbNew ;
            tinP.odoSockCbRead += cbNew ;

            }
                }
                    break ;
                    cbNew = thirdC::openSsl_readIF( tinP , pbP + offo , cbBite , handleP ) ;
                {
                case ifcIDmODEsOCKETS_ENCRYPTED :
                }
                    break ;
                    if( !POOP ) cbNew = tinP.brcRaw ;
                    BOSpOOP
                    BOSS( WHATsir , BOSsOCKETcODE2 , recv( handleP.osF( ifcIDtYPEhANDLE_SOCKET ) , pbP + offo , cbBite , flagsTcpP ) )
                {
                case ifcIDmODEsOCKETS_NOTeNCRYPTED :
            {
            switch( idModeP )
            ZE( sCountT , cbNew ) ;

            #endif

                BOSnOvALUE( WHATgbo , WSASetLastError( 0 ) )

            #if defined( __NT__ )
            ;
                    : cbToDo
                    ? 8192
                : cbToDo > 8192
                ? 1
            countT cbBite = fTinyNibbles
            PRO = cbToDo ; PROSHO ;
            ++ s ;
        {
        while( !*this && cbToDo )
        sleepC s( tinP , TAG( TAGiDnULL ) , 1 ) ;
    {
    ZE( countT , offo ) ;

    boolT fTinyNibbles = !!( F(flagsP) & flSOCKETcrEAD_WObYTEpERbITE   ) ;
    boolT fJustOne     = !!( F(flagsP) & flSOCKETcrEAD_JUSToNEmOUTHFUL ) ;
    boolT fhok         = !!( F(flagsP) & flSOCKETcrEAD_STILLhUNGRYiSoK ) ;
    PRO = cbToDo ; PROSHO ;
    countT cbToDo = cbP ;
    if( pEtherContainsMe ) pEtherContainsMe->chokeAttackerF( tinP , handleP , cbP ) ;

    if( time1P || time2P ) s_registerTimeoutF( tinP , handleP , time1P , time2P ) ;

    _INoLD_

    }
        if( POOP ) return 0 ;
        IFsIMULATEoFFLINEpOOP
        FV( flSOCKETcrEAD , flagsP ) ;
        __Z( cbP ) ;
        __Z( pbP ) ;
        __Z( handleP ) ;
        if( POOP ) return 0 ;
    {
    IFbEcAREFUL    
    SCOOP
{
/*1*/countT thirdC::s_readPrivateF( tinS& tinP , byteT* const pbP , const countT cbP , handleC& handleP , const flagsT flagsTcpP , const flagsT flagsP , const countT time1P , const sCountT time2P , const countT idModeP )/*1*/

/**/
*/
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/1snip.001000f.flSOCKETc!||
 flagsP
  see documentation for the flags argument of the recv function
 flagsTcpP
  must not be 0
 cbP
  must not be 0
 pbP
  must not be 0
 handleP
arguments
flagsTcpP is passed unmodified to the tcpip recv call
see the flSOCKETc symbolic constants before specifying flagsP
it is illegal to refer to this symbol in the definition of an adam
\<A HREF=\"5.1020041.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$s_readPrivateF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


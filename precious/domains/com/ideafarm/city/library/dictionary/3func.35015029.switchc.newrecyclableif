
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return pSwNew ;

    }
        case ifcIDtYPElEVER_PTR_plateC  : { pSwNew = new( 0 , tinP , LF ) switchC( tinP , etherC::etRockIF( tinP ) , TAG( TAGiDnULL ) , flagsP ,  *(plateC**)c_pLeverP , (countT*)c_pcpLeverLathRefP , cbDataP ) ; break ; }
        case ifcIDtYPElEVER_PTR_strokeS : { pSwNew = new( 0 , tinP , LF ) switchC( tinP , etherC::etRockIF( tinP ) , TAG( TAGiDnULL ) , flagsP , *(strokeS**)c_pLeverP , (countT*)c_pcpLeverLathRefP , cbDataP ) ; break ; }
        case ifcIDtYPElEVER_countT      : { pSwNew = new( 0 , tinP , LF ) switchC( tinP , etherC::etRockIF( tinP ) , TAG( TAGiDnULL ) , flagsP ,   *(countT*)c_pLeverP , (countT*)c_pcpLeverLathRefP , cbDataP ) ; break ; }
    {
    switch( idTypeLeverP )
    ZE( switchC* , pSwNew ) ;

    __( F(flagsP) & flSTACKc_DOnOTsERIALIZE && !( F(flagsP) & flSTACKc_ALLOWmULTIPLEuNSERIALIZED ) ) ; //WILL BE DESTROYED BY THREAD main AND MIGHT BE DISPENSED TO ANOTHER THREAD, SO WON'T DO THIS

    _IO_
{
/*1*/switchC* switchC::newRecyclableIF( tinS& tinP , const countT idTypeLeverP , const flagsT flagsP , const countT c_pLeverP , const countT c_pcpLeverLathRefP , const countT cbDataP )/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


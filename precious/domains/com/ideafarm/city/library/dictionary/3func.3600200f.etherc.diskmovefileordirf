
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    __( cFail ) ;

    }
        }
            delF( tinP , pstt1Old ) ;
            delF( tinP , pstt1New ) ;
            _IO_
        {
        if( !bStringOfStringsNew )

        }
            }
                if( POOP ) break ;      // IMPOSSIBLE IF *this IS etScratch

                }
                    }
                        }
                            }
                                cFail ++ ;
                                POOPRqUIET
                                _IO_
                            {
                            if( POOP )

                            }
                                delF( tinP , postOld ) ;
                                delF( tinP , postNew ) ;

                                }
                                    third.dosMoveF( tinP , osFileNameC( tinP , *this , postNew ) , osFileNameC( tinP , *this , postOld ) , cTriesP ) ;
                                    if( postOld[ costOld - 1 ] == '/' ) postOld[ costOld - 1 ] = 0 ;
                                    if( postNew[ costNew - 1 ] == '/' ) postNew[ costNew - 1 ] = 0 ;
                                {
                                if( !POOP )

                                __Z( costOld ) ;
                                __Z( postOld ) ;
                                __Z( costNew ) ;
                                __Z( postNew ) ;
                                delF( tinP , pstto ) ;
                                delF( tinP , psttn ) ;
                                countT costOld = strMakeF( tinP , LF , postOld , pstto ) ; ___( postOld ) ;
                                countT costNew = strMakeF( tinP , LF , postNew , psttn ) ; ___( postNew ) ;
                                }
                                    if( bDir && bMade ) diskFileOrDirDeleteF( tinP , psttc1 ) ;
                                    boolT bMade = diskMakeDirIfNeededF( tinP , psttn ) ;                            //U::20171120@1252: THIS IS A NONREENTRANT KLUDGE MADE NECESSARY BY THE RECENT CHANGE TO diskMakeDirIfNeededF.  THAT FUNCTION SHOULD BE CHANGED BACK TO ALWAYS IGNORE THE LEAF DIRECTORY, WHICH WILL REQUIRE REGRESSION TESTING TO LEARN WHY I MADE THE CHANGE
                                    boolT bDir = psttc1[ CSpREFIX - 1 + psttc1->idAdam ].idAdam == '/' ;
                                    _IO_
                                {
                                diskMapFileNameF( tinP , pstto , psttc2 ) ; ___( pstto ) ;
                                diskMapFileNameF( tinP , psttn , psttc1 ) ; ___( psttn ) ;
                                ZE( strokeS* , pstto ) ;
                                ZE( strokeS* , psttn ) ;
                                ZE( osTextT* , postOld ) ;
                                ZE( osTextT* , postNew ) ;
                                _IO_
                            {
                            //CS:CODEsYNC: DUPLICATE CODE 3600200f 3600200f

                            SCOOPS
                            _IO_
                        {
                        IFsCRATCH
                        _IO_
                    {
                    else
                    }
                        if( POOP ) break ;

                        }
                            delF( tinP , postOld ) ;
                            delF( tinP , postNew ) ;
                            third.dosMoveF( tinP , osFileNameC( tinP , *this , postNew ) , osFileNameC( tinP , *this , postOld ) , cTriesP ) ;

                            if( postOld[ costOld - 1 ] == '/' ) postOld[ costOld - 1 ] = 0 ;
                            if( postNew[ costNew - 1 ] == '/' ) postNew[ costNew - 1 ] = 0 ;

                            delF( tinP , pstto ) ;
                            delF( tinP , psttn ) ;
                            countT costOld = strMakeF( tinP , LF , postOld , pstto ) ; ___( postOld ) ;
                            countT costNew = strMakeF( tinP , LF , postNew , psttn ) ; ___( postNew ) ;
                            }
                                if( bDir && bMade ) diskFileOrDirDeleteF( tinP , psttc1 ) ;
                                boolT bMade = diskMakeDirIfNeededF( tinP , psttn ) ;                            //U::20171120@1252: THIS IS A NONREENTRANT KLUDGE MADE NECESSARY BY THE RECENT CHANGE TO diskMakeDirIfNeededF.  THAT FUNCTION SHOULD BE CHANGED BACK TO ALWAYS IGNORE THE LEAF DIRECTORY, WHICH WILL REQUIRE REGRESSION TESTING TO LEARN WHY I MADE THE CHANGE
                                boolT bDir = psttc1[ CSpREFIX - 1 + psttc1->idAdam ].idAdam == '/' ;
                                _IO_
                            {
                            diskMapFileNameF( tinP , pstto , psttc2 ) ; ___( pstto ) ;
                            diskMapFileNameF( tinP , psttn , psttc1 ) ; ___( psttn ) ;
                            ZE( strokeS* , pstto ) ;
                            ZE( strokeS* , psttn ) ;
                            ZE( osTextT* , postOld ) ;
                            ZE( osTextT* , postNew ) ;
                            _IO_
                        {
                        //CS:CODEsYNC: DUPLICATE CODE 3600200f 3600200f
                        _IO_
                    {
                    if( this != tinP.pEtScratch )

                    if( cSkip -- ) continue ;
                    _IO_
                {
                FORsTRINGSiN2( pstt1Old )
                countT cSkip = idNew - 1 ;

                idNew ++ ;
                _IO_
            {
            FORsTRINGSiN1( pstt1New )
            ZE( countT , idNew ) ;
            _IO_
        {
        if( !POOP )

        __( cStringsNew - cStringsOld ) ;
        { COUNTsTRINGSiN( cStringsOld , pstt1Old ) ; }
        { COUNTsTRINGSiN( cStringsNew , pstt1New ) ; }
        ZE( countT , cStringsOld ) ;
        ZE( countT , cStringsNew ) ;

        }
            pstt1Old = (strokeS*)psttOldP ;
            pstt1New = (strokeS*)psttNewP ;
            _IO_
        {
        else
        }
            strFuseSeparateF( tinP , pstt1Old , psttOldP ) ; ___( pstt1Old ) ;
            strFuseSeparateF( tinP , pstt1New , psttNewP ) ; ___( pstt1New ) ;
            _IO_
        {
        if( !bStringOfStringsNew )
        ZE( strokeS* , pstt1Old ) ;
        ZE( strokeS* , pstt1New ) ;
        _IO_
    {
    if( !POOP )
    ZE( countT , cFail ) ;

    __( bStringOfStringsNew - bStringOfStringsOld ) ;
    boolT bStringOfStringsOld = ISsTRINGoFsTRINGS( psttOldP ) ;
    boolT bStringOfStringsNew = ISsTRINGoFsTRINGS( psttNewP ) ;

    _IO_

    }
        if( POOP ) return ;
        __Z( psttNewP ) ;
        __Z( psttOldP ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL
    SCOOP
{
/**//*1*/voidT etherC::diskMoveFileOrDirF( tinS& tinP , const strokeS* const psttNewP , const strokeS* const psttOldP , const countT cTriesP )/*1*/
*/
   example: T("///ideafarm/ephemeral/tmpold/old")
  file name
 psttOldP
    this example -would- work, however, on Linux
    psttNewP: T("///d/new")
    psttOldP: T("///c" "/old")
   here is an example that would -not- work (on os/2 and on windows) because two devices (c : and d:) are involved
  must be on the same device as psttOldP
   example: T("///ideafarm/ephemeral/tmpnew/new")
  file name
 psttNewP
arguments
   else i will return immediately upon impotence
   if so, then i will try all listed file names
  impotence behavior depends upon whether i am *tinP.pEtScratch
   the result is as if the caller called me repeatedly
  may also be a string of strings
 if wo is a list, then both must be lists, and both lists must contain the same number of strings
the string arguments can be lists
  \<A HREF=\"5.6210104.1.1.0.html\"\>6210104:  WAKEsHOW( "example.simplest.func.1030013.etherC.diskMoveFileOrDirF" )\</A\>
 simplest
examples
\<A HREF=\"5.1030013.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$diskMoveFileOrDirF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//



//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    }
        _OUT_
    
        tinP.pAdamGlobal5->frPaper.grab.ungrabF( tinP ) ;
    
        }
            ether( tinP , pStkKey ) ;
            }
                *pStk_pSadam_P << (countT)&(countT&)swSadam ;
    
                cLever = *(countT*)( pbKey + CBtABsORTkEY - sizeof( countT ) ) ; //CODEsYNCH: 00300cb 1440013 1440014
                *pStkKey >> pbTo ;
                byteT* pbTo = pbKey ;
                byteT pbKey[ CBtABsORTkEY ] ;
            {
            while( *pStkKey )
        
            }
                }
                    pStkKey->sinkF( tinP , countTC() , (byteT*)&features.fc.idTabClass , flSTACKsINK_UNIQUE , subtractBlobs_sKeyF ) ;
    
                    featuresS& features = *(featuresS*)&(const featuresS&)sad ;
                    sadamC& sad = *(sadamC*)&(countT&)swSadam ;
                    cLever = swSadam.leverF( tinP , idf ) ;
                {
                for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                countT cFlavors = swSadam.cFlavorsF( tinP ) ;
            {
            ether( tinP , pStkKey  , TAG( TAGiDnULL ) , flSTACKc_BLOB|flSTACKc_DOnOTsERIALIZE|flSTACKc_ALLOWmULTIPLEuNSERIALIZED , CBtABsORTkEY ) ;
            ZE( stackC* , pStkKey ) ;
        {
        if( pStk_pSadam_P )
    
        }
            ether( tinP , pStk_pSadam_P , TAG( TAGiDnULL ) , flags ) ;
            if( F(flagsP) & flGETsADAMsTATES_FIFO ) flags |= flSTACKc_FIFO ;
            flagsT flags = flSTACKc_DOnOTsERIALIZE|flSTACKc_ALLOWmULTIPLEuNSERIALIZED ;
        {
    
        tinP.pAdamGlobal5->frPaper.grab.grabF( tinP , TAG( TAGiDnULL ) ) ;
    
        _INoLD_
    
        }
            if( POOP ) return ;
            __NZ( pStk_pSadam_P ) ;
            if( POOP ) return ;
        {
        IFbEcAREFUL
    {
    if( c_this )
    countT c_this = (countT)this ; //U::EDIT CODE TO REMOVE THE NEED FOR THIS (DESTROY WINDOW EARLIER OR PURGE paperOldC BEFORE DT *this
{
/*1*/voidT sadamsC::getF( tinS& tinP , stackC*& pStk_pSadam_P , const flagsT flagsP )/*1*/

/**/
*/
  caller must return this object to the recycler
  must be 0
 pStk_pSadam_P
 ether
 tinP
arguments
caller must ungrab these instances
i return a list of sadamC zombie pointers, all of which are grabbed
/*


//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//



//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    _OUT_

    __NZ( bPermanentFailure ) ;

    }
        }
            break ;

            }
                continue ;
                etPrime.osSleepF( tinP , TOCK << 4 ) ;
                sleepC s( tinP , TAG( TAGiDnULL ) ) ;

                etherC::etRockIF( tinP ).traceF( tinP , T("deleteRemoteFileF / unexpected reply (other than \"no content\" or \"not found\") ; will retry after napping 01 tock") ) ;
                etherC::etRockIF( tinP ).traceF( tinP , tHear ) ;
                POOPR
            {
            if( POOP )
            __( !ether.strIdF( tinP , tReplyCode204_NoContent , tHear ) && !ether.strIdF( tinP , tReplyCode404_NotFound , tHear ) ) ;

            }
                break ;
                etherC::etRockIF( tinP ).traceF( tinP , T("authorization refused") ) ;
                bPermanentFailure = 1 ;
                POOPR
            {
            if( POOP )
            __NZ( 1 == ether.strIdF( tinP , tReplyCode401_Unauthorized , tHear ) ) ;

            }
                }
                    break ;
                    etherC::etRockIF( tinP ).traceF( tinP , T("deleteRemoteFileF / connect , write, or read failed ; not forgiven") ) ;
                    bPermanentFailure = 1 ;
                {
                else
                }
                    continue ;
                    etPrime.osSleepF( tinP , TOCK << 4 ) ;
                    sleepC s( tinP , TAG( TAGiDnULL ) ) ;

                    etherC::etRockIF( tinP ).traceF( tinP , T("deleteRemoteFileF / connect , write, or read failed ; forgiven ; will retry after napping 01 tock.  (")+TF2(cForgive,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" remain)") ) ;
                {
                if( cForgive -- )

                POOPR
            {
            if( POOP )

            TN( tHear , postHear ) ;

            costHear = ss.readF( tinP , postHear , sizeof postHear , flSOCKETcrEAD_STILLhUNGRYiSoK ) ;
            thirdC::c_memsetIF(  tinP , postHear , sizeof postHear ) ;

            ss.writeF( tinP , (osTextT*)tSay , (countT)tSay.csF( tinP ) ) ;
            ss.connectF( tinP , 443 , socketC::nicNameIF( tinP , etScratch , tHost ) ) ;
            socketC ss( tinP , etScratch , TAG( TAGiDnULL ) , ifcSOCKETtYPE_STREAM , flSOCKETc_CRYPTfOREIGNsSL ) ;
        {
        while( !etPrime && !POOP )
        countT cForgive = 0x2 ;
        etherC& etScratch = *tinP.pEtScratch ;
        etherC& etPrime   = etherC::etPrimeIF( tinP ) ;
        ZE( countT , costHear ) ;
        char postHear[ TOCK ] ; 

        SCOOPS
    {
    IFsCRATCH
    ZE( boolT , bPermanentFailure ) ;

    //ether.traceF( tinP , T("the DELETE utterance has been appended to the log") ) ;
    //LOGrAW( tSay ) ;

    }
        ether.delF( tinP , psttShortUrlEncoded ) ;
        }
            bHandle.ungrabF( tinP ) ;
            tSay = T("DELETE ")+tUrlCloudAgent+T("/")+T(psttCloudContainerP)+T("/")+T(psttShortUrlEncoded)+T(" HTTP/1.1\r\nHost: ")+tHost+T("\r\nX-Auth-Token: ")+cloudInfo.tRackspaceAccessToken+T("\r\n\r\n") ;
            cloudInfoS& cloudInfo = *(cloudInfoS*)hCloud.osF( ifcIDtYPEhANDLE_CLOUD ) ;
            bHandle.grabF( tinP , TAG( TAGiDnULL ) ) ;
        {

        //  
        // X-Auth-Token: f064c46a782c444cb4ba4b6434288f7c
        // Host: storage.clouddrive.com
        // DELETE /v1/MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880123/archive/shortEncodedName HTTP/1.1
        // 
        // EXAMPLE

        ether.strToUrlF( tinP , psttShortUrlEncoded , psttShortP ) ; ___( psttShortUrlEncoded ) ;
        ZE( strokeS* , psttShortUrlEncoded ) ;
    {
    TN( tSay , "" ) ;

    _INoLD_

    }
        if( POOP ) return ;
        __Z( psttShortP ) ;
        __Z( psttCloudContainerP ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL

    SCOOP
{
/*1*/voidT cloudC::deleteRemoteFileF( tinS& tinP , const strokeS* const psttCloudContainerP , const strokeS* const psttShortP )/*1*/

/**/
*/
/*


//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


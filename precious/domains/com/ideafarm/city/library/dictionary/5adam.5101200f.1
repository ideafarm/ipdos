
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//

                            
REST

etherC::loafIF( tinP ) ;


TODO

( tmWorkF )
}
    }
        etThread.delF( tinP , pNicName ) ;
        }
            }
                }
                    }
                        }
                            etThread.traceF( tinP , T("reply received") ) ;
                        {
                        else
                        }
                            etThread.traceF( tinP , T("error: could not read reply") ) ;
                            POOPR
                        {
                        if( POOP )

                        }
                            sGet.readF( tinP , postIn + ( offi ++ ) , 1 ) ;
                        {
                        while( !POOP && offi < sizeof postIn - 1 )
                        ZE( countT , offi ) ;
                        etThread.traceF( tinP , T("reading reply") ) ;

                        thirdC::c_memsetIF( tinP , postIn , sizeof postIn ) ;
                        osTextT postIn[ TUCK << 4 ] ;
                    {
                    else
                    }
                        etThread.traceF( tinP , T("error: could not write request") ) ;
                        POOPR
                    {
                    if( POOP )

                    etThread.traceF( tinP , T("wrote   request ")+tIdCycle ) ;
                    sGet.writeF( tinP , (osTextT*)tRequest ) ;
                    etThread.traceF( tinP , T("writing request ")+tIdCycle ) ;

                    etThread.osTimeNowF( tinP , timeA1 , timeA2 ) ;
                    ZE( sCountT , timeA2 ) ;
                    ZE( countT  , timeA1 ) ;

                    TN( tRequest , "" ) ; tRequest = T("GET / HTTP/1.1\r\nHost: ideafarm.com\r\n\r\n") ;

                    //etThread.traceF( tinP , T("[idpMeBound,idpMe,nnMe]:    ")+TF2(idpMeBound,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(idpMe,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+T(nnMe) ) ;
                {
                else
                }
                    etThread.traceF( tinP , T("error: could not get my connection endpoint name") ) ;
                    POOPR
                {
                if( POOP )

                sGet.myNameF( tinP , idpMe , nnMe ) ;
                nicNameC nnMe ;
                ZE( countT , idpMe ) ;
            {
            else
            }
                etThread.traceF( tinP , T("error: could not connect") ) ;
                POOPR
            {
            if( POOP )

            sGet.connectF( tinP , 0x50 , pNicName[ 0 ] , 1 ) ;
            etThread.traceF( tinP , T("connecting") ) ;
            socketC sGet( tinP , *tinP.pEtScratch , TAG( TAGiDnULL ) , 0 , flSOCKETc_null , 0 , countTC( SOCKETtIMEOUTdEFAULTlAN ) , countTC( SOCKETtIMEOUTdEFAULTlAN ) , countTC( SOCKETtIMEOUTdEFAULTlAN ) ) ;
        {
        else
        }
            etThread.traceF( tinP , T("error: could not obtain nicName array") ) ;
            POOPR ;
        {
        if( POOP )

        __Z( cNicName ) ;
        __Z( pNicName ) ;
        socketC::nicNameIF( tinP , *tinP.pEtScratch , pNicName , cNicName , T("factory6.ideafarm.com") ) ; ___( pNicName ) ;
        ZE( nicNameC* , pNicName ) ;
        ZE( countT , cNicName ) ;

        SCOOPS
    {
    IFsCRATCH
{
if( pTaskP )
( tmWorkF )

/*1*/WAKEsHOWtEXT( "scr" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//


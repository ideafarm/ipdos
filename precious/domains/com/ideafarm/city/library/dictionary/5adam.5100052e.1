
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


//VISIBLE

REST

}
    else        etThread.osThreadF( tinP , countTC() , tmServeF , 0 , flTHREADlAUNCH_null , 0 , (countT)pso ) ;
    if( ether ) { DEL( pso ) ; }

    sock.acceptF( tinP , pso , idPortPeer , nnPeer , countTC() ) ; ___( pso ) ;
    ZE( countT , idPortPeer ) ;
    nicNameC nnPeer ;
    ZE( socketC* , pso ) ;
{
while( !ether )

sock.listenF( tinP ) ;
etThread.strokeF( tinP , T("listening on port ")+TF1(idp)+T("\r\n") ) ;
countT idp = sock.bindF( tinP , 0xab52/*RANDOM*/ ) ;
socketC sock( tinP , ether , TAG( TAGiDnULL ) ) ;

TODO

DONE( tmServeF )
}
    etThread.strokeF( tinP , T("-") ) ;
    DEL( pso ) ;
    }
        pso->writeF( tinP , soulOut ) ;
        soulC soulOut( tinP , TAG( TAGiDnULL ) ) ;

        etThread.strokeF( tinP , T("value received over secure socket: ")+TF1(value)+T("\r\n") ) ;
        soulIn >> value ;
        ZE( countT , value ) ;
    
        pso->readF( tinP , soulIn ) ;
        soulC soulIn( tinP , TAG( TAGiDnULL ) ) ;
    {
    if( pso )
    
    etThread.strokeF( tinP , T("+") ) ;
    socketC* pso = (socketC*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 )
TASK( tmServeF )

/*1*/WAKEhIDE( "example.other.func.1070028.socketC.writeF" )/*1*/
/**/
*/
hire me on home 1 and then hire 535 on home 2
i, together with 5350104, demonstrate highly secure socket communication using pills
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


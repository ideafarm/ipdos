
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//




}
    LOGrAW( ostoSay ) ;

    OStEXTAK( ostoSay , "\r\n\r\ntls trace (end)\r\n" ) ;

    }
        OStEXTC(  ostoSay ,  idReasonBlammo          , 0 ) ;
        OStEXTAK( ostoSay , "\r\n\r\nidReasonBlammo :    " ) ;
    {
    if( idReasonBlammo )

    }
        }
            pbc = pbTls + offNextObject ;
            }
                break ;

                OStEXTC(  ostoSay , th.offTopEntry + sizeof( countT ) + cbEntry , 0 ) ;
                OStEXTAK( ostoSay , "\r\n\r\noffEnd         :    " ) ;

                if( pbc - pbTls != th.offTopEntry ) { idReasonBlammo = 5 ; }
                if( cTlsVerify  != cTls           ) { idReasonBlammo = BM_HIGH | cTlsVerify ; }
            {
            if( !offNextObject )

            OStEXTA(  ostoSay , postzGroup  ) ;
            OStEXTAK( ostoSay , "\r\ngroup          :    " ) ;
            OStEXTA(  ostoSay , postzName  ) ;
            OStEXTAK( ostoSay , "\r\nname           :    " ) ;
            OStEXTC(  ostoSay ,  costaInGroup          , 0 ) ;
            OStEXTAK( ostoSay , "\r\ncostaInGroup   :    " ) ;
            OStEXTC(  ostoSay ,  costaName             , 0 ) ;
            OStEXTAK( ostoSay , "\r\ncostaName      :    " ) ;
            OStEXTC(  ostoSay ,  offNextInGroup        , 0 ) ;
            OStEXTAK( ostoSay , "\r\noffNextInGroup :    " ) ;
            OStEXTC(  ostoSay ,  offNextObject         , 0 ) ;
            OStEXTAK( ostoSay , "\r\noffNextObject  :    " ) ;
            OStEXTC(  ostoSay ,  offElder              , 0 ) ;
            OStEXTAK( ostoSay , "\r\noffElder       :    " ) ;
            OStEXTC(  ostoSay ,  cRef                  , 0 ) ;
            OStEXTAK( ostoSay , "\r\ncRef           :    " ) ;
            OStEXTC(  ostoSay ,  idiFile               , 0 ) ;
            OStEXTAK( ostoSay , "\r\nidiFile        :    " ) ;
            OStEXTC(  ostoSay ,  idLine                , 0 ) ;
            OStEXTAK( ostoSay , "\r\nidLine         :    " ) ;
            OStEXTC(  ostoSay ,  cbEntry               , 0 ) ;
            OStEXTAK( ostoSay , "\r\n\r\ncbEntry        :    " ) ;

            const  osTextT* postzGroup = postzName + costaName ;
            const  osTextT* postzName  = (osTextT*)&( (countT*)pbc )[ TLSeNTRYoFF_endNotUsed               ] ;
            countT costaInGroup        =            ( (countT*)pbc )[ TLSeNTRYoFF_costaInGroup             ] ;
            countT costaName           =            ( (countT*)pbc )[ TLSeNTRYoFF_costaName                ] ;
            countT offNextInGroup      =            ( (countT*)pbc )[ TLSeNTRYoFF_offNextInGroup           ] ;
            countT offNextObject       =            ( (countT*)pbc )[ TLSeNTRYoFF_offNextObject            ] ;
            countT offElder            =            ( (countT*)pbc )[ TLSeNTRYoFF_offElder                 ] ;
            countT cRef                =            ( (countT*)pbc )[ TLSeNTRYoFF_cRef                     ] ;
            countT idiFile             =            ( (countT*)pbc )[ TLSeNTRYoFF_idiFile                  ] ;
            countT idLine              =            ( (countT*)pbc )[ TLSeNTRYoFF_idLine                   ] ;
            countT cbEntry             =            ( (countT*)pbc )[ TLSeNTRYoFF_cbEntry                  ] ;

            cTlsVerify ++ ;
        {
        while( pbc && pbc < pbe )
        byteT* pbe = pbTls + cbTls ;
        byteT* pbc = pbTls + sizeof th ;
        ZE( countT , cTlsVerify ) ;
    {
    else
    }
        if( th.offTopEntry ) { idReasonBlammo = 3 ; }
    {
    if( !cTls )

    ZE( countT , idReasonBlammo ) ;

    OStEXTC(  ostoSay ,  cTls , 0 ) ;
    OStEXTAK( ostoSay , "tls trace\r\n\r\ncTls           :    " ) ;
    OStEXT(   ostoSay , TUCK * TUCK ) ;      // "TUCK FOR EA LINE, FOR A TUCK OF ENTRIES

    th.traceF( *this ) ;

    tlsHeaderS& th = *(tlsHeaderS*)pbTls ;
{
/*1*/voidT tinS::tlsTraceF( voidT )/*1*/


/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//


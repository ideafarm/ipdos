
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    _OUT_
    DELzOMBIE( pHtmlRoot ) ;
    writeHtmlFilesF( tinP , *this , bOneFileP , psttLikeLocalP , psttLikeP , psttTitleP , psttOldCopyrightP , pHtmlRoot , cSons , cOpenTriesP ) ;

    __( STOP ) ;
    }
        delF( tinP , psttl ) ;
        idColLag = idCol ;

        }
            delF( tinP , psttName ) ;
            cSons ++ ;
            newSonF( tinP , *this , pHtmlF( tinP , *this , psttName , pHtmlRoot ) , psttl , pHtmlRoot ) ;

            }
                }
                    delF( tinP , psttSN ) ;
                    strFuseF( tinP , psttName , T(psttSN) ) ; ___( psttName ) ;
                    if( idGen > 1 ) { strFuseF( tinP , psttName , T(".") ) ; ___( psttName ) ; }
                    strFromF( tinP , psttSN , pcLast[ idGen ] ) ; ___( psttSN ) ;
                {
                else
                if( idGen == idCol ) ++ pcLast[ idGen ] ;
                ZE( strokeS* , psttSN ) ;
            {
            for( countT idGen = 1 ; !POOP && idGen <= idCol ; idGen ++ )
            strMakeF( tinP , psttName , T("") , idCol * 8 + idCol - 1 ) ; ___( psttName ) ;
            ZE( strokeS* , psttName ) ;
        {
        if( !POOP )

        }
            delF( tinP , psttd ) ;
            strSubstringF( tinP , psttl , idf , idl , psttd ) ; ___( psttl ) ;
            ZE( countT , idl ) ;
            countT idf = 2 ;
            strokeS* psttd = psttl ; psttl = 0 ;
        {
        if( psttl && psttl[ CSpREFIX ] == sttDot ) // IF THE WOTH NONBLANK IS A DOT, THEN I ASSUME THAT THAT DOT IS TO BE SUPPRESSED
        strTrimF( tinP , psttl , 0 , T(TbLACKnEWlINE) ) ; ___( psttl ) ;

        if( idCol < idColLag ) for( countT id = idCol + 1 ; id <= IDcOLmAX ; id ++ ) pcLast[ id ] = 0 ;
        __( idCol > IDcOLmAX ) ;
        if( 1 != strIdAnyF( tinP , idCol , sttqCol , white , psttl ) ) idCol = 1 ;
        strokeS sttqCol( (countT)0 , sc_IGNOREqUOTES ) ;
        countT idCol = 1 ;
        //ifcSayIF( T("boxPutHtmlF/ktLine: \"")+T(psttl)+T("\"") , flSAY_APPEND | flSAY_LOG ) ;
        //IF GET "sin: indented too much" IN LOG, ENABLE THE FOLLOWING LINE
        strSubstringF( tinP , psttl , idf , sttq , crlf , psttKnowledgeTreeP ) ; ___( psttl ) ;
        ZE( strokeS* , psttl ) ;
    {
    while( !STOP && !POOP && idf )
    //ifcSayIF( T("boxPutHtmlF/\"about to process each line of the kt\"") , flSAY_APPEND | flSAY_LOG ) ;
    TN( tLog , "///d/ideafarm.log.html" ) ;
    ZE( countT , idLine ) ;
    ZE( countT , cSons ) ;
    __Z( pHtmlRoot ) ;
    __Z( pHtmlRoot ) ;
    pHtmlRoot = new( 0 , tinP , LF ) htmlS( tinP , *this , pHtmlRoot ) ; ___( pHtmlRoot ) ;
    ZE( htmlS*   , pHtmlRoot ) ;
    ZE( boolT    , fPrevious ) ;
    strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
    countT idf = 1 ;
    strokeS sttDot( '.' ) ;
    TN( white , " " ) ;
    TN( crlf , "\r\n" ) ;
    memSetF( tinP , (byteT*)pcLast , sizeof pcLast ) ;
    countT pcLast[ 1 + IDcOLmAX ] ;
    ZE( countT , idColLag ) ;
    _INoLD_

    }
        if( POOP ) return ;
        __Z( psttKnowledgeTreeP ) ;
        __Z( psttLikeP ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL

    // psttLikeP:          "www.ideafarm.com///ideafarm/ephemeral/backed.up.never/gen/html/index"
    // psttKnowledgeTreeP: "a\r\nb\r\n ba\r\n bb\r\n  bba\r\n  bbb\r\n bc\r\n  bca\r\n  bcb\r\nc\r\nd"
    // EXAMPLE PARAMETER VALUES:
    SCOOP
{
/*1*/voidT etherC::boxPutHtmlF( tinS& tinP , const boolT bOneFileP , const strokeS* const psttLikeLocalP , const strokeS* const psttLikeP , const strokeS* const psttTitleP , const strokeS* const psttOldCopyrightP , const strokeS* const psttKnowledgeTreeP , countT cOpenTriesP )/*1*/

}
    else                    pL->pR = 0 ;
    else if( !pL )          { if( pD ) pD->pU = 0 ; }
    if( this == pHtmlRoot ) pHtmlRoot = 0 ;

    if( pR ) { DELzOMBIE( pR ) ; }
    if( pU ) { DELzOMBIE( pU ) ; }

    else if( pL )    { __NZ( pD ) ; }
    if( !pL && !pD ) { __( this != pHtmlRoot ) ; }
    ether.delF( tinP , psttName  ) ;
    ether.delF( tinP , postIdea ) ;
    TINSL
{
htmlS::~htmlS( voidT )

}
    _OUT_
    if( !pHtmlRoot ) pHtmlRoot = this ;
    _INoLD_
{
postIdea( 0 )
psttName( 0 ) ,
pD( 0 ) ,
pU( 0 ) ,
pL( 0 ) ,
pR( 0 ) ,
pHtmlRoot( pHtmlRootP ) ,
ether( ether ) ,
htmlS::htmlS( tinS& tinP , etherC& ether , htmlS*& pHtmlRootP ) :

#define IDcOLmAX 0x400
// STACK: USES 0x1000 BYTES

/**/
*/
  if not 0 then will try cTriesP times
  if 0 then will retry forever when writing each file
 cOpenTriesP
  example: T("(c) IdeaFarm " "(tm) City")
 psttOldCopyrightP
  titles for all other output files are taken from idea stack lines
  this is only used for one of the output files
  example: T("IdeaFarm " "(tm) City Knowledge Tree")
  title for the root html file
 psttTitleP
  example: T("a\r\nb\r\n ba\r\n bb\r\n bc\r\nc")
  input string
 psttKnowledgeTreeP
  example: T("www.ideafarm.com///ideafarm/ephemeral/domains/my.domain/html/fooey")
  pattern for the output file names
 psttLikeP
arguments
 one html file for each idea stack is constructed
constructs a set of html files
  \<A HREF=\"5.8810104.1.1.0.html\"\>8810104:  WAKEsHOW( "example.simplest.func.10300b5.etherC.boxPutHtmlF" )\</A\>
 simplest
examples
\<A HREF=\"5.10300b5.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$boxPutHtmlF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//



//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    _OUT_

    }
        pccName ++ ;
        if( !( *pccName & BM_HIGH ) ) *pccName = dictionaryQueryFromTextIF( tinP , (osTextT*)*pccName ) ;
    {
    while( *pccName )
    countT* pccName = pczNameP ;

    _INoLD_

    }
        if( POOP ) return ;
        __( tinP.monitor.cGrabbed && !( F(tinP.flagsThreadMode2) & flTHREADmODE2_ALLOWdICTIONARYwHILEgRABBING ) ) ; // TO PREVENT DEADLOCKING, A THREAD MAY NOT BEGIN A WALK IN THE LIST TREE WHILE IT POSESSES A listingC ; THIS PROHIBITION IS MORE THAN NECESSARY BUT IS SIMPLE TO ENFORCE ; THE NECESSARY CONDITION IS TO PREVENT "BACKWARD" WALKING ; cGrabbed COUNTS ANY grabitC GRAB, NOT JUST GRABS OF listingC INSTANCES
        if( POOP ) return ;
        __Z( pczNameP ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL
{
/*1*/voidT listC::dictionaryReplaceOsTextIF( tinS& tinP , countT* const pczNameP )/*1*/

/**/
*/
 such a value is replaced with the associated id value, which always has the BM_HIGH bit set
 if the input value does not have the BM_HIGH bit set, it is assumed to be a zombie pointer to a null terminated osTextT string
 the string is added to the dictionary if it is not already there
i replace each osTextT* value in pczNameP with the id values of that string in the dictionary
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//



//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


//VISIBLE

REST
etThread.osProcessIdPhaseAdamF( tinP , ifcIDpHASEhANDOFFoLD_SHUTTINGdOWN ) ;

HEAReNTER( ether )
etThread.strokeF( tinP , T("press the enter key") ) ;

etThread.delF( tinP , pstt1m ) ;
etThread.delF( tinP , pstt1c ) ;

etThread.delF( tinP , pstt1InUse ) ;

}
    }
        etThread.strokeF( tinP , T(" \"")+T(psttc1)+T("\"\r\n") ) ;
    {
    FORsTRINGSiN1( pstt1InUse )
    etThread.strokeF( tinP , T("the following files could not be refreshed, probably because they are being used:\r\n\r\n") ) ;
{
else
else if( !pstt1InUse->idAdam ) etThread.strokeF( tinP , T("ok\r\n") ) ;
if( !pstt1InUse ) ;

sDone.waitF( tinP ) ;
etThread.etherFireImpersonateMonitorIF( tinP ) ;
etThread.delF( tinP , psttDots ) ;
etThread.diskFileRefreshF( tinP , pstt1InUse , pstt1c , pstt1m , T(psttDots)+T("//box.server.adam/") ) ; ___( pstt1InUse ) ;
ZE( strokeS* , pstt1InUse ) ;

etThread.strReplaceF( tinP , psttDots , 0 , T(",") , T(".") ) ; ___( psttDots ) ;
etThread.strFromIdPortNicNameF( tinP , psttDots ) ;
ZE( strokeS* , psttDots ) ;

etThread.osSleepF( tinP , TUCK * 64 ) ;
sReady.waitF( tinP ) ;
{ ZE( countT , tnu ) ; etThread.osThreadF( tinP , tnu , tmBoxServerF , &sDone , flTHREADlAUNCH_null , 0 , (countT)&sReady ) ; }
signC sDone(  tinP , TAG( TAGiDnULL ) ) ;
signC sReady(  tinP , TAG( TAGiDnULL ) ) ;

etThread.strFuseSeparateF( tinP , pstt1c , tCopy4 , 0 , 0 , 0 , 0 , /*U::SOUL?*/ 0x10000 ) ; ___( pstt1c ) ;
etThread.strFuseSeparateF( tinP , pstt1c , tCopy3 , 0 , 0 , 0 , 0 , /*U::SOUL?*/ 0x10000 ) ; ___( pstt1c ) ;
etThread.strFuseSeparateF( tinP , pstt1c , tCopy2 , 0 , 0 , 0 , 0 , /*U::SOUL?*/ 0x10000 ) ; ___( pstt1c ) ;
etThread.strFuseSeparateF( tinP , pstt1c , tCopy1 , 0 , 0 , 0 , 0 , /*U::SOUL?*/ 0x10000 ) ; ___( pstt1c ) ;
ZE( strokeS* , pstt1c ) ;

etThread.strFuseSeparateF( tinP , pstt1m , tMaster4 , 0 , 0 , 0 , 0 , /*U::SOUL?*/ 0x10000 ) ; ___( pstt1m ) ;
etThread.strFuseSeparateF( tinP , pstt1m , tMaster3 , 0 , 0 , 0 , 0 , /*U::SOUL?*/ 0x10000 ) ; ___( pstt1m ) ;
etThread.strFuseSeparateF( tinP , pstt1m , tMaster2 , 0 , 0 , 0 , 0 , /*U::SOUL?*/ 0x10000 ) ; ___( pstt1m ) ;
etThread.strFuseSeparateF( tinP , pstt1m , tMaster1 , 0 , 0 , 0 , 0 , /*U::SOUL?*/ 0x10000 ) ; ___( pstt1m ) ;
ZE( strokeS* , pstt1m ) ;

etThread.fileTimestampsF( tinP , tMasterLike ) ;
etThread.boxPutF( tinP , tMaster4 , "ghij" ) ;
etThread.boxPutF( tinP , tMaster3 , "def"  ) ;
etThread.boxPutF( tinP , tMaster2 , "bc"   ) ;
etThread.boxPutF( tinP , tMaster1 , "a"    ) ;

TN( tCopy4      , "///ideafarm/ephemeral/tmp/7210104/copy/file4"   ) ;
TN( tCopy3      , "///ideafarm/ephemeral/tmp/7210104/copy/file3"   ) ;
TN( tCopy2      , "///ideafarm/ephemeral/tmp/7210104/copy/file2"   ) ;
TN( tCopy1      , "///ideafarm/ephemeral/tmp/7210104/copy/file1"   ) ;

TN( tMaster4    , "///ideafarm/ephemeral/tmp/7210104/master/file4" ) ;
TN( tMaster3    , "///ideafarm/ephemeral/tmp/7210104/master/file3" ) ;
TN( tMaster2    , "///ideafarm/ephemeral/tmp/7210104/master/file2" ) ;
TN( tMaster1    , "///ideafarm/ephemeral/tmp/7210104/master/file1" ) ;
TN( tMasterLike , "///ideafarm/ephemeral/tmp/7210104/master/*"     ) ;

etThread.flagsMode |= flTHIRDmODE_TESTaUTOdOsLEEPS ;

TODO

DONE( tmBoxServerF )
}
    etThread.boxServerF( tinP , 0 , 1 ) ;
    ++ sReady ;
    signC& sReady = *(signC*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 )
TASK( tmBoxServerF )

/*1*/WAKEhIDE( "example.simplest.func.10300bd.etherC.boxServerF" )/*1*/
/**/
*/
 for example: etThread.diskFileRefreshF( tinP , pstt1InUse , pstt1c , pstt1m , T("209.24.233.22//box.server.adam/") ) ;
in such a setup, the ip address of the server computer would be specified in the diskFileRefreshF code line
client computers elsewhere on the internet would use diskFileRefreshF to refresh their local copies of the master files
the master files would be kept on this server computer
one instance of this server class would be hired on a single "server" computer
normally the code in tmBoxServerF would be in the definition of a separate "server" adam class
then i ask myself to refresh my "local copy" of each of those master files
first, i create some "master" files
\<A HREF=\"5.2810104.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


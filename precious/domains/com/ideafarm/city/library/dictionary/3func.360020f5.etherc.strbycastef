
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    delF( tinP , pstta ) ;
    strByCasteF( tinP , pstt1P , pstta , pczIdCasteIncludeP , pczIdCasteExcludeP , csttExtraP ) ; ___( pstt1P ) ;
    strConcatenateF( tinP , pstta , st_psttP , 0 , flConcatenateP , pczIdCasteIncludeP , pczIdCasteExcludeP , csttExtraP ) ; ___( pstta ) ;
    ZE( strokeS* , pstta ) ;

    _IO_

    }
        if( POOP ) return ;
        FV( flSTRcONCATENATE , flConcatenateP ) ;
        __( st_psttP.idTypeF( tinP ) - ifcSTACKtYPE_PTR_strokeS ) ;
        __NZ( pstt1P ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL
    SCOOP
{
/*1*/voidT etherC::strByCasteF( tinS& tinP , strokeS*& pstt1P , stackC& st_psttP , const flagsT flConcatenateP , const countT* const pczIdCasteIncludeP , const countT* const pczIdCasteExcludeP , const countT csttExtraP )/*1*/

/**/
*/
  strings of strings are illegal
  contains ze or more strings of strokes
  idType must be set to ifcSTACKtYPE_PTR_strokeS
 st_psttP
  must be 0
 pstt1P
 tinP
arguments
st_psttP is not emptied
this function concatenates all strings in st_psttP and then passes the resulting string to its overload
\<A HREF=\"5.103011c.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$strByCasteF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


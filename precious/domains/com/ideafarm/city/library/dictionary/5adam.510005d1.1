
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//

                            
REST

CONoUTrAW( "ok\r\n" ) ;

THREADmODE2rESTORE
}
    }
        }
            }
                else       etThread.osThreadF( TaRG1( tmListServeF ) , (countT)pso , (countT)&puseMaster , (countT)&puseHelper ) ;
                if( POOP ) { DEL( pso ) ; }
                __( bRefuse ) ;
                socket.acceptF( tinP , pso , idPortPeer , nnPeer , bRefuse ) ; ___( pso ) ;
                ZE( boolT , bRefuse ) ;
                ZE( countT , idPortPeer ) ;
                nicNameC nnPeer ;
                ZE( socketC* , pso ) ;
            {
            while( !ether && !POOP )
    
            if( idCycle == 1 ) etThread.osThreadF( TaRG1( tmLoadHelperF ) , (countT)&puseMaster , (countT)&puseHelper ) ;
    
            socket.listenF( tinP ) ;
            homeS::homeIF().idPortListServerEmailIdAccount = socket.bindF( tinP ) ;
            socketC socket( tinP , *tinP.pEtScratch , TAG( TAGiDnULL ) ) ;
    
            ++ idCycle ;
        {
        while( !ether )
        ZE( countT , idCycle ) ;
    {
    IFsCRATCH
    
    puseC puseWork2( tinP , ifcIDpOOL_ADAMtEMP ) ;
    puseC puseMaster( tinP , "list.idAccount.to.email" , flPOOLc_null , ifcIDsTATEsPACE_SINGLEaDAM( tinP ) ) ;
    puseC puseWork1( tinP , ifcIDpOOL_ADAMtEMP ) ;
    puseC puseHelper( tinP , "list.email.to.idAccount" ) ;
    _IO_
{
THREADmODE2oN( flTHREADmODE2_UNLOCKpOOLiDENTITY )

TODO

DONE( tmLoadHelperF )
}
    /*PROD*/ ether.osThreadAdamF( tinP , ifcIDaDAM_LISTsERVERiDaCCOUNTdESCRIPTION ) ; //PRODUCTION

    //etThread.osThreadF( TaRG1( tmTestQueryF ) ) ;

    }
        CONoUTrAW( T("with email     get [idAccount,email]: ")+TF3(idAccount,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES,8)+T(" \"")+tEmail+T("\"\r\n") ) ;
    
        sIn >> idAccount ;
        ZE( countT , idAccount ) ;
    
        __( idFormat - 1 ) ;
        sIn >> idFormat ;
        ZE( countT , idFormat ) ;
    
        __( finger - FINGERnEG_LISTsERVERrEPLY ) ;
        sIn >> finger ;
        ZE( countT , finger ) ;
    
        sock.readF( tinP , sIn ) ;
        soulC sIn( tinP , TAG( TAGiDnULL ) ) ;
    
        sock.writeF( tinP , sOut ) ;
        sOut << (strokeS*)tEmail ;
        sOut << (countT)ifcIDcMDlISTsERVEReMAILiDaCCOUNT_ASKiDaCCOUNTfROMeMAIL ;
        sOut << (countT)1 ;
        sOut << (countT)FINGERnEG_LISTsERVERcMD ;
        soulC sOut( tinP , TAG( TAGiDnULL ) ) ;
    
        sock.connectF( tinP , homeS::homeIF().idPortListServerEmailIdAccount ) ;
        socketC sock( tinP , *tinP.pEtScratch , TAG( TAGiDnULL ) ) ;
    
        TN( tEmail , "9bn.3vho@gmail.com" ) ;
    {
    //ENSURE THAT MY ACCOUNT IS DEFINED, EVEN IF I ZAP ALL LISTS ON DEVELOPMENT MACHINE

    THREADmODE2rESTORE
    }
        PUSE.listOld2012F( tinP , count2S( LISTnAME_ROOTaPPLICATION ) , ifcIDhOWlIST_FIFO , 0 , 0 , listingInspect_ad5_chatterHelper_CBF ) ;
        puseC puseh( puseHelperP ) ;
    {

    }
        POPtINaRGS
        listC::walkIF( tinP , count2S( LISTnAME_ROOTaPPLICATION ) ) ; //U::FUNCTION CHANGED: THE OLD CODE WALKED FIFO
        tinP.ta.pushed.u.listWalk.util.pcP[ 0 ] = (countT)&puseHelperP  ;
        tinP.ta.pushed.u.listWalk.walk.flagsWalkP |= flLISTwALK_null ;
        tinP.ta.pushed.u.listWalk.walk.pListWalkCBFP = listingInspect_ad5_chatterMaster_CBF  ;
        PUSHtINaRGS

        puseC pusem( puseMasterP ) ;
    {
    THREADmODE2oN( flTHREADmODE2_UNLOCKpOOLiDENTITY )

    }
        ++ s ; ether.osSleepF( tinP , TOCK >> 2 ) ;
        sleepC s( tinP , TAG( TAGiDnULL ) ) ;
    {
    while( !homeS::homeIF().idPortListServerEmailIdAccount )

    puseC& puseHelperP =  *(puseC*)pTaskP->c2 ;
    puseC& puseMasterP =  *(puseC*)pTaskP->c1 ;
    _IO_
{
if( pTaskP && pTaskP->c1 )
TASK( tmLoadHelperF )

#endif
DONE( tmTestQueryF )
}
    }
        CONoUTrAW( T("with idAccount get [idAccount,email]: ")+TF3(idAccount,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES,8)+T(" \"")+T(psttEmail)+T("\"\r\n") ) ;
    
        sIn >> psttEmail ; ___( psttEmail ) ;
        ZE( strokeS* , psttEmail ) ;
    
        __( idFormat - 1 ) ;
        sIn >> idFormat ;
        ZE( countT , idFormat ) ;
    
        __( finger - FINGERnEG_LISTsERVERrEPLY ) ;
        sIn >> finger ;
        ZE( countT , finger ) ;
    
        sock.readF( tinP , sIn ) ;
        soulC sIn( tinP , TAG( TAGiDnULL ) ) ;
    
        sock.writeF( tinP , sOut ) ;
        sOut << idAccount ;
        sOut << (countT)ifcIDcMDlISTsERVEReMAILiDaCCOUNT_ASKeMAILfROMiDaCCOUNT ;
        sOut << (countT)1 ;
        sOut << (countT)FINGERnEG_LISTsERVERcMD ;
        soulC sOut( tinP , TAG( TAGiDnULL ) ) ;
    
        sock.connectF( tinP , homeS::homeIF().idPortListServerEmailIdAccount ) ;
        socketC sock( tinP , *tinP.pEtScratch , TAG( TAGiDnULL ) ) ;
    {
    for( countT idAccount = 1 ; idAccount <= 1 ; idAccount ++ )
{
if( pTaskP )
TASK( tmTestQueryF )
#if defined( NEVERdEFINED )

#endif
DONE( tmTestQueryF )
}
    }
        CONoUTrAW( T("with tEmail get [idAccount,email]: ")+TF3(idAccount,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES,8)+T(" \"")+tEmail+T("\"\r\n") ) ;
    
        sIn >> idAccount ;
        ZE( countT , idAccount ) ;
    
        __( idFormat - 1 ) ;
        sIn >> idFormat ;
        ZE( countT , idFormat ) ;
    
        __( finger - FINGERnEG_LISTsERVERrEPLY ) ;
        sIn >> finger ;
        ZE( countT , finger ) ;
    
        sock.readF( tinP , sIn ) ;
        soulC sIn( tinP , TAG( TAGiDnULL ) ) ;
    
        sock.writeF( tinP , sOut ) ;
        sOut << (strokeS*)tEmail ;
        sOut << (countT)ifcIDcMDlISTsERVEReMAILiDaCCOUNT_ASKiDaCCOUNTfROMeMAIL ;
        sOut << (countT)1 ;
        sOut << (countT)FINGERnEG_LISTsERVERcMD ;
        soulC sOut( tinP , TAG( TAGiDnULL ) ) ;
    
        sock.connectF( tinP , homeS::homeIF().idPortListServerEmailIdAccount ) ;
        socketC sock( tinP , *tinP.pEtScratch , TAG( TAGiDnULL ) ) ;

        TN( tEmail , "123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0" ) ;
    {
    for( countT idAccount = 1 ; idAccount <= 1 ; idAccount ++ )
{
if( pTaskP )
TASK( tmTestQueryF )
#if defined( NEVERdEFINED )

}
    return heavy ;

    }
        }
            }
                }
                    break ;
                    }
                        }
                            break ;
                            }
                                PUSE( tinP , postEmail ) ;
                                CONoUTrAW( T("HELPER| idAccount: ")+TF3(idAccount,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES,9)+T(" ; email: \"")+T(postEmail)+T("\"\r\n") ) ;
                                etherC::strSquishIF( tinP , postEmail , pcStretched , ccStretched ) ; ___( postEmail ) ;
                                ZE( osTextT* , postEmail ) ;
                                puseC puseat( tinP , ifcIDpOOL_ADAMtEMP ) ;

                                countT idAccount = *(countT*)Ac OUNT ;
                                countT  ccStretched = thirdC::c_strlenIF( tinP , pcStretched ) ;
                                const countT* pcStretched = pczListNameP + 1 ;
                            {
                        {
                        case ifcIDtYPEmIXINdATUM_countT : //listing_countT_C
                    {
                    switch( pdListing->idTypeDatumF() )
                {
                case fliLISTINGc_MIXINdATUM :
                }
                    break ;

                    }
                        PUSE( tinP , *(byteT**)&pczListNameKid ) ;
                        puseC puseat( tinP , ifcIDpOOL_ADAMtEMP ) ;
                    {

                    }
                        argP.flagsWalk = flagsSave ;

                        aList.walkOldF( tinP , ifcIDmODEaPTsINK_LEADsHOES , &argP , 0 , listingInspect_ad5_chatterHelper_CBF , pczListNameKid ) ;

                        argP.flagsWalk |= flLISTwALKoLD_DOnOTuNGRABlIST ;
                        flagsT flagsSave = argP.flagsWalk ;
    
                        pczListNameKid[ ccDad    ] = 0 ;
                        pczListNameKid[ ccDad ++ ] = A lIST.idNameF() ;
                        thirdC::c_memcpyIF( tinP , (byteT*)pczListNameKid , (byteT*)pczListNameP , sizeof( countT ) * ccDad ) ;
                            
                    {
                    if( pczListNameKid )

                    }
                        pczListNameKid = (countT*)PUSE.newF( tinP , LF , sizeof( countT ) * ( ccDad + 2 ) ) ; ___( pczListNameKid ) ;
                        puseC puseat( tinP , ifcIDpOOL_ADAMtEMP ) ;
                    {
                    ZE( countT* , pczListNameKid ) ;
                    countT ccDad = thirdC::c_strlenIF( tinP , pczListNameP ) ;
                    
                    listC& aList = A lIST ;
                {
                case fliLISTINGc_MIXINlIST : // listC
            {
            switch( pdListing->flagsF() & fliLISTINGc_maskTypeBits )
        {
        if( !POOP )

        __( !listingC::bIsListingIF( tinP , aptP ) ) ;
        listingC* pdListing = &APT( listingC , aptP ) ;
    {
    if( aptP )
    ZE( sCountT , heavy ) ;

    _IO_

    if( POOP ) return 0 ;
{
sCountT listingInspect_ad5_chatterHelper_CBF( tinS& tinP , aptC& aptP , listWalkArgOldS& argP , const countT* pczListNameP )

}
    return heavy ;

    }
        }
            }
                }
                    break ;
                    }
                        }
                            break ;

                            if( bDelete ) listingC::deleteOldIF( tinP , aptP , argP.cValueTestSpec , argP.pStk_aptPrune ) ;

                            }
                                PUSE( tinP , *(byteT**)&pczEmail ) ;
                                }
                                    if( idAccountVerify != idAccount ) bDelete = 1 ;
    
                                    THREADmODE2rESTORE
                                    //CONoUTrAW3( "STORED  idAcc " , idAccount , " into helper file using postzEmail as list name\r\n" ) ;
                                    }
                                        idAccountVerify = PUSE.list_countT_Old2012F( tinP , pczEmail , idAccount ) ;
                                        puseC puseHelper( *(puseC*)argP.pc Utility[ 0 ] ) ;
                                    {
                                    //CONoUTrAW3( "STORING idAcc " , idAccount , " into helper file using postzEmail as list name\r\n" ) ;
                                    THREADmODE2oN( flTHREADmODE2_UNLOCKpOOLiDENTITY )
                                    ZE( countT , idAccountVerify ) ;
            
                                    //CONoUTrAW( T(pczEmail)+T("\r\n") ) ;
                                    etherC::strStretchIF( tinP , pczEmail , count2S( LISTnAME_ROOTaPPLICATION ) , postzEmail ) ;
                                    pczEmail[ offo ] = 0 ;
                                    for( countT offo = 0 ; offo < ccHelper ; offo ++ ) pczEmail[ offo ] = LISTnAME_PLACEhOLDER ;
                                {
                                if( pczEmail )
                                countT* pczEmail = (countT*)PUSE.newF( tinP , LF , sizeof( countT ) * ( ccHelper + 1 ) ) ; ___( pczEmail ) ;
                                const countT ccHelper = 1 + thirdC::c_strlenIF( tinP , postzEmail ) ;
    
                                CONoUTrAW( T(/*DASH127 "\r\n" DASH127 "\r\n"*/ "MASTER| idAccount: ")+TF3(idAccount,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES,9)+T(" ; email: \"")+T(postzEmail)+T("\"\r\n") ) ;
                                etherC::strSquishIF( tinP , idAccount , pcStretched ) ;
                                ZE( countT , idAccount ) ;
    
                                puseC puset( tinP , ifcIDpOOL_ADAMtEMP ) ;
                            {
                            ZE( boolT , bDelete ) ;

                            thirdC::c_strlwrIF( tinP , postzEmail ) ; //U::REMOVE AFTER ELIMINATED ALL SOURCES OF MIXED CASE OR UPPER CASE VALUES

                            osTextT*      postzEmail  = (osTextT*)Ao StEXT ;
                            countT        ccStretched = thirdC::c_strlenIF( tinP , pcStretched ) ;
                            const countT* pcStretched = pczListNameP + 1 ;
                        {
                        case ifcIDtYPEmIXINdATUM_blob : //listing_blob_C
                    {
                    switch( pdListing->idTypeDatumF() )
                {
                case fliLISTINGc_MIXINdATUM :
                }
                    break ;

                    }
                        PUSE( tinP , *(byteT**)&pczListNameKid ) ;
                        puseC puseat( tinP , ifcIDpOOL_ADAMtEMP ) ;
                    {

                    }
                        argP.flagsWalk = flagsSave ;

                        aList.walkOldF( tinP , ifcIDmODEaPTsINK_LEADsHOES , &argP , 0 , listingInspect_ad5_chatterMaster_CBF , pczListNameKid ) ;

                        argP.flagsWalk |= flLISTwALKoLD_DOnOTuNGRABlIST ;
                        flagsT flagsSave = argP.flagsWalk ;
    
                        pczListNameKid[ ccDad    ] = 0 ;
                        pczListNameKid[ ccDad ++ ] = A lIST.idNameF() ;
                        thirdC::c_memcpyIF( tinP , (byteT*)pczListNameKid , (byteT*)pczListNameP , sizeof( countT ) * ccDad ) ;
                    {
                    if( pczListNameKid )

                    }
                        pczListNameKid = (countT*)PUSE.newF( tinP , LF , sizeof( countT ) * ( ccDad + 2 ) ) ; ___( pczListNameKid ) ;
                        puseC puseat( tinP , ifcIDpOOL_ADAMtEMP ) ;
                    {
                    ZE( countT* , pczListNameKid ) ;
                    countT ccDad = thirdC::c_strlenIF( tinP , pczListNameP ) ;
                    
                    listC& aList = A lIST ;
                {
                case fliLISTINGc_MIXINlIST : // listC
            {
            switch( pdListing->flagsF() & fliLISTINGc_maskTypeBits )
        {
        if( !POOP )

        __( !listingC::bIsListingIF( tinP , aptP ) ) ;
        listingC* pdListing = &APT( listingC , aptP ) ;
    {
    if( aptP )
    ZE( sCountT , heavy ) ;

    _IO_

    if( POOP ) return 0 ;
{
sCountT listingInspect_ad5_chatterMaster_CBF( tinS& tinP , aptC& aptP , listWalkArgOldS& argP , const countT* pczListNameP )






        }
            return threadLocalStorageF( ifcIDtYPEtLS_KID , tmListServeF_workF , (countT)argP , 0 , 0 , 0 , 0 , "tmListServeF" ) ;
        {
        TASK0PROTO( tmListServeF )


        DONE1
        }
            }
                dec02AM( cAllThreads ) ; /* MUST BE THE VERY LAST THING THAT THIS THREAD DOES */
                if( !bFake ) { DEL( pTaskP ) ; } /* MUST BE AS LATE AS POSSIBLE BECAUSE IT GIVES THE SIGN THAT THE THREAD IS DONE.  THE PROCESS MUST SLEEP AFTER RECEIVING THIS SIGN BEFORE ENDING, SO THAT THIS THREAD CAN COMPLETE */
                if( tinP.monitor.idThread <= ClOWtHREADS ) processGlobal1S::_processGlobal1I_IF().pcPhaseLow[ tinP.monitor.idThread ] = - 1 ;
                TELL( "DONE0: i am outa here" )
                ;
                    : thirdC::os_cAllKidThreadsI_IF( tinP )
                    ? thirdC::os_cAllOrphanThreadsI_IF( tinP )
                countT& cAllThreads = bOrphan
                boolT bFake   = pTaskP ? !!( F(pTaskP->flags) & flTHREADlAUNCH_FAKE   ) : 0 ;
                boolT bOrphan = pTaskP ? !!( F(pTaskP->flags) & flTHREADlAUNCH_ORPHAN ) : 0 ;
                TELL( "DONE0: deregistering myself from either cAllOrphanThreadsI or cAllKidThreadsI (my final act)" )
                TINSL /*THIS IS NEEDED BECAUSE tinP WAS DELETED IF I AM tmWindowsF */
            {
            if( pEtThread ) *pEtThread = 0 ;

            }
                }
                    }
                        }
                            TELL( "DONE0: after deleting pEtThread, which destroys tinP in poolOld" )
                            if( pEtThread ) { BLAMMO ; }
                            PUSE( tinP , *(byteT**)&pEtThread ) ;
                            TINSL
                        {
                        }
                            DELzOMBIE( pDoomed ) ; /* tinP IS DESTROYED HERE */
                            etherC* pDoomed = pEtThread ;
                        {
                        DEL( tinP.pEtScratch ) ;
                        DEL( tinP.pScoopEtThread ) ; /*CODEsYNC: 0010056 1020171 */
                        TELL( "DONE0: deleting etThread (and tinP)" ) ;
                        tinP.pEther = 0 ;
                        TELL( "DONE0: testing poolOld" ) ;

                        }
                            tinP.pEtScratch->delF( tinP , psttThreadFile ) ;
                            tinP.pEtScratch->boxZapF( tinP , psttThreadFile ) ;
                            TELL( "DONE0: deleting thread file" ) ;
                        {
                        if( psttThreadFile )
                    {
                    if( pEtThread ) /*THREADS THAT DELETE etThread EARLY: tmWindowsF*/
                    TINSL /*THIS IS NEEDED BECAUSE tinP WAS DELETED IF I AM tmWindowsF */
                {

                }
                    }
                        if( tinP.monitor.idThread <= ClOWtHREADS && !( ++ processGlobal1S::_processGlobal1I_IF().pcPhaseLow[ tinP.monitor.idThread ] ) ) { BLAMMO ; }
                        if( tinP.idPhase1 < ifcIDpHASEtHREAD_EPILOGnOkIDS ) tinP.idPhase1 = ifcIDpHASEtHREAD_EPILOGnOkIDS ;
                        }
                            TELL( "DONE0: destroying all adam objects that remain on the thread stack" ) ;
                            }
                                while( tinP.cKidThreads ) { ++ s ; thirdC::dosSleepRawIF( tinP , 250 ) ; }
                                sleepC s( tinP , TAG( TAGiDnULL ) ) ;
                            {
                            TELL( "DONE0: waiting for my kid threads to end" ) ;

                            if( F(thirdC::third_flagsModeAdam1I_IF(tinP)) & flADAMmODE1_WHEREaLL && !( F(tinP.flagsThreadMode1) & flTHREADmODE1_NOwHERE ) ) etThread.etherWhereF( tinP , ifcIDaCTIONwHERE_UNWATCH ) ;
                            TELL( "DONE0: conditionally calling etherWhereF" ) ;
                        {
                        else
                        if( !pEtThread ) ; /*THIS IS NEEDED BECAUSE tinP WAS DELETED IF I AM tmWindowsF */

                        TELL( "DONE0: after returning from application code" ) ;
                        tinP.idPhase2 = 0 ;
                        if( tinP.idPhase1 < ifcIDpHASEtHREAD_EPILOGkIDS ) tinP.idPhase1 = ifcIDpHASEtHREAD_EPILOGkIDS ;
                        if( tinP.monitor.idThread <= ClOWtHREADS && !( ++ processGlobal1S::_processGlobal1I_IF().pcPhaseLow[ tinP.monitor.idThread ] ) ) { BLAMMO ; }
                        TINSL /*THIS IS NEEDED BECAUSE tinP WAS DELETED IF I AM tmWindowsF */
                    {
                    /*DO NOT CLOSE THE CODE BLOCK HERE BECAUSE KID THREADS MIGHT BE USING OBJECTS THAT WOULD DT HERE*/
                                                                                                                                                                    \






//U::DONE( tmListServeF )

}
    }
        DEL( psoP ) ;
        if( POOP ) POOPR

        }
            psoP->writeF( tinP , sOut ) ;
            }
                }
                    break ;
                    __1 ;
                    __( idCmd ) ;
                {
                default :
                }
                    break ;

                    DELlIST( fieldEditParamOutC , pOutMaster ) ;
                    if( !POOP ) sOut << ( postzEmail ? (strokeS*)T(postzEmail) : (strokeS*)0 ) ;

                    if( !POOP && pOutMaster && pOutMaster->spBlob ) postzEmail = pOutMaster->spBlob ;
                    ZE( const osTextT* , postzEmail ) ;

                    }
                        PUSE( tinP , *(byteT**)&pczIdAccount ) ;
                        }
                            THREADmODE2rESTORE
                            }
                                }
                                    listC::fieldIF( tinP , pOutMaster , hList , pczField , _1_queryC() , LF ) ; ___( pOutMaster ) ;
                                    countT pczField[] = { /*postEmail*/0x87654321 , 0 } ;
                                            
                                    listC::openIF( tinP , hList , pczIdAccount ) ;
                                    handleC hList( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_LISTING ) ;
                        
                                    grabitC grabitx( tinP , TAG( TAGiDnULL ) ) ;
                                {

                                puseC puseMaster( puseMasterP ) ;
                            {
                            THREADmODE2oN( flTHREADmODE2_UNLOCKpOOLiDENTITY )

                            //CONoUTrAW( T(pczIdAccount)+T("\r\n") ) ;
                            etherC::strStretchIF( tinP , pczIdAccount , count2S( LISTnAME_ROOTaPPLICATION ) , idAccount ) ;
                            pczIdAccount[ offo ] = 0 ;
                            for( countT offo = 0 ; offo < ccMaster ; offo ++ ) pczIdAccount[ offo ] = LISTnAME_PLACEhOLDER ;
                        {
                        if( pczIdAccount )
                        countT* pczIdAccount = (countT*)PUSE.newF( tinP , LF , sizeof( countT ) * ( ccMaster + 1 ) ) ; ___( pczIdAccount ) ;
                        const countT ccMaster = 1 + sizeof idAccount ;
                    {
                    if( idAccount )
                    ZE( fieldEditParamOutC* , pOutMaster ) ;

                    sIn >> idAccount ; //I WILL RETUIRN 0 FOR EMAIL IF IDACCOUNT DOES NOT EXIST; I WILL NEVER CREATE AN ACCOUNT
                    ZE( countT , idAccount ) ;
                    _IO_
                {
                case ifcIDcMDlISTsERVEReMAILiDaCCOUNT_ASKeMAILfROMiDaCCOUNT :
                }
                    break ;

                    if( !POOP ) sOut << idAccount ;

                    }
                        PUSE( tinP , *(byteT**)&pczEmail ) ;
                        }
                            THREADmODE2rESTORE
                            }
                                DELlIST( fieldEditParamOutC , pOutMaster ) ;

                                }
                                    }
                                        }
                                            __1
                                            CONoUTrAW( T("[helper,new] : \"")+T(postzEmail)+T("\" \"")+tEmail+T("\"\r\n") ) ;
                                            LOGrAW( T("[helper,master] : \"")+T(postzEmail)+T("\" \"")+tEmail+T("\"\r\n") ) ;
                                            LOGrAW( "EXCEPTION: a new idAccount value was dispensed for an email, but that new idAccount value already existed in the master list, so the master was not modified:\r\nthis leaves the master and helper in an inconsistent state\r\n" ) ;
                                        {
                                        if( thirdC::c_strcmpIF( tinP , postzEmail , tEmail ) )
                                    {
                                    if( !POOP )
                                    __Z( postzEmail ) ;
                                    const osTextT* postzEmail = pOutMaster->spBlob ;
                                {
                                if( !POOP )
                
                                PUSE( tinP , *(byteT**)&pczIdAccount ) ;
                                }
                                    }
                                        __Z( pOutMaster ) ;
                                        flagsT flagsRC = listC::fieldIF( tinP , pOutMaster , hList , pczField , _1_modePushIfNotExistC() | _1_pushC( (osTextT*)tEmail ) | _1_modeQueryNewC() | _1_queryC() , LF ) ; ___( pOutMaster ) ;
                                        countT pczField[] = { /*postEmail*/0x87654321 , 0 } ;
                                            
                                        listC::openIF( tinP , hList , pczIdAccount ) ;
                                        handleC hList( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_LISTING ) ;
                        
                                        grabitC grabitx( tinP , TAG( TAGiDnULL ) ) ;
                                    {

                                    puseC puseMaster( puseMasterP ) ;
                        
                                    //CONoUTrAW( T(pczIdAccount)+T("\r\n") ) ;
                                    etherC::strStretchIF( tinP , pczIdAccount , count2S( LISTnAME_ROOTaPPLICATION ) , idAccount ) ;
                                    pczIdAccount[ offo ] = 0 ;
                                    for( countT offo = 0 ; offo < ccMaster ; offo ++ ) pczIdAccount[ offo ] = LISTnAME_PLACEhOLDER ;
                                {
                                if( pczIdAccount )
                                ZE( fieldEditParamOutC* , pOutMaster ) ;
                                countT* pczIdAccount = (countT*)PUSE.newF( tinP , LF , sizeof( countT ) * ( ccMaster + 1 ) ) ; ___( pczIdAccount ) ;
                                const countT ccMaster = 1 + sizeof idAccount ;
                                puseC puseat( tinP , ifcIDpOOL_ADAMtEMP ) ;
                            {
                            if( bNew ) // IF WASN'T ON THE HELPER LIST THEN ADD THIS ACCOUNT TO THE MASTER LIST

                            }
                                DELlIST( fieldEditParamOutC , pOutHelper ) ;
                                }
                                    }
                                        if( !POOP ) idAccount = *pczIdAccount ;
                                        __Z( pczIdAccount ) ;
                                        const countT* pczIdAccount = pOutHelper->spCount ;
                                    {
                                    if( !POOP )
                                    __( !pOutHelper->spCount ) ;
                                {
                                if( !POOP )

                                }
                                    __Z( pOutHelper ) ;
                                    bNew = !!( F(flLISTwALKrETURNcODE_NEWlISTING) & listC::fieldIF( tinP , pOutHelper , hList , pczField , _1_modePushIfNotExistC() | _1_pushIdSerialC( "idAccount" ) | _1_modeQueryNewC() | _1_queryC() ) , LF ) ; ___( pOutHelper ) ;
                                    countT pczField[] = { /*U::idAccount*/0x87654321 , 0 } ;
                        
                                    listC::openIF( tinP , hList , pczEmail ) ;
                                    handleC hList( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_LISTING ) ;
    
                                    grabitC grabitx( tinP , TAG( TAGiDnULL ) ) ;
                                {
                                ZE( fieldEditParamOutC* , pOutHelper ) ;
    
                                puseC puseHelper( puseHelperP ) ;
                            {
                            ZE( boolT , bNew ) ;
                            THREADmODE2oN( flTHREADmODE2_UNLOCKpOOLiDENTITY )

                            //
                            // THE FOLLOWING CODE EXERCISES THE QUERY CALLS THAT WILL BE NEEDED, BUT ASSUMES THAT I AM THE ONLY CELL
                            //
                            //  IF UNK, QUERY THE PREFERRED CELL, ALLOWING IT TO ATTACH
                            //  IF UNK, QUERY ALL OTHER CELLS, SPECIFYING "NO ATTACH"
                            //  QUERY THE PREFERRED CELL, SPECIFYING "NO ATTACH"
                            //  IDENTIFY THE "PREFERRED" CELL FOR THAT EMAIL ADDRESS (USING E.G. A HASH MAPPING OR SIMPLY A HARDCODED IDENTITY) AT ANY GIVEN TIME, THE MAPPING MUST BE DETERMINATE; ALL CELLS WILL MAP TO THE SAME PREFERRED CELL
                            //
                            // RECIPE
                            //
                            // WHEN THERE ARE MULTIPLE CELLS, THE CELL THAT RECIEVES A REQUEST FROM APPLICATION CODE MUST COORDINATE WITH ALL OTHER CELLS, AS FOLLOWS
                            // I AM A SINGLE CELL OF A POTENTIALLY MULTICELL LIST SERVER FOR THIS DATA

                            //CONoUTrAW( T(pczEmail)+T("\r\n") ) ;
                            etherC::strStretchIF( tinP , pczEmail , count2S( LISTnAME_ROOTaPPLICATION ) , tEmail ) ;
                            pczEmail[ offo ] = 0 ;
                            for( countT offo = 0 ; offo < ccHelper ; offo ++ ) pczEmail[ offo ] = LISTnAME_PLACEhOLDER ;
                        {
                        if( pczEmail )
                        countT* pczEmail = (countT*)PUSE.newF( tinP , LF , sizeof( countT ) * ( ccHelper + 1 ) ) ; ___( pczEmail ) ;
                        const countT ccHelper = 1 + tEmail.csF( tinP ) ;
                    {
                    if( tEmail.csF( tinP ) )
                    ZE( countT , idAccount ) ;

                    etThread.delF( tinP , psttEmail ) ;
                    TN( tEmail , "" ) ; tEmail = T(psttEmail) ;
                    if( psttEmail ) etThread.strConvertToLowerCaseF( tinP , psttEmail ) ;
                    sIn >> psttEmail ; ___( psttEmail ) ;
                    ZE( strokeS* , psttEmail ) ;
                    _IO_
                {
                case ifcIDcMDlISTsERVEReMAILiDaCCOUNT_ASKiDaCCOUNTfROMeMAIL :
            {
            switch( idCmd )

            sOut << (countT)1 ; //idFormat
            sOut << (countT)FINGERnEG_LISTsERVERrEPLY ;
            soulC sOut( tinP , TAG( TAGiDnULL ) ) ;

            sIn >> idCmd ;
            ZE( countT , idCmd ) ;

            __( idFormat - 1 ) ;
            sIn >> idFormat ;
            ZE( countT , idFormat ) ;

            __( finger - FINGERnEG_LISTsERVERcMD ) ;
            sIn >> finger ;
            ZE( countT , finger ) ;

            psoP->readF( tinP , sIn ) ;
            soulC sIn( tinP , TAG( TAGiDnULL ) ) ;
            _IO_
        {
        while( !ether && !POOP )

        psoP->etherF( tinP , *tinP.pEtScratch ) ;
        SCOOPS
    {
    IFsCRATCH

    puseC&    puseHelperP =  *(puseC*)pTaskP->c3 ;
    puseC&    puseMasterP =  *(puseC*)pTaskP->c2 ;
    socketC*  psoP      = (socketC*)pTaskP->c1 ;
    TELL( "setting up" )
    _IO_
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 && pTaskP->c3 )
TASK( tmListServeF )

/*1*/WAKEsHOWtEXT( "ifcIDaDAM_LISTsERVEReMAILiDaCCOUNT" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//



//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//

                            
REST

etherC::loafIF( tinP ) ;
etThread.traceF( tinP , T("ok") ) ;

#endif

}
    etThread.delF( tinP , posti ) ;
    etThread.traceF( tinP , T("called readF [nnHe,idpHe,posti]:    ")+T(nnHe)+T("    ")+TF2(idpHe,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+T(posti) ) ;
    socki.readF( tinP , posti , costi , idpHe , nnHe , 0 , 0 ) ; ___( posti ) ;
    etThread.traceF( tinP , T("calling readF") ) ;
    ZE( countT , idpHe ) ;
    nicNameC nnHe ;
    ZE( countT   , costi ) ;
    ZE( osTextT* , posti ) ;
{
while( !POOP && !ether )

countT idpMe = socki.bindF( tinP , 12345 , nnAny , 1 , 0 ) ;
socketC socki( tinP , etThread , TAG( TAGiDnULL ) , ifcSOCKETtYPE_DATAgRAM , flSOCKETc_MULTICAST , T("ff02::5:6") , 0 , 0 , 0 , 0 , 0 ) ;

nicNameC nnAny = socketC::nicNameIF( tinP , etThread , T("::") ) ;

#else

closesocket( sd ) ;

//*************************************************************************************************************
//*************************************************************************************************************
//*************************************************************************************************************
//*************************************************************************************************************

}
    etThread.traceF( tinP , T("received :    \"")+T(postBuf)+T("\"") ) ;
    postBuf[ cbIn ] = 0 ;
    if( cbIn <= 0 ) { BLAMMO ; }
    int cbIn = recvfrom( sd , postBuf , sizeof postBuf , 0 , (sockaddr*)&info , &cbInfo ) ;
    sCountT cbInfo = sizeof info ;
    memset( &info , 0 , sizeof info ) ;
    sockaddr_in6 info ;
    osTextT postBuf[ TUCK ] ;
    etThread.traceF( tinP , T("waiting to receive") ) ;
{
while( !ether )

if( bFail ) { BLAMMO ; }
bFail = bind( sd , (sockaddr*)&addrMeBind , sizeof addrMeBind ) ;

addrMeBind.sin6_addr = in6addr_any ;
addrMeBind.sin6_port = (count01T)htons( (count01T)12345 ) ;
addrMeBind.sin6_family = AF_INET6;
memset( &addrMeBind , 0 , sizeof addrMeBind ) ;
sockaddr_in6 addrMeBind ;

//*************************************************************************************************************
//*************************************************************************************************************
//*************************************************************************************************************
//*************************************************************************************************************

if( bFail ) { BLAMMO ; }
bFail = setsockopt( sd , IPPROTO_IPV6 , IPV6_JOIN_GROUP , (char*)&groupAddrCard , sizeof groupAddrCard ) ;

groupAddrCard.ipv6mr_interface = ifidx ;
memcpy( &groupAddrCard.ipv6mr_multiaddr , &addrGroup.sin6_addr , sizeof groupAddrCard.ipv6mr_multiaddr ) ;
ipv6_mreq groupAddrCard ;
ifidx = 0 ;

inet_pton( AF_INET6 , "ff02::5:6" , &addrGroup.sin6_addr ) ;
addrGroup.sin6_port = (count01T)htons( (count01T)12345 ) ;
addrGroup.sin6_family = AF_INET6;
memset( &addrGroup , 0 , sizeof addrGroup ) ;
sockaddr_in6 addrGroup ;

if( bFail ) { BLAMMO ; }
bFail = setsockopt( sd , IPPROTO_IPV6 , IPV6_MULTICAST_LOOP , (const char*)&on , sizeof on ) ;
on = 1 ;

if( bFail ) { BLAMMO ; }
bFail = setsockopt( sd , IPPROTO_IPV6 , IPV6_MULTICAST_HOPS , (const char*)&hops , sizeof hops ) ;
int hops = 255 ;

if( bFail ) { BLAMMO ; }
bFail = setsockopt( sd , IPPROTO_IPV6 , IPV6_MULTICAST_IF , (const char*)&ifidx , sizeof ifidx ) ;
int ifidx = 0 ;

if( bFail ) { BLAMMO ; }
int bFail = setsockopt( sd , SOL_SOCKET , SO_REUSEADDR , (const char*)&on , sizeof on ) ;
int on = 1 ;

if( sd < 0 ) { BLAMMO ; }
int sd = socket( AF_INET6 , SOCK_DGRAM , IPPROTO_UDP ) ;

#if defined( NEVERdEFINED )


TODO

/*1*/WAKEsHOWtEXT( "scratch c: receive" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


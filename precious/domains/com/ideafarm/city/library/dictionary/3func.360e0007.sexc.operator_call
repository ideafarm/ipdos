
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    }
        idLathNewDel = ifcIDsEXclATHnEWdEL_DEL ; // INTENTIONAL RACE

        tinP.cPoolDropDt ++ ;

        if( !btrAM( pbzMetaBitsOwned , offSlot ) ) { BLAMMO ; } //BLAMMO IS USED RATHER THAN __() TO AVOID NEEDING TO CALL TINSL, FOR MAX SPEED

        if( F(flagsCt) & fliSEXc_MAPPEDtOdISK ) thirdC::c_memsetIF( pbv , 1 << pzMetaHead->expCbSlot , 0 ) ; //TO SHRINK SIZE OF COMPRESSED DISK IMAGE; SANS tinP USED FOR MAX SPEED

        if( offSlot < pzMetaHead->cSlotsAvoidLo ) { BLAMMO ; }

        }
            pDoomed->idThreadDel = tinP.monitor.idThread ;
            //thirdC::c_memsetIF( (byteT*)pDoomed , sizeof( dropNoteS ) , 0 ) ; //SANS tinP USED FOR MAX SPEED; INTENTIONALLY COMMENTED OUT SO THAT SLOTS WHICH ARE NOT CONTINUALLY REUSED CAN BE VISIBLE (SUCH CODE IS CANDIDATE FOR MIGRATION FROM poolC TO jotC)

            inc02AM( pDoomed->idDelLath ) ;

            if( !pDoomed->idLineTagged || !pDoomed->idiFileTagged ) { BLAMMO ; }
            idiFileTaggedCopy = pDoomed->idiFileTagged ;
            idLineTaggedCopy = pDoomed->idLineTagged ;

            dropNoteS* pDoomed = pzMetaNote + offSlot ;
        {
        if( pzMetaNote )
        ZE( countT , idiFileTaggedCopy ) ;
        ZE( countT , idLineTaggedCopy ) ;

        pbP = 0 ;
        }
            BLAMMO ;
            //tinP.pc Utility[ 0xf ] = pbSlot - pbv ;
        {
        if( pbSlot != pbv )
        byteT* pbv     = pbData + offSlot * cbGross ;
        countT offSlot = ( pbSlot - pbData ) / cbGross ;

        countT cbGross = CBsEXdROPhEADER + ( 1 << pzMetaHead->expCbSlot ) ;

        }
            }
                }
                    BLAMMO ;
                    #endif

                        }
                            tinP.pcUtility[ 8 ] = BM_HIGH | pDoomed->idThreadDel    ;
                            tinP.pcUtility[ 7 ] = BM_HIGH | pDoomed->idThreadNew    ;
                            tinP.pcUtility[ 6 ] = BM_HIGH | pDoomed->idDelLath      ;
                            tinP.pcUtility[ 5 ] = BM_HIGH | pDoomed->idNewLath      ;
                            tinP.pcUtility[ 4 ] =           pDoomed->idiFileTagged2 ;
                            tinP.pcUtility[ 3 ] = BM_HIGH | pDoomed->idLineTagged2  ;
                            tinP.pcUtility[ 2 ] =           pDoomed->idiFileTagged  ;
                            tinP.pcUtility[ 1 ] = BM_HIGH | pDoomed->idLineTagged   ;
                            tinP.pcUtility[ 0 ] =           0x22222222              ;
                        {
                        if( pDoomed )
                        dropNoteS* pDoomed = pDropNoteF( tinP , pbP ) ;             // TO FIND A BUG (ON THE CHANCE THAT pbP WAS TAGGED BUT NOT DEREGISTERED

                    #if defined( ENABLEdROPnOTES )
                {
                if( tinP.ppbNewUntagged[ offr ] == pbP ) // THIS DROP WAS NEVER TAGGED, WHICH IS ILLEGAL
            {
            for( countT offr = 0 ; offr < sizeof tinP.ppbNewUntagged / sizeof tinP.ppbNewUntagged[ 0 ] ; offr ++ )
        {
        if( !( F(tinP.flagsThreadMode3) & flTHREADmODE3_DOnOTvERIFYpOOLdROPtAGGING ) )
    {
    if( pbData <= pbSlot && pbSlot < pbDataEnd )
    if( F(flagsCt) & fliSEXc_READoNLY ) { BLAMMO ; }

    const byteT* pbSlot = !pbP ? 0 : pbP - CBsEXdROPhEADER ;

    }
        if( POOP ) return ;
    {
    IFbEcAREFUL
    _IO_
    SCOOP
{
/*1*/voidT sexC::operator ()( tinS& tinP , byteT*& pbP )/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//



//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    ether.strSubstringF( tinP , psttGeneratedP , idfGen , idLathI , psttReplyP ) ; ___( psttGeneratedP ) ;
    idLathI -- ;
    __Z( idLathI ) ;
    countT idLathI = ether.strIdF( tinP , 0 , flSTRmATCH_null , idfEnd , sttqEnd , T(".\r\n") , psttReplyP ) ;
    strokeS sttqEnd = sttqGen ;
    countT idfEnd = idfGen ;
    ether.delF( tinP , psttWord ) ;
    }
        // OCCURED 19970414.1435
        __1
        if( !( F(ether.flagsMode) & flTHIRDmODE_IMPOTENCEeXPECTED ) ) ether.etherPutLogF( tinP , T(DDNAME ":  Could not extract generated name from \"")+T(psttReplyP)+T("\".") ) ;
    {
    if( !idfGen )
    __Z( psttWord ) ;
    ether.strSubstringF( tinP , psttWord , idfGen , sttqGen , T("mode data connection for ") , psttReplyP ) ; ___( psttWord ) ;
    ZE( strokeS* , psttWord ) ;
    strokeS sttqGen( (countT)0 , sc_IGNOREqUOTES ) ;
    countT idfGen = 1 ;
    _IO_

    }
        if( POOP ) return ;
    {
    IFbEcAREFUL
    SCOOP
{
/*1*/voidT boxC::stouGeneratedFileNameF( tinS& tinP , strokeS*& psttGeneratedP , const strokeS* const psttReplyP )/*1*/
/**/
*/
 psttReplyP
 psttGeneratedP
arguments
parses psttReplyP to obtain the generated file name
it is illegal to refer to this symbol in the definition of an adam
\<A HREF=\"5.1090008.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$stouGeneratedFileNameF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//


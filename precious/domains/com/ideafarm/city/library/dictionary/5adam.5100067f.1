
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

// CONoUTrAW( "bye\r\n" ) ;
//etherC::loafIF( tinP ) ;
CONoUTrAW( "done.\r\n" ) ;

etThread.delF( tinP , postr ) ;
LOGrAW( postr ) ;

}
    etThread.delF( tinP , postp ) ;

    costr += costp ;
    thirdC::c_strcpyIF( tinP , postr + costr , postp ) ;

    etThread.delF( tinP , psttp ) ;
    countT costp = etThread.strMakeF( tinP , postp , psttp ) ; ___( postp ) ;
    ZE( osTextT* , postp ) ;

    sour >> psttp ; ___( psttp ) ;
    ZE( strokeS* , psttp ) ;

    CONoUTrAW3( "        \r" , sour , "\r" ) ;
{
while( sour )

ZE( countT , costr ) ;
etThread.strMakeF( tinP , postr , 0 , cFiles * TUCK ) ; ___( postr ) ;
ZE( osTextT* , postr ) ;

thirdC::diskWalkIF( tinP , cDirs , cFiles , "\\ideafarm.home.101\\IdeaFarm (tm)\\Drop Files Here To Archive\\" , bQuitNU , myWalkCBF , pcArg ) ;
//thirdC::diskWalkIF( tinP , cDirs , cFiles , "\\tmp\\test\\" , bQuitNU , myWalkCBF , pcArg ) ;
ZE( boolT  , bQuitNU ) ;
ZE( countT , cFiles ) ;
ZE( countT , cDirs ) ;

countT pcArg[] = { (countT)&sour , (countT)pptSpec , sizeof pptSpec / sizeof pptSpec[ 0 ] } ;
soulC sour( tinP , TAG( TAGiDnULL ) ) ;

} ;
    //CS:CODEsYNC: WO CASE FOR EACH SSS IN pptSpecP

    &tSssDateTime4
    &tSssDateTime3 ,
    &tSssDateTime2 ,
    &tSssDateTime1 ,
{
textC* pptSpec[] =

;

    +S2(sa_SSSaNDeND,sc_ccSSS)
        +T(".")
        +S2(sa_SSSmARKnUMERICf,sc_cSSSmARK)
        +S3(7,sc_ccSSSrEPEAT,7)
        +T(".")
        +S2(sa_SSSmARKnUMERICf,sc_cSSSmARK)
        +S3(3,sc_ccSSSrEPEAT,3)
        +T("!ideafarm." "3.000b")
    +S2(sa_SSSaND,sc_ccSSS)
    T("")

TN( tSssDateTime4 , "" ) ; tSssDateTime4 =
// "!ideafarm." "3.000b227a.1efb11d3."
//              dddddddd tttttttt

;

    +S2(sa_SSSaNDeND,sc_ccSSS)

        +T("-")

        +S2(sa_SSSmARKnUMERIC9,sc_cSSSmARK)
        +S2(sa_SSSoReND,sc_ccSSS)
            +T("012345")
        +S2(sa_SSSoR,sc_ccSSS)                  // ss

        +S2(sa_SSSmARKnUMERIC9,sc_cSSSmARK)
        +S2(sa_SSSoReND,sc_ccSSS)
            +T("012345")
        +S2(sa_SSSoR,sc_ccSSS)                  // mm

        +S2(sa_SSSmARKnUMERIC9,sc_cSSSmARK)
        +S2(sa_SSSoReND,sc_ccSSS)
            +T("012")
        +S2(sa_SSSoR,sc_ccSSS)                  // hh

        +T("-")

        +S2(sa_SSSmARKnUMERIC9,sc_cSSSmARK)
        +S2(sa_SSSoReND,sc_ccSSS)
            +T("0123")
        +S2(sa_SSSoR,sc_ccSSS)                  // dd

        +S2(sa_SSSmARKnUMERIC9,sc_cSSSmARK)
        +S2(sa_SSSoReND,sc_ccSSS)
            +T("01")
        +S2(sa_SSSoR,sc_ccSSS)                  // mm

        +S2(sa_SSSmARKnUMERIC9,sc_cSSSmARK)
        +S2(sa_SSSoReND,sc_ccSSS)
            +T("01")
        +S2(sa_SSSoR,sc_ccSSS)
        +T("_20")                               // yyyy

        +S2(sa_SSSmARKnUMERIC9,sc_cSSSmARK)
        +S2(sa_SSSoReND,sc_ccSSS)
            +T("01")
        +S2(sa_SSSoR,sc_ccSSS)                  // mm (IGNORE)

        +T("_")

        +S2(sa_SSSmARKnUMERIC9,sc_cSSSmARK)
        +S2(sa_SSSoReND,sc_ccSSS)
            +T("01")
        +S2(sa_SSSoR,sc_ccSSS)
        +T(".internet.!.20")                    // yyyy (IGNORE)

    +S2(sa_SSSaND,sc_ccSSS)
    T("")

TN( tSssDateTime3 , "" ) ; tSssDateTime3 =
// ".internet.!.2013_01_20130128-174843-"
//                      yyyymmdd hhmm
// DUE TO THIS ERROR, ANOTHER UTILITY PROGRAM WAS NEEDED TO REPLACE INCORRECT DATES IN THE FILE NAME HEADER FOR THE ".gmail." FILES
// ERROR: THIS SHOULD HAVE MATCHED ON EITHER ".internet." or ".gmail." SINCE THE DOWNLOAD DESTINATION DIRECTORY VARIED

;

    +S2(sa_SSSaNDeND,sc_ccSSS)

        +S2(sa_SSSoReND,sc_ccSSS)
            +T("._")
        +S2(sa_SSSoR,sc_ccSSS)

        +S2(sa_SSSmARKnUMERIC9,sc_cSSSmARK)
        +S2(sa_SSSoReND,sc_ccSSS)
            +T("012345")
        +S2(sa_SSSoR,sc_ccSSS)                  // mm

        +T("_")

        +S2(sa_SSSmARKnUMERIC9,sc_cSSSmARK)
        +S2(sa_SSSoReND,sc_ccSSS)
            +T("012")
        +S2(sa_SSSoR,sc_ccSSS)                  // hh

        +T("_")

        +S2(sa_SSSmARKnUMERIC9,sc_cSSSmARK)
        +S2(sa_SSSoReND,sc_ccSSS)
            +T("0123")
        +S2(sa_SSSoR,sc_ccSSS)                  // dd

        +T("_")

        +S2(sa_SSSmARKnUMERIC9,sc_cSSSmARK)
        +S2(sa_SSSoReND,sc_ccSSS)
            +T("01")
        +S2(sa_SSSoR,sc_ccSSS)                  // mm

        +T("_")

        +S2(sa_SSSmARKnUMERIC9,sc_cSSSmARK)
        +S2(sa_SSSoReND,sc_ccSSS)
            +T("01")
        +S2(sa_SSSoR,sc_ccSSS)
        +T("_20")                               // yyyy

    +S2(sa_SSSaND,sc_ccSSS)
    T("")

TN( tSssDateTime2 , "" ) ; tSssDateTime2 =
// "_2009_06_06_19_51_"
// "_2009_06_06_19_51."
//   yyyy mm dd hh mm

;

    +S2(sa_SSSaNDeND,sc_ccSSS)
        +S2(sa_SSSmARKnUMERIC9,sc_cSSSmARK)
        +S3(2,sc_ccSSSrEPEAT,2)
        +S2(sa_SSSoReND,sc_ccSSS)
            +T("012")
        +S2(sa_SSSoR,sc_ccSSS)
        +T("@")
        +S2(sa_SSSmARKnUMERIC9,sc_cSSSmARK)
        +S3(4,sc_ccSSSrEPEAT,4)
        +S2(sa_SSSoReND,sc_ccSSS)
            +T("01")
        +S2(sa_SSSoR,sc_ccSSS)
        +T("20")
    +S2(sa_SSSaND,sc_ccSSS)
    T("")

TN( tSssDateTime1 , "" ) ; tSssDateTime1 =
// "20130510@2359"
//  yyyymmdd hhmm

TODO

}
    return bDoIt ;

    }
        //else bQuitP |= 1 ;
        }
            }
                tinP.pEther->delF( tinP , psttDateAtTime ) ;

                else tinP.pEther->strFuseF( tinP , sourP , T("ERROR: DATEtIME NOT CALCULATED\r\n") ) ;
                }
                    tinP.pEther->delF( tinP , psttNew ) ;
                    }
                        }
                            }
                                CONoUTrAW( "\"\r\n" ) ;
                                CONoUTrAW( tNew ) ;
                                CONoUTrAW( "\"\r\n2 new: \"" ) ;
                                CONoUTrAW( tOld ) ;
                                CONoUTrAW( "1 old: \"" ) ;
                                POOPR
                            {
                            if( POOP )
                            ((thirdC&)*tinP.pEtScratch).dosMoveF( tinP , tNew , tOld , 1 ) ;
                            SCOOPS
                        {
                        IFsCRATCH

                        tinP.pEther->strFuseF( tinP , sourP , tcr ) ;
                        tinP.pEther->strFuseF( tinP , sourP , T("new: ")+tNew ) ;

                        TN( tNew , psttNew ) ;
                    {
                    if( cHit )

                    countT cHit = tinP.pEther->strReplaceF( tinP , psttNew , tOld , tOldSmall , tNewSmall ) ; ___( psttNew ) ;
                    ZE( strokeS* , psttNew ) ;
                    TN( tNewSmall , "!ideafarm.4." ) ; tNewSmall += T(psttDateAtTime)+T(".") ;
                    TN( tOldSmall , "!ideafarm." "3." ) ;

                    TN( tOld , postNameP ) ;
                {
                if( psttDateAtTime )

                }
                    }
                        tinP.pEther->delF( tinP , psttSnip ) ;

                        }
                            }
                                break ;

                                tinP.pEther->strMakeF( tinP , psttDateAtTime , tDateAtTime ) ; ___( psttDateAtTime ) ;

                                ;

                                    +TF4(mm,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE|flFORMAT_FOREIGN|flFORMAT_NObASE,2,0xa)
                                    +TF4(hh,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE|flFORMAT_FOREIGN|flFORMAT_NObASE,2,0xa)
                                    +S1C('@')
                                    +TF4(1+da,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE|flFORMAT_FOREIGN|flFORMAT_NObASE,2,0xa)
                                    +TF4(1+mo,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE|flFORMAT_FOREIGN|flFORMAT_NObASE,2,0xa)
                                     TF4(1+ye,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE|flFORMAT_FOREIGN|flFORMAT_NObASE,4,0xa)

                                TN( tDateAtTime , "" ) ; tDateAtTime =

                                tinP.pEther->osTimeToOldTimeF( tinP , ms , ss , mm , hh , da , mo , ye , dow , timeF1 , timeF2 /*, flOStIMEtOoLDtIME_OLDtIMEiSutc*/ ) ;
                                ZE( countT , dow ) ;
                                ZE( sCountT , ye ) ;
                                ZE( countT , mo ) ;
                                ZE( countT , da ) ;
                                ZE( countT , hh ) ;
                                ZE( countT , mm ) ;
                                ZE( countT , ss ) ;
                                ZE( countT , ms ) ;

                                }
                                    tinP.pEther->delF( tinP , psttTime1 ) ;
                                    tinP.pEther->delF( tinP , psttTime2 ) ;

                                    timeF2 = tinP.pEther->strDigitsToSCountF( tinP , psttTime2 , 0 , 1 ) ;
                                    timeF1 = tinP.pEther->strDigitsToSCountF( tinP , psttTime1 , 0 , 1 ) ;

                                    tinP.pEther->strSubstringF( tinP , psttTime2 , idf , idl , psttSnip ) ; ___( psttTime2 ) ;
                                    idl = 0x14 ;
                                    idf = 0x0d ;

                                    tinP.pEther->strSubstringF( tinP , psttTime1 , idf , idl , psttSnip ) ; ___( psttTime1 ) ;
                                    countT idl = 0x1d ;
                                    countT idf = 0x16 ;

                                    ZE( strokeS* , psttTime2 ) ;
                                    ZE( strokeS* , psttTime1 ) ;
                                {
                                ZE( sCountT , timeF2 ) ;
                                ZE( countT , timeF1 ) ;
                            {
                            case 3 :
                            // "!ideafarm." "3.000b227a.1efb11d3."
                            //              dddddddd tttttttt
                            //  123456789abcdef0123456789abcdef01234
                            //  0              1               2

                            }
                                break ;

                                }
                                    tinP.pEther->strFuseF( tinP , psttDateAtTime , psttSnip[ CSpREFIX - 1 + 0x21 ] ) ;
                                    tinP.pEther->strFuseF( tinP , psttDateAtTime , psttSnip[ CSpREFIX - 1 + 0x20 ] ) ;
                                    tinP.pEther->strFuseF( tinP , psttDateAtTime , psttSnip[ CSpREFIX - 1 + 0x1f ] ) ;
                                    tinP.pEther->strFuseF( tinP , psttDateAtTime , psttSnip[ CSpREFIX - 1 + 0x1e ] ) ;
                                    tinP.pEther->strFuseF( tinP , psttDateAtTime , S1C('@')                        ) ;
                                    tinP.pEther->strFuseF( tinP , psttDateAtTime , psttSnip[ CSpREFIX - 1 + 0x1c ] ) ;
                                    tinP.pEther->strFuseF( tinP , psttDateAtTime , psttSnip[ CSpREFIX - 1 + 0x1b ] ) ;
                                    tinP.pEther->strFuseF( tinP , psttDateAtTime , psttSnip[ CSpREFIX - 1 + 0x1a ] ) ;
                                    tinP.pEther->strFuseF( tinP , psttDateAtTime , psttSnip[ CSpREFIX - 1 + 0x19 ] ) ;
                                    tinP.pEther->strFuseF( tinP , psttDateAtTime , psttSnip[ CSpREFIX - 1 + 0x18 ] ) ;
                                    tinP.pEther->strFuseF( tinP , psttDateAtTime , psttSnip[ CSpREFIX - 1 + 0x17 ] ) ;
                                    tinP.pEther->strFuseF( tinP , psttDateAtTime , psttSnip[ CSpREFIX - 1 + 0x16 ] ) ;
                                    tinP.pEther->strFuseF( tinP , psttDateAtTime , psttSnip[ CSpREFIX - 1 + 0x15 ] ) ;
                                {
                                if( psttDateAtTime )

                                tinP.pEther->strMakeF( tinP , psttDateAtTime , 0 , 0xd ) ; ___( psttDateAtTime ) ;
                            {
                            case 2 :
                            // ".internet.!.2013_01_20130128-174843-"
                            //                      yyyymmdd hhmm
                            //  123456789abcdef0123456789abcdef01234
                            //  0              1               2

                            }
                                break ;

                                }
                                    tinP.pEther->strFuseF( tinP , psttDateAtTime , psttSnip[ CSpREFIX - 1 + 0x11 ] ) ;
                                    tinP.pEther->strFuseF( tinP , psttDateAtTime , psttSnip[ CSpREFIX - 1 + 0x10 ] ) ;
                                    tinP.pEther->strFuseF( tinP , psttDateAtTime , psttSnip[ CSpREFIX - 1 + 0xe  ] ) ;
                                    tinP.pEther->strFuseF( tinP , psttDateAtTime , psttSnip[ CSpREFIX - 1 + 0xd  ] ) ;
                                    tinP.pEther->strFuseF( tinP , psttDateAtTime , S1C('@')                        ) ;
                                    tinP.pEther->strFuseF( tinP , psttDateAtTime , psttSnip[ CSpREFIX - 1 + 0xb  ] ) ;
                                    tinP.pEther->strFuseF( tinP , psttDateAtTime , psttSnip[ CSpREFIX - 1 + 0xa  ] ) ;
                                    tinP.pEther->strFuseF( tinP , psttDateAtTime , psttSnip[ CSpREFIX - 1 + 0x8  ] ) ;
                                    tinP.pEther->strFuseF( tinP , psttDateAtTime , psttSnip[ CSpREFIX - 1 + 0x7  ] ) ;
                                    tinP.pEther->strFuseF( tinP , psttDateAtTime , psttSnip[ CSpREFIX - 1 + 0x5  ] ) ;
                                    tinP.pEther->strFuseF( tinP , psttDateAtTime , psttSnip[ CSpREFIX - 1 + 0x4  ] ) ;
                                    tinP.pEther->strFuseF( tinP , psttDateAtTime , psttSnip[ CSpREFIX - 1 + 0x3  ] ) ;
                                    tinP.pEther->strFuseF( tinP , psttDateAtTime , psttSnip[ CSpREFIX - 1 + 0x2  ] ) ;
                                {
                                if( psttDateAtTime )

                                tinP.pEther->strMakeF( tinP , psttDateAtTime , 0 , 0xd ) ; ___( psttDateAtTime ) ;
                            {
                            case 1 :
                            // "_2009_06_06_19_51_"
                            // "_2009_06_06_19_51."
                            //   yyyy mm dd hh mm
                            //  123456789abcdef012
                            //  0              1

                            }
                                break ;
                                tinP.pEther->strMakeF( tinP , psttDateAtTime , psttSnip ) ; ___( psttDateAtTime ) ;
                            {
                            case 0 :
                            // "20130510@2359"
                            //  yyyymmdd hhmm
                            //  123456789abcdef012
                            //  0              1

                            //CS:CODEsYNC: WO CASE FOR EACH SSS IN pptSpecP
                        {
                        if( psttSnip && psttSnip->idAdam ) switch( offs )
    
                        tinP.pEther->strSubstringF( tinP , psttSnip , idf , idl , tOld ) ; ___( psttSnip ) ;
                        countT idl = idHitLath ;
                        countT idf = idHitWoth ;
                        ZE( strokeS* , psttSnip ) ;
                    {
                    if( idHitWoth && idHitLath )

                    }
                        }
                            break ;

                            ;
                                : tOld.csF( tinP )
                                ? idf - 1
                            idHitLath = idf
                        {
                        if( idHitWoth )
                        idHitWoth = tinP.pEther->strIdF( tinP , idf , sttq , *pptSpecP[ offs ] , tOld ) ;
                        strokeS sttq( 0 , sc_IGNOREqUOTES ) ;
                        countT idf = 1 ;
                    {
                    for( offs = 0 ; offs < cSpecP ; offs ++ )
                    ZE( countT , offs ) ;
                    ZE( countT , idHitLath ) ;
                    ZE( countT , idHitWoth ) ;
                {
                ZE( strokeS* , psttDateAtTime ) ;

                tinP.pEther->strFuseF( tinP , sourP , tcr+T("old: ")+T(postNameP)+tcr ) ;

                TN( tcr , "\r\n" ) ;
                TN( tOld , postShort ) ;

                postShort ++ ;
            {
            if( postShort )
            osTextT* postShort = thirdC::c_strrchrIF( tinP , postNameP , '\\' ) ;
        {
        //if( idIn <= 0x20 )

        CONoUTrAW3( "        \r" , idIn , "\r" ) ;
        countT idIn = ++ idInLath ;
        static countT idInLath ;

        countT  cSpecP   =          pcArgP[ 2 ] ;
        textC** pptSpecP = (textC**)pcArgP[ 1 ] ;
        soulC&  sourP    = *(soulC*)pcArgP[ 0 ] ;
    {
    if( bDoIt )

    }
        bDoIt = '\\' != postNameP[ costName - 1 ] ;
        countT costName = thirdC::c_strlenIF( tinP , postNameP ) ;
    {
    if( postNameP )
    ZE( boolT , bDoIt ) ;
{
boolT myWalkCBF( tinS& tinP , countT& cDirsP , countT& cFilesP , boolT& bQuitP , const osTextT* const postNameP , countT* const pcArgP , const countT* const pModuloDirsP , const countT* const pModuloFilesP )

/*1*/WAKEsHOWtEXT( "tool.archive.migrate.filename.format.4.from.format.3" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


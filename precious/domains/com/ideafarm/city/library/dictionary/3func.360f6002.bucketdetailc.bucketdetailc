
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    }
        if( POOP ) { POOPR ; }
                    
        __Z( bDone ) ;
        sIn >> bDone ;
        ZE( boolT , bDone ) ;

        }
            }
                }
                    }
                        //CONoUTrAW3( "bucketDetailC::bucketDetailC [idProduct]: " , ppDetail[ offo ]->idProduct , "\r\n" ) ; //U::

                        sIn >>            ppDetail[ offo ]->idAccBucketOwner              ;
                        sIn >>            ppDetail[ offo ]->idBucket                      ;
                        sIn >>            ppDetail[ offo ]->idProduct                     ;
                        sIn >>            ppDetail[ offo ]->idAccDepositor                ;
                        sIn >>            ppDetail[ offo ]->pczNote                       ; ___( ppDetail[ offo ]->pczNote ) ;
                        sIn >> *(countT*)&ppDetail[ offo ]->timeT2                        ;
                        sIn >>            ppDetail[ offo ]->timeT1                        ;
                        sIn >>            ppDetail[ offo ]->idDeposit                     ;
                        sIn >>            ppDetail[ offo ]->idCommission                  ;
                        sIn >> *(countT*)&ppDetail[ offo ]->moneyT2                       ;
                        sIn >>            ppDetail[ offo ]->moneyT1                       ;
                    {
                    if( ppDetail[ offo ] )
                    ppDetail[ offo ] = new( 0 , tinP , LF ) depositDetailS( tinP ) ; ___( ppDetail[ offo ] ) ;
                {
                for( countT offo = 0 ; offo < cDeposits ; offo ++ )

                thirdC::c_memsetIF( tinP , (byteT*)ppDetail , cbaa ) ;
            {
            if( ppDetail )
            PUSE.newF( tinP , LF , *(byteT**)&ppDetail , cbaa ) ; ___( ppDetail ) ;
            const countT cbaa = sizeof( countT ) * cDeposits ;
        {
        if( cDeposits )

        sIn >> cDeposits ;

        __( idFormat - 1 ) ;
        sIn >> idFormat ;
        ZE( countT , idFormat ) ;
                    
        __( finger - FINGERnEG_LISTsERVERrEPLY ) ;
        sIn >> finger ;
        ZE( countT , finger ) ;
                    
        sock.readF( tinP , sIn ) ;
        soulC sIn( tinP , TAG( TAGiDnULL ) ) ;
                    
        sock.writeF( tinP , sOut ) ;

        sOut << idAccCommissionP ;
        sOut << (countT)timeT2P ;
        sOut << timeT1P ;
        sOut << pczNoteP ;                       //LEAST SIGNIFICANT -> MOST SIGNIFICANT; CAN BE PARTIAL (HIGHEST SIGNIFICANCE MUST BE INCLUDED)
        sOut << idAccDepositorP ;
        sOut << idProductP ;
        sOut << idBucketP ;
        sOut << idAccBucketOwnerP ;

        sOut << (countT)ifcIDcMDlISTsERVERmONEYbUCKETS_GETdETAIL ;
        sOut << (countT)1 ;
        sOut << (countT)FINGERnEG_LISTsERVERcMD ;
        soulC sOut( tinP , TAG( TAGiDnULL ) ) ;
                    
        sock.connectF( tinP , homeS::homeIF().idPortListMoneyBuckets ) ;
        socketC sock( tinP , *tinP.pEtScratch , TAG( TAGiDnULL ) ) ;

        if( POOP ) { POOPR ; }

        SCOOPS
    {
    IFsCRATCH
    _IO_

    }
        if( POOP ) return ;
    {
    IFbEcAREFUL
{
ppDetail( 0 )
cDeposits( 0 ) ,
/*1*/bucketDetailC::bucketDetailC( tinS& tinP , countT idAccBucketOwnerP , countT idBucketP , countT idProductP , countT idAccDepositorP , countT* pczNoteP , countT timeT1P , sCountT timeT2P , countT idAccCommissionP ) :/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//


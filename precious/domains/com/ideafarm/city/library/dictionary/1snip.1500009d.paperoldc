
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


;
}
    FRIENDS_paperOldC
    /**/

    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3402a.paperOldC.ungrabIF!||
    static voidT ungrabIF( tinS& tinP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34029.paperOldC.grabIF!||
    static voidT grabIF( tinS& tinP , const countT idLineP , const countT idiFileP , const byteT* const pbBitsP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34024.paperOldC.purgeF!||
    voidT purgeF( tinS& tinP , const flagsT flagsP = flPAPERrESET_null ) ;
    inline boolT bToolFilterAllowsF( tinS& tinP , const countT idToolP , const countT idActionP , const countT idAdamP , const countT idListP = 0 ) { return x1.pPulp->x1.back.bToolFilterAllowsF( tinP , idToolP , idActionP , idAdamP , idListP ) ; }
    inline rowPaperBackU& rowBackF( voidT ) { return x1.pPulp->x1.back.rowBack ; }
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34021.paperOldC.setFlashIF!||
    static voidT setFlashIF( tinS& tinP , const osTextT* const postOldCommentP , const countT flashCountdownP = 2 , const countT flashPeriodP = 1 , const flagsT flagsFlashP = flSADAMhIGHLIGHT_FLASH ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34020.paperOldC.setFlashIF!||
    static voidT setFlashIF( tinS& tinP , sadamC& sadamP , const countT flashCountdownP = 2 , const countT flashPeriodP = 1 , const flagsT flagsFlashP = flSADAMhIGHLIGHT_FLASH ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34004.paperOldC.strokeF!||
    voidT strokeF( tinS& tinP , const strokeS* psttP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34010.paperOldC.sfF!||
    const strokingFrameS& sfF( tinS& tinP , const boolT bDadP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34013.paperOldC.setBeforeAnimatingIF!||
    static voidT setBeforeAnimatingIF( tinS& tinP , animateCBFT pAnimateCBFP = 0 , const countT cArgP = 0 ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34006.paperOldC.sadamHighlightF!||
    voidT sadamHighlightF( tinS& tinP , sadamC& sadamP , flagsT flagsP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34028.paperOldC.requestTabFreshIF!||
    static voidT requestTabFreshIF( tinS& tinP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400a.paperOldC.renderVolatilesF!||
    voidT renderVolatilesF( tinS& tinP , sadamC& sadamP , const handleC* const phCloneP , const flagsT flagsP = flSTRIKEvOLATILE_null , vBodyS* const pvbP = 0 ) ;
    inline voidT renderStartF( voidT ) { x1.pPulp->idNestSadamRender ++ ; }
    inline voidT renderEndF( voidT ) { x1.pPulp->idNestSadamRender -- ; }
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34027.paperOldC.queryResetTabFreshIF!||
    static countT queryResetTabFreshIF( tinS& tinP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34008.paperOldC.obeyAnimateCbfStrokesIF!||
    static voidT obeyAnimateCbfStrokesIF( tinS& tinP , etherC& etherP , const countT idCycleP , const boolT& bQuitP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400f.paperOldC.makeFramedSadamBodyF!||
    voidT makeFramedSadamBodyF( tinS& tinP , strokeS*& psttFramedP , sadamC& sadamP , const strokeS* const psttBodyP , const countT cFrameNestDownP = 0 , const countT cFrameNestLeftP = 0 , const countT cFrameNestUpP = 0 , const countT cFrameNestRightP = 0 ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400c.paperOldC.hotKeyF!||
    const countT& hotKeyF( tinS& tinP , strokeS* const psttBodyP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34015.paperOldC.freshVolatileTextIF!||
    static voidT freshVolatileTextIF( tinS& tinP , etherC& etherP , const countT* const pcNotesP , const countT idCycleP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34009.paperOldC.flushF!||
    voidT flushF( tinS& tinP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34025.paperOldC.flagsModeIF!||
    static flagsT flagsModeIF( tinS& tinP ) ;
    inline flagsT flagsModeF( voidT ) const { return x1.pPulp->flagsMode ; }
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34016.paperOldC.fireAnimatorIfIF!||
    static voidT fireAnimatorIfIF( tinS& tinP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400b.paperOldC.eraseGlyphF!||
    voidT eraseGlyphF( tinS& tinP , sadamC& sadamP , const countT idEventP , const handleC* const phCloneP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.1bc0002d.paperOldC.callSadamsIF!||
    static countT callSadamsIF( tinS& tinP , etherC& etherP , const countT idTypeP , const countT* const pcNotesP , const handleC* const phCloneP , const flagsT flagsP = flCALLsADAMS_null , const vTextC* const pOwnerP = 0 , const paperOldC* const pPaperP = 0 , const backOldC* const pPaperBackP = 0 , const countT* const pczIdIntercomP = 0 ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34011.paperOldC.bShowF!||
    boolT bShowF( tinS& tinP ) const ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400d.paperOldC.bHotKeyExistsF!||
    boolT bHotKeyExistsF( tinS& tinP , const strokeS* const psttlBodyP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34012.paperOldC.beforeAnimatingIF!||
    static voidT beforeAnimatingIF( tinS& tinP , etherC& etherP , const countT idCycleP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400e.paperOldC.assignHotKeyF!||
    countT assignHotKeyF( tinS& tinP , strokeS* const psttlBodyP , const boolT bBigitP = 0 ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34003.paperOldC.paperOldC!||
    paperOldC( tinS& tinP , etherC& etherP , const countT cArgP , backOldC& backP , paperToBackCBFT pPaperToBackCBFP , countT cPaperToBackArgP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34002.paperOldC.dt_paperOldC!||
    ~paperOldC( voidT ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34001.paperOldC.NEWdELcLASSb!||
    NEWdELcLASSpROTOS

    inline operator pulpOldC&( voidT ) { return *x1.pPulp ; } //U::FOR DEVELOPMENT CONVENIENCE; REMOVE IN PRODUCTION
/**/

    paperOldC_x_backOldC x1 ;

    public :

    inline countT backIdTypeF( voidT ) const { return x1.pPulp->x1.back.backIdTypeF() ; }

    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34026.paperOldC.bAnimatedF!||
    boolT bAnimatedF( tinS& tinP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34007.paperOldC.moveGlyphF!||
    voidT moveGlyphF( tinS& tinP , sadamC& sadamP , const handleC* const phCloneP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34005.paperOldC.varsHandlerF!||
    static voidT varsHandlerIF( tinS& tinP , varsHandlerFT pVarsHandlerFIFP , countT cArgP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34023.paperOldC.renderVolatileF!||
    voidT renderVolatileF( tinS& tinP , vBodyS& vbP , const mColRowMinMaxS& crmmP , const flagsT flagsP , const handleC* const phCloneP ) ;

    stackC                stDef ; //DEFINES THE STROKES THAT ARE SUPPOSED TO APPEAR ON THE PAPER; IS THE EXTERNAL SPECIFICATION OF THE STATE OF THE PAPER
    const poopC&          poop ;
    etherC&               ether ;
    const countT          finger ;
{
/*1*/class _export paperOldC/*1*/

;
}
    friend class sadamC ;
    friend class backOldC ;
    friend class paperOldC ;

    {}
    pPulp( 0 )
    inline paperOldC_x_backOldC( voidT ) :

    public :

    pulpOldC* pPulp ;
{
class paperOldC_x_backOldC

/**/

*/
the backOldC instance that a given paperOldC instance is associated with can change over time (not yet implemented)
each backOldC instance can be associated with 0, 1, or multiple paperOldC instances
each paperOldC instance is associated with exactly wo backOldC instance at any given time
input consists of tool actions
output consists of strokes, usually either alphanumeric glyphs or line segments, rendered onto a 2 dimensional planar surface (paper)
 the "operator side" is a class derived from backOldC
this class is the "machine side" of the operator interface
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//



//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


//VISIBLE

REST
etThread.osProcessIdPhaseAdamF( tinP , ifcIDpHASEhANDOFFoLD_SHUTTINGdOWN ) ;

etThread.delF( tinP , psttRuler ) ;
}
    }
        else      etThread.strokeF( tinP , T(" no match\r\n") ) ;
        if( id2 ) etThread.strokeF( tinP , TP("",id2-id1s-1)+T("^\r\n") ) ;
        etThread.strokeF( tinP , tBig+T("\r\n")+TP("",id1s-1)+T("^") ) ;
        countT id2 = etThread.strIdMatchingF( tinP , id1 , sttq , tBig ) ;
        const countT id1s = id1 ;
        strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
    {
    if( id1 && id1 <= tBig.csF( tinP ) )
    etThread.delF( tinP , psttn ) ;
    countT id1 = etThread.strDigitsToSCountF( tinP , psttn ) ;

    if( !psttn->idAdam ) break ;
    etThread.faceHearF( tinP , psttn ) ; ___( psttn ) ;
    ZE( strokeS* , psttn ) ;
    etThread.strokeF( tinP , T(psttRuler)+T("\r\n(optional) enter a number in the range [1,")+TF1(tBig.csF( tinP ))+T("]: ") ) ;
{
while( !ether )
etThread.strokeF( tinP , tBig+T("\r\n") ) ;

etThread.strRulerF( tinP , psttRuler , tBig.csF( tinP ) ) ; ___( psttRuler ) ;
ZE( strokeS* , psttRuler ) ;
TN( tBig , "(paren (nested paren (more nesting))) [sq] {curl} <angle> aa abcdefgh abcdefgh" ) ;

TODO

/*1*/WAKEhIDE( "example.simplest.func.10300d2.etherC.strIdMatchingF" )/*1*/
/**/
*/
\<A HREF=\"5.6b10104.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


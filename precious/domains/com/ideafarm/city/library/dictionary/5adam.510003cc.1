
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST
etThread.osProcessIdPhaseAdamF( tinP , ifcIDpHASEhANDOFFoLD_SHUTTINGdOWN ) ;


while( idhNext ) etThread.osSleepF( tinP , TOCK ) ;

for( countT idThread = 1 ; idThread <= CtHREADS ; idThread ++ ) { ZE( countT , tnu ) ; etThread.osThreadF( tinP , tnu , tmScanF , 0 , flTHREADlAUNCH_null , 0 , (countT)&idhNext , (countT)&bConsole , (countT)&bIdhNext , (countT)&bFile , hFile ) ; }
countT idhNext = 1 ;

{ ZE( countT , idnu ) ; etThread.fileOpenF( tinP , hFile , idnu , T("///ideafarm/ephemeral/tmp/ec30104.httpServers") , ifcOPENaCCESS_W , 0 , 0 , ifcOPENhOW_nCeR , 0 ) ; }
handleC hFile( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILE ) ;
batonC bFile( tinP , TAG( TAGiDnULL ) ) ;
batonC bIdhNext( tinP , TAG( TAGiDnULL ) ) ;
batonC bConsole( tinP , TAG( TAGiDnULL ) ) ;

//etThread.osThreadSwitchingDesireF( tinP , ifcTHREADpRIORITY_LAZIEST ) ;

TODO

DONE( tmScanF )

}
    }
        bConsole.ungrabF( tinP ) ;

        }
            etThread.delF( tinP , posth ) ;
            etThread.delF( tinP , posti ) ;

            bFile.ungrabF( tinP ) ;
            etThread.fileWriteF( tinP , hFile , "\r\n" ) ;
            etThread.fileWriteF( tinP , hFile , posth ) ;
            etThread.fileWriteF( tinP , hFile , "  " ) ;
            etThread.fileWriteF( tinP , hFile , posti ) ;
            bFile.grabF( tinP , TAG( TAGiDnULL ) ) ;

            etThread.strMakeF( tinP , posti , tId ) ; ___( posti ) ;
            ZE( osTextT* , posti ) ;

            etThread.strokeF( tinP , T("  \"")+T(posth)+T("\"\r\n") ) ;

            if( !posth ) etThread.strMakeF( tinP , posth , T("<unnamed>") ) ;
            ((thirdC&)etThread).s_postHostF( tinP , posth , idhMe ) ;
            ZE( osTextT* , posth ) ;
        {
        else
        }
            etThread.strokeF( tinP , T("  could not connect\r\n") ) ;
            etThread = 0 ;
        {
        if( etThread )

        etThread.strokeF( tinP , tId ) ;

        bConsole.grabF( tinP , TAG( TAGiDnULL ) ) ;

        textC tId( tinP , (sCountT)idhMe , flFORMAT_UNSIGNED|flFORMAT_FILLzE , 8 ) ;

        }
            sock.connectF( tinP , ifcPORToLD1hTTP , idhMe ) ;
            socketC sock( tinP , etThread , TAG( TAGiDnULL ) ) ;
        {

        if( bMyQuit ) break ;

        bIdhNext.ungrabF( tinP ) ;
        if( !bMyQuit ) idhMe = idhNext ++ ;
        ZE( countT , idhMe ) ;
        boolT bMyQuit = !idhNext ;
        bIdhNext.grabF( tinP , TAG( TAGiDnULL ) ) ;
    {
    while( !ether )

    countT  hFile    =           pTaskP->c5 ;
    batonC& bFile    = *(batonC*)pTaskP->c4 ;
    batonC& bIdhNext = *(batonC*)pTaskP->c3 ;
    batonC& bConsole = *(batonC*)pTaskP->c2 ;
    countT& idhNext  = *(countT*)pTaskP->c1 ;
{
if( pTaskP )
__Z( pTaskP ) ;

TASK( tmScanF )

#define CtHREADS 0x10

/*1*/WAKEhIDE( "findAllPort80Servers" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


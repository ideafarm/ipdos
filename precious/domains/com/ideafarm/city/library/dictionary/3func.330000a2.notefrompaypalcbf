
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    //LOGrAW5( "noteFromPaypalCBF [bGot,bValid]: " , bGot , " " , bValid , "\r\n" ) ;

    //}
    //    }
    //        LOGrAW( tSay ) ;
    //        TN( tSay , "" ) ; tSay = T("keyValue: \"")+tKey+T("\" = \"")+tValue+T("\"\r\n") ;
    //
    //        tValue = T(psttv) ;
    //        tKey   = T(psttLeverKVP) ;
    //
    //        strokeS* psttv = (strokeS*)(countT)swKVP ;
    //        psttLeverKVP = (strokeS*)swKVP.leverF( tinP , idf ) ;
    //    {
    //    for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
    //    countT cFlavors = swKVP.cFlavorsF( tinP ) ;
    //    TN( tValue , "" ) ;
    //    TN( tKey   , "" ) ;
    //{
    LOGrAW( T(psttKVReportP) ) ;

    }
        #endif
        }
            }
                }
                    }
                        }
                            sessionsP.baton.ungrabF( tinP ) ;
                            }
                                if( idAcc == session.getIdAccountF( tinP ) ) session.privilegesF( tinP , session.privilegesF( tinP ) | flSESSIONpRIVILEGE_FULLhEADER ) ;
                                sessionC& session = *(sessionC*)(countT)sessionsP.swSession ;
                                sessionsP.nnLever_peer = *(nicNameC*)sessionsP.swSession.leverF( tinP , idf ) ;
                            {
                            for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                            countT cFlavors = sessionsP.swSession.cFlavorsF( tinP ) ;
                            sessionsP.baton.grabF( tinP , TAG( TAGiDnULL ) ) ;
                        {

                        }
                            etThread.delF( tinP , psttEmail ) ;
                            etThread.boxPutF( tinP , T("//smtp/" ifcEMAIL_AUTOrESPONDERbANKtELLER "/")+T(psttEmail) , tSay , tSay.csF( tinP ) ) ;

                            ) ;

                                "  The organizer will respond to payout requests as quickly as he can."
                                "  Please allow several days for the organizer to make the payout."
                                "  Contact the organizer to request a payout."
                                "  Your commission on this sale will be paid to you on demand, via PayPal (tm)."
                                "A sale of ")+TF2(moneyT1,flFORMAT_NObIGITvALUES)+T(" mEx (tm), worth $")+TF4(dollars,flFORMAT_NObIGITvALUES|flFORMAT_FOREIGN|flFORMAT_NObASE,0,0xa)+T(".")+TF4(cents,flFORMAT_NObIGITvALUES|flFORMAT_FOREIGN|flFORMAT_NObASE,0,0xa)+T(", has just been booked, and you are the sales worker of record for that sale!"
                                "\r\n"
                                "Subject: You've just been paid a commission!\r\n"

                            TN( tSay , "" ) ; tSay = T(

                            countT dollars = moneyT1 / 100 ;
                            countT cents   = moneyT1 % 100 ;

                            queryEmailFromIdAccountF( tinP , psttEmail , idAccCommission ) ; ___( psttEmail ) ;
                            ZE( strokeS* , psttEmail ) ;
                        {
                        if( idAccCommission )

                        }
                            etThread.delF( tinP , psttEmail ) ;
                            etThread.boxPutF( tinP , T("//smtp/" ifcEMAIL_AUTOrESPONDERbANKtELLER "/")+T(psttEmail) , tSay , tSay.csF( tinP ) ) ;

                            ) ;

                                "  Sales workers are not asked to return their commission."
                                "  This is because 7/8 of your purchase price is paid as a commission to sales workers."
                                "IdeaFarm " "(tm) Operations must make 8 sales of the same size to recover from each refund."
                                "\r\n"
                                "  Please do not request a refund unless you really feel entitled to one.\r\n"
                                "  It is an honor system."
                                "  Instead of asking you to trust us, we do business in a way that requires that we trust you!"
                                "  This is an example of the trust reversal policy of IdeaFarm " "(tm) Operations."
                                "  However, if you feel that you are entitled to a refund, you will be given one, no questions asked."
                                "This is a nonrefundable purchase."
                                "\r\n"
                                "  You can view the details of this payment by logging into your PayPal (tm) account.\r\n"
                                "This is a notification that your PayPal (tm) account has been used to make a purchase at IDEAFARM.COM."
                                "\r\n"
                                "Subject: Thank you for your deposit!\r\n"

                            TN( tSay , "" ) ; tSay = T(

                            queryEmailFromIdAccountF( tinP , psttEmail , idAcc ) ; ___( psttEmail ) ;
                            ZE( strokeS* , psttEmail ) ;
                        {

                        { depositS info( tinP , 1/*idAccBucketOwner*/ , 1/*idBucket*/ , 1/*idProduct*/ , idAcc/*Depositor*/ , 0/*pczNote*/ , timeN1 , timeN2 , 1/*idDeposit*/ , idAccCommission , moneyT1 , moneyT2 ) ; }
                        count8S c8n( 6 , 7 , 8 , 9 ) ;

                        //U::CONoUTrAW7( "deposit: [moneyT1,idAcc,idAccCommission]: " , moneyT1 , " " , idAcc , " " , idAccCommission , "\r\n" ) ;
                    
                        etThread.osTimeNowUniqueF( tinP , timeN1 , timeN2 ) ;
                        ZE( sCountT , timeN2 ) ;
                        ZE( countT  , timeN1 ) ;
        
                        else                        etThread.osTimeSubtractF( tinP , moneyT1 , moneyT2 , - cMoneyIn , 0 ) ;
                        if( (sCountT)cMoneyIn > 0 ) moneyT1 = cMoneyIn ;
                        ZE( sCountT , moneyT2 ) ;
                        ZE( countT  , moneyT1 ) ;
                    {
                    if( bValid || idTest == ifcIDtESTpASSCODE ) //ARBITRARY SECRET PASSWORD; DISABLE THE TEST ACCEPTANCE EXCEPT WHEN TESTING
                    //ifcIDtESTpASSCODE IS USED BY THE TOOL THAT ALLOWS ME TO MANUALLY SIMULATE PAYMENTS

                    }
                        etThread.delF( tinP , pstt1w ) ;
                        }
                            etThread.delF( tinP , pstt2w ) ;
                            }



                                }
                                    }
                                        break ;
                                        if( !etThread.strCompareF( tinP , psttc2 , tCustomKeyIdAccCommission ) ) idArm = 1 ;
                                    {
                                    default :
                                    }
                                        break ;
                                        idAccCommission = etThread.strDigitsToSCountF( tinP , psttc2 , 36 ) ;
                                    {
                                    case 1 :
                                {
                                switch( idArm )
                            {
                            FORsTRINGSiN2( pstt2w )
                            ZE( countT , idArm ) ;
                            etThread.strWordsOldF( tinP , pstt2w , psttc1 , sttq , T(TbLACK)+T(":") ) ; ___( pstt2w ) ;
                            strokeS sttq( 0 , sc_IGNOREqUOTES ) ;
                            ZE( strokeS* , pstt2w ) ;
                        {
                        FORsTRINGSiN1( pstt1w )
                        etThread.strWordsOldF( tinP , pstt1w , tValuePaypalCustom , sttq , T(TbLACK)+T(";") ) ; ___( pstt1w ) ;
                        strokeS sttq( 0 , sc_IGNOREqUOTES ) ;
                        ZE( strokeS* , pstt1w ) ;

                        TN( tCustomKeyIdAccCommission , "idAccCommission" ) ;
                    {
                    if( tValuePaypalCustom.csF( tinP ) )
                    ZE( countT , idAccCommission ) ;

                {
                if( cMoneyIn )
    
                countT cMoneyIn = cMoneyGross - cMoneyFee ;

                countT cMoneyFee   = cMoneyF( tinP , etThread , tValuePaypalPaymentFee   ) ;
                countT cMoneyGross = cMoneyF( tinP , etThread , tValuePaypalPaymentGross ) ;
            {
            )
                )
                    !etThread.strCompareF( tinP , tValuePaypalPaymentStatus , T("Refunded" ) )
                    !etThread.strCompareF( tinP , tValuePaypalPaymentStatus , T("Completed") ) ||
                (
                !POOP &&
            (
            if

            }
                }
                    }
                        //U::CONoUTrAW( T("updating account description NEW [")+*pptKey[offo]+T("]: \"")+T(pstto)+T("\"\r\n") ) ;
                        if( pptValue[ offo ]->csF( tinP ) ) { etThread.strMakeF( tinP , pstto , *pptValue[ offo ] ) ; ___( pstto ) ; }
                        if( pstto ) { PUSE( tinP , *(byteT**)&pstto ) ; }
                        //U::CONoUTrAW( T("updating account description OLD [")+*pptKey[offo]+T("]: \"")+T(pstto)+T("\"\r\n") ) ;
                        strokeS*& pstto = *pppstto[ offo ] ;
                    {
                    for( countT offo = 0 ; offo < cField ; offo ++ )
                {
                if( !POOP )

                }
                    __( cField - cKey + 5 ) ; //CS:B
                    __( cValue - cKey ) ;
                    countT cValue = sizeof pptValue / sizeof pptValue[ 0 ] ;
                {
                countT cField = sizeof pppstto  / sizeof pppstto[  0 ] ;
                countT cKey   = sizeof pptKey   / sizeof pptKey[   0 ] ;

                } ;
                    &info.psttResidenceCountry              ,
                    &info.psttPaypalProtectionEligibility   ,
                    &info.psttPaypalPayerStatus             ,
                    &info.psttPaypalPayerId                 ,
                    &info.psttPaypalPayerEmail              ,
                    &info.psttLastName                      ,
                    &info.psttFirstName                     ,
                    &info.psttCharset                       ,
                    &info.psttAddressZip                    ,
                    &info.psttAddressStreet                 ,
                    &info.psttAddressStatus                 ,
                    &info.psttAddressState                  ,
                    &info.psttAddressName                   ,
                    &info.psttAddressCountryCode            ,
                    &info.psttAddressCountry                ,
                    &info.psttAddressCity                   ,
                    //CS:CODEsYNC: 1d20005 1d20005 1d20005
                {
                strokeS** pppstto[] =

                if( F(info.flagsThis1) & flACCOUNT1_FYIdOESnOTeXIST ) info.flagsMode = fliACCOUNTmODE_LISTmEdIRECTORY | fliACCOUNTmODE_OWNERcONFIRMED ;

                accountS info( tinP , etThread , idAcc , flACCOUNT1_SET , flACCOUNT2_QUERYfLAGSmODE | flACCOUNT2_QUERYzIPaT ) ; //MUST QUERY FOR ALL FIELDS THAT ARE CAPTURED FROM ACCOUNT OWNER OR FROM ANOTHER SOURCE OTHER THAN PAYPAL
            {
        {
        if( idAcc )

        const countT idAcc = queryIdAccountFromEmailF( tinP , tValuePaypalPayerEmail ) ;

        #if defined( NEVERdEFINED )
        //U:: 20120905: COMMENTED OUT TO BRING UP HTTP SERVER WITH NO DATABASE FUNCTIONALITY; ALL DATABASE FUNCTIONALITY CODE NEEDS TO BE MIGRATED TO THE NEW LIST SUPPORT IN poolC

        const countT idTest = !tValueIdTest.csF( tinP ) ? 0 : etThread.strDigitsToSCountF( tinP , tValueIdTest ) ;

        }
            }
                if( !etThread.strCompareF( tinP , psttLeverKVP , *pptKey[ offk ] ) ) *pptValue[ offk ] = T((strokeS*)(countT)swKVP) ;
            {
            for( countT offk = 0 ; offk < sizeof pptKey / sizeof pptKey[ 0 ] ; offk ++ )

            psttLeverKVP = (strokeS*)swKVP.leverF( tinP , idf ) ;
        {
        for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
        countT cFlavors = swKVP.cFlavorsF( tinP ) ;

        } ;

            &tValueIdTest                        ,
            &tValuePaypalCustom                  ,
            &tValuePaypalPaymentStatus           ,
            &tValuePaypalPaymentGross            ,
            &tValuePaypalPaymentFee              ,
            //CS:B

            &tValueResidenceCountry              ,
            &tValuePaypalProtectionEligibility   ,
            &tValuePaypalPayerStatus             ,
            &tValuePaypalPayerId                 ,
            &tValuePaypalPayerEmail              ,
            &tValueLastName                      ,
            &tValueFirstName                     ,
            &tValueCharset                       ,
            &tValueAddressZip                    ,
            &tValueAddressStreet                 ,
            &tValueAddressStatus                 ,
            &tValueAddressState                  ,
            &tValueAddressName                   ,
            &tValueAddressCountryCode            ,
            &tValueAddressCountry                ,
            &tValueAddressCity                   ,
            //CS:CODEsYNC: 1d20005 1d20005 1d20005
        {
        textC* pptValue[] =

        } ;
            &tKeyIdTest                         ,
            &tKeyPaypalCustom                   ,
            &tKeyPaypalPaymentStatus            ,
            &tKeyPaypalPaymentGross             ,
            &tKeyPaypalPaymentFee               ,
            //CS:B

            &tKeyResidenceCountry               ,
            &tKeyPaypalProtectionEligibility    ,
            &tKeyPaypalPayerStatus              ,
            &tKeyPaypalPayerId                  ,
            &tKeyPaypalPayerEmail               ,
            &tKeyLastName                       ,
            &tKeyFirstName                      ,
            &tKeyCharset                        ,
            &tKeyAddressZip                     ,
            &tKeyAddressStreet                  ,
            &tKeyAddressStatus                  ,
            &tKeyAddressState                   ,
            &tKeyAddressName                    ,
            &tKeyAddressCountryCode             ,
            &tKeyAddressCountry                 ,
            &tKeyAddressCity                    ,
            //CS:CODEsYNC: 1d20005 1d20005 1d20005
        {
        textC* pptKey[] =

        TN( tValueIdTest                        , "" ) ;
        TN( tValuePaypalCustom                  , "" ) ;
        TN( tValuePaypalPaymentStatus           , "" ) ;
        TN( tValuePaypalPaymentGross            , "" ) ;
        TN( tValuePaypalPaymentFee              , "" ) ;

        TN( tValueResidenceCountry              , "" ) ;
        TN( tValuePaypalProtectionEligibility   , "" ) ;
        TN( tValuePaypalPayerStatus             , "" ) ;
        TN( tValuePaypalPayerId                 , "" ) ;
        TN( tValuePaypalPayerEmail              , "" ) ;
        TN( tValueLastName                      , "" ) ;
        TN( tValueFirstName                     , "" ) ;
        TN( tValueCharset                       , "" ) ;
        TN( tValueAddressZip                    , "" ) ;
        TN( tValueAddressStreet                 , "" ) ;
        TN( tValueAddressStatus                 , "" ) ;
        TN( tValueAddressState                  , "" ) ;
        TN( tValueAddressName                   , "" ) ;
        TN( tValueAddressCountryCode            , "" ) ;
        TN( tValueAddressCountry                , "" ) ;
        TN( tValueAddressCity                   , "" ) ;

        TN( tKeyIdTest                      , "ifcidtest"      ) ;
        TN( tKeyPaypalCustom                , "custom"         ) ;
        TN( tKeyPaypalPaymentStatus         , "payment_status" ) ;
        TN( tKeyPaypalPaymentGross          , "payment_gross"  ) ;
        TN( tKeyPaypalPaymentFee            , "payment_fee"    ) ;

        TN( tKeyResidenceCountry            , "residence_country"      ) ;
        TN( tKeyPaypalProtectionEligibility , "protection_eligibility" ) ;
        TN( tKeyPaypalPayerStatus           , "payer_status"           ) ;
        TN( tKeyPaypalPayerId               , "payer_id"               ) ;
        TN( tKeyPaypalPayerEmail            , "payer_email"            ) ;
        TN( tKeyLastName                    , "last_name"              ) ;
        TN( tKeyFirstName                   , "first_name"             ) ;
        TN( tKeyCharset                     , "charset"                ) ;
        TN( tKeyAddressZip                  , "address_zip"            ) ;
        TN( tKeyAddressStreet               , "address_street"         ) ;
        TN( tKeyAddressStatus               , "address_status"         ) ;
        TN( tKeyAddressState                , "address_state"          ) ;
        TN( tKeyAddressName                 , "address_name"           ) ;
        TN( tKeyAddressCountryCode          , "address_country_code"   ) ;
        TN( tKeyAddressCountry              , "address_country"        ) ;
        TN( tKeyAddressCity                 , "address_city"           ) ;
    {

    }
        }
            }
                }
                    ++ s ; etThread.osSleepF( tinP , TOCK ) ;
                    //LOGrAW3( "" , cTries , ": napping because did not receive a valid reply from www.paypal.com to confirm that the ipn is valid\r\n" ) ;
                {
                if( !bGot && cTries )

                if( POOP ) POOPR
            
                }
                    default : { __1 ; break ; }
                    }
                        break ;
                        if( !POOP ) { bGot = 1 ; bValid = 0 ; }
                        __NZ( !!tinP.pEtScratch->strCompareF( tinP , T(postReply) , T("INVALID") ) ) ;
                        sock.readF( tinP , posti , 6 ) ; posti += 6 ; *posti = 0 ;
                    {
                    case 'I' :
                    }
                        break ;
                        if( !POOP ) { bGot = 1 ; bValid = 1 ; }
                        __NZ( !!tinP.pEtScratch->strCompareF( tinP , T(postReply) , T("VERIFIED") ) ) ;
                        sock.readF( tinP , posti , 7 ) ; posti += 7 ; *posti = 0 ;
                    {
                    case 'V' :
                {
                switch( postReply[ 0 ] )
                sock.readF( tinP , posti ++ , 1 ) ;
                osTextT* posti = postReply ;
                osTextT postReply[ 9 ] = "12345678" ;
                
                }
                    if( bNull ) break ;
                    etThread.delF( tinP , psttl ) ;
                    boolT bNull = !psttl || !psttl->idAdam ;
                    sock.readWoLineF( tinP , psttl , TOCK ) ; ___( psttl ) ;
                    ZE( strokeS* , psttl ) ;
                {
                while( !POOP )

                sock.writeF( tinP , (osTextT*)tSay , tSay.csF( tinP ) ) ;
                sock.connectF( tinP , 0x50 , nnPayPal ) ;
                socketC sock( tinP , *tinP.pEtScratch , TAG( TAGiDnULL ) ) ;
            {
            if( nnPayPal ) while( !bGot && cTries -- )
            sleepC s( tinP , TAG( TAGiDnULL ) ) ;
            countT cTries = TUCK >> 4 ;

            nicNameC nnPayPal = socketC::nicNameIF( tinP , *tinP.pEtScratch , T("www.paypal.com") ) ;
        
            SCOOPS
        {
        IFsCRATCH

        }
            tSay = tSay1+tSayBody+tSay2 ;
            TN( tSay2 , " HTTP/1.0\r\n\r\n" ) ;
            TN( tSayBody , postBodyP ) ;
            TN( tSay1 , "GET /cgi-bin/webscr?cmd=_notify-validate&" ) ;
        {                        
        TN( tSay , "" ) ;
    {
    ZE( boolT , bGot ) ;
    ZE( boolT , bValid ) ;
{
/*1*/voidT noteFromPaypalCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP )/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


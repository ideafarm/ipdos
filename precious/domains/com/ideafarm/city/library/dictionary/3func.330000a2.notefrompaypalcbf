
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    etThread.traceF( tinP , T("noteFromPaypalCBF [bGot,bValid]:    ")+TF2(bGot,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(bValid,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;

    //}
    //    }
    //        LOGrAW( tSay ) ;
    //        TN( tSay , "" ) ; tSay = T("keyValue: \"")+tKey+T("\" = \"")+tValue+T("\"\r\n") ;
    //
    //        tValue = T(psttv) ;
    //        tKey   = T(psttLeverKVP) ;
    //
    //        strokeS* psttv = (strokeS*)(countT)swKVP ;
    //        psttLeverKVP = (strokeS*)swKVP.leverF( tinP , idf ) ;
    //    {
    //    for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
    //    countT cFlavors = swKVP.cFlavorsF( tinP ) ;
    //    TN( tValue , "" ) ;
    //    TN( tKey   , "" ) ;
    //{

    LOGrAW( "\r\n---- psttKVReportP (END) -----------------------------------------------------------------\r\n" ) ;
    LOGrAW( T(psttKVReportP) ) ;
    LOGrAW( "\r\n---- psttKVReportP (BEGIN) -----------------------------------------------------------------\r\n" ) ;
    LOGrAW3( "noteFromPaypalCBF [bValid]:    " , bValid , "\r\n" ) ;

    }
        }
            THREADmODE1rESTORE

            //U::etThread.boxPutF( tinP , T("smtp.mailgun.org[admin]/b42/smtp/")+tHost+T("@ideafarm.com/")+tValuePaypalPayerEmail+T("//wo@ideafarm.com/ideafarm.factory.reports@gmail.com") , tBody ) ;
            etThread.boxPutF( tinP , T("smtp.mailgun.org[admin]/b42/smtp/")+tHost+T("@ideafarm.com/")+T("ideafarmcity@gmail.com")+T("//wo@ideafarm.com/ideafarm.factory.reports@gmail.com") , tBody ) ; //U::

            tBody += T("time:  ")+tTime+T("\r\n") ;
            tBody += T("\r\nreference:  ")+tShort+T("\r\n") ;

            }
                tBody += T("country:  ")+tValueAddressCountry+T("\r\n") ;
                tBody += T("postal code:  ")+tValueAddressZip+T("\r\n") ;
            {
            if( !bDelete )

            tBody += T("email:  ")+tValuePaypalPayerEmail+T("\r\n") ;

            ) ;

                    "\r\n"
                    "The following information has been registered:\r\n"
                    "Thank you for deciding to participate in Wo'O's Table.\r\n"
                    "\r\n"
                    "Subject: Wo'O's Table:  Your email is now registered.\r\n"
                :    
                    "\r\n"
                    "Sorry to see you go!  If you change your mind, just register again.\r\n"
                    "\r\n"
                    "Subject: Wo'O's Table:  Your email has been unregistered, effective immediately.\r\n"
                ?
                bDelete

            TN( tBody ,

            ZE( boolT , bDelete ) ; //U:: GET THIS FROM PAYPAL NOTIFICATION OF SUBSCRIPTION CANCELLATION

            textC tTime( ifcIDtEXTgEN_TIMEnOWfOREIGN , tinP , TAG( TAGiDnULL ) ) ;

            }
                etThread.delF( tinP , psttFile ) ;
                etThread.delF( tinP , psttShort ) ;
                etThread.delF( tinP , psttnu ) ;
                tShort = T(psttShort) ;
                etThread.strBisectF( tinP , psttnu , psttShort , psttFile , T("/") , - 1 , flSTRbISECT_APPENDdELIMITER ) ; ___( psttnu ) ; ___( psttShort ) ;
                ZE( strokeS* , psttShort ) ;
                ZE( strokeS* , psttnu ) ;

                etThread.boxPutUniqueF( tinP , psttFile , T("///ideafarm/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/paid.live.email/paid.live.email.")+tHost , WS( rec ) ) ; ___( psttFile ) ;
                ZE( strokeS* , psttFile ) ;
            {
            TN( tShort , "" ) ;

            }
                if( !tHost.csF( tinP ) ) tHost = T("factories") ;
                etThread.delF( tinP , psttHost ) ;
                else       tHost = T(psttHost) ;
                if( POOP ) { POOPR ; }
                tinP.pEtScratch->sockPsttHostF( tinP , psttHost ) ; ___( psttHost ) ;
                ZE( strokeS* , psttHost ) ;

                SCOOPS
            {
            IFsCRATCH
            TN( tHost , "" ) ;

            THREADmODE1oN( flTHREADmODE1_ALLOWsTOPwHILEgRABBING )

            rec << (strokeS*)tValueTransId          ;
            rec << (strokeS*)tValueTransType        ;
            rec << (strokeS*)tValueRewardBox        ;
            rec << (strokeS*)tValueRewardBoxHidden  ;
            rec << (strokeS*)tValueAddressCountry   ;
            rec << (strokeS*)tValueAddressZip       ;
            rec << (strokeS*)tValuePaypalPayerEmail ;
            rec << (strokeS*)T(nnPeerP)             ;
            rec << (strokeS*)tAction                ;
            rec << (countT)4                        ; // IDfORMAT
            rec << finger                           ;
            soulC rec( tinP , TAG( TAGiDnULL ) ) ;

            TN( tAction , !etThread.strCompareF( tinP , tValuePaypalPaymentStatus , T("Refunded") ) ? "unregister" : "register" ) ;

            putNegAM( *(countT*)&finger , FINGERnEG_WOtABLEcONFIRMEDeMAIL ) ;
            ZE( countT , finger ) ;
        {
        // 20200604@1905:  REGISTER THE PURCHASER FOR WO'O'S TABLE

        #endif

            }
                }
                    }
                        }
                            }
                                sessionsP.baton.ungrabF( tinP ) ;
                                }
                                    if( idAcc == session.getIdAccountF( tinP ) ) session.privilegesF( tinP , session.privilegesF( tinP ) | flSESSIONpRIVILEGE_FULLhEADER ) ;
                                    sessionC& session = *(sessionC*)(countT)sessionsP.swSession ;
                                    sessionsP.nnLever_peer = *(nicNameC*)sessionsP.swSession.leverF( tinP , idf ) ;
                                {
                                for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                                countT cFlavors = sessionsP.swSession.cFlavorsF( tinP ) ;
                                sessionsP.baton.grabF( tinP , TAG( TAGiDnULL ) ) ;
                            {

                            }
                                etThread.delF( tinP , psttEmail ) ;
                                etThread.boxPutF( tinP , T("//smtp/" ifcEMAIL_AUTOrESPONDERbANKtELLER "/")+T(psttEmail) , tSay , tSay.csF( tinP ) ) ;

                                ) ;

                                    "  The organizer will respond to payout requests as quickly as he can."
                                    "  Please allow several days for the organizer to make the payout."
                                    "  Contact the organizer to request a payout."
                                    "  Your commission on this sale will be paid to you on demand, via PayPal (tm)."
                                    "A sale of ")+TF2(moneyT1,flFORMAT_NObIGITvALUES)+T(" mEx (tm), worth $")+TF4(dollars,flFORMAT_NObIGITvALUES|flFORMAT_FOREIGN|flFORMAT_NObASE,0,0xa)+T(".")+TF4(cents,flFORMAT_NObIGITvALUES|flFORMAT_FOREIGN|flFORMAT_NObASE,0,0xa)+T(", has just been booked, and you are the sales worker of record for that sale!"
                                    "\r\n"
                                    "Subject: You've just been paid a commission!\r\n"

                                TN( tSay , "" ) ; tSay = T(

                                countT dollars = moneyT1 / 100 ;
                                countT cents   = moneyT1 % 100 ;

                                queryEmailFromIdAccountF( tinP , psttEmail , idAccCommission ) ; ___( psttEmail ) ;
                                ZE( strokeS* , psttEmail ) ;
                            {
                            if( idAccCommission )

                            }
                                etThread.delF( tinP , psttEmail ) ;
                                etThread.boxPutF( tinP , T("//smtp/" ifcEMAIL_AUTOrESPONDERbANKtELLER "/")+T(psttEmail) , tSay , tSay.csF( tinP ) ) ;

                                ) ;

                                    "  Sales workers are not asked to return their commission."
                                    "  This is because 7/8 of your purchase price is paid as a commission to sales workers."
                                    "IdeaFarm " "(tm) Operations must make 8 sales of the same size to recover from each refund."
                                    "\r\n"
                                    "  Please do not request a refund unless you really feel entitled to one.\r\n"
                                    "  It is an honor system."
                                    "  Instead of asking you to trust us, we do business in a way that requires that we trust you!"
                                    "  This is an example of the trust reversal policy of IdeaFarm " "(tm) Operations."
                                    "  However, if you feel that you are entitled to a refund, you will be given one, no questions asked."
                                    "This is a nonrefundable purchase."
                                    "\r\n"
                                    "  You can view the details of this payment by logging into your PayPal (tm) account.\r\n"
                                    "This is a notification that your PayPal (tm) account has been used to make a purchase at IDEAFARM.COM."
                                    "\r\n"
                                    "Subject: Thank you for your deposit!\r\n"

                                TN( tSay , "" ) ; tSay = T(

                                queryEmailFromIdAccountF( tinP , psttEmail , idAcc ) ; ___( psttEmail ) ;
                                ZE( strokeS* , psttEmail ) ;
                            {

                            { depositS info( tinP , 1/*idAccBucketOwner*/ , 1/*idBucket*/ , 1/*idProduct*/ , idAcc/*Depositor*/ , 0/*pczNote*/ , timeN1 , timeN2 , 1/*idDeposit*/ , idAccCommission , moneyT1 , moneyT2 ) ; }
                            count8S c8n( 6 , 7 , 8 , 9 ) ;

                            //U::CONoUTrAW7( "deposit: [moneyT1,idAcc,idAccCommission]: " , moneyT1 , " " , idAcc , " " , idAccCommission , "\r\n" ) ;
                        
                            etThread.osTimeNowUniqueF( tinP , timeN1 , timeN2 ) ;
                            ZE( sCountT , timeN2 ) ;
                            ZE( countT  , timeN1 ) ;
            
                            else                        etThread.osTimeSubtractF( tinP , moneyT1 , moneyT2 , - cMoneyIn , 0 ) ;
                            if( (sCountT)cMoneyIn > 0 ) moneyT1 = cMoneyIn ;
                            ZE( sCountT , moneyT2 ) ;
                            ZE( countT  , moneyT1 ) ;
                        {

                        }
                            etThread.delF( tinP , pstt1w ) ;
                            }
                                etThread.delF( tinP , pstt2w ) ;
                                }



                                    }
                                        }
                                            break ;
                                            if( !etThread.strCompareF( tinP , psttc2 , tCustomKeyIdAccCommission ) ) idArm = 1 ;
                                        {
                                        default :
                                        }
                                            break ;
                                            idAccCommission = etThread.strDigitsToSCountF( tinP , psttc2 , 36 ) ;
                                        {
                                        case 1 :
                                    {
                                    switch( idArm )
                                {
                                FORsTRINGSiN2( pstt2w )
                                ZE( countT , idArm ) ;
                                etThread.strWordsOldF( tinP , pstt2w , psttc1 , sttq , T(TbLACK)+T(":") ) ; ___( pstt2w ) ;
                                strokeS sttq( 0 , sc_IGNOREqUOTES ) ;
                                ZE( strokeS* , pstt2w ) ;
                            {
                            FORsTRINGSiN1( pstt1w )
                            etThread.strWordsOldF( tinP , pstt1w , tValuePaypalCustom , sttq , T(TbLACK)+T(";") ) ; ___( pstt1w ) ;
                            strokeS sttq( 0 , sc_IGNOREqUOTES ) ;
                            ZE( strokeS* , pstt1w ) ;

                            TN( tCustomKeyIdAccCommission , "idAccCommission" ) ;
                        {
                        if( tValuePaypalCustom.csF( tinP ) )
                        ZE( countT , idAccCommission ) ;

                    {
                    if( cMoneyIn )
        
                    countT cMoneyIn = cMoneyGross - cMoneyFee ;

                    countT cMoneyFee   = cMoneyF( tinP , etThread , tValuePaypalPaymentFee   ) ;
                    countT cMoneyGross = cMoneyF( tinP , etThread , tValuePaypalPaymentGross ) ;
                {
                )
                    )
                        !etThread.strCompareF( tinP , tValuePaypalPaymentStatus , T("Refunded" ) )
                        !etThread.strCompareF( tinP , tValuePaypalPaymentStatus , T("Completed") ) ||
                    (
                    !POOP &&
                (
                if

                }
                    }
                        }
                            //U::CONoUTrAW( T("updating account description NEW [")+*pptKey[offo]+T("]: \"")+T(pstto)+T("\"\r\n") ) ;
                            if( pptValue[ offo ]->csF( tinP ) ) { etThread.strMakeF( tinP , pstto , *pptValue[ offo ] ) ; ___( pstto ) ; }
                            if( pstto ) { PUSE( tinP , *(byteT**)&pstto ) ; }
                            //U::CONoUTrAW( T("updating account description OLD [")+*pptKey[offo]+T("]: \"")+T(pstto)+T("\"\r\n") ) ;
                            strokeS*& pstto = *pppstto[ offo ] ;
                        {
                        for( countT offo = 0 ; offo < cField ; offo ++ )
                    {
                    if( !POOP )

                    }
                        __( cField - cKey + 5 ) ; //CS:B
                        __( cValue - cKey ) ;
                        countT cValue = sizeof pptValue / sizeof pptValue[ 0 ] ;
                    {
                    countT cField = sizeof pppstto  / sizeof pppstto[  0 ] ;
                    countT cKey   = sizeof pptKey   / sizeof pptKey[   0 ] ;

                    } ;
                        &info.psttResidenceCountry              ,
                        &info.psttPaypalProtectionEligibility   ,
                        &info.psttPaypalPayerStatus             ,
                        &info.psttPaypalPayerId                 ,
                        &info.psttPaypalPayerEmail              ,
                        &info.psttLastName                      ,
                        &info.psttFirstName                     ,
                        &info.psttCharset                       ,
                        &info.psttAddressZip                    ,
                        &info.psttAddressStreet                 ,
                        &info.psttAddressStatus                 ,
                        &info.psttAddressState                  ,
                        &info.psttAddressName                   ,
                        &info.psttAddressCountryCode            ,
                        &info.psttAddressCountry                ,
                        &info.psttAddressCity                   ,
                        //CS:CODEsYNC: 1d20005 1d20005 1d20005

                        //20200622@1031: NO LONGER KEPT IN SYNC BECAUSE AM NOT USING THIS ACCOUNTING SYSTEM
                    {
                    strokeS** pppstto[] =

                    if( F(info.flagsThis1) & flACCOUNT1_FYIdOESnOTeXIST ) info.flagsMode = fliACCOUNTmODE_LISTmEdIRECTORY | fliACCOUNTmODE_OWNERcONFIRMED ;

                    accountS info( tinP , etThread , idAcc , flACCOUNT1_SET , flACCOUNT2_QUERYfLAGSmODE | flACCOUNT2_QUERYzIPaT ) ; //MUST QUERY FOR ALL FIELDS THAT ARE CAPTURED FROM ACCOUNT OWNER OR FROM ANOTHER SOURCE OTHER THAN PAYPAL
                {
            {
            if( idAcc )

            const countT idAcc = queryIdAccountFromEmailF( tinP , tValuePaypalPayerEmail ) ;

        #if defined( NEVERdEFINED )
        //U:: 20120905: COMMENTED OUT TO BRING UP HTTP SERVER WITH NO DATABASE FUNCTIONALITY; ALL DATABASE FUNCTIONALITY CODE NEEDS TO BE MIGRATED TO THE NEW LIST SUPPORT IN poolC

        const countT idTest = !tValueIdTest.csF( tinP ) ? 0 : etThread.strDigitsToSCountF( tinP , tValueIdTest ) ;

        }
            }
                if( !etThread.strCompareF( tinP , psttLeverKVP , *pptKey[ offk ] ) ) *pptValue[ offk ] = T((strokeS*)(countT)swKVP) ;
            {
            for( countT offk = 0 ; offk < sizeof pptKey / sizeof pptKey[ 0 ] ; offk ++ )

            psttLeverKVP = (strokeS*)swKVP.leverF( tinP , idf ) ;
        {
        for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
        countT cFlavors = swKVP.cFlavorsF( tinP ) ;

        } ;
            &tValueTransId                       ,
            &tValueTransType                     ,

            &tValueRewardBox                     ,
            &tValueRewardBoxHidden               ,

            &tValueIdTest                        ,
            &tValuePaypalCustom                  ,
            &tValuePaypalPaymentStatus           ,
            &tValuePaypalPaymentGross            ,
            &tValuePaypalPaymentFee              ,
            //CS:B

            &tValueResidenceCountry              ,
            &tValuePaypalProtectionEligibility   ,
            &tValuePaypalPayerStatus             ,
            &tValuePaypalPayerId                 ,
            &tValuePaypalPayerEmail              ,
            &tValueLastName                      ,
            &tValueFirstName                     ,
            &tValueCharset                       ,
            &tValueAddressZip                    ,
            &tValueAddressStreet                 ,
            &tValueAddressStatus                 ,
            &tValueAddressState                  ,
            &tValueAddressName                   ,
            &tValueAddressCountryCode            ,
            &tValueAddressCountry                ,
            &tValueAddressCity                   ,
            //CS:CODEsYNC: 1d20005 1d20005 1d20005
        {
        textC* pptValue[] =

        } ;
            &tKeyTransId                        ,
            &tKeyTransType                      ,

            &tKeyRewardBox                      ,
            &tKeyRewardBoxHidden                ,

            &tKeyIdTest                         ,
            &tKeyPaypalCustom                   ,
            &tKeyPaypalPaymentStatus            ,
            &tKeyPaypalPaymentGross             ,
            &tKeyPaypalPaymentFee               ,
            //CS:B

            &tKeyResidenceCountry               ,
            &tKeyPaypalProtectionEligibility    ,
            &tKeyPaypalPayerStatus              ,
            &tKeyPaypalPayerId                  ,
            &tKeyPaypalPayerEmail               ,
            &tKeyLastName                       ,
            &tKeyFirstName                      ,
            &tKeyCharset                        ,
            &tKeyAddressZip                     ,
            &tKeyAddressStreet                  ,
            &tKeyAddressStatus                  ,
            &tKeyAddressState                   ,
            &tKeyAddressName                    ,
            &tKeyAddressCountryCode             ,
            &tKeyAddressCountry                 ,
            &tKeyAddressCity                    ,
            //CS:CODEsYNC: 1d20005 1d20005 1d20005
        {
        textC* pptKey[] =

        TN( tValueTransId                       , "" ) ;
        TN( tValueTransType                     , "" ) ;

        TN( tValueRewardBox                     , "" ) ;
        TN( tValueRewardBoxHidden               , "" ) ;

        TN( tValueIdTest                        , "" ) ;
        TN( tValuePaypalCustom                  , "" ) ;
        TN( tValuePaypalPaymentStatus           , "" ) ;
        TN( tValuePaypalPaymentGross            , "" ) ;
        TN( tValuePaypalPaymentFee              , "" ) ;

        TN( tValueResidenceCountry              , "" ) ;
        TN( tValuePaypalProtectionEligibility   , "" ) ;
        TN( tValuePaypalPayerStatus             , "" ) ;
        TN( tValuePaypalPayerId                 , "" ) ;
        TN( tValuePaypalPayerEmail              , "" ) ;
        TN( tValueLastName                      , "" ) ;
        TN( tValueFirstName                     , "" ) ;
        TN( tValueCharset                       , "" ) ;
        TN( tValueAddressZip                    , "" ) ;
        TN( tValueAddressStreet                 , "" ) ;
        TN( tValueAddressStatus                 , "" ) ;
        TN( tValueAddressState                  , "" ) ;
        TN( tValueAddressName                   , "" ) ;
        TN( tValueAddressCountryCode            , "" ) ;
        TN( tValueAddressCountry                , "" ) ;
        TN( tValueAddressCity                   , "" ) ;

        TN( tKeyTransId                         , "txn_id"                 ) ;
        TN( tKeyTransType                       , "txn_type"               ) ;

        TN( tKeyRewardBox                       , "option_selection1"      ) ;
        TN( tKeyRewardBoxHidden                 , "option_selection2"      ) ;

        TN( tKeyIdTest                          , "ifcidtest"              ) ;
        TN( tKeyPaypalCustom                    , "custom"                 ) ;
        TN( tKeyPaypalPaymentStatus             , "payment_status"         ) ;
        TN( tKeyPaypalPaymentGross              , "payment_gross"          ) ;
        TN( tKeyPaypalPaymentFee                , "payment_fee"            ) ;

        TN( tKeyResidenceCountry                , "residence_country"      ) ;
        TN( tKeyPaypalProtectionEligibility     , "protection_eligibility" ) ;
        TN( tKeyPaypalPayerStatus               , "payer_status"           ) ;
        TN( tKeyPaypalPayerId                   , "payer_id"               ) ;
        TN( tKeyPaypalPayerEmail                , "payer_email"            ) ;
        TN( tKeyLastName                        , "last_name"              ) ;
        TN( tKeyFirstName                       , "first_name"             ) ;
        TN( tKeyCharset                         , "charset"                ) ;
        TN( tKeyAddressZip                      , "address_zip"            ) ;
        TN( tKeyAddressStreet                   , "address_street"         ) ;
        TN( tKeyAddressStatus                   , "address_status"         ) ;
        TN( tKeyAddressState                    , "address_state"          ) ;
        TN( tKeyAddressName                     , "address_name"           ) ;
        TN( tKeyAddressCountryCode              , "address_country_code"   ) ;
        TN( tKeyAddressCountry                  , "address_country"        ) ;
        TN( tKeyAddressCity                     , "address_city"           ) ;
    {
    if( bValid /*|| idTest == ifcIDtESTpASSCODE*/ )
    //ifcIDtESTpASSCODE IS USED BY THE TOOL THAT ALLOWS ME TO MANUALLY SIMULATE PAYMENTS  //ARBITRARY SECRET PASSWORD; DISABLE THE TEST ACCEPTANCE EXCEPT WHEN TESTING

    }
        }
            }
                }
                    ++ s ; etThread.osSleepF( tinP , TOCK ) ;
                    etThread.traceF( tinP , TF2(cTries,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(": napping because did not receive a valid reply from www.paypal.com to confirm that the ipn is valid") ) ;
                {
                if( !bGot && cTries )

                if( POOP ) POOPR

                bGot = 1 ;
                bValid = ostVerdict == 'V' ;
                etThread.traceF( tinP , T("verdict:    ")+T(postVerdict) ) ;
                osTextT postVerdict[ 2 ] = { ostVerdict , 0 } ;

                }
                    //LOGrAW( "\r\n---- validation response debug (END) -----------------------------------------------------------------\r\n" ) ;
                    }
                        }
                            bArmed = 1 ;
                        {
                        )
                            && post5[ ( cIn - 4 ) % sizeof post5 ] == '\r'
                            && post5[ ( cIn - 3 ) % sizeof post5 ] == '\n'
                            && post5[ ( cIn - 2 ) % sizeof post5 ] == '\r'
                            && post5[ ( cIn - 1 ) % sizeof post5 ] == '\n'
                            cIn >= 4
                        (
                        else if
                        }
                            break ;
                            ;
                                : 'I'
                                ? 'V'
                            ostVerdict = ostNow == 'V'
                        {
                        if( bArmed )

                        //}
                        //    LOGrAW( post2 ) ;
                        //    osTextT post2[] = { ostNow , 0 } ;
                        //{

                        osTextT ostNow = post5[ ( cIn - 1 ) % sizeof post5 ] ;

                        sock.readF( tinP , post5 + ( cIn ++ ) % sizeof post5 , 1 ) ;
                    {
                    while( !POOP )
                    ZE( countT , cIn ) ;
                    osTextT post5[ 5 ] = { 0 , 0 , 0 , 0 , 0 } ;
                    ZE( boolT , bArmed ) ;
                    //LOGrAW( "\r\n---- validation response debug (BEGIN) -----------------------------------------------------------------\r\n" ) ;
                {
                ZE( osTextT , ostVerdict ) ;

                sock.writeF( tinP , (osTextT*)tSay , tSay.csF( tinP ) ) ;
                sock.connectF( tinP , 443 , nnPayPal ) ;
                socketC sock( tinP , *tinP.pEtScratch , TAG( TAGiDnULL ) , ifcSOCKETtYPE_STREAM , flSOCKETc_CRYPTfOREIGNsSL ) ;
            {
            if( nnPayPal ) while( !bGot && cTries -- )
            sleepC s( tinP , TAG( TAGiDnULL ) ) ;
            countT cTries = TUCK >> 4 ;

            //U::nicNameC nnPayPal = socketC::nicNameIF( tinP , *tinP.pEtScratch , T("www.paypal.com") ) ;
            nicNameC nnPayPal = socketC::nicNameIF( tinP , *tinP.pEtScratch , T("www.sandbox.paypal.com") ) ; //U::
        
            SCOOPS
        {
        IFsCRATCH

        //LOGrAW( "\r\n---- tSay (END) yippee -----------------------------------------------------------------\r\n" ) ;
        //LOGrAW( tSay ) ;
        //LOGrAW( "\r\n---- tSay (BEGIN) yippee -----------------------------------------------------------------\r\n" ) ;

        }
            tSay = tSay1+TF4(costBodyAll,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FOREIGN|flFORMAT_NObASE,0,0xa)+tSay2+tSayCmd+tSayBody ;

            countT costBodyAll = tSayCmd.csF( tinP ) + tSayBody.csF( tinP ) ;

            TN( tSayBody , postBodyP ) ;
            TN( tSayCmd , "cmd=_notify-validate&" ) ;
            TN( tSay2 , "\r\nConnection: close\r\n\r\n" ) ;
            ) ;

                "Content-Length: "
                "Host: www.sandbox.paypal.com\r\n"
                "Content-Type: application/x-www-form-urlencoded\r\n"
                "POST /cgi-bin/webscr HTTP/1.1\r\n"

            TN( tSay1 ,
        {                        
        TN( tSay , "" ) ;

        //LOGrAW( "\r\n---- postBodyP (END) -----------------------------------------------------------------\r\n" ) ;
        //LOGrAW( postBodyP ) ;
        //LOGrAW( "\r\n---- postBodyP (BEGIN) -----------------------------------------------------------------\r\n" ) ;

        //THIS WORKS IN FIREFOX BROWSER: https://www.sandbox.paypal.com:443/cgi-bin/webscr?cmd=_notify-validate&mc_gross=1.00&protection_eligibility=Eligible&address_status=confirmed&payer_id=4QLHUR4EYW37J&address_street=1+Main+St&payment_date=15%3A55%3A04+Jun+04%2C+2020+PDT&payment_status=Completed&charset=windows-1252&address_zip=95131&first_name=John&mc_fee=0.33&address_country_code=US&address_name=John+Doe&notify_version=3.9&subscr_id=I-DEKU4NNTHS0H&payer_status=verified&business=sb-znjve1276155%40business.example.com&address_country=United+States&address_city=San+Jose&verify_sign=AS.sXmO3SZlbZsuBgmx57wrfjxyDAk855hu6vdRmhFRd0mqr2l3hMU7l&payer_email=sb-prtxq883780%40personal.example.com&txn_id=5W609239EF681420H&payment_type=instant&btn_id=4125335&last_name=Doe&address_state=CA&receiver_email=sb-znjve1276155%40business.example.com&payment_fee=0.33&receiver_id=755UKLGFJ8XU2&txn_type=subscr_payment&item_name=Wo'O's+Table+Registration+and+Subscription&mc_currency=USD&item_number=20200604&residence_country=US&test_ipn=1&transaction_subject=Wo'O's+Table+Registration+and+Subscription&payment_gross=1.00&ipn_track_id=5075e5b427054 HTTP/1.0
        //OLD FORMAT: GET /cgi-bin/webscr?cmd=_notify-validate&mc_gross=1.00&protection_eligibility=Eligible&address_status=confirmed&payer_id=4QLHUR4EYW37J&address_street=1+Main+St&payment_date=17%3A04%3A06+Jun+04%2C+2020+PDT&payment_status=Completed&charset=windows-1252&address_zip=95131&first_name=John&mc_fee=0.33&address_country_code=US&address_name=John+Doe&notify_version=3.9&subscr_id=I-1CXF383WH8P0&payer_status=verified&business=sb-znjve1276155%40business.example.com&address_country=United+States&address_city=San+Jose&verify_sign=AEHpL6M1JS9Z4r02TsvVIey5ocFqAgLcANkEe9kVFcJG4kqTWCtTJprq&payer_email=sb-prtxq883780%40personal.example.com&txn_id=1XX85736SF014420R&payment_type=instant&btn_id=4125335&last_name=Doe&address_state=CA&receiver_email=sb-znjve1276155%40business.example.com&payment_fee=0.33&receiver_id=755UKLGFJ8XU2&txn_type=subscr_payment&item_name=Wo%27O%27s+Table+Registration+and+Subscription&mc_currency=USD&item_number=20200604&residence_country=US&test_ipn=1&transaction_subject=Wo%27O%27s+Table+Registration+and+Subscription&payment_gross=1.00&ipn_track_id=92fb2ec1f693b HTTP/1.0
    {
    ZE( boolT , bGot ) ;
    ZE( boolT , bValid ) ;
{
/*1*/voidT noteFromPaypalCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP )/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


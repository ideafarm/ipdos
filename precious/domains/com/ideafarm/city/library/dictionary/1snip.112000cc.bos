
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


    }
        }                                                                                                                                               \
            if( !( tally % CbOStALLYpERlOG ) ) logTallyIF( tally , LF , 0 , idMe , #expP ) ;                                                            \
            countT tally = homeS::homeIF().tallyHo.tallyF( idMe ) ;                                                                                     \
            static countT idMe ;                                                                                                                        \
        {                                                                                                                                               \
        if( F(pg1.flCt) & flCTdTg_napHomeI && !( F(pg1.flDt) & flCTdTg_napHomeI ) )                                                                     \
        processGlobal1S& pg1 = processGlobal1S::_processGlobal1I_IF() ;                                                                                 \
        { expP ; }                                                                                                                                      \
    {                                                                                                                                                   \
                                                                                                                                                        \
#define BOSnOvALUEnOtIN(expP)                                                                                                                           \

    }
        tinP.monitor.idWhat1 = _idWhatSaveBos ;                                                                                                         \
        }                                                                                                                                               \
            if( !( tally % CbOStALLYpERlOG ) ) logTallyIF( tally , LF , 0 , idMe , #expP ) ;                                                            \
            countT tally = homeS::homeIF().tallyHo.tallyF( idMe ) ;                                                                                     \
            static countT idMe ;                                                                                                                        \
        {                                                                                                                                               \
        if( F(pg1.flCt) & flCTdTg_napHomeI && !( F(pg1.flDt) & flCTdTg_napHomeI ) )                                                                     \
        processGlobal1S& pg1 = processGlobal1S::_processGlobal1I_IF() ;                                                                                 \
        { expP ; }                                                                                                                                      \
        whatP                                                                                                                                           \
        countT _idWhatSaveBos = tinP.monitor.idWhat1 ;                                                                                                  \
        tinP.brcQuery = 0 ;                                                                                                                             \
    {                                                                                                                                                   \
                                                                                                                                                        \
#define BOSnOvALUE(whatP,expP)                                                                                                                          \

    }
        tinP.brcm04Raw = _brcm04RawExp ;                                                                                                                \
        tinP.monitor.idWhat1 = _idWhatSaveBos ;                                                                                                         \
        }                                                                                                                                               \
            if( !( tally % CbOStALLYpERlOG ) ) logTallyIF( tally , LF , 0 , idMe , #expP ) ;                                                            \
            countT tally = homeS::homeIF().tallyHo.tallyF( idMe ) ;                                                                                     \
            static countT idMe ;                                                                                                                        \
        {                                                                                                                                               \
        if( F(pg1.flCt) & flCTdTg_napHomeI && !( F(pg1.flDt) & flCTdTg_napHomeI ) )                                                                     \
        processGlobal1S& pg1 = processGlobal1S::_processGlobal1I_IF() ;                                                                                 \
        measure04T _brcm04RawExp = (measure04T)(expP) ;                                                                                                 \
        whatP                                                                                                                                           \
        countT _idWhatSaveBos = tinP.monitor.idWhat1 ;                                                                                                  \
        tinP.brcQuery = 0 ;                                                                                                                             \
    {                                                                                                                                                   \
                                                                                                                                                        \
#define BOSmEASURE04(whatP,expP)                                                                                                                        \

    }
        tinP.brcRaw = _brcRawExp ;                                                                                                                      \
        tinP.monitor.idWhat1 = _idWhatSaveBos ;                                                                                                         \
        }                                                                                                                                               \
            if( !( tally % CbOStALLYpERlOG ) ) logTallyIF( tally , LF , 0 , idMe , #expP ) ;                                                            \
            countT tally = homeS::homeIF().tallyHo.tallyF( idMe ) ;                                                                                     \
            static countT idMe ;                                                                                                                        \
        {                                                                                                                                               \
        if( F(pg1.flCt) & flCTdTg_napHomeI && !( F(pg1.flDt) & flCTdTg_napHomeI ) )                                                                     \
        processGlobal1S& pg1 = processGlobal1S::_processGlobal1I_IF() ;                                                                                 \
        countT _brcRawExp = (countT)(expP) ;                                                                                                            \
        whatP                                                                                                                                           \
        countT _idWhatSaveBos = tinP.monitor.idWhat1 ;                                                                                                  \
        tinP.brcQuery = 0 ;                                                                                                                             \
    {                                                                                                                                                   \
                                                                                                                                                        \
#define BOSdOnOTtEST(whatP,expP)                                                                                                                        \

    }
        }                                                                                                                                               \
            if( !( tally % CbOStALLYpERlOG ) ) logTallyIF( tally , LF , 0 , idMe , #expP ) ;                                                            \
            countT tally = homeS::homeIF().tallyHo.tallyF( idMe ) ;                                                                                     \
            static countT idMe ;                                                                                                                        \
        {                                                                                                                                               \
        if( F(pg1.flCt) & flCTdTg_napHomeI && !( F(pg1.flDt) & flCTdTg_napHomeI ) )                                                                     \
        processGlobal1S& pg1 = processGlobal1S::_processGlobal1I_IF() ;                                                                                 \
        _brcm04Raw = (measure04T)(expP) ;                                                                                                               \
    {                                                                                                                                                   \
                                                                                                                                                        \
#define BOSmEASURE04nOtIN(expP)                                                                                                                         \

//A:ASSUME: THE CALLER HAS CONSTRUCTED measure04T _brcm04Raw ON THE THREAD'S STACK AS A LOCAL VARIABLE

    }
        }                                                                                                                                               \
            if( !( tally % CbOStALLYpERlOG ) ) logTallyIF( tally , LF , 0 , idMe , #expP ) ;                                                            \
            countT tally = homeS::homeIF().tallyHo.tallyF( idMe ) ;                                                                                     \
            static countT idMe ;                                                                                                                        \
        {                                                                                                                                               \
        if( F(pg1.flCt) & flCTdTg_napHomeI && !( F(pg1.flDt) & flCTdTg_napHomeI ) )                                                                     \
        processGlobal1S& pg1 = processGlobal1S::_processGlobal1I_IF() ;                                                                                 \
        _brcRaw = (countT)(expP) ;                                                                                                                      \
    {                                                                                                                                                   \
                                                                                                                                                        \
#define BOSnOtIN(expP)                                                                                                                                  \

//A:ASSUME: THE CALLER HAS CONSTRUCTED countT _brcRaw ON THE THREAD'S STACK AS A LOCAL VARIABLE

    }
        tinP.brcRaw = _brcRawExp ;                                                                                                                      \
        tinP.monitor.idWhat1 = _idWhatSaveBos ;                                                                                                         \
        }                                                                                                                                               \
            }                                                                                                                                           \
                /*if( F(POOP.flagsF()) & flPOOP_SMELLY ) { LOGrAW7( "BOSrAW [brcLath,idLine,idiFile]: " , tinP.brcLath , " " , tinP.idLine_brcLath , " " , tinP.idiFile_brcLath , "\r\n" ) ; }*/ \
                tinP.idiFile_brcLath = DDNUMB ;                                                                                                         \
                tinP.idLine_brcLath = ifcLINE ;                                                                                                         \
                tinP.brcLath = tinP.brcQuery ;                                                                                                          \
            {                                                                                                                                           \
            if( tinP.brcQuery )                                                                                                                         \
            tinP.brcQuery = tinP.brcRaw ;                                                                                                               \
        {                                                                                                                                               \
        if( tinP.bosFail )                                                                                                                              \
        }                                                                                                                                               \
            if( !( tally % CbOStALLYpERlOG ) ) logTallyIF( tally , LF , tinP.bosFail , tinP.bosFail ? idMeFail : idMeOk , #expP ) ;                     \
            countT tally = homeS::homeIF().tallyHo.tallyF( tinP.bosFail ? idMeFail : idMeOk ) ;                                                         \
            static countT idMeFail ;                                                                                                                    \
            static countT idMeOk ;                                                                                                                      \
        {                                                                                                                                               \
        if( F(pg1.flCt) & flCTdTg_napHomeI && !( F(pg1.flDt) & flCTdTg_napHomeI ) )                                                                     \
        processGlobal1S& pg1 = processGlobal1S::_processGlobal1I_IF() ;                                                                                 \
        typeP ;                                                                                                                                         \
        countT _brcRawExp = (countT)(expP) ;                                                                                                            \
        whatP                                                                                                                                           \
        countT _idWhatSaveBos = tinP.monitor.idWhat1 ;                                                                                                  \
        tinP.brcQuery = 0 ;                                                                                                                             \
    {                                                                                                                                                   \
                                                                                                                                                        \
#define BOSrAW(whatP,typeP,expP)                                                                                                                        \

    }
        tinP.brcRaw = _brcRawExp ;                                                                                                                      \
        tinP.monitor.idWhat1 = _idWhatSaveBos ;                                                                                                         \
        }                                                                                                                                               \
            }                                                                                                                                           \
                /*if( F(POOP.flagsF()) & flPOOP_SMELLY ) { LOGrAW7( "BOS0   [brcLath,idLine,idiFile]: " , tinP.brcLath , " " , tinP.idLine_brcLath , " " , tinP.idiFile_brcLath , "\r\n" ) ; }*/ \
                tinP.idiFile_brcLath = DDNUMB ;                                                                                                         \
                tinP.idLine_brcLath = ifcLINE ;                                                                                                         \
                tinP.brcLath = tinP.brcQuery ;                                                                                                          \
            {                                                                                                                                           \
            else if( tinP.brcQuery )                                                                                                                    \
            if( tinP.brcQuery == NO_ERROR ) tinP.bosFail = tinP.brcQuery = 0 ;                                                                          \
            tinP.brcQuery = (expGetErrorP) ;                                                                                                            \
        {                                                                                                                                               \
        if( tinP.bosFail )                                                                                                                              \
        }                                                                                                                                               \
            if( !( tally % CbOStALLYpERlOG ) ) logTallyIF( tally , LF , tinP.bosFail , tinP.bosFail ? idMeFail : idMeOk , #expP ) ;                     \
            countT tally = homeS::homeIF().tallyHo.tallyF( tinP.bosFail ? idMeFail : idMeOk ) ;                                                         \
            static countT idMeFail ;                                                                                                                    \
            static countT idMeOk ;                                                                                                                      \
        {                                                                                                                                               \
        if( F(pg1.flCt) & flCTdTg_napHomeI && !( F(pg1.flDt) & flCTdTg_napHomeI ) )                                                                     \
        processGlobal1S& pg1 = processGlobal1S::_processGlobal1I_IF() ;                                                                                 \
        typeP ;                                                                                                                                         \
        countT _brcRawExp = (countT)(expP) ;                                                                                                            \
        whatP                                                                                                                                           \
        countT _idWhatSaveBos = tinP.monitor.idWhat1 ;                                                                                                  \
        tinP.brcQuery = 0 ;                                                                                                                             \
    {                                                                                                                                                   \
                                                                                                                                                        \
#define BOSfICKLE(whatP,typeP,expP,expGetErrorP)                                                                                                        \

    }
        tinP.brcRaw = _brcRawExp ;                                                                                                                      \
        tinP.monitor.idWhat1 = _idWhatSaveBos ;                                                                                                         \
        }                                                                                                                                               \
            }                                                                                                                                           \
                /*if( F(POOP.flagsF()) & flPOOP_SMELLY ) { LOGrAW7( "BOSL   [brcLath,idLine,idiFile]: " , tinP.brcLath , " " , tinP.idLine_brcLath , " " , tinP.idiFile_brcLath , "\r\n" ) ; }*/ \
                tinP.idiFile_brcLath = DDNUMB ;                                                                                                         \
                tinP.idLine_brcLath = ifcLINE ;                                                                                                         \
                tinP.brcLath = tinP.brcQuery ;                                                                                                          \
            {                                                                                                                                           \
            if( tinP.brcQuery )                                                                                                                         \
            errno = 0 ;                                                                                                                                 \
            tinP.brcQuery = errno ;                                                                                                                     \
        {                                                                                                                                               \
        if( tinP.bosFail || errno )                                                                                                                     \
        }                                                                                                                                               \
            if( !( tally % CbOStALLYpERlOG ) ) logTallyIF( tally , LF , tinP.bosFail , tinP.bosFail || errno ? idMeFail : idMeOk , #expP ) ;            \
            countT tally = homeS::homeIF().tallyHo.tallyF( tinP.bosFail || errno ? idMeFail : idMeOk ) ;                                                \
            static countT idMeFail ;                                                                                                                    \
            static countT idMeOk ;                                                                                                                      \
        {                                                                                                                                               \
        if( F(pg1.flCt) & flCTdTg_napHomeI && !( F(pg1.flDt) & flCTdTg_napHomeI ) )                                                                     \
        processGlobal1S& pg1 = processGlobal1S::_processGlobal1I_IF() ;                                                                                 \
        typeP ;                                                                                                                                         \
        countT _brcRawExp = (countT)(expP) ;                                                                                                            \
        errno = 0 ;                                                                                                                                     \
        whatP                                                                                                                                           \
        countT _idWhatSaveBos = tinP.monitor.idWhat1 ;                                                                                                  \
        tinP.brcQuery = 0 ;                                                                                                                             \
    {                                                                                                                                                   \
                                                                                                                                                        \
#define BOSL(whatP,typeP,expP)                                                                                                                          \

    }
        tinP.brcRaw = _brcRawExp ;                                                                                                                      \
        tinP.monitor.idWhat1 = _idWhatSaveBos ;                                                                                                         \
        }                                                                                                                                               \
            }                                                                                                                                           \
                /*if( F(POOP.flagsF()) & flPOOP_SMELLY ) { LOGrAW7( "BOS0   [brcLath,idLine,idiFile]: " , tinP.brcLath , " " , tinP.idLine_brcLath , " " , tinP.idiFile_brcLath , "\r\n" ) ; }*/ \
                tinP.idiFile_brcLath = DDNUMB ;                                                                                                         \
                tinP.idLine_brcLath = ifcLINE ;                                                                                                         \
                tinP.brcLath = tinP.brcQuery ;                                                                                                          \
            {                                                                                                                                           \
            if( tinP.brcQuery )                                                                                                                         \
            tinP.brcQuery = _brcRaw ;                                                                                                                   \
            expGetErrorP ;                                                                                                                              \
            ZE( countT , _brcRaw ) ;                                                                                                                    \
        {                                                                                                                                               \
        if( tinP.bosFail )                                                                                                                              \
        }                                                                                                                                               \
            if( !( tally % CbOStALLYpERlOG ) ) logTallyIF( tally , LF , tinP.bosFail , tinP.bosFail ? idMeFail : idMeOk , #expP ) ;                     \
            countT tally = homeS::homeIF().tallyHo.tallyF( tinP.bosFail ? idMeFail : idMeOk ) ;                                                         \
            static countT idMeFail ;                                                                                                                    \
            static countT idMeOk ;                                                                                                                      \
        {                                                                                                                                               \
        if( F(pg1.flCt) & flCTdTg_napHomeI && !( F(pg1.flDt) & flCTdTg_napHomeI ) )                                                                     \
        processGlobal1S& pg1 = processGlobal1S::_processGlobal1I_IF() ;                                                                                 \
        typeP ;                                                                                                                                         \
        countT _brcRawExp = (countT)(expP) ;                                                                                                            \
        whatP                                                                                                                                           \
        countT _idWhatSaveBos = tinP.monitor.idWhat1 ;                                                                                                  \
        tinP.brcQuery = 0 ;                                                                                                                             \
    {                                                                                                                                                   \
                                                                                                                                                        \
#define BOS0(whatP,typeP,expP,expGetErrorP)                                                                                                             \

#define BOSSO(whatP,typeP,expP) BOS0( whatP , typeP , expP , BOSnOtIN( sock_errno()      ) _brcRaw -= SOCBASEERR )
#define BOSS(whatP,typeP,expP)  BOS0( whatP , typeP , expP , BOSnOtIN( WSAGetLastError() ) _brcRaw -= WSABASEERR )
#define BOSI(whatP,typeP,expP)  BOS0( whatP , typeP , expP , BOSnOtIN( tinP.brcRaw                             ) )
#define BOS(whatP,typeP,expP)   BOS0( whatP , typeP , expP , BOSnOtIN( GetLastError()                          ) )

#define BOSfAILiFmINUS1 tinP.bosFail = _brcRawExp == - 1
#define BOSoK           tinP.bosFail = !_brcRawExp
#define BOSfAIL         tinP.bosFail = !!_brcRawExp
#define BOShANDLE       tinP.bosFail = (HANDLE)_brcRawExp == INVALID_HANDLE_VALUE
#define BOSmAXcOUNTT    tinP.bosFail = _brcRawExp == MAXcOUNTT
#define BOSsUCCESScODE  tinP.bosFail = _brcRawExp != ERROR_SUCCESS
#define BOScOMoK        tinP.bosFail = _brcRawExp != S_OK
#define BOSgDIcODE      tinP.bosFail = _brcRawExp == GDI_ERROR
#define BOStHREADERcODE tinP.bosFail = _brcRawExp == THREAD_PRIORITY_ERROR_RETURN
#define BOSsOCKETcODE   tinP.bosFail = _brcRawExp == INVALID_SOCKET
#define BOSsOCKETcODE2  tinP.bosFail = _brcRawExp == SOCKET_ERROR
#define BOSwAITcODE     tinP.bosFail = _brcRawExp == WAIT_FAILED
// typeP VALUES

#define WHATsww  { if( F(tinP.flagsThreadMode1) & flTHREADmODE1_UPDATEtIN ) tinP.monitor.idWhat1 = ifcIDwHAT_STOPwINwRITE       ; }
#define WHATswr  { if( F(tinP.flagsThreadMode1) & flTHREADmODE1_UPDATEtIN ) tinP.monitor.idWhat1 = ifcIDwHAT_STOPwINrEAD        ; }
#define WHATsw   { if( F(tinP.flagsThreadMode1) & flTHREADmODE1_UPDATEtIN ) tinP.monitor.idWhat1 = ifcIDwHAT_STOPwIN            ; }
#define WHATssu  { if( F(tinP.flagsThreadMode1) & flTHREADmODE1_UPDATEtIN ) tinP.monitor.idWhat1 = ifcIDwHAT_STOPsUSPENDED      ; }
#define WHATss   { if( F(tinP.flagsThreadMode1) & flTHREADmODE1_UPDATEtIN ) tinP.monitor.idWhat1 = ifcIDwHAT_STOPsIGN           ; }
#define WHATso   { if( F(tinP.flagsThreadMode1) & flTHREADmODE1_UPDATEtIN ) tinP.monitor.idWhat1 = ifcIDwHAT_STOPoTHER          ; }
#define WHATsn   { if( F(tinP.flagsThreadMode1) & flTHREADmODE1_UPDATEtIN ) tinP.monitor.idWhat1 = ifcIDwHAT_STOPnAP            ; }
#define WHATsy   { if( F(tinP.flagsThreadMode1) & flTHREADmODE1_UPDATEtIN ) tinP.monitor.idWhat1 = ifcIDwHAT_STOPyIELD          ; }
#define WHATsm   { if( F(tinP.flagsThreadMode1) & flTHREADmODE1_UPDATEtIN ) tinP.monitor.idWhat1 = ifcIDwHAT_STOPmONITORING     ; }
#define WHATsiw  { if( F(tinP.flagsThreadMode1) & flTHREADmODE1_UPDATEtIN ) tinP.monitor.idWhat1 = ifcIDwHAT_STOPiNTwRITE       ; }
#define WHATsir  { if( F(tinP.flagsThreadMode1) & flTHREADmODE1_UPDATEtIN ) tinP.monitor.idWhat1 = ifcIDwHAT_STOPiNTrEAD        ; }
#define WHATsia  { if( F(tinP.flagsThreadMode1) & flTHREADmODE1_UPDATEtIN ) tinP.monitor.idWhat1 = ifcIDwHAT_STOPiNTaCCEPT      ; }
#define WHATsg   { if( F(tinP.flagsThreadMode1) & flTHREADmODE1_UPDATEtIN ) tinP.monitor.idWhat1 = ifcIDwHAT_STOPgRAB           ; }
#define WHATsfw  { if( F(tinP.flagsThreadMode1) & flTHREADmODE1_UPDATEtIN ) tinP.monitor.idWhat1 = ifcIDwHAT_STOPfILEwRITE      ; }
#define WHATsfr  { if( F(tinP.flagsThreadMode1) & flTHREADmODE1_UPDATEtIN ) tinP.monitor.idWhat1 = ifcIDwHAT_STOPfILErEAD       ; }
#define WHATsbt  { if( F(tinP.flagsThreadMode1) & flTHREADmODE1_UPDATEtIN ) tinP.monitor.idWhat1 = ifcIDwHAT_STOPbOStHIRD       ; }
#define WHATsbl  { if( F(tinP.flagsThreadMode1) & flTHREADmODE1_UPDATEtIN ) tinP.monitor.idWhat1 = ifcIDwHAT_STOPbOSclIB        ; }
#define WHATsb   { if( F(tinP.flagsThreadMode1) & flTHREADmODE1_UPDATEtIN ) tinP.monitor.idWhat1 = ifcIDwHAT_STOPbATON          ; }
#define WHATgbt  { if( F(tinP.flagsThreadMode1) & flTHREADmODE1_UPDATEtIN ) tinP.monitor.idWhat1 = ifcIDwHAT_GObOStHIRD         ; }
#define WHATgbo  { if( F(tinP.flagsThreadMode1) & flTHREADmODE1_UPDATEtIN ) tinP.monitor.idWhat1 = ifcIDwHAT_GObOSoTHER         ; }
#define WHATgbd  { if( F(tinP.flagsThreadMode1) & flTHREADmODE1_UPDATEtIN ) tinP.monitor.idWhat1 = ifcIDwHAT_GObOSdRAW          ; }
#define WHATgbm  { if( F(tinP.flagsThreadMode1) & flTHREADmODE1_UPDATEtIN ) tinP.monitor.idWhat1 = ifcIDwHAT_GObOSmONITOR       ; }
#define WHATgbl  { if( F(tinP.flagsThreadMode1) & flTHREADmODE1_UPDATEtIN ) tinP.monitor.idWhat1 = ifcIDwHAT_GObOSclIB          ; }
#define WHATgape { if( F(tinP.flagsThreadMode1) & flTHREADmODE1_UPDATEtIN ) tinP.monitor.idWhat1 = ifcIDwHAT_GOpROLOGePILOG     ; }
#define WHATga   { if( F(tinP.flagsThreadMode1) & flTHREADmODE1_UPDATEtIN ) tinP.monitor.idWhat1 = ifcIDwHAT_GOaDAM             ; }
// whatP VALUES

/*3*/
#define ifcIDwHAT_STOPbOStHIRD       /*id*/
#define ifcIDwHAT_STOPwINwRITE       /*id*/
#define ifcIDwHAT_STOPwINrEAD        /*id*/
#define ifcIDwHAT_STOPwIN            /*id*/
#define ifcIDwHAT_STOPsUSPENDED      /*id*/
#define ifcIDwHAT_STOPsIGN           /*id*/
#define ifcIDwHAT_STOPoTHER          /*id*/
#define ifcIDwHAT_STOPnAP            /*id*/
#define ifcIDwHAT_STOPyIELD          /*id*/
#define ifcIDwHAT_STOPmONITORING     /*id*/
#define ifcIDwHAT_STOPiNTwRITE       /*id*/
#define ifcIDwHAT_STOPiNTrEAD        /*id*/
#define ifcIDwHAT_STOPiNTaCCEPT      /*id*/
#define ifcIDwHAT_STOPgRAB           /*id*/
#define ifcIDwHAT_STOPfILEwRITE      /*id*/
#define ifcIDwHAT_STOPfILErEAD       /*id*/
#define ifcIDwHAT_STOPbATON          /*id*/
#define ifcIDwHAT_mark               /*id*/
#define ifcIDwHAT_GObOStHIRD         /*id*/
#define ifcIDwHAT_GObOSoTHER         /*id*/
#define ifcIDwHAT_GObOSdRAW          /*id*/
#define ifcIDwHAT_GObOSmONITOR       /*id*/
#define ifcIDwHAT_GObOSclIB          /*id*/
#define ifcIDwHAT_GOiNoUTdT          /*id*/
#define ifcIDwHAT_GOiNoUTfRAMED      /*id*/
#define ifcIDwHAT_GOiNoUTcT          /*id*/
#define ifcIDwHAT_GOaDAM             /*id*/
/*3*/

//EVERY GROUP IN THIS FILE IS ALPHABETICAL

/**/
/*1*//*ifcIDwHAT , WHAT , BOS*//*1*/
*/
\<A HREF=\"5.0010135.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


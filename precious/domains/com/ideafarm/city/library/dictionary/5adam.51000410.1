
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

else             etThread.strokeF( tinP , T("-not- handed off\r\n") ) ;
if( bHandedOff ) etThread.strokeF( tinP , T("handed off\r\n") ) ;

}
    ether.osSleepF( tinP , TICK * 8 ) ;
    etThread.strokeF( tinP , T("working\r\n") ) ;

    //etThread.osProcessF( tinP , countTC() , countTC() , DDNUMB ) ;

    etThread.strokeF( tinP , T("idMe = ")+TF1(state.idMe)+T("\r\npress Ctrl-c to fire me\r\n") ) ;
    state.idMe ++ ; !state ;

    __( state.cbdVarying - CBDV ) ;
    stateS state( tinP , etThread , bHandedOff , CBDV ) ;
{
ZE( boolT , bHandedOff ) ;

etThread.delF( tinP , psttw ) ;
etThread.strokeF( tinP , T("translated from tFoo: \"")+T(psttw)+T("\"\r\n") ) ;
etThread.strReplaceF( tinP , psttw , tFoo , ifcIDtYPEsTRrEPLACE_DIGITStOdIGITnAMES ) ; ___( psttw ) ;
ZE( strokeS* , psttw ) ;
TN( tFoo , "0123" ) ;

TODO

}
{
stateC( tinP , etherP , bHandedOffP , sizeof *this , cbdVaryingP , translateStateF )
stateS::stateS( tinS& tinP , etherC& etherP , boolT& bHandedOffP , countT cbdVaryingP ) :
//THE MEMBERS OF THE DERIVED CLASS stateS ARE NOT EXPLICITLY INITIALIZED HERE BECAUSE THE CT'OR FOR stateC INITIALIZES THEM

}
    if( cArgP ) ;

    }
        else                                 etherP.memSetF(  tinP , pbToVaryingP , cbToVaryingP ) ;
        if( cbToVaryingP == cbFromVaryingP ) etherP.memCopyF( tinP , pbToVaryingP , pbFromVaryingP , cbToVaryingP ) ;
    {
    if( cbToVaryingP )

    }
        if( !etherP ) state.idVersion = IDvERSION ;

        }
            if( cbToP ) etherP.memSetF( tinP , pbToP , cbToP ) ;
            etherP.strokeF( tinP , T("generating a blank version ")+TF1(IDvERSION)+T("\r\n") ) ;
        {
        else
        }
            }
                }
                    }
                        __1
                        __( stateOther.idVersion ) ;
                    {
                    default:
                    case 1 : { state.cVersion1 = stateOther.cVersion1 ; break ; }
                    case 2 : { state.cVersion2 = stateOther.cVersion2 ; }
                    case 3 : { state.cVersion3 = stateOther.cVersion3 ; }
                    case 4 : { state.cVersion4 = stateOther.cVersion4 ; }
                    case 5 : { state.cVersion5 = stateOther.cVersion5 ; }
                    case 6 : { state.cVersion6 = stateOther.cVersion6 ; }
                    case 7 : { state.idMe      = stateOther.idMe      ; }
                {
                switch( stateOther.idVersion )
                etherP.memSetF( tinP , pbToP        , cbToP        ) ;
            {
            else
            if( stateOther.idVersion == IDvERSION && cbToP == cbFromP ) etherP.memCopyF( tinP , pbToP , pbFromP , cbToP ) ;

            etherP.strokeF( tinP , T("translating from version ")+TF1(stateOther.idVersion)+T(" to version ")+TF1(IDvERSION)+T("\r\n") ) ;
            stateS& stateOther = *(stateS*)( pbFromP - sizeof( stateC ) ) ; // BE CAREFUL WHEN USING, AS pbFromP CAN BE 0, AND stateC AND/OR stateS MIGHT HAVE CHANGED.  FOR EXAMPLE, USE AN idVersion FIELD TO AVOID REFERRING TO FIELDS THAT DO NOT NOW, OR DID NOT BEFORE, EXIST
        {
        if( !etherP && pbFromP && cbFromP >= sizeof( countT ) )
        __( sizeof( stateS ) - sizeof( stateC ) - cbToP ) ;

        stateS& state = *(stateS*)( pbToP - sizeof( stateC ) ) ; // THESE 2 LINES ARE PROVIDED TO MAKE IT EASIER TO REFER TO FIELDS IN THE IMAGES
    {
    if( cbToP )

    __( cbToVaryingP - CBDV ) ;
{
voidT translateStateF( tinS& tinP , etherC& etherP , byteT* pbToP , countT cbToP , const byteT* pbFromP , countT cbFromP , byteT* pbToVaryingP , countT cbToVaryingP , const byteT* pbFromVaryingP , countT cbFromVaryingP , countT cArgP )

;
}
    stateS( tinS& tinP , etherC& etherP , boolT& bHandedOffP , countT cbdVaryingP = 0 ) ;

    countT idMe ;
    countT cVersion7 ;
    countT cVersion6 ;
    countT cVersion5 ;
    countT cVersion4 ;
    countT cVersion3 ;
    countT cVersion2 ;
    countT cVersion1 ; // TRANSLATION WILL BE SIMPLER IF FIELDS ARE ADDED TO THE TOP AND ARE NEVER REMOVED
    countT idVersion ; // DONT EVER MOVE THIS
{
struct stateS : public stateC

#define CBDV 0x10
#define IDvERSION 7

/*1*/WAKEhIDE( "example.stateC" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


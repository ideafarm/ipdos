
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST
etThread.osProcessIdPhaseAdamF( tinP , ifcIDpHASEhANDOFFoLD_SHUTTINGdOWN ) ;

}
    }
        etThread.osSleepF( tinP , TOCK ) ;

        }
            etThread.strokeF( tinP , T("connecting to data eater\r\n") ) ;
            etThread = 0 ;
            sOut.writeMsgF( tinP , "!amDry" ) ;
            etThread = 0 ;

            etThread.strokeF( tinP , T("sending termination to data eater\r\n") ) ;
            }
                etThread.osSleepF( tinP , TUCK * 32 ) ;
                etThread.beeSingDigitsF( tinP , 0x2 ) ;
            {
            while( !ether && etThread.os_cAllKidThreadsI_IF( tinP ) > !!( ether & fliEC_QUITTING ) )

            etThread.strokeF( tinP , T("a failure has been detected.  waiting for all kid threads to end\r\n") ) ;
            }
                else        { ZE( countT , tnu ) ; etThread.osThreadF( tinP , tnu , tmRouteF , 0 , flTHREADlAUNCH_null , 0 , (countT)pso , (countT)&sOut ) ; }
                if( ether ) { DEL( pso ) ; }

                sIn.acceptF( tinP , pso , idPortPeer , nnPeer , countTC() ) ; ___( pso ) ;
                ZE( countT , idPortPeer ) ;
                nicNameC nnPeer ;
                ZE( socketC* , pso ) ;
            {
            while( !etThread )

            sIn.listenF( tinP ) ;
            sIn.bindF( tinP , ifcPORToLD1rIVERrESERVED ) ;
            socketC sIn( tinP , etThread , TAG( TAGiDnULL ) ) ;

            sOut.connectF( tinP , ifcPORToLD1dATAeATER ) ;
            socketC sOut( tinP , etThread , TAG( TAGiDnULL ) ) ;
        {
    {
    while( !ether )

    etThread.strokeF( tinP , T("IdeaFarm " "(tm) City Data Router to Handler Process\r\ni route incoming data (normally from remote hosts) to the (normally local)\r\nsocket that handles its type\r\n") ) ;
{
else
}
    etThread.strokeF( tinP , T("Another ")+textIdFileC( tinP , DDNAME )+T(" appears to be alive on this computer.  Only one is allowed.") ) ;
    etThread = 0  ;
{
if( etThread )
U:: USE napkinC OBJECT TO TEST FOR ALONENESS
batonC baton( tinP , TAG( TAGiDnULL ) , T("1f30104") ) ;

__1 // RETIRED

TODO

DONE( tmRouteF )

}
    DEL( pso ) ;

    while( !bDry ) ;
    }
        etThread.delF( tinP , pbMsg ) ;
        if( !bDry ) sOut.writeMsgF( tinP , pbMsg , cbMsg ) ; // CAN INSPECT DATA TYPE AND SELECT AMONG MULTIPLE POSSIBLE RECIPIENTS, INCLUDING RECIPIENTS AT HOSTS MAINTAINED BY OTHER HUMAN CITIZENS.  (NOTE: pbMsg MIGHT CONTAIN MORE THAN ONE DATUM)
        bDry = cbMsg == tDry.csF( tinP ) && !etThread.strCompareF( tinP , T(pbMsg) , tDry ) ;
        pso->readMsgOkF( tinP ) ;
        countT cbMsg = pso->readMsgF( tinP , pbMsg ) ;
        ZE( byteT* , pbMsg ) ;
    {
    do
    ZE( boolT , bDry ) ;
    TN( tDry , "!amDry" ) ;

    pso->etherF( tinP , etThread ) ;
    socketC& sOut = *(socketC*)pTaskP->c2 ;
    socketC* pso  =  (socketC*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 )
TASK( tmRouteF )

/*1*/WAKEhIDE( "city.data.router.to.handler.process" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//



//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return bQuit ;

    stAss.ungrabF( tinP ) ;
    }
        while( ~hWalk && !bQuit ) ;
        }
            }
                }
                    DELzOMBIE( pd ) ;
                    staqC*& pd = *(staqC**)&pStqWalkerP ;
                {
                else
                }
                    *pStqWalkerP >> c_pMe ;
                    ZE( countT , c_pMe ) ;
                {
                if( !bDestroy ) 

                bQuit = ass.walkF( tinP , pAssociateCBFP , cArgP , flagsP , pczIncludeP , pczExcludeP , pStqWalkerP ) ;

                *pStqWalkerP << (countT)this ;

                }
                    *(staqC**)&pStqWalkerP = new( 0 , tinP , pbStq , sizeof pbStq ) staqC( tinP , sizeof( countT ) , TUCK ) ;
                    bDestroy = 1 ;
                {
                if( !pStqWalkerP )
                ZE( boolT , bDestroy ) ;
                byteT pbStq[ sizeof( staqC ) ] ;
            {
            if( F(flagsP) & flASSOCIATEcwALK_RECURSE )

            if( bQuit ) break ;
            bQuit = (*pAssociateCBFP)( tinP , assView , ass , *this , cArgP , pStqWalkerP ) ;

            }
                if( pczExcludeP && (  thirdC::c_strstrIF( tinP , pczExcludeP , pczMyGroupSubject ) ||  thirdC::c_strstrIF( tinP , pczExcludeP , pczMyGroup ) ||  thirdC::c_strstrIF( tinP , pczExcludeP , pczMe ) ) ) continue ;
                if( pczIncludeP &&   !thirdC::c_strstrIF( tinP , pczIncludeP , pczMyGroupSubject ) && !thirdC::c_strstrIF( tinP , pczIncludeP , pczMyGroup ) && !thirdC::c_strstrIF( tinP , pczIncludeP , pczMe )   ) continue ;

                countT pczMyGroup[]        = { assView.idGroupF() | BM_HIGH2 , 0 } ; // APPLICATION CODERS MUST REMEMBER TO SET BM_HIGH2 WHEN SPECIFYING idGroup VALUES
                countT pczMyGroupSubject[] = { ass.idGroupF() | BM_HIGH      , 0 } ; // APPLICATION CODERS MUST REMEMBER TO SET BM_HIGH WHEN SPECIFYING idGroup VALUES
                countT pczMe[]             = { (countT)&ass                  , 0 } ; // BM_HIGH SHOULD NOT BE APPLIED TO POINTERS BECAUSE THAT WOULD PREVENT PORTING IPDOS TO A PLATFORM THAT SUPPORTED THE USE OF ALL BITS IN POINTER VALUES (ON WINDOWS, THAT HALF OF THE ADDRESS SPACE IS RESERVED FOR SYSTEM CODE)
            {
            if( pczIncludeP || pczExcludeP )

            if( pStqWalkerP && (*pStqWalkerP)( (countT)&ass ) ) continue ;

            assViewC&   assView =   *(assViewC*)( pcPlate + 1 ) ;
            associateC& ass     = **(associateC**)pcPlate       ;
            countT*     pcPlate = &stAss.downF( tinP , hWalk ) ;
        {
        do
        handleC hWalk( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
    {
    if( stAss )
    stAss.grabF( tinP , TAG( TAGiDnULL ) ) ;
    ZE( boolT , bQuit ) ;

    }
        if( POOP ) return 0 ;
        FV( flASSOCIATEcwALK , flagsP ) ;
        __Z( pAssociateCBFP ) ;
        if( POOP ) return 0 ;
    {
    IFbEcAREFUL    
{
/*1*/boolT associateC::walkF( tinS& tinP , associateCBFT pAssociateCBFP , countT cArgP , const flagsT flagsP , const countT* const pczIncludeP , const countT* const pczExcludeP , staqC* const pStqWalkerP )/*1*/

/**/
*/
  i use this parameter when i call myself recursively
  it is illegal to specify a nonze value for this argument anywhere except within my definition
  must be 0
 pStqWalkerP
  if 0 then only the inclusion test will be applied
  see pczIncludeP
 pczExcludeP
    to specify that meaning, use oo elements in the array
   it is illegal to set both BM_HIGH and BM_HIGH2
   if BM_HIGH2 is set then the remainder of the value will be interpreted as an idGroup value referring to the assViewC   instance that is the view
   if BM_HIGH  is set then the remainder of the value will be interpreted as an idGroup value referring to the associateC instance that is the subject of the view
   each count value can be either the address of an associateC instance or an idGroup value
  if not 0 then must be a null terminated string of countT values
  if 0 then only the exclusion test will be applied
  can be 0
 pczIncludeP
 flagsP
  i do not use this but will pass it to the callback
 cArgP
   the callback will be called only for views of associates that are both included and not excluded
  i will call this callback for each view that i encounter during the walk
  must not be 0
 pAssociateCBFP
 tinP
arguments
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


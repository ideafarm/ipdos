
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return cbFree ;

    _OUT_
    }
        }
            DEL( pInfo ) ;
            if( pInfo ) cbFree = pInfo->cBytesPerSector * pInfo->cSectorsPerAllocationUnit * pInfo->cUnusedUnits ;
            diskInfoF( tinP , pInfo , psttP ) ; ___( pInfo ) ;
            ZE( infoDiskS* , pInfo ) ;
        {

        delF( tinP , psttEnv ) ;
        delF( tinP , psttSetting ) ;
        }
            delF( tinP , psttLike ) ;

            }
                strMakeF( tinP , psttP , psttLike ) ; ___( psttP ) ;
                diskMakeDirF( tinP , psttLike ) ;
                delF( tinP , psttDiskBest ) ;
                if( !POOP ) psttLike[ CSpREFIX + 3 ] = psttDiskBest[ CSpREFIX + 3 ] ;
                diskFindMostFreeSpaceF( tinP , psttDiskBest ) ; ___( psttDiskBest ) ;
                ZE( strokeS* , psttDiskBest ) ;
            {
            if( !psttP )

            }
                delF( tinP , pstt1List ) ;
                }
                    }
                        break ;
                        strMakeF( tinP , psttP , psttc1 ) ; ___( psttP ) ;
                    {
                    FORsTRINGSiN1( pstt1List )
                {
                if( pstt1List && pstt1List->idAdam )
                QUITOZ diskFindFileOrDirOldF( tinP , pstt1List , psttLike ) ; ___( pstt1List ) ; QUITR
                ZE( strokeS* , pstt1List ) ;
            {

            }
                strFuseF( tinP , psttLike , tLike ) ; ___( psttLike ) ;
                    traceF( tinP , T("diskChooseSiteF / warning: probable configuration error (missing drive letter?): unexpected key [pattern]: ")+tLike ) ;
                if( strCompareF( tinP , psttKeyP , T("ideafarm") ) )
                TN( tLike , "" ) ; tLike = T("///?/")+T(psttKeyP)+T(".home.")+TF2(idHomeDisk,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("/") ;
            {
            else
            if( psttLikeP ) { strFuseF( tinP , psttLike , psttLikeP                                                 ) ; ___( psttLike ) ; }
            ZE( strokeS* , psttLike ) ;
            const countT idHomeDisk = ifc_idHomeIdisk_IF() ;
        {
        else
        //}
        //    strMakeF( tinP , psttP , psttEnv ) ; ___( psttP ) ;
        //    delF( tinP , psttb ) ;
        //    if( psttb && !psttb->idAdam ) diskMakeDirF( tinP , psttEnv ) ;
        //    diskFindFileOrDirOldF( tinP , psttb , psttEnv ) ; ___( psttb ) ;
        //    ZE( strokeS* , psttb ) ;
        //    __( psttEnv[ CSpREFIX - 1 + psttEnv->idAdam ].idAdam - '/' ) ;
        //{
        //else if( psttEnv )
        //DEPRECATED FOR PORTABILITY: ALL "ENVIRONMENT" SETTINGS ARE PICKED UP FROM LITTLE FILES IN THE ROOT DIRECTORY "c"":\"
        }
            strMakeF( tinP , psttP , psttSetting ) ; ___( psttP ) ;
            delF( tinP , psttb ) ;
            if( psttb && !psttb->idAdam ) diskMakeDirF( tinP , psttSetting ) ;
            diskFindFileOrDirOldF( tinP , psttb , psttSetting ) ; ___( psttb ) ;
            ZE( strokeS* , psttb ) ;
            __( psttSetting[ CSpREFIX - 1 + psttSetting->idAdam ].idAdam - '/' ) ;
        {
        if( psttSetting )

        //A: }
        //A:     else        POOPR
        //A:     if( !POOP ) { strMakeF( tinP , psttSetting , T(postValue) ) ; ___( psttSetting ) ; }
        //A: 
        //A:     thirdC::dosReadIF( tinP , postValue , costValue , tFile ) ;
        //A:     POOPIE
        //A: 
        //A:     countT  costValue = sizeof postValue ;
        //A:     osTextT postValue[ 0x100 ] ;
        //A: 
        //A:     TN( tFile , "c" ":\\ideafarm." ) ; tFile += TF1(etherC::ifc_idHomeIdisk_IF())+T(".setting.keyValue.")+T(psttKeyP) ;
        //A: {
        //A: 20141129@2025: DISABLED TO KEEP SYNCH WITH diskFindHomeIF ; THE USE OF LITTLE SETTINGS FILES IS OBSOLETE ; IF A SETTING IS TO BE USED, QUERY THE SETTINGS bitTreeC

        ZE( strokeS* , psttSetting ) ;

        //osEnvironmentVariableF( tinP , psttEnv , psttKeyP ) ; ___( psttEnv ) ;
        ZE( strokeS* , psttEnv ) ;
    {
    ZE( countT , cbFree ) ;
    _INoLD_

    }
        if( POOP ) return 0 ;
        __( !!psttKeyP && !psttKeyP->idAdam ) ;
        if( POOP ) return 0 ;
        __( psttLikeP && psttLikeP[ CSpREFIX - 1 + psttLikeP->idAdam ].idAdam - '/' ) ;
        __( !psttLikeP && !psttKeyP ) ;
        if( POOP ) return 0 ;
    {
    IFbEcAREFUL
    SCOOP
{
/*1*/countT etherC::diskChooseSiteF( tinS& tinP , strokeS*& psttP , const strokeS* const psttKeyP , const strokeS* const psttLikeP )/*1*/

/**/
*/
 psttLikeP
   must not contain '/' or '.'
  must be alphanumeric or '_'
  example: T("103001f")
  example: T("ideafarm")
 psttKeyP
 psttP
arguments
evaluates to the number of bytes of free space
  \<A HREF=\"5.d210104.1.1.0.html\"\>d210104:  WAKEsHOW( "example.simplest.func.103001f.etherC.diskChooseSiteF" )\</A\>
 simplest
examples
\<A HREF=\"5.103001f.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$diskChooseSiteF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


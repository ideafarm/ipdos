
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


;
}
    #endif

        #endif

            inline HDC  oshDeviceMemoryF( voidT ) const { return oshDeviceMemory ; }
            inline HDC  oshDeviceF( voidT ) const { return oshDevice ; }

            public :

            inline HDC& oshDeviceRefF( voidT ) { return oshDevice ; }

            protected :

        #elif defined( __NT__ )
        #if defined( __OS2__ )

    #if defined( ifcENABLEtHIRDpARTIES )

    }
        ungrabF( tinP ) ;
                         pDeviceCBF = pDeviceCBFP ;
        pDeviceOldCBFP = pDeviceCBF ;
                   cArg = cArgP ;
        cArgOldP = cArg ;
        grabF( tinP , TAG( TAGiDnULL ) ) ;
    {
    inline voidT set_pDeviceCBF_F( tinS& tinP , deviceCBFT& pDeviceOldCBFP , countT& cArgOldP , deviceCBFT pDeviceCBFP = 0 , countT cArgP = 0 )
    inline flagsT flagsF( voidT ) const { return flagsCt ; }
    inline countT cRowF( voidT ) const { return cRow ; }
    inline countT cColF( voidT ) const { return cCol ; }
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34005.deviceC.dtBitmapF!||
    voidT dtBitmapF( tinS& tinP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34004.deviceC.ctBitmapF!||
    voidT ctBitmapF( tinS& tinP ) ;

    public :

    inline countT& cRowRefF( voidT ) { return cRow ; }
    inline countT& cColRefF( voidT ) { return cCol ; }

    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34003.deviceC.deviceC!||
    deviceC( tinS& tinP , etherC& etherP , const measureT surfaceErrorLimitP = 0 , deviceCBFT pDeviceCBFP = 0 , const countT cArgP = 0 , const flagsT flagsP = flDEVICEc_null ) ;

    #endif

        virtual ~deviceC( voidT ) = 0 ;

    #else

        //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34002.deviceC.dt_deviceC!||
        virtual ~deviceC( voidT ) ;
        //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34002.deviceC.3func.34001.deviceC.NEWdELcLASSb!||
        NEWdELcLASSpROTOS

    #if defined( ifcENABLEtHIRDpARTIES )

    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.36122007.deviceC.quitDrawingF!||
    voidT quitDrawingF( tinS& tinP ) ;

    protected :

    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34006.deviceC.hearGossipF!||
    virtual boolT hearGossipF( tinS& tinP , associateC& originP , const countT idTypeP , const countT idMsgP , const countT cArgP ) ;

    #endif

        #endif

            byteT                 pbPad[ sizeof( countT ) * 8 ] ;
            //CS:CODEsYNCH: 15000149 15000149

        #elif defined( __NT__ )
        #if defined( __OS2__ )

    #else
    //THIS IS NEEDED BECAUSE I AM A BASE CLASS SO ALL MODULES MUST BE TOLD THAT MY SIZE IS THE SAME

        #endif

            HBITMAP               oshBitmap               ;
            HPEN                  oshPen                  ;
            HBRUSH                oshBrush                ;
            HBITMAP               oshBitmapWas            ;
            HPEN                  oshPenWas               ;
            HBRUSH                oshBrushWas             ;
            HDC                   oshDeviceMemory         ;
            HDC                   oshDevice               ;
            //CS:CODEsYNCH: 15000149 15000149

        #elif defined( __NT__ )
        #if defined( __OS2__ )

    #if defined( ifcENABLEtHIRDpARTIES )

    private :

    signC                 sgnReady                ; // DERIVED CLASS MUST CALL giveF DURING SETUP

    protected :

    countT                cArg                    ;
    deviceCBFT            pDeviceCBF              ;
    const flagsT          flagsCt                 ;
    const measureT        surfaceErrorLimit       ;
    stackC                st_idEye                ;
    boolT                 bSuppressAnimation      ;

    public :

    signC                 sgnDone_tmDrawF         ;
    boolT                 bQuit                   ;

    countT                cRow                    ;
    countT                cCol                    ;
{
/*1*/class _export deviceC : public associateC/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//


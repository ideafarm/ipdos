
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


DONE( tmSetFloorUsersF )
}
    dec02AM( cInstances ) ;

    paramP.bQuitTmUsers = 0 ;
    }
        etThread( tinP , pSwSecrets ) ;
        }
            }
                { ++ s ; etThread.osSleepF( tinP , TOCK ) ; }

                pSwSecrets->freeAllF( tinP ) ;

                psttLeverName = 0 ;
                }
                    else etThread.delF( tinP , psttSwitchedSecret ) ;
                    }
                        psttSwitchedSecret = 0 ;
                        paramP.ppsttLoginSecret[ cButtonsSet ++ ] = psttSwitchedSecret ;
                        etThread.delF( tinP , paramP.ppsttLoginSecret[ cButtonsSet ] ) ;

                        etThread.delF( tinP , psttn ) ;
                        (pButton++)->setF( tinP , T("")+S3(mCs,scOld_mmFRAMEcELLS,(measureT)1.0)+T(psttn)+S2(0,scOld_POPfRAME) ) ;
                        measureT mCs  = squeezeF( tinP , etThread , psttn  , psttLeverName , 4 ) ; ___( psttn  ) ;
                        ZE( strokeS* , psttn ) ;  
                    {
                    if( cButtonsSet < cButtonsNew )
    
                    strokeS*& psttSwitchedSecret = *(strokeS**)&(countT&)*pSwSecrets ;
                    psttLeverName = (strokeS*)pSwSecrets->leverF( tinP , idf ) ;
                {
                for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                ZE( countT , cButtonsSet ) ;
                countT cFlavors = pSwSecrets->cFlavorsF( tinP ) ;

                tcButtonC* pButton = &paramP.buLoginKey1 ;
                cButtonsOld = cButtonsNew ;

                }
                    replaceButtonsF( tinP , etThread , pTaskP->c1 , tb , CSTTmINbUTTONS , T("insert your key; click your name") ) ;

                    while( cToDo -- ) tb += T(" ")+*(pButton++) ;
                    countT cToDo = cButtonsNew ;
                    TN( tb , "" ) ; tb = paramP.buEscape ;

                    tcButtonC* pButton = &paramP.buLoginKey1 ;
                {
                if( cButtonsOld != cButtonsNew )

                if( cButtonsNew > 8 ) cButtonsNew = 8 ;
                countT cButtonsNew = pSwSecrets->cFlavorsF( tinP ) ;
        
                }
                    }
                        }
                            }
                                etThread.delF( tinP , psttLeverName ) ;
                                etThread.delF( tinP , psttSecret ) ;
                                }
                                    }
                                        psttSecret = 0 ;
                                        psttSwitchedSecret = psttSecret ;
                                    {
                                    if( !psttSwitchedSecret )
                                    strokeS*& psttSwitchedSecret = *(strokeS**)&(countT&)*pSwSecrets ;
                                {
                                if( bFound )
    
                                }
                                    }
                                        etThread.delF( tinP , psttEntryName ) ;
                                        }
                                            etThread.delF( tinP , postEntrySecret ) ;
                                            etThread.strMakeFromOsTextF( tinP , psttSecret , postEntrySecret ) ; ___( psttSecret ) ;
        
                                            postEntrySecret[ offo ++ ] = 0 ;
                                            }
                                                else                offi ++ ;
                                                if( !( offi % 2 ) ) postEntrySecret[ offo ++ ] = pppostNameSecret[ offe ][ 1 ][ offi ++ ] ;
                                            {
                                            while( pppostNameSecret[ offe ][ 1 ][ offi ] )
                                            ZE( countT , offo ) ;
                                            ZE( countT , offi ) ;
        
                                            etThread.newF( tinP , LF , postEntrySecret , 1 + thirdC::c_strlenIF( tinP , pppostNameSecret[ offe ][ 1 ] ) ) ; ___( postEntrySecret ) ;
                                            ZE( osTextT* , postEntrySecret ) ;
    
                                            bFound = 1 ;
                                        {
                                        if( !etThread.strCompareF( tinP , psttEntryName , psttLeverName ) )
    
                                        etThread.delF( tinP , postEntryName ) ;
                                        etThread.strMakeFromOsTextF( tinP , psttEntryName , postEntryName ) ; ___( psttEntryName ) ;
                                        ZE( strokeS* , psttEntryName ) ;
    
                                        postEntryName[ offo ++ ] = 0 ;
                                        }
                                            else                offi ++ ;
                                            if( !( offi % 2 ) ) postEntryName[ offo ++ ] = pppostNameSecret[ offe ][ 0 ][ offi ++ ] ;
                                        {
                                        while( pppostNameSecret[ offe ][ 0 ][ offi ] )
                                        ZE( countT , offo ) ;
                                        ZE( countT , offi ) ;
    
                                        etThread.newF( tinP , LF , postEntryName , 1 + thirdC::c_strlenIF( tinP , pppostNameSecret[ offe ][ 0 ] ) ) ; ___( postEntryName ) ;
                                        ZE( osTextT* , postEntryName ) ;
                                    {
                                    for( countT offe = 0 ; offe < cEntries ; offe ++ )
                                    countT cEntries = sizeof pppostNameSecret / sizeof pppostNameSecret[ 0 ] ;
        
                                    } ;
                                        CAMOFLAGEd( "W" , "o" , "'" , "O" , " " , "I" , "d" , "e" , "a" , "f" , "a" , "r" , "m" ) , CAMOFLAGE6( "b" , "a" , "n" , "a" , "n" , "a" )
                                        CAMOFLAGE9( "N" , "e" , "a" , "l" , " " , "B" , "a" , "s" , "u" ) , CAMOFLAGE5( "o" , "c" , "e" , "a" , "n" ) ,
                                        //CAMOFLAGE8( "H" , "h" , "h" , "h" , "h" , "h" , "h" , "h" ) , CAMOFLAGE1( "h" ) ,
                                        //CAMOFLAGE7( "G" , "g" , "g" , "g" , "g" , "g" , "g" ) , CAMOFLAGE1( "g" ) ,
                                        //CAMOFLAGE6( "F" , "f" , "f" , "f" , "f" , "f" ) , CAMOFLAGE1( "f" ) ,
                                        //CAMOFLAGE5( "E" , "e" , "e" , "e" , "e" ) , CAMOFLAGE1( "e" ) ,
                                        //CAMOFLAGE4( "D" , "d" , "d" , "d" ) , CAMOFLAGE1( "d" ) ,
                                        //CAMOFLAGE3( "C" , "c" , "c" ) , CAMOFLAGE1( "c" ) ,
                                        //CAMOFLAGE2( "B" , "b" ) , CAMOFLAGE1( "b" ) ,
                                        //CAMOFLAGE1( "A" ) , CAMOFLAGE1( "a" ) ,
                                    {
                                    static osTextT* pppostNameSecret[][ 2 ] = //U::CAMOFLAGE SO CANNOT SEE THIS ARRAY WITH BINARY EDITOR
                                {
                                ZE( strokeS* , psttSecret ) ;
                                ZE( boolT , bFound ) ;

                                sIn >> psttLeverName ;
            
                                }
                                    sIn >> idDisk ;
                                    ZE( countT , idDisk ) ;
                                {
                                if( idFormat == 1 )
            
                                }
                                    }
                                        break ;
                                        if( fingerprint != FINGERnEG_PERSONALkEY ) continue ;
                                    {
                                    default :
                                    }
                                        break ;
                                        if( fingerprint != 0x83c95e47 ) continue ;
                                    {
                                    case 1 :
                                {
                                switch( idFormat )
                                sIn >> fingerprint ;
                                ZE( countT , fingerprint ) ;
            
                                if( idFormat > 2 ) continue ;
                                sIn >> idFormat ;
                                ZE( countT , idFormat ) ;
            
                                if( idAdam != 0x4010579 && idAdam != 0x4010fff ) continue ; // Neal Basu's ORIGINAL CD WAS MARKED WITH 4010FFF; REMOVE THIS SUPPORT WHEN HIS DISK IS OBSOLETE
                                sIn >> idAdam ;
                                ZE( countT , idAdam ) ;
                            {
                            else
                            if( POOP ) POOPR
                            tinP.pEtScratch->boxGetShadowF( tinP , sIn , psttc1 ) ;
                            soulC sIn( tinP , TAG( TAGiDnULL ) ) ;
                            SCOOPS
                        {
                        IFsCRATCH
                    {
                    FORsTRINGSiN1( ppstt1m[ offm ] )
                {
                for( countT offm = 0 ; offm < sizeof ppstt1m / sizeof ppstt1m[ 0 ] ; offm ++ )
                etThread.diskFindFileOrDirOldF( tinP , ppstt1m[ 1 ] , tLike2 , 0 , 0x8 ) ;
                etThread.diskFindFileOrDirOldF( tinP , ppstt1m[ 0 ] , tLike1 , 0 , 0x8 ) ;
                strokeS* ppstt1m[] = { 0 , 0 } ;
            {
            while( !etThread && !ether && !paramP.bQuitTmUsers )
            countT cButtonsOld = - 1 ; //TO GET A REFRESH EVEN IF NEW NUMBER OF BUTTONS IS 0
            sleepC s( tinP , TAG( TAGiDnULL ) ) ;
        {
        if( pSwSecrets )
        etThread( tinP , pSwSecrets , TAG( TAGiDnULL ) , flSTACKc_DOnOTsERIALIZE|flSTACKc_ALLOWmULTIPLEuNSERIALIZED , psttLeverName ) ;
        ZE( strokeS* , psttLeverName ) ;
        ZE( switchC* , pSwSecrets ) ;

        TN( tLike2 , "///?/ideafarm.key.*" ) ;
        TN( tLike1 , "///?/ideafarm.key" ) ; //Neal Basu's ORIGINAL KEY WAS NAMED LIKE THIS; REMOVE THIS SUPPORT WHEN HIS ORIGINAL KEY IS OBSOLETE
    {
    
    //replaceButtonsF( tinP , etThread , pTaskP->c1 , paramP.buEscape+T(" ")+paramP.buSubscribe+T(" ")+paramP.prPrompt , CSTTmINbUTTONS , T("IPDOS (tm)  buttons") ) ;
    replaceButtonsF( tinP , etThread , pTaskP->c1 , T("") , CSTTmINbUTTONS , T("insert your key; click your name") ) ;

    etThread.strMakeF( tinP , paramP.psttHintEscape , T("escape (to IPDOS (tm) banner)") ) ; ___( paramP.psttHintEscape ) ;
    etThread.delF( tinP , paramP.psttHintEscape ) ;

    }
        }
            }
                ++ s ; etThread.osSleepF( tinP , TUCK * 0x40 ) ;      
                dec02AM( cInstances ) ;
            {
            else
            if( idInstance == 1 ) break ;
            idInstance = 1 + incv02AM( cInstances ) ;
        {
        for(;;)
        sleepC s( tinP , TAG( TAGiDnULL ) ) ;
    {
    ZE( countT , idInstance ) ;
    static countT cInstances ;

    ARGgET( pTaskP->c1 )
{
if( pTaskP && pTaskP->c1 )
TASK( tmSetFloorUsersF )

DONE( tmRestoreTabbingF )
}
    paramP.bHoverPadDrag.ungrabF( tinP ) ; //GRABBED BY buHoverPadCBF
    etThread.strokeF( tinP , T("")+S2(0,scOld_POPtABfRESH) ) ;

    }
        }
            { ++ s ; etThread.osSleepF( tinP , TUCK * 0x20 ) ; }
        {
        while( paramP.vtHoverPad.bPendingF( tinP ) )
        sleepC s( tinP , TAG( TAGiDnULL ) ) ;
    {

    ARGgET( pTaskP->c1 )
{
if( pTaskP && pTaskP->c1 )
TASK( tmRestoreTabbingF )

#define CAMOFLAGEf(post1P,post2P,post3P,post4P,post5P,post6P,post7P,post8P,post9P,postaP,postbP,postcP,postdP,posteP,postfP) ( post1P "\x12" post2P "\xb5" post3P "\xa8" post4P "\x33" post5P "\x93" post6P "\xe7" post7P "\xb3" post8P "\x85" post9P "\x30" postaP "\xb7" postbP "\x48" postcP "\xf3" postdP "\x34" posteP "\x09" postfP )
#define CAMOFLAGEe(post1P,post2P,post3P,post4P,post5P,post6P,post7P,post8P,post9P,postaP,postbP,postcP,postdP,posteP)        ( post1P "\x12" post2P "\xb5" post3P "\xa8" post4P "\x33" post5P "\x93" post6P "\xe7" post7P "\xb3" post8P "\x85" post9P "\x30" postaP "\xb7" postbP "\x48" postcP "\xf3" postdP "\x34" posteP )
#define CAMOFLAGEd(post1P,post2P,post3P,post4P,post5P,post6P,post7P,post8P,post9P,postaP,postbP,postcP,postdP)               ( post1P "\x12" post2P "\xb5" post3P "\xa8" post4P "\x33" post5P "\x93" post6P "\xe7" post7P "\xb3" post8P "\x85" post9P "\x30" postaP "\xb7" postbP "\x48" postcP "\xf3" postdP )
#define CAMOFLAGEc(post1P,post2P,post3P,post4P,post5P,post6P,post7P,post8P,post9P,postaP,postbP,postcP)                      ( post1P "\x12" post2P "\xb5" post3P "\xa8" post4P "\x33" post5P "\x93" post6P "\xe7" post7P "\xb3" post8P "\x85" post9P "\x30" postaP "\xb7" postbP "\x48" postcP )
#define CAMOFLAGEb(post1P,post2P,post3P,post4P,post5P,post6P,post7P,post8P,post9P,postaP,postbP)                             ( post1P "\x12" post2P "\xb5" post3P "\xa8" post4P "\x33" post5P "\x93" post6P "\xe7" post7P "\xb3" post8P "\x85" post9P "\x30" postaP "\xb7" postbP )
#define CAMOFLAGEa(post1P,post2P,post3P,post4P,post5P,post6P,post7P,post8P,post9P,postaP)                                    ( post1P "\x12" post2P "\xb5" post3P "\xa8" post4P "\x33" post5P "\x93" post6P "\xe7" post7P "\xb3" post8P "\x85" post9P "\x30" postaP )
#define CAMOFLAGE9(post1P,post2P,post3P,post4P,post5P,post6P,post7P,post8P,post9P)                                           ( post1P "\x12" post2P "\xb5" post3P "\xa8" post4P "\x33" post5P "\x93" post6P "\xe7" post7P "\xb3" post8P "\x85" post9P )
#define CAMOFLAGE8(post1P,post2P,post3P,post4P,post5P,post6P,post7P,post8P)                                                  ( post1P "\x12" post2P "\xb5" post3P "\xa8" post4P "\x33" post5P "\x93" post6P "\xe7" post7P "\xb3" post8P )
#define CAMOFLAGE7(post1P,post2P,post3P,post4P,post5P,post6P,post7P)                                                         ( post1P "\x12" post2P "\xb5" post3P "\xa8" post4P "\x33" post5P "\x93" post6P "\xe7" post7P )
#define CAMOFLAGE6(post1P,post2P,post3P,post4P,post5P,post6P)                                                                ( post1P "\x12" post2P "\xb5" post3P "\xa8" post4P "\x33" post5P "\x93" post6P )
#define CAMOFLAGE5(post1P,post2P,post3P,post4P,post5P)                                                                       ( post1P "\x12" post2P "\xb5" post3P "\xa8" post4P "\x33" post5P )
#define CAMOFLAGE4(post1P,post2P,post3P,post4P)                                                                              ( post1P "\x12" post2P "\xb5" post3P "\xa8" post4P )
#define CAMOFLAGE3(post1P,post2P,post3P)                                                                                     ( post1P "\x12" post2P "\xb5" post3P )
#define CAMOFLAGE2(post1P,post2P)                                                                                            ( post1P "\x12" post2P )
#define CAMOFLAGE1(post1P)                                                                                                   ( post1P )

#include postHEADER

/*1*//*thread mains*//*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


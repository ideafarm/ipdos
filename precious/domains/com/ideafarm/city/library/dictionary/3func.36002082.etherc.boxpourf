
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return cFiles ;
    _OUT_

    delF( tinP , pstt1Remote ) ;
    delF( tinP , pstt1Local ) ;
    else __NZ( pstt1Local ) ;
    }
        diskFilePourF( tinP , psttHostP , pstt1Remote , pstt1Local ) ;
        __Z( pstt1Local ) ;
    {
    if( pstt1Remote )

    }
        FORsTRINGSiNsPANNEDcOMBINEDtAIL1
        }
            delF( tinP , psttTo ) ;
            strFuseSeparateF( tinP , pstt1Remote , psttTo , 0 , 0 , 0 , 0 , /*U::SOUL?*/ 0x100000 ) ; ___( pstt1w ) ;

            }
                delF( tinP , psttSuffix ) ;
                strFuseF( tinP , psttTo , T(psttLikeToP)+T(psttSuffix) ) ; ___( psttTo ) ;
                strSubstringF( tinP , psttSuffix , ++ idf , idl , psttc1 ) ; ___( psttSuffix ) ;
                countT idf = strIdF( tinP , countTC( 1 ) , sttq , sttCut , psttc1 , 0 , - 1 ) ;
                strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
                ZE( countT , idl ) ;
                ZE( strokeS* , psttSuffix ) ;
            {
            ZE( strokeS* , psttTo ) ;

            strFuseSeparateF( tinP , pstt1Local , psttc1 , 0 , 0 , 0 , 0 , /*U::SOUL?*/ 0x100000 ) ; ___( pstt1w ) ;

            ZE( strokeS* , pstt1w ) ;

            if( POOP ) break ;
        {
        FORsTRINGSiNsPANNEDcOMBINEDhEAD1( soul1m )

        strokeS sttCut = psttLikeFromP[ CSpREFIX - 1 + psttLikeFromP->idAdam ] ;

        cFiles = boxMenuF( tinP , soul1m , T(psttLikeFromP) + T("*") , 0 , cMaxP ) ;
        soulC soul1m( tinP , TAG( TAGiDnULL ) ) ;
    {
    ZE( countT , cFiles ) ;
    ZE( strokeS* , pstt1Local ) ;
    ZE( strokeS* , pstt1Remote ) ;
    _INoLD_

    }
        if( POOP ) return 0 ;
        __Z( psttLikeFromP ) ;
        __Z( psttLikeToP ) ;
        __Z( psttHostP ) ;
        if( POOP ) return 0 ;
    {
    IFbEcAREFUL
    SCOOP
{
/**//*1*/countT etherC::boxPourF( tinS& tinP , const strokeS* const psttHostP , const strokeS* const psttLikeToP , const strokeS* const psttLikeFromP , const countT csttEstimateP , const countT cMaxP )/*1*/
*/
  if not 0 then this is the maximum number of files that will be poured
  can be 0
 cMaxP
 csttEstimateP
 psttLikeFromP
 psttLikeToP
 psttHostP
arguments
evaluates to the number of files moved
  strFuseSeparateF
 U: avoid hardcoded capacity limits
 U: provide a boxSuckerF function so adam definitions can use this
it is illegal to refer to this symbol in the definition of an adam
\<A HREF=\"5.1030090.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$boxPourF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


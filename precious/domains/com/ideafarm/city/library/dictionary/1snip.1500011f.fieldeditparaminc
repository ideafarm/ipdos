
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


} ;
    }
        flagsTypeMask |= flFIELDeDITtYPEmASK_LISTINGsp ;
        ___( new( 0 , tinP , LF ) notEqual_countT_C( pBool_listingC_ptr_no , (countT)&testP ) ) ;
        TINSL
    {
    inline _1_no_notEqual_C( const listingC& testP )
    }
        flagsTypeMask |= flFIELDeDITtYPEmASK_COUNTsTRZ ;
        ___( new( 0 , tinP , LF ) notEqual_countTstrz_C( pBool_countTstrz_no , testP ) ) ;
        TINSL
    {
    inline _1_no_notEqual_C( countT* testP )
    }
        flagsTypeMask |= flFIELDeDITtYPEmASK_BLOB ;
        ___( new( 0 , tinP , LF ) notEqual_byteTstrz_C( pBool_blob_no , testP , cEltP ) ) ;
        TINSL
    {
    inline _1_no_notEqual_C( byteT* testP , countT cEltP = 0 )
    }
        flagsTypeMask |= flFIELDeDITtYPEmASK_COUNT ;
        ___( new( 0 , tinP , LF ) notEqual_countT_C( pBool_countT_no , testP ) ) ;
        TINSL
    {
    inline _1_no_notEqual_C( countT testP )
{
struct _export _1_no_notEqual_C              : public fieldEditParamInC

} ;
    }
        flagsTypeMask |= flFIELDeDITtYPEmASK_LISTINGsp ;
        ___( new( 0 , tinP , LF ) notEqual_countT_C( pBool_listingC_ptr_ok , (countT)&testP ) ) ;
        TINSL
    {
    inline _1_ok_notEqual_C( const listingC& testP )
    }
        flagsTypeMask |= flFIELDeDITtYPEmASK_COUNTsTRZ ;
        ___( new( 0 , tinP , LF ) notEqual_countTstrz_C( pBool_countTstrz_ok , testP ) ) ;
        TINSL
    {
    inline _1_ok_notEqual_C( countT* testP )
    }
        flagsTypeMask |= flFIELDeDITtYPEmASK_BLOB ;
        ___( new( 0 , tinP , LF ) notEqual_byteTstrz_C( pBool_blob_ok , testP , cEltP ) ) ;
        TINSL
    {
    inline _1_ok_notEqual_C( byteT* testP , countT cEltP = 0 )
    }
        flagsTypeMask |= flFIELDeDITtYPEmASK_COUNT ;
        ___( new( 0 , tinP , LF ) notEqual_countT_C( pBool_countT_ok , testP ) ) ;
        TINSL
    {
    inline _1_ok_notEqual_C( countT testP )
{
struct _export _1_ok_notEqual_C              : public fieldEditParamInC

} ;
    }
        flagsTypeMask |= flFIELDeDITtYPEmASK_LISTINGsp ;
        ___( new( 0 , tinP , LF ) equal_countT_C( pBool_listingC_ptr_no , (countT)&testP ) ) ;
        TINSL
    {
    inline _1_no_equal_C( const listingC& testP )
    }
        flagsTypeMask |= flFIELDeDITtYPEmASK_COUNTsTRZ ;
        ___( new( 0 , tinP , LF ) equal_countTstrz_C( pBool_countTstrz_no , testP ) ) ;
        TINSL
    {
    inline _1_no_equal_C( countT* testP )
    }
        flagsTypeMask |= flFIELDeDITtYPEmASK_BLOB ;
        ___( new( 0 , tinP , LF ) equal_byteTstrz_C( pBool_blob_no , testP , cEltP ) ) ;
        TINSL
    {
    inline _1_no_equal_C( byteT* testP , countT cEltP = 0 )
    }
        flagsTypeMask |= flFIELDeDITtYPEmASK_COUNT ;
        ___( new( 0 , tinP , LF ) equal_countT_C( pBool_countT_no , testP ) ) ;
        TINSL
    {
    inline _1_no_equal_C( countT testP )
{
struct _export _1_no_equal_C              : public fieldEditParamInC

} ;
    }
        flagsTypeMask |= flFIELDeDITtYPEmASK_LISTINGsp ;
        ___( new( 0 , tinP , LF ) equal_countT_C( pBool_listingC_ptr_ok , (countT)&testP ) ) ;
        TINSL
    {
    inline _1_ok_equal_C( const listingC& testP )
    }
        flagsTypeMask |= flFIELDeDITtYPEmASK_COUNTsTRZ ;
        ___( new( 0 , tinP , LF ) equal_countTstrz_C( pBool_countTstrz_ok , testP ) ) ;
        TINSL
    {
    inline _1_ok_equal_C( countT* testP )
    }
        flagsTypeMask |= flFIELDeDITtYPEmASK_BLOB ;
        ___( new( 0 , tinP , LF ) equal_byteTstrz_C( pBool_blob_ok , testP , cEltP ) ) ;
        TINSL
    {
    inline _1_ok_equal_C( byteT* testP , countT cEltP = 0 )
    }
        flagsTypeMask |= flFIELDeDITtYPEmASK_COUNT ;
        ___( new( 0 , tinP , LF ) equal_countT_C( pBool_countT_ok , testP ) ) ;
        TINSL
    {
    inline _1_ok_equal_C( countT testP )
{
struct _export _1_ok_equal_C              : public fieldEditParamInC

} ;
    }
        flagsTypeMask |= flFIELDeDITtYPEmASK_LISTINGsp ;
        ___( new( 0 , tinP , LF ) below_countT_C( pBool_listingC_ptr_no , (countT)&testP ) ) ;
        TINSL
    {
    inline _1_no_below_C( const listingC& testP )
    }
        flagsTypeMask |= flFIELDeDITtYPEmASK_COUNTsTRZ ;
        ___( new( 0 , tinP , LF ) below_countTstrz_C( pBool_countTstrz_no , testP ) ) ;
        TINSL
    {
    inline _1_no_below_C( countT* testP )
    }
        flagsTypeMask |= flFIELDeDITtYPEmASK_BLOB ;
        ___( new( 0 , tinP , LF ) below_byteTstrz_C( pBool_blob_no , testP , cEltP ) ) ;
        TINSL
    {
    inline _1_no_below_C( byteT* testP , countT cEltP = 0 )
    }
        flagsTypeMask |= flFIELDeDITtYPEmASK_COUNT ;
        ___( new( 0 , tinP , LF ) below_countT_C( pBool_countT_no , testP ) ) ;
        TINSL
    {
    inline _1_no_below_C( countT testP )
{
struct _export _1_no_below_C              : public fieldEditParamInC

} ;
    }
        flagsTypeMask |= flFIELDeDITtYPEmASK_LISTINGsp ;
        ___( new( 0 , tinP , LF ) below_countT_C( pBool_listingC_ptr_ok , (countT)&testP ) ) ;
        TINSL
    {
    inline _1_ok_below_C( const listingC& testP )
    }
        flagsTypeMask |= flFIELDeDITtYPEmASK_COUNTsTRZ ;
        ___( new( 0 , tinP , LF ) below_countTstrz_C( pBool_countTstrz_ok , testP ) ) ;
        TINSL
    {
    inline _1_ok_below_C( countT* testP )
    }
        flagsTypeMask |= flFIELDeDITtYPEmASK_BLOB ;
        ___( new( 0 , tinP , LF ) below_byteTstrz_C( pBool_blob_ok , testP , cEltP ) ) ;
        TINSL
    {
    inline _1_ok_below_C( byteT* testP , countT cEltP = 0 )
    }
        flagsTypeMask |= flFIELDeDITtYPEmASK_COUNT ;
        ___( new( 0 , tinP , LF ) below_countT_C( pBool_countT_ok , testP ) ) ;
        TINSL
    {
    inline _1_ok_below_C( countT testP )
{
struct _export _1_ok_below_C              : public fieldEditParamInC

} ;
    }
        flagsTypeMask |= flFIELDeDITtYPEmASK_LISTINGsp ;
        ___( new( 0 , tinP , LF ) above_countT_C( pBool_listingC_ptr_no , (countT)&testP ) ) ;
        TINSL
    {
    inline _1_no_above_C( const listingC& testP )
    }
        flagsTypeMask |= flFIELDeDITtYPEmASK_COUNTsTRZ ;
        ___( new( 0 , tinP , LF ) above_countTstrz_C( pBool_countTstrz_no , testP ) ) ;
        TINSL
    {
    inline _1_no_above_C( countT* testP )
    }
        flagsTypeMask |= flFIELDeDITtYPEmASK_BLOB ;
        ___( new( 0 , tinP , LF ) above_byteTstrz_C( pBool_blob_no , testP , cEltP ) ) ;
        TINSL
    {
    inline _1_no_above_C( byteT* testP , countT cEltP = 0 )
    }
        flagsTypeMask |= flFIELDeDITtYPEmASK_COUNT ;
        ___( new( 0 , tinP , LF ) above_countT_C( pBool_countT_no , testP ) ) ;
        TINSL
    {
    inline _1_no_above_C( countT testP )
{
struct _export _1_no_above_C              : public fieldEditParamInC

} ;
    }
        flagsTypeMask |= flFIELDeDITtYPEmASK_LISTINGsp ;
        ___( new( 0 , tinP , LF ) above_countT_C( pBool_listingC_ptr_ok , (countT)&testP ) ) ;
        TINSL
    {
    inline _1_ok_above_C( const listingC& testP )
    }
        flagsTypeMask |= flFIELDeDITtYPEmASK_COUNTsTRZ ;
        ___( new( 0 , tinP , LF ) above_countTstrz_C( pBool_countTstrz_ok , testP ) ) ;
        TINSL
    {
    inline _1_ok_above_C( countT* testP )
    }
        flagsTypeMask |= flFIELDeDITtYPEmASK_BLOB ;
        ___( new( 0 , tinP , LF ) above_byteTstrz_C( pBool_blob_ok , testP , cEltP ) ) ;
        TINSL
    {
    inline _1_ok_above_C( byteT* testP , countT cEltP = 0 )
    }
        flagsTypeMask |= flFIELDeDITtYPEmASK_COUNT ;
        ___( new( 0 , tinP , LF ) above_countT_C( pBool_countT_ok , testP ) ) ;
        TINSL
    {
    inline _1_ok_above_C( countT testP )
{
struct _export _1_ok_above_C              : public fieldEditParamInC

} ;
    }
        flagsTypeMask |= flFIELDeDITtYPEmASK_LISTINGsp ;
        ___( new( 0 , tinP , LF ) in_countT_C( pBool_listingC_ptr_no , (countT)&minP , (countT)&maxP ) ) ;
        TINSL
    {
    inline _1_no_in_C( const listingC& minP , const listingC& maxP )
    }
        flagsTypeMask |= flFIELDeDITtYPEmASK_COUNTsTRZ ;
        ___( new( 0 , tinP , LF ) in_countTstrz_C( pBool_countTstrz_no , minP , maxP ) ) ;
        TINSL
    {
    inline _1_no_in_C( countT* minP , countT* maxP )
    }
        flagsTypeMask |= flFIELDeDITtYPEmASK_BLOB ;
        ___( new( 0 , tinP , LF ) in_byteTstrz_C( pBool_blob_no , minP , maxP , cEltP ) ) ;
        TINSL
    {
    inline _1_no_in_C( byteT* minP , byteT* maxP , countT cEltP = 0 )
    }
        flagsTypeMask |= flFIELDeDITtYPEmASK_COUNT ;
        ___( new( 0 , tinP , LF ) in_countT_C( pBool_countT_no , minP , maxP ) ) ;
        TINSL
    {
    inline _1_no_in_C( countT minP , countT maxP )
{
struct _export _1_no_in_C              : public fieldEditParamInC

} ;
    }
        flagsTypeMask |= flFIELDeDITtYPEmASK_LISTINGsp ;
        ___( new( 0 , tinP , LF ) in_countT_C( pBool_listingC_ptr_ok , (countT)&minP , (countT)&maxP ) ) ;
        TINSL
    {
    inline _1_ok_in_C( const listingC& minP , const listingC& maxP )
    }
        flagsTypeMask |= flFIELDeDITtYPEmASK_COUNTsTRZ ;
        ___( new( 0 , tinP , LF ) in_countTstrz_C( pBool_countTstrz_ok , minP , maxP ) ) ;
        TINSL
    {
    inline _1_ok_in_C( countT* minP , countT* maxP )
    }
        flagsTypeMask |= flFIELDeDITtYPEmASK_BLOB ;
        ___( new( 0 , tinP , LF ) in_byteTstrz_C( pBool_blob_ok , minP , maxP , cEltP ) ) ;
        TINSL
    {
    inline _1_ok_in_C( byteT* minP , byteT* maxP , countT cEltP = 0 )
    }
        flagsTypeMask |= flFIELDeDITtYPEmASK_COUNT ;
        ___( new( 0 , tinP , LF ) in_countT_C( pBool_countT_ok , minP , maxP ) ) ;
        TINSL
    {
    inline _1_ok_in_C( countT minP , countT maxP )
{
struct _export _1_ok_in_C              : public fieldEditParamInC

} ;
    }
        flagsTypeMask |= flFIELDeDITtYPEmASK_LISTINGsp ;
        ___( new( 0 , tinP , LF ) out_countT_C( pBool_listingC_ptr_no , (countT)&minP , (countT)&maxP ) ) ;
        TINSL
    {
    inline _1_no_out_C( const listingC& minP , const listingC& maxP )
    }
        flagsTypeMask |= flFIELDeDITtYPEmASK_COUNTsTRZ ;
        ___( new( 0 , tinP , LF ) out_countTstrz_C( pBool_countTstrz_no , minP , maxP ) ) ;
        TINSL
    {
    inline _1_no_out_C( countT* minP , countT* maxP )
    }
        flagsTypeMask |= flFIELDeDITtYPEmASK_BLOB ;
        ___( new( 0 , tinP , LF ) out_byteTstrz_C( pBool_blob_no , minP , maxP , cEltP ) ) ;
        TINSL
    {
    inline _1_no_out_C( byteT* minP , byteT* maxP , countT cEltP = 0 )
    }
        flagsTypeMask |= flFIELDeDITtYPEmASK_COUNT ;
        ___( new( 0 , tinP , LF ) out_countT_C( pBool_countT_no , minP , maxP ) ) ;
        TINSL
    {
    inline _1_no_out_C( countT minP , countT maxP )
{
struct _export _1_no_out_C              : public fieldEditParamInC

} ;
    }
        flagsTypeMask |= flFIELDeDITtYPEmASK_LISTINGsp ;
        ___( new( 0 , tinP , LF ) out_countT_C( pBool_listingC_ptr_ok , (countT)&minP , (countT)&maxP ) ) ;
        TINSL
    {
    inline _1_ok_out_C( const listingC& minP , const listingC& maxP )
    }
        flagsTypeMask |= flFIELDeDITtYPEmASK_COUNTsTRZ ;
        ___( new( 0 , tinP , LF ) out_countTstrz_C( pBool_countTstrz_ok , minP , maxP ) ) ;
        TINSL
    {
    inline _1_ok_out_C( countT* minP , countT* maxP )
    }
        flagsTypeMask |= flFIELDeDITtYPEmASK_BLOB ;
        ___( new( 0 , tinP , LF ) out_byteTstrz_C( pBool_blob_ok , minP , maxP , cEltP ) ) ;
        TINSL
    {
    inline _1_ok_out_C( byteT* minP , byteT* maxP , countT cEltP = 0 )
    }
        flagsTypeMask |= flFIELDeDITtYPEmASK_COUNT ;
        ___( new( 0 , tinP , LF ) out_countT_C( pBool_countT_ok , minP , maxP ) ) ;
        TINSL
    {
    inline _1_ok_out_C( countT minP , countT maxP )
{
struct _export _1_ok_out_C              : public fieldEditParamInC

struct _export _1_queryC                : public fieldEditParamInC { inline _1_queryC(                voidT                          ) { flags      = flFIELDeDIT_QUERY                                                ; } } ;
struct _export _1_deleteC               : public fieldEditParamInC { inline _1_deleteC(               voidT                          ) { flags      = flFIELDeDIT_DELETE                                               ; } } ;
struct _export _1_pushNullCountStrzC    : public fieldEditParamInC { inline _1_pushNullCountStrzC(    voidT                          ) { flags      = flFIELDeDIT_PUSHnULLcOUNTsTRZ                                    ; } } ;
struct _export _1_pushNullBlobC         : public fieldEditParamInC { inline _1_pushNullBlobC(         voidT                          ) { flags      = flFIELDeDIT_PUSHnULLbLOB                                         ; } } ;
struct _export _1_pushNullCountC        : public fieldEditParamInC { inline _1_pushNullCountC(        voidT                          ) { flags      = flFIELDeDIT_PUSHnULLcOUNT                                        ; } } ;
struct _export _1_pushIdSerialC         : public fieldEditParamInC { inline _1_pushIdSerialC(         osTextT* postSpaceP            ) { flags      = flFIELDeDIT_PUSH               ; postzIdSerialSpace = postSpaceP ; } } ;
} ;
    inline _1_pushC( const listingC& listingValueP                        ) { flags = flFIELDeDIT_PUSH ; pListingValue = &listingValueP ;                        }
    inline _1_pushC( countT*         pczValueP                            ) { flags = flFIELDeDIT_PUSH ; pczValue      = pczValueP      ;                        }
    inline _1_pushC( byteT*          pbzValueP     , countT cbzValueP = 0 ) { flags = flFIELDeDIT_PUSH ; pbzValue      = pbzValueP      ; cbzValue = cbzValueP ; }
    inline _1_pushC( countT          cValueP                              ) { flags = flFIELDeDIT_PUSH ; cValue        = cValueP        ;                        }
{
struct _export _1_pushC                 : public fieldEditParamInC
struct _export _1_purgeC                : public fieldEditParamInC { inline _1_purgeC(                countT cKeepP = 0              ) { flags      = flFIELDeDIT_PURGE              ; cKeep = cKeepP                  ; } } ;
struct _export _1_modeMixinDoNotIndexC  : public fieldEditParamInC { inline _1_modeMixinDoNotIndexC(  voidT                          ) { flags     |= flFIELDeDIT_DOnOTiNDEXdATA                                       ; } } ;
struct _export _1_modePushSinkC         : public fieldEditParamInC { inline _1_modePushSinkC(         voidT                          ) { flags      = flFIELDeDIT_MODEpUSHsINK                                         ; } } ;
struct _export _1_modePushFifoC         : public fieldEditParamInC { inline _1_modePushFifoC(         voidT                          ) { flags      = flFIELDeDIT_MODEpUSHfIFO                                         ; } } ;
struct _export _1_modeUniqueC           : public fieldEditParamInC { inline _1_modeUniqueC(           voidT                          ) { flags      = flFIELDeDIT_MODEuNIQUE                                           ; } } ;
struct _export _1_modePushIfNotExistC   : public fieldEditParamInC { inline _1_modePushIfNotExistC(   voidT                          ) { flags      = flFIELDeDIT_MODEpUSHiFnOTeXIST                                   ; } } ;
struct _export _1_modeQueryNewC         : public fieldEditParamInC { inline _1_modeQueryNewC(         voidT                          ) { flags      = flFIELDeDIT_MODEqUERYnEW                                         ; } } ;
struct _export _1_modeAllC              : public fieldEditParamInC { inline _1_modeAllC(              voidT                          ) { flags      = flFIELDeDIT_MODEaLL                                              ; } } ;

;
}
    }
        return *this ;

        boolC::pourIF( pBool_listingC_ptr_no , *(boolC**)&fepP.pBool_listingC_ptr_no ) ;
        boolC::pourIF( pBool_listingC_ptr_ok , *(boolC**)&fepP.pBool_listingC_ptr_ok ) ;
        boolC::pourIF( pBool_countTstrz_no   , *(boolC**)&fepP.pBool_countTstrz_no   ) ;
        boolC::pourIF( pBool_countTstrz_ok   , *(boolC**)&fepP.pBool_countTstrz_ok   ) ;
        boolC::pourIF( pBool_blob_no         , *(boolC**)&fepP.pBool_blob_no         ) ;
        boolC::pourIF( pBool_blob_ok         , *(boolC**)&fepP.pBool_blob_ok         ) ;
        boolC::pourIF( pBool_countT_no       , *(boolC**)&fepP.pBool_countT_no       ) ;
        boolC::pourIF( pBool_countT_ok       , *(boolC**)&fepP.pBool_countT_ok       ) ;
    
        if( !cKeep                 )   cKeep              = fepP.cKeep              ;
        if( !postzIdSerialSpace    )   postzIdSerialSpace = fepP.postzIdSerialSpace ;
        if( !pListingValue         )   pListingValue      = fepP.pListingValue      ;
        if( !pczValue              )   pczValue           = fepP.pczValue           ;
        if( !pbzValue && !cbzValue ) { pbzValue           = fepP.pbzValue           ; cbzValue = fepP.cbzValue ; }
        if( !cValue                )   cValue             = fepP.cValue             ;
        flagsTypeMask |= fepP.flagsTypeMask ;
        flags         |= fepP.flags         ;
    {
    inline fieldEditParamInC& operator +( const fieldEditParamInC& fepP ) // fepP WILL BE MODIFIED; IT IS DELCLARED const HERE TO AVOID COMPILER WARNINGS

    }
    {
    flagsTypeMask( flFIELDeDITtYPEmASK_null )
    pBool_listingC_ptr_no( 0 ) ,
    pBool_listingC_ptr_ok( 0 ) ,
    pBool_countTstrz_no( 0 ) ,
    pBool_countTstrz_ok( 0 ) ,
    pBool_blob_no( 0 ) ,
    pBool_blob_ok( 0 ) ,
    pBool_countT_no( 0 ) ,
    pBool_countT_ok( 0 ) ,
    cKeep( 0 ) ,
    postzIdSerialSpace( 0 ) ,
    pListingValue( 0 ) ,
    pczValue( 0 ) ,
    cbzValue( 0 ) ,
    pbzValue( 0 ) ,
    cValue( 0 ) ,
    flags( flFIELDeDIT_null ) ,
    inline fieldEditParamInC( voidT ) :

    }
        boolC::deleteListIF( tinP , pBool_listingC_ptr_no ) ;
        boolC::deleteListIF( tinP , pBool_listingC_ptr_ok ) ;
        boolC::deleteListIF( tinP , pBool_countTstrz_no ) ;
        boolC::deleteListIF( tinP , pBool_countTstrz_ok ) ;
        boolC::deleteListIF( tinP , pBool_blob_no ) ;
        boolC::deleteListIF( tinP , pBool_blob_ok ) ;
        boolC::deleteListIF( tinP , pBool_countT_no  ) ;
        boolC::deleteListIF( tinP , pBool_countT_ok  ) ;
        TINSL
    {
    inline ~fieldEditParamInC( voidT )

    flagsT          flagsTypeMask ;
    boolC*          pBool_listingC_ptr_no ;
    boolC*          pBool_listingC_ptr_ok ;
    boolC*          pBool_countTstrz_no ;
    boolC*          pBool_countTstrz_ok ;
    boolC*          pBool_blob_no ;
    boolC*          pBool_blob_ok ;
    boolC*          pBool_countT_no ;
    boolC*          pBool_countT_ok ;
    countT          cKeep ;
    osTextT*        postzIdSerialSpace ;
    const listingC* pListingValue ;
    countT*         pczValue ;
    countT          cbzValue ;
    byteT*          pbzValue ;
    countT          cValue ;
    flagsT          flags ;
{
/*1*/struct _export fieldEditParamInC/*1*/

/**/
*/
  listC::fieldIF( tinP , pOut , hRec , pczField1 , _1_queryC() | _1_modeAllC() | _1_ok_in_C( "d" , "g" ) | _1_ok_in_C( 4 , 8 ) , LF ) ;
  listC::fieldIF( tinP , pOut , hRec , pczField1 , _1_pushC( vv ) | _1_modePushSinkC() , LF ) ;
 application code specifies the argument with an expression such as the following examples
i provide free form argument specification for functions that take a fieldEditParamInC& argument
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


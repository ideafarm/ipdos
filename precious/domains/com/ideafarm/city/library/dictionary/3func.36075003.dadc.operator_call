
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    }
        }
            }
                }
                    }
                        pb3 += cbSnip ;
                        pEther->delF( tinP , pbSnip ) ;
                        pEther->memCopyF( tinP , pb3 , pbSnip , cbSnip ) ;
                        stOut_cbSnip >> cbSnip ;
                        stOut_pbSnip >> pbSnip ;
                        ZE( countT , cbSnip ) ;
                        ZE( byteT* , pbSnip ) ;
                    {
                    while( stOut_pbSnip )
                    byteT* pb3 = pbP ;
                    cbP = cbAll ;
                    pbP[ cbAll ] = 0 ;
                {
                if( pbP )
                pEther->newF( tinP , LF , pbP , cbAll + 1 ) ; ___( pbP ) ;

                while( !stOut_cbSnip.third && ~hDown ) ;
                do cbAll += stOut_cbSnip.downF( tinP , hDown ) ;
                handleC hDown( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
                ZE( countT , cbAll ) ;
            {
            if( stOut_cbSnip )
        {
        if( !*pEther && !bFail )
        __( stOut_cbSnip - stOut_pbSnip ) ;
        // pbP , cbP <- CONCATENATION OF SNIPPETS IN stOut_pbSnip

        }
            }
                pcSnip = pcSnipe ;

                stOut_cbSnip << cbSnip ;
                stOut_pbSnip << pbSnip ; pbSnip = 0 ;
                if( pbSnip ) for( countT off = 0 ; off < cbSnip ; off ++ ) pbSnip[ off ] = (*this)( tinP , pcSnip[ off ] ) ;
                pEther->newF( tinP , LF , pbSnip , cbSnip ) ; ___( pbSnip ) ;
                ZE( byteT* , pbSnip ) ;

                countT cbSnip = pcSnipe - pcSnip ; //CANNOT BE 0
                //CONoUTrAW5( "[" , pcSnip-pcP , "," , pcSnipe , "]\r\n" ) ;
                while( pcSnipe < pcEnd && *pcSnipe ) pcSnipe ++ ; // pcSnipe NOW POINTS ETHER TO 0 OR TO THE END
                const count01T* pcSnipe = pcSnip + 1 ;
            {
            else
            }
                }
                    }
                        break ;

                        }
                            pEther->delF( tinP , pbIn ) ;
                            }
                                //stOut_cbSnip << cbIn ;
                                //stOut_pbSnip << pbIn ; pbIn = 0 ;
                                //PIN IMAGE IS PRESUMED TO BE UNWANTED (E.G. SRU VALUES)

                                for( countT off = 0 ; off < cbIn ; off ++ ) rememberF( tinP , pbIn[ off ] ) ;
                            {
                            if( !*pEther )
                        {
                        else
                        }
                            pEther->delF( tinP , pbIn ) ;
                            }
                                stOut_cbSnip << cbSnip ;
                                stOut_pbSnip << pbSnip ; pbSnip = 0 ;
                                (*this)( tinP , pbSnip , cbSnip , (const count01T*)pbIn , cbIn / sizeof( count01T ) ) ;
                                ZE( countT , cbSnip ) ;
                                ZE( byteT* , pbSnip ) ;
                            {
                            if( !*pEther )
                            __( cbIn % sizeof( count01T ) ) ;
                        {
                        else if( idCmd == (count01T)ifcIDcMDsPOUSE_INSERTnAMEDpILL )
                        }
                            break ;
                            bFail = 1 ;
                        {
                        if( !pbIn )

                        }
                            }
                                }
                                    //if( pcNameSave[ 3 ] == idbKEYpINtYPE_SOCKETcONNECTION ) { CONoUTrAW( T("dad: ")+TF1(cbIn)+T(" ")+tShort+T("\r\n") ) ; }
                                    pEther->boxGetShadowF( tinP , pbIn , cbIn , tLong , 1 ) ; ___( pbIn ) ;
                                {
                                else
                                //else                                                   { pEther->boxGetShadowF( tinP , pbIn , cbIn , tLong , 1 ) ; ___( pbIn ) ; }
                                if( idCmd == (count01T)ifcIDcMDsPOUSE_INSERTnAMEDpILL ){ pEther->boxGetF(       tinP , pbIn , cbIn , tLong , 1 ) ; ___( pbIn ) ; }
                            {
                            else
                            }
                                }
                                    if( POOP ) POOPR
                                    else                                                   { tinP.pEtScratch->boxGetShadowF( tinP , pbIn , cbIn , tLong , 1 ) ; ___( pbIn ) ; }
                                    if( idCmd == (count01T)ifcIDcMDsPOUSE_INSERTnAMEDpILL ){ tinP.pEtScratch->boxGetF(       tinP , pbIn , cbIn , tLong , 1 ) ; ___( pbIn ) ; }
                                    SCOOPS
                                {
                                IFsCRATCH
                            {
                            if( bSilentFailP )

                            TN( tLong , "" ) ; tLong = T("///desk/" POSTfOLDERsECURITYkEYdEPOSITORY)+(idHomeDisk==1?T(""):T(" (Home ")+TF1(idHomeDisk)+T(")"))+T("/")+tShort ;
                            countT idHomeDisk = etherC::ifc_idHomeIdisk_IF() ;
                            pcSnip += cczName ;
                            countT* pcNameSave = (countT*)pcSnip ; //U::
                            textC tShort( tinP , TAG( TAGiDnULL ) , flTEXTc_null , (countT*)pcSnip , flFORMAT_UNSIGNED|flFORMAT_FOREIGN|flFORMAT_FILLzE , 8 , 0 , tDot ) ;
                            TN( tDot , "." ) ;
                        {
                        ZE( countT , cbIn ) ;
                        ZE( byteT* , pbIn ) ;

                        if( cczName - cczNameVerify ) { BLAMMO ; } //U::
                        countT cczNameVerify = 2 * ( pEther->strBodyLengthF( tinP , (countT*)( ++ pcSnip ) ) + 1 ) ;
                        countT cczName = *( ++ pcSnip ) ;
                    {
                    case (count01T)ifcIDcMDsPOUSE_INSERTnAMEDpIN :
                    case (count01T)ifcIDcMDsPOUSE_INSERTnAMEDpILL :
                {
                switch( idCmd )
                const count01T idCmd = *( ++ pcSnip ) ;
                //CONoUTrAW3( "[" , pcSnip-pcP , "]\r\n" ) ;
            {
            if( !*pcSnip )
        {
        while( pcSnip < pcEnd && !bFail )
        ZE( boolT , bFail ) ;
        const count01T*       pcSnip = pcP ;
        const count01T* const pcEnd = pcP + ccP ;
        stackC stOut_cbSnip( tinP , *pEther , TAG( TAGiDnULL ) , flSTACKc_FIFO ) ;
        stackC stOut_pbSnip( tinP , *pEther , TAG( TAGiDnULL ) , flSTACKc_FIFO , ifcSTACKtYPE_PTR_byteT ) ;
    {
    else
    }
        }
            pbP[ off ] = 0 ;
            for( countT off = 0 ; off < ccP ; off ++ ) pbP[ off ] = (*this)( tinP , pcP[ off ] ) ;
        {
        if( pbP )
        pEther->newF( tinP , LF , pbP , cbP + 1 ) ; ___( pbP ) ;
        cbP = ccP ;
    {
    if( off == ccP ) //INPUT DOES NOT CONTAIN ESCAPE SEQUENCES

    }
        if( !pcP[ off ] ) break ;
    {
    for( ; off < ccP ; off ++ )
    ZE( countT , off ) ;
    _IO_

    }
        if( *pEther ) return ;
        __Z( ccP ) ;
        __Z( pcP ) ;
        __( cbP ) ;
        __NZ( pbP ) ;
        if( *pEther ) return ;
    {
    IFbEcAREFUL    
{
/*1*/voidT dadC::operator ()( tinS& tinP , byteT*& pbP , countT& cbP , const count01T* const pcP , countT ccP , const boolT bSilentFailP )/*1*/

//MOTIVE: SO THAT CODE LIKE THAT OF socketC::readF CAN HANDLE INCOMING CODE STREAMS WITHOUT KNOWING THE ESCAPE CODE CMD LAYOUTS
// LAYOUT: 0 , idCmd , ccLength , clobOfThatLength
//S: EXTERNAL SPECIFICATION: ALL ESCAPE SEQUENCES MUST BE LENGTH PREFIXED

/**/
*/
  if i fail silently then pbP will remain 0
  if not 0 then i will fail silently when i cannot read a referenced pill or pin file
  normally is 0
 bSilentFailP
  must not be 0
 ccP
  must point to ccP count01T values
  must not be 0
 pcP
  must be 0
 cbP
  must be 0
 pbP
 tinP
arguments
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


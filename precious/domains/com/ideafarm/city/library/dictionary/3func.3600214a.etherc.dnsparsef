
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    header.swabF() ;
    }
        }
            }
                rMiddle.swabF() ;
                pbc += rMiddle.cbData ;
                stsRepliesP << pSoul ;
                }
                    }
                        break ;
                        ifcSayIF( T("unrecognized rMiddle.idType: ")+TF1(rMiddle.idType) , flSAY_APPEND | flSAY_LOG ) ;
                    {
                    default :
                    }
                        break ;

                        }
                            if( 5 < rMiddle.cbData ) soul.shiftLeftF( tinP , ifcIDtYPEsOULiTEM_byteTptr , pbData , rMiddle.cbData - 5 ) ;           // BIT MAP
                            soul << (countT)*pbData ; pbData += 1 ;                                                                                 // PROTOCOL
                            nn >> soul ;
                            nicNameC nn( SWABnET4( *(count02T*)pbData ) ) ; pbData += sizeof( count02T ) ;                                          // ADDRESS
                        {
                        if( !POOP )

                        __( rMiddle.cbData < 5 ) ;
                    {
                    case ifcIDtYPEdNSqUERY_WKS :
                    }
                        break ;

                        }
                            }
                                time2 = time1 = 0 ;
                                soul << (countT&)time2 ;
                                soul << time1 ;
                                third.timeFromSecondsIF( tinP , time1 , time2 , SWABnET4( *(count02T*)pbData ) ) ; pbData += sizeof( count02T ) ;
                            {
                            while( cTries -- )
                            countT cTries = 4 ; // REFRESH RETRY EXPIRE MINIMUM
                            ZE( sCountT , time2 ) ;
                            ZE( countT  , time1 ) ;

                            soul << (countT)SWABnET4( *(count02T*)pbData ) ; pbData += sizeof( count02T ) ; // SERIAL
                        {
                        if( !POOP )

                        __( pbe - pbData < 5 * sizeof( count02T ) )

                        delF( tinP , psttName ) ;
                        soul << psttName ;
                        header.nameF( tinP , *this , psttName , pbData , pbe - pbData ) ; ___( psttName ) ;

                        delF( tinP , psttName ) ;
                        soul << psttName ;
                        header.nameF( tinP , *this , psttName , pbData , pbe - pbData ) ; ___( psttName ) ;
                        ZE( strokeS* , psttName ) ;
                    {
                    case ifcIDtYPEdNSqUERY_SOA :
                    }
                        break ;
                        soul.shiftLeftF( tinP , ifcIDtYPEsOULiTEM_byteTptr , pbData , rMiddle.cbData ) ;
                    {
                    case ifcIDtYPEdNSqUERY_OPTION :
                    case ifcIDtYPEdNSqUERY_NULL :
                    }
                        break ;

                        }
                            delF( tinP , psttName ) ;
                            soul << psttName ;
                            header.nameF( tinP , *this , psttName , pbData , pbe - pbData ) ; ___( psttName ) ;
                            ZE( strokeS* , psttName ) ;

                            pbData += sizeof( count01T ) ;
                            soul << (countT)*(count01T*)pbData ; // cRank
                        {
                        if( !POOP )

                        __( rMiddle.cbData < sizeof( count01T ) )
                    {
                    case ifcIDtYPEdNSqUERY_MX :
                    }
                        break ;

                        __( cText ) ;
                        }
                            pbData += 1 + *pbData ;
                            soul << (strokeS*)td ;
                            TN( td , postb ) ;
                            postb[ *pbData ] = 0 ;
                            memCopyF( tinP , postb , pbData + 1 , *pbData ) ;
                            byteT  postb[ 0x100 ] ;
                            cText -- ;
                        {
                        while( pbData < pbc + rMiddle.cbData )

                        }
                            soul << cText ;
                            pbData = pbdSave ;
                            }
                                pbData += 1 + *pbData ;
                                cText ++ ;
                            {
                            while( pbData < pbc + rMiddle.cbData )
                            const byteT* pbdSave = pbData ;
                        {
                        ZE( countT , cText ) ;
                    {
                    case ifcIDtYPEdNSqUERY_TXT :
                    case ifcIDtYPEdNSqUERY_HINFO :
                    }
                        break ;
                        delF( tinP , psttName ) ;
                        soul << psttName ;
                        header.nameF( tinP , *this , psttName , pbData , pbe - pbData ) ; ___( psttName ) ;
                        ZE( strokeS* , psttName ) ;
                    {
                    case ifcIDtYPEdNSqUERY_PTR :
                    case ifcIDtYPEdNSqUERY_MR :
                    case ifcIDtYPEdNSqUERY_MG :
                    case ifcIDtYPEdNSqUERY_MB :
                    case ifcIDtYPEdNSqUERY_CNAME :
                    case ifcIDtYPEdNSqUERY_NS :
                    }
                        delF( tinP , psttName ) ; // INTENTIONAL FALLTHROUGH
                        soul << psttName ;
                        header.nameF( tinP , *this , psttName , pbData , pbe - pbData ) ; ___( psttName ) ;
                        ZE( strokeS* , psttName ) ;
                    {
                    case ifcIDtYPEdNSqUERY_MINFO :
                    }
                        break ;

                        }
                            nn >> soul ;
                            nicNameC nn( SWABnET4( *(countT*)pbData ) ) ;
                        {
                        if( !POOP )

                        __( rMiddle.cbData < sizeof( countT ) )
                    {
                    case ifcIDtYPEdNSqUERY_A :
                {
                switch( rMiddle.idType )
                const byteT* pbData = pbc ; // TO AVOID SIDE EFFECTS THAT WOULD CHANGE pbc

                }
                    break ;
                    __1
                {
                if( pbc + rMiddle.cbData > pbe )

                }
                    pbc += sizeof rMiddle ;

                    }
                        time2 = time1 = 0 ;
                        soul << (countT&)time2 ;
                        soul << time1 ;
                        third.timeFromSecondsIF( tinP , time1 , time2 , rMiddle.secondsToLive ) ;
                        ZE( sCountT , time2 ) ;
                        ZE( countT  , time1 ) ;
                    {
                    soul << (countT)rMiddle.idClass ;
                    soul << (countT)rMiddle.idType ;
                    rMiddle.swabF() ;
                {
                else
                }
                    break ;
                    __1
                    DEL( pSoul ) ;
                {
                if( pbe - pbc < sizeof rMiddle )
                dnsResourceMiddleS& rMiddle = *(dnsResourceMiddleS*)pbc ;

                }
                    delF( tinP , psttName ) ;
                    soul << psttName ;
                    header.nameF( tinP , *this , psttName , pbc , pbe - pbc ) ; ___( psttName ) ;
                    ZE( strokeS* , psttName ) ;
                {
                soulC& soul = *pSoul ;
            {
            if( pSoul )
            soulC* pSoul = new( 0 , tinP , LF ) soulC( tinP , TAG( TAGiDnULL ) , flSOUL_null , idTypeAnswer ) ; ___( pSoul ) ;

            else                         __1
            else if( cNote && cNote -- ) idTypeAnswer = ifcIDtYPEdNSrEPLY_NOTE ;
            else if( cAuth && cAuth -- ) idTypeAnswer = ifcIDtYPEdNSrEPLY_AUTHORITY ;
                 if( cAnsw && cAnsw -- ) idTypeAnswer = ifcIDtYPEdNSrEPLY_ANSWER ;
            ZE( countT , idTypeAnswer ) ;
        {
        while( pbc < pbe && cResources -- && !POOP )

        countT cNote = header.cNotes       ;
        countT cAuth = header.cAuthorities ;
        countT cAnsw = header.cAnswers     ;
        countT cResources = header.cAnswers + header.cAuthorities + header.cNotes ;

        memCopyF( tinP , pbHeaderAndQueriesP , pbReplyP , cbHeaderAndQueriesP ) ;
        newF( tinP , LF , pbHeaderAndQueriesP , cbHeaderAndQueriesP ) ; ___( pbHeaderAndQueriesP ) ;
        cbHeaderAndQueriesP = pbc - pbReplyP ;
    {
    if( !POOP )

    }
        }
            }
                }
                    stsQueriesP << pSoul ;

                    soul << v2 ;
                    soul << v1 ;
                    delF( tinP , psttName ) ;
                    soul << psttName ;

                    soulC& soul = *pSoul ;
                {
                else
                }
                    break ;
                    __1
                    delF( tinP , psttName ) ;
                {
                if( !pSoul )
                soulC* pSoul = new( 0 , tinP , LF ) soulC( tinP , TAG( TAGiDnULL ) ) ; ___( pSoul ) ;

                countT v2 = SWABnET2( *(count01T*)pbc ) ; pbc += sizeof( count01T ) ;
                countT v1 = SWABnET2( *(count01T*)pbc ) ; pbc += sizeof( count01T ) ;
            {
            else
            }
                break ;
                __1
                delF( tinP , psttName ) ;
            {
            if( pbc + 2 * sizeof( count01T ) > pbe )

            header.nameF( tinP , *this , psttName , pbc , pbe - pbc ) ; ___( psttName ) ;
            ZE( strokeS* , psttName ) ;
        {
        while( pbc < pbe && cq -- )
        countT cq = header.cQuerys ;
    {
    // LOAD stsQueriesP AND SET pbc TO THE END OF THE QUERIES PORTION OF pbReplyP

    const byteT* const pbe = pbReplyP + cbReplyP ;
    const byteT* pbc = pbReplyP + sizeof( dnsMsgHeaderS ) ; // QNAME
    header.swabF() ;
    dnsMsgHeaderS& header = *(dnsMsgHeaderS*)pbReplyP ;

    _IO_

    }
        if( POOP ) return ;
        __( cbReplyP <= sizeof( dnsMsgHeaderS ) ) ;
        __Z( pbReplyP ) ;
        __( stsRepliesP.idTypeF( tinP ) - ifcSTACKtYPE_PTR_soulC ) ;
        __( stsRepliesP ) ;
        __( stsQueriesP.idTypeF( tinP ) - ifcSTACKtYPE_PTR_soulC ) ;
        __( stsQueriesP ) ;
        __( cbHeaderAndQueriesP ) ;
        __NZ( pbHeaderAndQueriesP ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL
    SCOOP
{
/*1*/voidT etherC::dnsParseF( tinS& tinP , byteT*& pbHeaderAndQueriesP , countT& cbHeaderAndQueriesP , stackC& stsQueriesP , stackC& stsRepliesP , const byteT* const pbReplyP , const countT cbReplyP )/*1*/

/**/
*/
  the length of the data at pbReplyP
 cbReplyP
   a dnsMsgHeaderS followed by the number of queries, answers, authorities, and notes indicated in that header
  must contain the address of a full dns reply
  must not be 0
 pbReplyP  
  the soulC object will contain the resource information from wo resource record
  i will put a soulC object onto this stack for each resource record at pbReplyP
  must be empty
 stsRepliesP
   idClass
   idType
   psttName
  each soul is a query
 stsQueriesP
  i will set it to the length of the data that i put into pbHeaderAndQueriesP
  must be 0
 cbHeaderAndQueriesP
  i will allocate this and copy the header and queries portion of the data at pbReplyP into it
  must be 0
 pbHeaderAndQueriesP
 tinP
arguments
 20130918@0900: U:: i should be edited to refer to the input as a "dns message" rather than a "dns reply"
i obtain information by parsing the dns reply at headerP
\<A HREF=\"5.103018e.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$dnsParseF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//


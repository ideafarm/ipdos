
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


;
}
    }
        return idAptOld ;

        if( save ) setBitsF( save ) ;

        countT idAptOld = setIfZeAM( idApt , aptNewP ) ;

        setBitsF( 0 ) ;
        countT save = getBitsF() ;
    {
    inline countT setIfZeF( aptC aptNewP )

    }
        return save ;

        idApt       |= bitsP << 0x1e ;
        idApt       &=         0x3fffffff ;
        countT save  = idApt & 0xc0000000 ;
    {
    inline countT setBitsF( countT bitsP )

    inline countT getBitsF( voidT ) { return idApt >> 0x1e ; }

    }
        return rc ;

        if( save ) setBitsF( save ) ;

        countT rc = setIfEqualsAM( idApt , 0 , idAptCopy ) ;
        countT idAptCopy = idApt ;

        setBitsF( 0 ) ;
        countT save = getBitsF() ;
    {
    inline countT resetF( voidT )

    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400a.aptC.operator_assign!||
    voidT operator =( listingC* const plAptP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34007.aptC.operator_assign!||
    voidT operator =( byteT* const pbAptP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34005.aptC.operator_byteT_ptr!||
    operator byteT*( voidT ) const ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34009.aptC.operator_countT_ref!||
    //operator countT&( voidT ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34004.aptC.operator_countT!||
    operator countT( voidT ) const ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34003.aptC.aptC!||
    aptC( const countT idAptP = 0 ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34008.aptC.aptC!||
    aptC( tinS& tinP , const listingC* const pAptP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34002.aptC.aptC!||
    aptC( tinS& tinP , const byteT* const pbP ) ;
    NEWdELcLASSpROTOS

    public :

    countT idApt ;
{
/*1*/class _export aptC/*1*/

//FEATURE: SIZE IS sizeof( countT ) SO CAN BE STORED ATOMICALLY, AND VALUE IS VALID FOR ALL PROCESSES IN THE MEMORY SPACE

/**/

*/
 these bits are not referenced or modified by any of my member functions
 these bits must be referenced only by using getBitsF and setBitsF
 it is illegal for code to reference these bits directly
2 bits are available for application use
 this is done to avoid the overhead of serialization on face_poolC_S::aptListRoot, which is never modified once it is set
code may use setIfZeAM on *(countT*)this
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


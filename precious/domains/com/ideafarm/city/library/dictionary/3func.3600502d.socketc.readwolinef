
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return ostEscaped ;

    dec02AM( cFunctionsPending ) ;
    }
    
        tinP.pAdamGlobal3->_socketC_.grab.ungrabF( tinP ) ;
        pOdometer->cbWrite += tinP.odoSockCbWrite - _odoSockCbWriteOpen ;
        pOdometer->cbRead  += tinP.odoSockCbRead  - _odoSockCbReadOpen  ;
        pOdometer = (sockOdometerS*)&(countT&)*tinP.pAdamGlobal3->_socketC_.pSwOdometer ;
        tinP.pAdamGlobal3->_socketC_.nnLever = nnPeer ;
        tinP.pAdamGlobal3->_socketC_.grab.grabF( tinP , TAG( TAGiDnULL ) ) ;
    
        bRead.ungrabF( tinP ) ;
    
        if( idleTimeAllowedRead ) FRESHtIMEaTOMIC( *pEther , timeLathRead.time1 , timeLathRead.time2 )
    
        }
            else postP[ offP ++ ] = bIn ;
            }
                break ;
                if( bIn == '\n' ) readF( tinP , &bIn , 1 ) ;
                peekF( tinP , &bIn , 1 ) ;
            {
            else if( bIn == '\r' )
            if( bIn == '\n' ) break ;
    
            }
                if( ostEscaped ) break ;
    
                }
                    }
                        break ;
                        ostEscaped = postEscapeP[ offi - 1 ] ;
                    {
                    if( bIn == postEscapeP[ offi ++ ] )
                {
                while( postEscapeP[ offi ] )
                ZE( countT , offi ) ;
                bLookForEscape = 0 ;
            {
            if( bLookForEscape )
    
            readF( tinP , &bIn , 1 ) ;
        {
        while( !*pEther && offP < costaP )
        boolT bLookForEscape = !!postEscapeP ;
        ZE( byteT , bIn ) ;
        _IO_
        bRead.grabF( tinP , TAG( TAGiDnULL ) ) ;
    
        const countT _odoSockCbWriteOpen = tinP.odoSockCbWrite ;
        const countT _odoSockCbReadOpen  = tinP.odoSockCbRead  ;
    
        }
            }
                return 0 ;
                dec02AM( cFunctionsPending ) ;
            {
            if( *pEther )
            __( costaP <= offP ) ;
            __Z( costaP ) ;
            }
                return 0 ;
                dec02AM( cFunctionsPending ) ;
            {
            if( *pEther )
        {
        IFbEcAREFUL        
        SCOOPP
    {
    ZE( osTextT , ostEscaped ) ;
    inc02AM( cFunctionsPending ) ;
{
/*1*/osTextT socketC::readWoLineF( tinS& tinP , countT& offP , osTextT* const postP , const countT costaP , const osTextT* const postEscapeP )/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//



//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST
etThread.osProcessIdPhaseAdamF( tinP , ifcIDpHASEhANDOFFoLD_SHUTTINGdOWN ) ;

etThread.delF( tinP , psttLevel ) ;
etThread.delF( tinP , psttNickname ) ;

}
    }
        }
            etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("i could not do that\r\nyour gate will report the problem that i encountered to city center\r\n") ) ;
            etThread = 0 ;
            __( etThread ) ;
        {
        if( etThread )

        }
            }
                sCmd.writeF( tinP , (byteT*)&cmd , sizeof cmd ) ;
                sCmd.connectF( tinP , ifcPORToLD1cOMMAND , etThread.sockNicNameF( tinP , T("city.center.ideafarm.com") ) ) ;
                socketC sCmd( tinP , etThread , TAG( TAGiDnULL ) ) ;

                }
                    sgnReady.waitF( tinP ) ;
                    { ZE( countT , tnu ) ; etThread.osThreadF( tinP , tnu , tmReplyCatcherF , 0 , flTHREADlAUNCH_null , 0 , (countT)&sgnReady , (countT)psReplyDoorman , (countT)&c3Lag , (countT)&st_idPortDoorman ) ; }
                    signC sgnReady( tinP , TAG( TAGiDnULL ) ) ;
                {
                psReplyDoorman->listenF( tinP ) ;
                { ZE( countT , ids ) ; st_idPortDoorman.sinkF( tinP , ids , cmd.c1 = psReplyDoorman->bindF( tinP ) ) ; }
            {
            else
            if( !psReplyDoorman ) __1
            socketC* psReplyDoorman = new( 0 , tinP , LF ) socketC( tinP , etThread , TAG( TAGiDnULL ) ) ; ___( psReplyDoorman ) ;
        {
        if( cmd.c2 )

        if( cmd.c2 != ifcCMDsERVICEwINDOW_new ) c3Lag = cmd.c3 ;

        etThread.delF( tinP , psttParameter ) ;
        }
            }
                break ;
                cmd.c2 = 0 ;

                etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("hire ")+tIdi+T(" (done)\r\n") ) ;
                etThread.osSessionF( tinP , countTC() , nu , tExe , tDll+tArg , 0 , 241 , 640 , 240 , flSESSION_KID ) ;
                ZE( countT , nu ) ;
                etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("hire ")+tIdi+T(" (step 2 of 2)\r\n") ) ;

                textC tArg = T(" !idCitizenHirer ")+TF1(etThread.ether_idCitizenHirer_F(tinP)) ;
                textC tDll = T("///ideafarm/ephemeral/domains/com/ideafarm/city/park/")+T(psttLevel)+T("/")+tIdi+T(".ipdos-wd") ;
                textC tExe = T("///ideafarm/ephemeral/domains/com/ideafarm/city/park/")+T(psttLevel)+T("/0100003")+T(".ipdos-we") ;
                etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("hire ")+tIdi+T(" (step 1 of 2)\r\n") ) ;

                TN( tIdi , psttParameter ) ;
            {
            case ifcCMDsERVICEwINDOW_hire  :
            }
                break ;
                cmd.c2 = 0 ;

                }
                    etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("sub ")+tIdi+T(" (done)\r\n") ) ;
                    etThread.delF( tinP , pbd ) ;
                    etThread.boxPutF( tinP , tLocal , pbd , cbd ) ;
                    etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("sub ")+tIdi+T(" (step 6 of 6)\r\n") ) ;
                    etThread.boxGetShadowF( tinP , pbd , cbd , tRemote ) ; ___( pbd ) ;
                    ZE( countT , cbd ) ;
                    ZE( byteT* , pbd ) ;

                    textC tLocal = T("///ideafarm/ephemeral/domains/com/ideafarm/city/park/")+T(psttLevel)+T("/")+tIdi+T(".ipdos-wd") ;
                    textC tRemote = T("city.center.ideafarm.com//box.server.deputy////ideafarm/ephemeral/domains/com/ideafarm/city/park/")+T(psttLevel)+T("/")+tIdi+T(".ipdos-wd") ;
                    etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("sub ")+tIdi+T(" (step 5 of 6)\r\n") ) ;
                {

                }
                    etThread.delF( tinP , psttAdams ) ;
                    }
                        etThread.delF( tinP , post ) ;
                        etThread.boxPutF( tinP , T("city.center.ideafarm.com//box.sucker/")+tRemote , post , cost ) ;
                        etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("sub ")+tIdi+T(" (step 4 of 6)\r\n") ) ;
                        cost = etThread.strMakeF( tinP , LF , post , psttAdams ) ; ___( post ) ;

                        else                                 etThread.strFuseF( tinP , psttAdams ,        tIdi ) ;
                        if( psttAdams && psttAdams->idAdam ) etThread.strFuseF( tinP , psttAdams , T(" ")+tIdi ) ;
                    {
                    else
                    if( etThread.strIdF( tinP , idf , sttq , tIdi , psttAdams ) ) etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("sub ")+tIdi+T(" (step 4 of 6 skipped)\r\n") ) ;
                    strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
                    countT idf = 1 ;
                    etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("sub ")+tIdi+T(" (step 3 of 6)\r\n") ) ;

                    }
                        etThread.delF( tinP , post ) ;
                        etThread.strMakeF( tinP , LF , psttAdams , T(post) , 8 ) ; ___( psttAdams ) ;
                    {    
                    else           
                    if( !post ) { etThread.strMakeF( tinP , LF , psttAdams , T("") , 7 ) ; ___( psttAdams ) ; }
                    ZE( strokeS* , psttAdams ) ;
                    etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("sub ")+tIdi+T(" (step 2 of 6)\r\n") ) ;

                    etThread = 0 ;
                    etThread.boxGetShadowF( tinP , post , cost , T("city.center.ideafarm.com//box.server/")+tRemote ) ; ___( post ) ;
                    ZE( countT , cost ) ;
                    ZE( osTextT* , post ) ;
                    textC tRemote = T("///ideafarm/ephemeral/domains/com/ideafarm/city/data/base/")+tCid+T("/subscriptions") ;
                    etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("sub ")+tIdi+T(" (step 1 of 6)\r\n") ) ;
                {

                TN( tIdi , psttParameter ) ;
            {
            case ifcCMDsERVICEwINDOW_sub   :
            }
                break ;
                cmd.c2 = 0 ;

                etThread.delF( tinP , pstt1m ) ;
                }
                    etThread.delF( tinP , psttId ) ;
                    etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T(psttId)+T("\r\n") ) ;
                    etThread.strSubstringF( tinP , psttId , idf , idl , psttc1 ) ; ___( psttId ) ;
                    ZE( strokeS* , psttId ) ;
                    countT idl = idf + 6 ;
                    if( idf ) idf ++ ;
                    __Z( idf ) ;
                    countT idf = etThread.strIdF( tinP , countTC( 1 ) , sttq , S1C('/') , psttc1 , 0 , - 1 ) ;
                    strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
                {
                FORsTRINGSiN1( pstt1m )
                etThread.boxMenuF( tinP , soul1m , tLike ) ; ___( pstt1m ) ;
                ZE( strokeS* , pstt1m ) ;
                textC tLike = T("///ideafarm/ephemeral/domains/com/ideafarm/city/park/")+T(psttLevel)+T("/????104")+T(".ipdos-wd") ;
            {
            case ifcCMDsERVICEwINDOW_who   :
            }
                break ;
                cmd.c2 = 0 ;

                }
                    etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("test ")+tIdi+T(" (done)\r\n") ) ;
                    etThread.osSessionF( tinP , countTC() , nu , tExe , tDll , 0 , 241 , 640 , 240 , flSESSION_KID ) ;
                    ZE( countT , nu ) ;
                    etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("test ")+tIdi+T(" (step 3 of 3)\r\n") ) ;
                    textC tDll = T("///ideafarm/ephemeral/domains/com/ideafarm/city/park/test/")+tIdi+T(".ipdos-wd") ;
                    textC tExe = T("///ideafarm/ephemeral/domains/com/ideafarm/city/park/")+T(psttLevel)+T("/0100003")+T(".ipdos-we") ;
                    etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("test ")+tIdi+T(" (step 2 of 3)\r\n") ) ;
                {
                else
                if( !bOk ) etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("test ")+tIdi+T(" (aborted: you are not authorized to test this definition)\r\n") ) ;
                boolT bOk = bOkF( tinP , etThread , idCitizen , T("city.center.ideafarm.com//box.server.deputy////ideafarm/precious/domains/com/ideafarm/city/library/dictionary.okr/adam.")+tIdi ) ;
                etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("test ")+tIdi+T(" (step 1 of 3)\r\n") ) ;

                TN( tIdi , psttParameter ) ;
            {
            case ifcCMDsERVICEwINDOW_test  :
            }
                break ;
                cmd.c2 = 0 ;

                }
                    etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("gett ")+tIdi+T(" (done)\r\n") ) ;
                    etThread.delF( tinP , pbd ) ;
                    etThread.boxPutF( tinP , tLocal , pbd , cbd ) ;
                    etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("gett ")+tIdi+T(" (step 3 of 3)\r\n") ) ;
                    etThread.boxGetShadowF( tinP , pbd , cbd , tRemote ) ; ___( pbd ) ;
                    ZE( countT , cbd ) ;
                    ZE( byteT* , pbd ) ;

                    textC tLocal = T("///ideafarm/ephemeral/domains/com/ideafarm/city/park/test/")+tIdi+T(".ipdos-wd") ;
                    textC tRemote = T("city.center.ideafarm.com//box.server.deputy////d/ideafarm.work/backed.up.never/gen/exe/")+tIdi+T(".ipdos-wd") ;
                    etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("gett ")+tIdi+T(" (step 2 of 3)\r\n") ) ;
                {
                else
                if( !bOk ) etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("gett ")+tIdi+T(" (aborted: you are not authorized to gett this definition)\r\n") ) ;
                boolT bOk = bOkF( tinP , etThread , idCitizen , T("city.center.ideafarm.com//box.server.deputy////ideafarm/precious/domains/com/ideafarm/city/library/dictionary.okr/adam.")+tIdi ) ;
                etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("gett ")+tIdi+T(" (step 1 of 3)\r\n") ) ;

                TN( tIdi , psttParameter ) ;
            {
            case ifcCMDsERVICEwINDOW_gett  :
            }
                break ;

                }
                    cmd.c2 = 0 ;
                    etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("make ")+tIdi+T(" (aborted: you are not authorized to make this definition)\r\n") ) ;
                {
                if( !bOk )

                boolT bOk = bOkF( tinP , etThread , idCitizen , T("city.center.ideafarm.com//box.server.deputy////ideafarm/precious/domains/com/ideafarm/city/library/dictionary.okw/adam.")+tIdi ) ;
                etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("make ")+tIdi+T(" (step 1 of a)\r\n") ) ;

                TN( tIdi , psttParameter ) ;
            {
            case ifcCMDsERVICEwINDOW_make :
            }
                break ;
                cmd.c2 = 0 ;

                }
                    etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("put ")+tIdi+T(" (done)\r\n") ) ;
                    etThread.delF( tinP , pbd ) ;
                    //COMMENTED OUT FOR SPEED.  NEED TO SUPPRESS IF LOCAL IS city.center.ideafarm.com: etThread.diskFileOrDirDeleteF( tinP , tLocal ) ;
                    etThread.boxPutF( tinP , tRemote , pbd , cbd ) ;
                    etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("put ")+tIdi+T(" (step 3 of 3)\r\n") ) ;
                    etThread.boxGetShadowF( tinP , pbd , cbd , tLocal , 1 ) ; ___( pbd ) ;
                    ZE( countT , cbd ) ;
                    ZE( byteT* , pbd ) ;

                    textC tLocal = T("///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/5adam.")+tIdi ;
                    textC tRemote = T("city.center.ideafarm.com//box.sucker////ideafarm/precious/domains/com/ideafarm/city/library/dictionary/5adam.")+tIdi ;
                    etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("put ")+tIdi+T(" (step 2 of 3)\r\n") ) ;
                {
                else
                if( !bOk ) etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("put ")+tIdi+T(" (aborted: you are not authorized to put this definition)\r\n") ) ;

                boolT bOk = bOkF( tinP , etThread , idCitizen , T("city.center.ideafarm.com//box.server.deputy////ideafarm/precious/domains/com/ideafarm/city/library/dictionary.okw/adam.")+tIdi ) ;
                etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("put ")+tIdi+T(" (step 1 of 3)\r\n") ) ;

                TN( tIdi , psttParameter ) ;
            {
            case ifcCMDsERVICEwINDOW_put   :
            }
                break ;
                cmd.c2 = 0 ;

                }
                    etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("get ")+tIdi+T(" (done)\r\n") ) ;
                    etThread.osEditF( tinP , tLocal ) ;
                    hoverC hoverDict( tinP , etThread , T("///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/") ) ;
                    etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("get ")+tIdi+T(" (step 4 of 4)\r\n") ) ;
                    etThread.delF( tinP , pbd ) ;
                    etThread.boxPutF( tinP , tLocal , pbd , cbd ) ;
                    etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("get ")+tIdi+T(" (step 3 of 4)\r\n") ) ;
                    etThread.boxGetShadowF( tinP , pbd , cbd , tRemote ) ; ___( pbd ) ;
                    ZE( countT , cbd ) ;
                    ZE( byteT* , pbd ) ;

                    textC tLocal = T("///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/5adam.")+tIdi ;
                    textC tRemote = T("city.center.ideafarm.com//box.server.deputy////ideafarm/precious/domains/com/ideafarm/city/library/dictionary/5adam.")+tIdi ;
                    etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("get ")+tIdi+T(" (step 2 of 4)\r\n") ) ;
                {
                else
                if( !bOk ) etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("get ")+tIdi+T(" (aborted: you are not authorized to get this definition)\r\n") ) ;

                boolT bOk = bOkF( tinP , etThread , idCitizen , T("city.center.ideafarm.com//box.server.deputy////ideafarm/precious/domains/com/ideafarm/city/library/dictionary.okr/adam.")+tIdi ) ;
                etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("get ")+tIdi+T(" (step 1 of 4)\r\n") ) ;

                TN( tIdi , psttParameter ) ;
            {
            case ifcCMDsERVICEwINDOW_get   :
            }
                break ;
                cmd.c3 = idCitizen ;
            {
            case ifcCMDsERVICEwINDOW_new :
            }
                break ;
                cmd.c2 = 0 ;

                ) ) ;

                    "Enter a command, or \"?\"\r\n"
                    "\r\n"
                    USCORE79 "\r\n"
                    "use \"7use\" to make an adam class available to 7use subscribers\r\n"
                    "1. copies files from the test area to the 7use master image at city center\r\n"
                    "example: \"7use 3210104\"\r\n"
                    "releases the files for an adam class to subscribers at the 7use level\r\n"
                    "\r\n"
                    USCORE79 "\r\n"

                etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T(
            {
            case ifcCMDsERVICEwINDOW_q7use  :
            }
                break ;
                cmd.c2 = 0 ;

                ) ) ;

                    "Enter a command, or \"?\"\r\n"
                    "\r\n"
                    USCORE79 "\r\n"
                    "use \"test\" to be employ an unreleased adam class\r\n"
                    "prerequisite: \"gett\"\r\n"
                    "1. hires an adam of the specified class\r\n"
                    "example: \"test 3210104\"\r\n"
                    "tests a specific adam class\r\n"
                    "\r\n"
                    USCORE79 "\r\n"

                etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T(
            {
            case ifcCMDsERVICEwINDOW_qtest  :
            }
                break ;
                cmd.c2 = 0 ;

                ) ) ;

                    "Enter a command, or \"?\"\r\n"
                    "\r\n"
                    USCORE79 "\r\n"
                    "use \"gett\" after \"make\" and before \"test\"\r\n"
                    "the subscriptions for this gate are not affected\r\n"
                    "this command effects only the \"test\" command\r\n"
                    "1. copies some adam class files to the gate's host\r\n"
                    "example: \"gett 3210104\"\r\n"
                    "updates the \"test\" command for a specific adam class\r\n"
                    "\r\n"
                    USCORE79 "\r\n"

                etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T(
            {
            case ifcCMDsERVICEwINDOW_qgett  :
            }
                break ;
                cmd.c2 = 0 ;

                ) ) ;

                    "Enter a command, or \"?\"\r\n"
                    "\r\n"
                    USCORE79 "\r\n"
                    "use \"put\" after making changes to your copy of a definition\r\n"
                    "warning: the old definition will be discarded\r\n"
                    "warning: be sure to close the editor before using \"put\"\r\n"
                    "1. copies the definition from the gate's host to the city library\r\n"
                    "example: \"put 3210104\"\r\n"
                    "returns the definition of a specific adam class to the city library\r\n"
                    "\r\n"
                    USCORE79 "\r\n"

                etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T(
            {
            case ifcCMDsERVICEwINDOW_qput  :
            }
                break ;
                cmd.c2 = 0 ;

                ) ) ;

                    "Enter a command, or \"?\"\r\n"
                    "\r\n"
                    USCORE79 "\r\n"
                    "suggestion: use \"put\" and \"make\" after making each change\r\n"
                    "use \"get\" to edit a definition of an adam class\r\n"
                    "2. opens the definition, using the gate's editor\r\n"
                    "1. copies the definition to the gate's host\r\n"
                    "example: \"get 3210104\"\r\n"
                    "borrows the definition of a specific adam class from the city library\r\n"
                    "\r\n"
                    USCORE79 "\r\n"

                etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T(
            {
            case ifcCMDsERVICEwINDOW_qget :
            }
                break ;
                cmd.c2 = 0 ;

                ) ) ;

                    "Enter a command, or \"?\"\r\n"
                    "\r\n"
                    USCORE79 "\r\n"
                    "you can also use \"make\" immediately after creating a new adam class\r\n"
                    "use \"make\" after you have updated the definition at the library\r\n"
                    "these new files will be visible to testers but not to subscribers\r\n"
                    "2b. if not, tells you that the definition contained errors\r\n"
                    "2a. if the definition is ok, stores these files at city center\r\n"
                    "1. makes all files for the specified adam class\r\n"
                    "example: \"make 3210104\"\r\n"
                    "makes the files for an adam class, using the city library dictionary\r\n"
                    "\r\n"
                    USCORE79 "\r\n"

                etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T(
            {
            case ifcCMDsERVICEwINDOW_qmake  :
            }
                break ;
                cmd.c2 = 0 ;

                ) ) ;

                    "Enter a command, or \"?\"\r\n"
                    "\r\n"
                    USCORE79 "\r\n"
                    "use \"new\" to begin crafting a new adam class\r\n"
                    "write down the id of your new adam class\r\n"
                    "for example, your new adam class might be assigned the id 3210104\r\n"
                    "4. tells you the id of the new adam class\r\n"
                    "3. stores this definition file in the city library dictionary\r\n"
                    "2. creates a definition file in the city library for a new adam class\r\n"
                    "1. permanently assigns an identifying number to a new adam class\r\n"
                    "example: \"new\"\r\n"
                    "defines a new adam class\r\n"
                    "\r\n"
                    USCORE79 "\r\n"

                etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T(
            {
            case ifcCMDsERVICEwINDOW_qnew  :
            }
                break ;
                cmd.c2 = 0 ;

                ) ) ;

                    "Enter a command, or \"?\"\r\n"
                    "\r\n"
                    USCORE79 "\r\n"
                    "use \"hire\" to get some work done by employing an adam\r\n"
                    "2. hires that adam to do what it does\r\n"
                    "the new adam lives on the gate's host\r\n"
                    "1. gives birth to an adam of the specified class\r\n"
                    "example: \"hire 3210104\"\r\n"
                    "hires an adam of a specific class\r\n"
                    "\r\n"
                    USCORE79 "\r\n"

                etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T(
            {
            case ifcCMDsERVICEwINDOW_qhire  :
            }
                break ;
                cmd.c2 = 0 ;

                ) ) ;

                    "Enter a command, or \"?\"\r\n"
                    "\r\n"
                    USCORE79 "\r\n"
                    "use \"who\" to discover which adam classes this gate subscribes to\r\n"
                    "2. lists the adam classes found\r\n"
                    "1. surveys the adam class files in this gate\r\n"
                    "example: \"who\"\r\n"
                    "lists the adam classes that this gate subscribes to\r\n"
                    "\r\n"
                    USCORE79 "\r\n"

                etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T(
            {
            case ifcCMDsERVICEwINDOW_qwho  :
            }
                break ;
                cmd.c2 = 0 ;

                ) ) ;

                    "Enter a command, or \"?\"\r\n"
                    "\r\n"
                    USCORE79 "\r\n"
                    "to return to normal mode, press the enter key\r\n"
                    "changes the service window mode\r\n"
                    "\r\n"
                    USCORE79 "\r\n"

                etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T(
            {
            case ifcCMDsERVICEwINDOW_qmfire :
            }
                break ;
                cmd.c2 = 0 ;

                ) ) ;

                    "Enter a command, or \"?\"\r\n"
                    "\r\n"
                    USCORE79 "\r\n"
                    "use \"sub\" to be able to employ a released adam class on the gate's host\r\n"
                    "an adam class that this gate is not subscribed to cannot be used by it\r\n"
                    "takes effect the next time that the gate is opened\r\n"
                    "1. inserts the specified id into the database at city center\r\n"
                    "example: \"sub 3210104\"\r\n"
                    "subscribes the gate's host to a specific adam class\r\n"
                    "\r\n"
                    USCORE79 "\r\n"

                etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T(
            {
            case ifcCMDsERVICEwINDOW_qsub :
            }
                break ;
                cmd.c2 = 0 ;

                ) ) ;

                    "Enter a command, or \"?\"\r\n"
                    "\r\n"
                    USCORE79 "\r\n"
                    "use \"logout\" to terminate your responsibility for this gate\r\n"
                    "it also includes acts of vandalism and theft committed at this gate\r\n"
                    "this accountability includes usage fees for the products of other citizens\r\n"
                    "a citizen logged in at a gate is accountable for the use of that gate\r\n"
                    "example: \"logout\"\r\n"
                    "notifies city center that you are no longer supervising this gate\r\n"
                    "\r\n"
                    USCORE79 "\r\n"

                etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T(
            {
            case ifcCMDsERVICEwINDOW_qlogout :
            }
                break ;
                cmd.c2 = 0 ;

                ) ) ;

                    "Enter a command, or \"?\"\r\n"
                    "\r\n"
                    USCORE79 "\r\n"
                    "use \"open\" to a Service Window at a gate\r\n"
                    "you will need to login separately at each Service Window\r\n"
                    "you can open multiple service windows at a gate\r\n"
                    "example: \"open\"\r\n"
                    "opens another Service Window at this gate\r\n"
                    "\r\n"
                    USCORE79 "\r\n"

                etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T(
            {
            case ifcCMDsERVICEwINDOW_qopen :
            }
                break ;
                cmd.c2 = 0 ;

                ) ) ;

                    "Enter a command, or \"?\"\r\n"
                    "\r\n"
                    USCORE79 "\r\n"
                    "use \"close\" to a Service Window at a gate\r\n"
                    "if you close all Service Windows at a gate, you will need to reopen the gate\r\n"
                    "example: \"close\"\r\n"
                    "closes this Service Window\r\n"
                    "\r\n"
                    USCORE79 "\r\n"

                etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T(
            {
            case ifcCMDsERVICEwINDOW_qclose :
            }
                break ;
                cmd.c2 = 0 ;

                ) ) ;

                    "Enter a command, or \"?\"\r\n"
                    "\r\n"
                    USCORE79 "\r\n"
                    "use \"login\" to enable powerful commands in the Service Window at this gate\r\n"
                    "it also includes acts of vandalism and theft committed at this gate\r\n"
                    "this accountability includes usage fees for the products of other citizens\r\n"
                    "a citizen logged in at a gate is accountable for the use of that gate\r\n"
                    "example: \"login\"\r\n"
                    "notifies city center that you are supervising this gate\r\n"
                    "\r\n"
                    USCORE79 "\r\n"

                etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T(
            {
            case ifcCMDsERVICEwINDOW_qlogin :
            }
                break ;
                cmd.c2 = 0 ;

                etThread.delF( tinP , psttNickname ) ;
                idCitizen = 0 ;
                etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+TT(time1,time2)+T("  Citizen ")+T(idCitizen)+T(" (")+T(psttNickname)+T(") has been logged out.\r\n") ) ;
                etThread.osTimeNowF( tinP , time1 , time2 ) ;
                ZE( sCountT , time2 ) ;
                ZE( countT  , time1 ) ;
                bLoggedIn = 0 ;
            {
            case ifcCMDsERVICEwINDOW_logout :
            }
                break ;
                cmd.c2 = 0 ;

                etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T(USCORE79 "\r\n\r\nEnter a command, or \"?\"\r\n") ) ;

                etThread.delF( tinP , pstth ) ;
                }
                    }
                        else etThread.delF( tinP , psttNickname ) ;
                        }
                            }
                                }
                                    etThread.strokeF( tinP , T("Your session# is ")+TF1(ids)+T("\r\n")+S2(0,scOld_SYSmARK) ) ;
                                    etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+T("City center recognizes you.\r\nAlways write down your last session#; never write down your passcode.\r\n") ) ;
                                {
                                if( bLoggedIn )

                                }
                                    }
                                        }
                                            etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("Key ")+TF3(query.c4,flFORMAT_UNSIGNED|flFORMAT_FILLzE,8)+T(" was rejected.\r\n") ) ;
                                        {
                                        else
                                        }
                                            etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("I recognize you by the key.  Note that your session# has been reset.\r\n") ) ;

                                            etThread.osTimeNowF( tinP , time1 , time2 ) ;
                                            ZE( sCountT , time2 ) ;
                                            ZE( countT  , time1 ) ;
                                            bLoggedIn = 1 ;
                                        {
                                        if( bOk )

                                        }
                                            ids ++ ;
                                            query.c4 = 0 ;

                                            if( ids >= 5 ) break ;
                                            loginF( etThread , tinP , bOk , query , aa , bb , cc , dd , ids ) ;
                                        {
                                        for(;;)
                                        ids = 1 ;

                                        query.c4 = etThread.strDigitsToSCountF( tinP , pstth ) ;
                                    {
                                    if( pstth && pstth->idAdam )

                                    etThread.faceHearF( tinP , pstth ) ; ___( pstth ) ;
                                    etThread.delF( tinP , pstth ) ;
                                    etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("This citizen id is locked.  A key has just been emailed to you.\r\n(optional) Enter the key now: ") ) ;
                                {
                                else
                                }
                                    etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+TT(time1,time2)+T("  Secured session started.\r\n") ) ;
                                    etThread.osTimeNowF( tinP , time1 , time2 ) ;
                                    ZE( sCountT , time2 ) ;
                                    ZE( countT  , time1 ) ;
                                    bLoggedIn = 1 ;
                                {
                                if( bOk )

                                }
                                    ids ++ ;

                                    if( ids >= 5 ) break ;
                                    loginF( etThread , tinP , bOk , query , aa , bb , cc , dd , ids ) ;
                                {
                                for(;;)
                                ZE( boolT , bOk ) ;                        

                                }
                                    ids = 1 + etThread.strDigitsToSCountF( tinP , pstth ) ;
                                    etThread.faceHearF( tinP , pstth ) ; ___( pstth ) ;
                                    etThread.delF( tinP , pstth ) ;
                                    etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("(optional) Enter your last session#: ") ) ;
                                {
                                else
                                if( bNewId ) ids = 1 ;
                                ZE( countT , ids ) ;
                            {
                            if( aa )

                            }
                                }
                                    aa = bb = cc = dd = 0 ;
                                    etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+TF3(tsp,flFORMAT_UNSIGNED|flFORMAT_FILLzE,8)+T(" is not a valid passcode.  Nothing has been done.\r\n") ) ;
                                {
                                if( !aa || !bb || !cc || !dd )

                                dd = (sByteT)( tsp         & 0xff ) ;
                                cc = (sByteT)( tsp >> 0x08 & 0xff ) ;
                                bb = (sByteT)( tsp >> 0x10 & 0xff ) ;
                                aa = (sByteT)( tsp >> 0x18        ) ;

                                countT tsp = etThread.strDigitsToSCountF( tinP , pstth ) ;
                            {
                            ZE( sCountT , dd ) ;
                            ZE( sCountT , cc ) ;
                            ZE( sCountT , bb ) ;
                            ZE( sCountT , aa ) ;

                            etThread.faceHearF( tinP , pstth ) ; ___( pstth ) ;
                            etThread.delF( tinP , pstth ) ;
                            etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("Enter a passcode: ") ) ;

                            query.c5 = etThread.diskIdF( tinP , T("///c") ) ;
                            query.c2 = 1 ; // HIGH ORDER countT OF CITIZEN ID FOR HUMANS
                            query.c1 = idCitizen ;
                            count5S query ;
                        {
                        if( bNewId || !etThread.strCompareF( tinP , pstth , T("yes") ) )

                        }
                            etThread.faceHearF( tinP , pstth ) ; ___( pstth ) ;
                            etThread.delF( tinP , pstth ) ;
                            etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("If you are citizen ")+TF2(idCitizen,flFORMAT_UNSIGNED)+T(" (")+T(psttNickname)+T("), enter \"yes\": ") ) ;
                        {
                        if( !bNewId )
                    {

                    #endif
                    else
                    }
                        }
                            }
                                else etThread.strokeF( tinP , TT("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+("Anonymous access is currently being denied by city center.\r\n") ) ;
                                }
                                    etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+TT(time1,time2)+T("  Unsecured, restricted, anonymous session started.\r\n") ) ;
                                    etThread.osTimeNowF( tinP , time1 , time2 ) ;
                                    ZE( sCountT , time2 ) ;
                                    ZE( countT  , time1 ) ;
                                    bLoggedIn = 1 ;
                                {
                                if( bOk )

                                loginF( etThread , tinP , bOk , query , aa , bb , cc , dd , ids ) ;
                                ZE( boolT , bOk ) ;                        

                                countT ids = 1 ;
                            {
                            if( aa )

                            sCountT dd = 4 ;
                            sCountT cc = 3 ;
                            sCountT bb = 2 ;
                            sCountT aa = 1 ;

                            query.c5 = etThread.diskIdF( tinP , T("///c") ) ;
                            query.c2 = 1 ; // HIGH ORDER countT OF CITIZEN ID FOR HUMANS
                            query.c1 = idCitizen ;
                            count5S query ;
                        {
                        etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("You are being granted restricted anonymous access to IdeaFarm " "(tm) City.\r\n") ) ;
                    {
                    if( idCitizen == 2 )
                    #if defined( NEVERdEFINED )
                {
                if( psttNickname )

                }
                    }
                        }
                            bNewId = 1 ;
                            etThread.delF( tinP , pstt1en ) ;
                            }
                                etThread.strokeF( tinP , T("\r\n")+S2(0,scOld_SYSmARK) ) ;
                                etThread.strokeF( tinP , T("                    <><><><><><><><>\r\n") ) ;
                                etThread.strokeF( tinP , T("                    <>            <>\r\n") ) ;
                                etThread.strokeF( tinP , T("Your citizen id is"": <>  ")+TF3(idCitizen,0,8)+T("  <>\r\n") ) ;
                                etThread.strokeF( tinP , T("                    <>            <>\r\n") ) ;
                                etThread.strokeF( tinP , T("                    <><><><><><><><>\r\n") ) ;
                                etThread.strokeF( tinP , T("\r\n") ) ;
                                etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+T("I have assigned the following id:\r\n") ) ;

                                sock.readF( tinP , (byteT*)&idCitizen , sizeof idCitizen ) ;

                                sock.writeF( tinP , pstt1en ) ;

                                sock.writeF( tinP , (byteT*)&idCmd , sizeof idCmd ) ;
                                idCmd = sizeof( strokeS ) * ( CSpREFIX + pstt1en->idAdam ) ;

                                sock.writeF( tinP , (byteT*)&idCmd , sizeof idCmd ) ;

                                sock.connectF( tinP , ifcPORToLD1nICKNAME , socketC::nicNameIF( tinP , etThread , T("city.center.ideafarm.com") ) ) ;
                                socketC sock( tinP , etThread , TAG( TAGiDnULL ) ) ;
                            {
                            countT idCmd = idcNICKNAMEcMD_NEWiD ;

                            etThread.strFuseSeparateF( tinP , pstt1en , psttNickname ) ; ___( pstt1en ) ;
                            etThread.strFuseSeparateF( tinP , pstt1en , pstth , 0 , 0 , 0 , 0 , /*U::SOUL?*/ CSpREFIX + psttNickname->idAdam ) ; ___( pstt1en ) ;
                            ZE( strokeS* , pstt1en ) ;

                            while( !etThread && !psttNickname ) ;
                            }
                                if( psttNickname && !psttNickname->idAdam ) etThread.delF( tinP , psttNickname ) ;
                                etThread.strTrimF( tinP , psttNickname , 0 , T(TbLACKnEWlINE) ) ; ___( psttNickname ) ;
                                etThread.faceHearF( tinP , psttNickname ) ; ___( psttNickname ) ;
                                etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("Enter a nickname: ") ) ;
                            {
                            do
                        {
                        else
                        }
                            etThread = 0 ;
                            etThread.ifcNicknameFromIdCitizenF( tinP , psttNickname , idCitizen ) ; ___( psttNickname ) ;
                        {
                        if( idCitizen )

                        idCitizen = etThread.ifcIdCitizenFromExternalEmailF( tinP , pstth ) ;
                    {
                    else
                    if( !pstth->idAdam ) etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("Goodbye.\r\n") ) ;
                    etThread.strTrimF( tinP , pstth , 0 , T(TbLACKnEWlINE) ) ; ___( pstth ) ;
                    etThread.faceHearF( tinP , pstth ) ; ___( pstth ) ;
                    etThread.delF( tinP , pstth ) ;
                    etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("(optional) Enter your email address"": ") ) ;
                {
                if( !psttNickname )
                ZE( boolT , bNewId ) ;

                }
                    etThread = 0 ;
                    etThread.ifcNicknameFromIdCitizenF( tinP , psttNickname , idCitizen ) ; ___( psttNickname ) ;
                {
                if( idCitizen )
                idCitizen = etThread.strDigitsToSCountF( tinP , pstth ) ;
                etThread.faceHearF( tinP , pstth ) ; ___( pstth ) ;

                ) ) ;

                    "(optional) Enter your citizen id: "
                    "\r\n"
                    "Please refer to the instructions at http://www.ideafarm.com as you converse with me.\r\n"
                    "Welcome to IdeaFarm " "(tm) City\r\nI am the Citizen Identity Authenticator (CIA) Cyborg\r\n"

                etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T(USCORE79 "\r\n\r\n"

                ZE( strokeS* , pstth ) ;

                }
                    etThread.delF( tinP , psttNickname ) ;
                    idCitizen = 0 ;
                    etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+TT(time1,time2)+T("  Citizen ")+T(idCitizen)+T(" (")+T(psttNickname)+T(") has been logged out.\r\n") ) ;
                    etThread.osTimeNowF( tinP , time1 , time2 ) ;
                    ZE( sCountT , time2 ) ;
                    ZE( countT  , time1 ) ;
                    bLoggedIn = 0 ;
                {
                if( bLoggedIn )
            {
            case ifcCMDsERVICEwINDOW_login :
            }
                break ;
                cmd.c2 = 0 ;

                }
                    if( pMainF ) (*pMainF)( &main ) ;
                    mainS main( tinP , ether , etThread , T("cid ")+tCid+T(" level ")+T(psttLevel) ) ;
                    etThread.dllEntryF( tinP , pMainF , hDll , T("mainF") ) ;
                    ZE( mainFT , pMainF ) ;
                    etThread.dllOpenF( tinP , hDll , T("///ideafarm/ephemeral/domains/com/ideafarm/city/park/")+T(psttLevel)+T("/40401040.ipdos-wd") ) ;
                    ZE( countT , hDll ) ;
                    hoverC hoverLevel( tinP , etThread , T("///ideafarm/ephemeral/domains/com/ideafarm/city/park/")+T(psttLevel)+T("/") ) ;
                {
            {
            case ifcCMDsERVICEwINDOW_mfire :
            }
                break ;
                cmd.c2 = 0 ;

                __1
            {
            case ifcCMDsERVICEwINDOW_close :
            }
                break ;
                cmd.c2 = 0 ;
                etThread.osSessionF( tinP , countTC() , nu , DDNUMB , 0 , 0 , 241 , 640 , 240 , flSESSION_KID ) ;
                ZE( countT , nu ) ;
            {
            case ifcCMDsERVICEwINDOW_open :
            }
                break ;
                cmd.c2 = 0 ;

                ) ) ;

                    "Enter a command, or \"?\"\r\n"
                    "\r\n"
                    USCORE79 "\r\n"
                    "7use      releases the files for an adam class to subscribers at the 7use level\r\n"
                    "test      tests a specific adam class\r\n"
                    "gett      updates the \"test\" command for a specific adam class\r\n"
                    "put       returns the definition of a specific adam class to the city library\r\n"
                    "get       borrows the definition of a specific adam class from the city library\r\n"
                    "make      makes the files for an adam class, using the city library dictionary\r\n"
                    "new       defines a new adam class\r\n"
                    "hire      hires an adam of a specific class\r\n"
                    "who       lists the adam classes that this gate subscribes to\r\n"
                    "sub       subscribes the gate's host to a specific adam class\r\n"
                    "mfire     changes the mode of this service window to \"fire mode\"\r\n"
                    "logout    notifies city center that you are no longer supervising this gate\r\n"
                    "login     notifies city center that you are supervising this gate\r\n"
                    "\r\n"
                    "- - - - - citizens only  - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n"
                    "\r\n"
                    "?anyCmd   displays instructions on how to use the specified command\r\n"
                    "?logout   displays instructions on how to use the \"logout\" command\r\n"
                    "?login    displays instructions on how to use the \"login\" command\r\n"
                    "\r\n"
                    "- - - - - citizens and also visitors - - - - - - - - - - - - - - - - - - - - -\r\n"
                    "\r\n"
                    "command  description-----------------------------------------------------------\r\n"
                    "\r\n"
                    "Noncitizens can also login anonymously (see the login command).\r\n"
                    "If you are not a citizen yet, you can still use the \"?\" command.\r\n"
                    "To use most of the available commands, you must be a citizen and use \"login\".\r\n"
                    "This is a Service Window at the city gate on this computer.\r\n"
                    "\r\n"
                    "Welcome to IdeaFarm " "(tm) City.\r\n"
                    "\r\n"
                    USCORE79 "\r\n"

                etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T(
            {
            case ifcCMDsERVICEwINDOW_q     :
        {
        switch( cmd.c2 )

        }
            }
                break ;
                }
                    cmd.c2 = ifcCMDsERVICEwINDOW_q ;
                    etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("I do not know which citizen class your command is to be applied to.\r\n") ) ;
                {
                if( !cmd.c3 )
            {
            case ifcCMDsERVICEwINDOW_hire  :
            case ifcCMDsERVICEwINDOW_sub   :
            case ifcCMDsERVICEwINDOW_7use  :
            case ifcCMDsERVICEwINDOW_test  :
            case ifcCMDsERVICEwINDOW_gett  :
            case ifcCMDsERVICEwINDOW_make  :
            case ifcCMDsERVICEwINDOW_put   :
            case ifcCMDsERVICEwINDOW_get   :
        {
        switch( cmd.c2 )
    {
    if( !ether )

    }
        etThread.delF( tinP , psttOldCmdLine ) ;
        }
            etThread.delF( tinP , psttOldCmd ) ;
            }
                else                                                                   { cmd.c2 = ifcCMDsERVICEwINDOW_q          ;                                                                 }
                else if( !etThread.strCompareF( tinP , psttOldCmd     , T("mall"   ) ) ) { cmd.c2 = ifcCMDsERVICEwINDOW_mall       ; cmd.c3 = 0 ; if( psttParameter ) etThread.delF( tinP , psttParameter ) ; }
                else if( !etThread.strCompareF( tinP , psttOldCmd     , T("hire"   ) ) ) { cmd.c2 = ifcCMDsERVICEwINDOW_hire       ;                                                                 }
                else if( !etThread.strCompareF( tinP , psttOldCmd     , T("sub"    ) ) ) { cmd.c2 = ifcCMDsERVICEwINDOW_sub        ;                                                                 }
                else if( !etThread.strCompareF( tinP , psttOldCmd     , T("who"    ) ) ) { cmd.c2 = ifcCMDsERVICEwINDOW_who        ; cmd.c3 = 0 ; if( psttParameter ) etThread.delF( tinP , psttParameter ) ; }
                else if( !etThread.strCompareF( tinP , psttOldCmd     , T("7use"   ) ) ) { cmd.c2 = ifcCMDsERVICEwINDOW_7use       ;                                                                 }
                else if( !etThread.strCompareF( tinP , psttOldCmd     , T("test"   ) ) ) { cmd.c2 = ifcCMDsERVICEwINDOW_test       ;                                                                 }
                else if( !etThread.strCompareF( tinP , psttOldCmd     , T("gett"   ) ) ) { cmd.c2 = ifcCMDsERVICEwINDOW_gett       ;                                                                 }
                else if( !etThread.strCompareF( tinP , psttOldCmd     , T("make"   ) ) ) { cmd.c2 = ifcCMDsERVICEwINDOW_make       ;                                                                 }
                else if( !etThread.strCompareF( tinP , psttOldCmd     , T("put"    ) ) ) { cmd.c2 = ifcCMDsERVICEwINDOW_put        ;                                                                 }
                else if( !etThread.strCompareF( tinP , psttOldCmd     , T("get"    ) ) ) { cmd.c2 = ifcCMDsERVICEwINDOW_get        ;                                                                 }
                else if( !etThread.strCompareF( tinP , psttOldCmdLine , T("new"    ) ) ) { cmd.c2 = ifcCMDsERVICEwINDOW_new        ; cmd.c3 = 0 ; if( psttParameter ) etThread.delF( tinP , psttParameter ) ; }
                else if( !etThread.strCompareF( tinP , psttOldCmdLine , T("mfire"  ) ) ) { cmd.c2 = ifcCMDsERVICEwINDOW_mfire      ; cmd.c3 = 0 ; if( psttParameter ) etThread.delF( tinP , psttParameter ) ; }
                     if( !etThread.strCompareF( tinP , psttOldCmd     , T("logout" ) ) ) { cmd.c2 = ifcCMDsERVICEwINDOW_logout     ; cmd.c3 = 0 ; if( psttParameter ) etThread.delF( tinP , psttParameter ) ; }
            {
            else
            }
                else                                                                { cmd.c2 = ifcCMDsERVICEwINDOW_q          ; cmd.c3 = 0 ; if( psttParameter ) etThread.delF( tinP , psttParameter ) ; }
                     if( !etThread.strCompareF( tinP , psttOldCmd     , T("login"  ) ) ) { cmd.c2 = ifcCMDsERVICEwINDOW_login      ; cmd.c3 = 0 ; if( psttParameter ) etThread.delF( tinP , psttParameter ) ; }
            {
            else if(     !bLoggedIn )
            else if(     !etThread.strCompareF( tinP , psttOldCmd     , T("?close" ) ) ) { cmd.c2 = ifcCMDsERVICEwINDOW_qclose     ; cmd.c3 = 0 ; if( psttParameter ) etThread.delF( tinP , psttParameter ) ; }
            else if(     !etThread.strCompareF( tinP , psttOldCmd     , T("?open"  ) ) ) { cmd.c2 = ifcCMDsERVICEwINDOW_qopen      ; cmd.c3 = 0 ; if( psttParameter ) etThread.delF( tinP , psttParameter ) ; }
            else if(     !etThread.strCompareF( tinP , psttOldCmd     , T("?logout") ) ) { cmd.c2 = ifcCMDsERVICEwINDOW_qlogout    ; cmd.c3 = 0 ; if( psttParameter ) etThread.delF( tinP , psttParameter ) ; }
            else if(     !etThread.strCompareF( tinP , psttOldCmd     , T("?login" ) ) ) { cmd.c2 = ifcCMDsERVICEwINDOW_qlogin     ; cmd.c3 = 0 ; if( psttParameter ) etThread.delF( tinP , psttParameter ) ; }
            else if(     !etThread.strCompareF( tinP , psttOldCmd     , T("?mall"  ) ) ) { cmd.c2 = ifcCMDsERVICEwINDOW_qmall      ; cmd.c3 = 0 ; if( psttParameter ) etThread.delF( tinP , psttParameter ) ; }
            else if(     !etThread.strCompareF( tinP , psttOldCmd     , T("?7use"  ) ) ) { cmd.c2 = ifcCMDsERVICEwINDOW_q7use      ; cmd.c3 = 0 ; if( psttParameter ) etThread.delF( tinP , psttParameter ) ; }
            else if(     !etThread.strCompareF( tinP , psttOldCmd     , T("?test"  ) ) ) { cmd.c2 = ifcCMDsERVICEwINDOW_qtest      ; cmd.c3 = 0 ; if( psttParameter ) etThread.delF( tinP , psttParameter ) ; }
            else if(     !etThread.strCompareF( tinP , psttOldCmd     , T("?gett"  ) ) ) { cmd.c2 = ifcCMDsERVICEwINDOW_qgett      ; cmd.c3 = 0 ; if( psttParameter ) etThread.delF( tinP , psttParameter ) ; }
            else if(     !etThread.strCompareF( tinP , psttOldCmd     , T("?put"   ) ) ) { cmd.c2 = ifcCMDsERVICEwINDOW_qput       ; cmd.c3 = 0 ; if( psttParameter ) etThread.delF( tinP , psttParameter ) ; }
            else if(     !etThread.strCompareF( tinP , psttOldCmd     , T("?get"   ) ) ) { cmd.c2 = ifcCMDsERVICEwINDOW_qget       ; cmd.c3 = 0 ; if( psttParameter ) etThread.delF( tinP , psttParameter ) ; }
            else if(     !etThread.strCompareF( tinP , psttOldCmd     , T("?make"  ) ) ) { cmd.c2 = ifcCMDsERVICEwINDOW_qmake      ; cmd.c3 = 0 ; if( psttParameter ) etThread.delF( tinP , psttParameter ) ; }
            else if(     !etThread.strCompareF( tinP , psttOldCmd     , T("?new"   ) ) ) { cmd.c2 = ifcCMDsERVICEwINDOW_qnew       ; cmd.c3 = 0 ; if( psttParameter ) etThread.delF( tinP , psttParameter ) ; }
            else if(     !etThread.strCompareF( tinP , psttOldCmd     , T("?hire"  ) ) ) { cmd.c2 = ifcCMDsERVICEwINDOW_qhire      ; cmd.c3 = 0 ; if( psttParameter ) etThread.delF( tinP , psttParameter ) ; }
            else if(     !etThread.strCompareF( tinP , psttOldCmd     , T("?who"   ) ) ) { cmd.c2 = ifcCMDsERVICEwINDOW_qwho       ; cmd.c3 = 0 ; if( psttParameter ) etThread.delF( tinP , psttParameter ) ; }
            else if(     !etThread.strCompareF( tinP , psttOldCmd     , T("?sub"   ) ) ) { cmd.c2 = ifcCMDsERVICEwINDOW_qsub       ; cmd.c3 = 0 ; if( psttParameter ) etThread.delF( tinP , psttParameter ) ; }
            else if(     !etThread.strCompareF( tinP , psttOldCmdLine , T("?mfire" ) ) ) { cmd.c2 = ifcCMDsERVICEwINDOW_qmfire     ; cmd.c3 = 0 ; if( psttParameter ) etThread.delF( tinP , psttParameter ) ; }
            else if(     !etThread.strCompareF( tinP , psttOldCmdLine , T("open"   ) ) ) { cmd.c2 = ifcCMDsERVICEwINDOW_open       ; cmd.c3 = 0 ; if( psttParameter ) etThread.delF( tinP , psttParameter ) ; }
                 if(     !etThread.strCompareF( tinP , psttOldCmd     , T("close"  ) ) ) { break ; }

            }
                if( !psttParameter && cmd.c3 ) etThread.strFromF( tinP , psttParameter , cmd.c3 , flFORMAT_UNSIGNED | flFORMAT_FILLzE , 7 ) ;
                if( !cmd.c3 ) cmd.c3 = c3Lag ;

                }
                    if( cParameter ) cmd.c3 = cParameter ;
                    countT cParameter = etThread.strDigitsToSCountF( tinP , psttParameter ) ;
                {
                if( psttParameter )
                etThread.strWordF( tinP , psttParameter , psttOldCmdLine , sttq , S1C(' ') , 2 ) ; ___( psttParameter ) ;
                strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
            {

            }
                etThread.strWordF( tinP , psttOldCmd , psttOldCmdLine , sttq , S1C(' ') , 1 ) ; ___( psttOldCmd ) ;
                strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
            {
            ZE( strokeS* , psttOldCmd ) ;
        {
        if( !ether )

        else etThread.faceHearF( tinP , psttOldCmdLine ) ; ___( psttOldCmdLine ) ;
        }
            etThread.delF( tinP , psttOldCmdFirst ) ;
            etThread.strMakeF( tinP , LF , psttOldCmdLine , psttOldCmdFirst ) ; ___( psttOldCmdLine ) ;
        {
        if( psttOldCmdFirst )
        ZE( strokeS* , psttOldCmdLine ) ;
    {
    ZE( strokeS* , psttParameter ) ;

    count3S cmd ;
{
while( !ether && !etThread )
etThread.strMakeF( tinP , LF , psttOldCmdFirst , T("login") ) ; ___( psttOldCmdFirst ) ;
etThread.strokeF( tinP , T("\f") ) ;
ZE( strokeS* , psttOldCmdFirst ) ;
stackC st_idPortDoorman( tinP , etThread , TAG( TAGiDnULL ) ) ;
countT idServiceWindow = 1 ;
ZE( countT , c3Lag ) ;
ZE( boolT , bLoggedIn ) ;
ZE( strokeS* , psttNickname ) ;
ZE( countT , idCitizen ) ;

etThread.boxGetShadow::20141115@1937::MIGRATE:TO:USE:SETTINGS.BIT.TREE::SettingF( tinP , psttLevel , T("///ideafarm/ephemeral/domains/com/ideafarm/city/settings/")+tCid+T("/reliability") , T("7use") , T("1build\r\n2play\r\n3check\r\n4batter\r\n5useok\r\n6usebetter\r\n7use") ) ; ___( psttLevel ) ;
ZE( strokeS* , psttLevel ) ;

}
    if( idComputer != IDcOMPUTER_IPDOSmASTERcRAFTWORKoLD0 && !bSolo ) etThread.ifcPortAuthorityF( tinP ) ;

    }
        etThread.delF( tinP , psttv ) ;
        if( psttv ) bSolo = !etThread.strCompareF( tinP , psttv , T("me") ) ;
        etThread.osEnvironmentVariableF( tinP , psttv , T("ifcNicNameCityCenter") ) ; ___( psttv ) ;
        ZE( strokeS* , psttv ) ;
    {
    if( idComputer == IDcOMPUTER_IPDOSmASTERcRAFTWORKoLD0 )

    ZE( boolT , bSolo ) ;
    countT idComputer = etThread.diskIdF( tinP , T("///c") ) ;
{

//U:etThread.osThreadSwitchingDesireF( tinP , ifcTHREADpRIORITY_SPINLOCK ) ;
TNCID ;

TODO

}
    return bOk ;

    }
        etThread.delF( tinP , pbd ) ;
        }
            }
                }
                    break ;
                    bOk = 1 ;
                {
                if( pcc[ off ] == idCitizenP )
            {
            for( countT off = 0 ; off < ccc ; off ++ )
            countT  ccc = cbd / sizeof( countT ) ;
            countT* pcc = (countT*)pbd ;
        {
        else
        if( etThread ) etThread = 0 ;
        etThread.boxGetShadowF( tinP , pbd , cbd , psttP ) ; ___( pbd ) ;
        ZE( countT , cbd ) ;
        ZE( byteT* , pbd ) ;
    {
    else
    if( idCitizenP == 1 ) bOk = 1 ;
    ZE( boolT , bOk ) ;
{
boolT bOkF( tinS& tinP , etherC& etThread , const countT idCitizenP , const strokeS* const psttP )

}
    if( bOkP ) etThread.ether_idCitizenHirer_F( tinP ) = queryP.c1 ;

    sock.readF( tinP , (byteT*)&bOkP , sizeof bOkP ) ;
    sock.writeF( tinP , (byteT*)&queryP , sizeof queryP ) ;
    sock.connectF( tinP , ifcPORToLD1pASSCODE , socketC::nicNameIF( tinP , etThread , T("city.center.ideafarm.com") ) ) ;
    socketC sock( tinP , etThread , TAG( TAGiDnULL ) ) ;

    }
        etThread.memCopyF( tinP , (byteT*)&queryP.c3 , (byteT*)&cpc , sizeof queryP.c3 ) ;
        { ZE( boolT , bnu ) ; __( !bnu && sizeof( measureT ) != sizeof( countT ) ) ; }
        measureT cpc = (measureT)aaP * (measureT)idsP + (measureT)bbP * ids2 + (measureT)ccP * ids3 + (measureT)ddP * ids4 ;
        measureT ids4 = ids3 * (measureT)idsP ;
        measureT ids3 = ids2 * (measureT)idsP ;
        measureT ids2 = (measureT)idsP * (measureT)idsP ;
    {
{
voidT loginF( etherC& etThread , tinS& tinP , boolT& bOkP , count5S& queryP , const sCountT aaP , const sCountT bbP , const sCountT ccP , const sCountT ddP , countT& idsP )

DONE( tmReplyCatcherF )

}
    }
        DEL( psReplyDoorman ) ;
        st_idPortDoorman.ungrabF( tinP ) ;
        __( idPortDoorman - st_idPortDoorman.extractF( tinP , st_idPortDoorman( idPortDoorman ) ) ) ;
        st_idPortDoorman.grabF( tinP , TAG( TAGiDnULL ) ) ;
        { nicNameC idh ; psReplyDoorman->myNameF( tinP , idPortDoorman , idh ) ; }
        ZE( countT , idPortDoorman ) ;
    {

    }
        if( bDone ) break ;

        DEL( psor ) ;
        }
            etThread = 0 ;
            }
                }
                    etThread.delF( tinP , psttLine ) ;

                    }
                        etThread.delF( tinP , psttp ) ;
                        *pcParameterLag = etThread.strDigitsToSCountF( tinP , psttp ) ;
                        etThread.strWordF( tinP , psttp , psttLine , sttq , S1C(' ') , - 1 ) ; ___( psttp ) ;
                        ZE( strokeS* , psttp ) ;
                        ZE( countT , idl ) ;
                    {
                    if( bNew && bNewStep3 )
                          bDone    |= ( idf = 1 , sttq = strokeS() , !!etThread.strIdF( tinP , idf , sttq , T("(aborted)")      , psttLine ) ) ;
                          bDone     = ( idf = 1 , sttq = strokeS() , !!etThread.strIdF( tinP , idf , sttq , T("(done)")         , psttLine ) ) ;
                    boolT bNewStep3 = ( idf = 1 , sttq = strokeS() , !!etThread.strIdF( tinP , idf , sttq , T("(step 3 of 4) ") , psttLine ) ) ;
                    boolT bNew      = ( idf = 1 , sttq = strokeS() , !!etThread.strIdF( tinP , idf , sttq , T("\"new ")         , psttLine ) ) ;
                    countT idf = 1 ;
                    strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
                    etThread.strokeF( tinP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T(psttLine)+T("\r\n") ) ;
                {
                if( psttLine )
                psor->readWoLineF( tinP , psttLine , 0x100 ) ; ___( psttLine ) ;
                ZE( strokeS* , psttLine ) ;
            {
            while( !ether && !etThread )
        {
        if( !ether ) 
        psReplyDoorman->acceptF( tinP , psor , idPortPeer , nnPeer , countTC() ) ; ___( psor ) ;
        ZE( countT , idPortPeer ) ;
        nicNameC nnPeer ;
        }
            ++ sgnReady ;
            bFirst = 0 ;
        {
        if( bFirst )
        ZE( socketC* , psor ) ;

        ZE( boolT , bDone ) ;
    {
    while( !ether && !etThread )
    countT bFirst = 1 ;

    psReplyDoorman->etherF( tinP , etThread ) ;

    stackC& st_idPortDoorman = *(stackC*)pTaskP->c4 ;
    countT* pcParameterLag   = (countT*) pTaskP->c3 ;
    socketC* psReplyDoorman  = (socketC*)pTaskP->c2 ;
    signC& sgnReady          = *(signC*) pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 && pTaskP->c3 && pTaskP->c4 )
TASK( tmReplyCatcherF )

/*1*/WAKEhIDE( "city.gate.service.window" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//


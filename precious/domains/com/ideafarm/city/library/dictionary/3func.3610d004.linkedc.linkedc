
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    _OUT_

    root.ungrabF( tinP ) ;

    }
        //20161225@0937: CONJ: NOT NEEDED: pKid->ungrabF( tinP ) ;

               root.pKid = this ;
        pKid = root.pKid ;

        //20161225@0937: CONJ: NOT NEEDED: root.pKid->grabF( tinP , TAGoR( TAGiDnULL , idLineCt , idiFileCt , (byteT*)0 ) ) ;
    {
    else
    if( !root.pKid ) { root.pKid = this ; }

    root.grabF( tinP , TAGoR( TAGiDnULL , idLineCt , idiFileCt , (byteT*)0 ) ) ;

    }
        pc->ungrabF( tinP ) ;
        }
            pc = pc->pKid ;
            pc->ungrabF( tinP ) ;
    
            }
                BLAMMO ;
                LOGrAW( "linkedC::linkedC / error: i am already in the list, so am calling BLAMMO\r\n" ) ;
            {
            if( pc->pKid == this )
    
            //LOGrAW5( "linkedC ++++      walk [idThread,pc->pKid]:    " , tinP.monitor.idThread , "                      " , pc->pKid , "\r\n" ) ;

            pc->pKid->grabF( tinP , TAGoR( TAGiDnULL , idLineCt , idiFileCt , (byteT*)0 ) ) ;
            if( getNegAM( pc->pKid->finger ) != FINGERnEG_LINKEDc ) { BLAMMO ; }
            if( getNegAM( pc->finger ) != FINGERnEG_LINKEDc ) { BLAMMO ; }
        {
        while( pc->pKid )
        linkedC* pc = &root ;
    
        //LOGrAW5( "linkedC ++++                              :    " , tinP.monitor.idThread , "    " , this , "\r\n" ) ;

        root.grabF( tinP , TAGoR( TAGiDnULL , idLineCt , idiFileCt , (byteT*)0 ) ) ;
    {
    //U::TO FIND A BUG 20161225@0951

    grabitC grabitx( tinP , TAG( TAGiDnULL ) ) ;

    putNegAM( finger , FINGERnEG_LINKEDc ) ;

    _INoLD_
{
idAdam( tinP.pAdamGlobal1->idAdam )
pKid( 0 ) ,
root( rootP ) ,
idType( rootP.idType ) ,
grabotC( tinP , idLineCtP , idiFileCtP , pbBitsCtP , &rootP == &processGlobal3I._handleC_linked_sm ? flGRABITc_SHARElAYER | flGRABITc_SNEAKYlOVER : flGRABITc_SHARElAYER , 0 , rootP.idGrabLayer ) ,
/*1*/linkedC::linkedC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , linkedC& rootP ) :/*1*/

/**/

*/
    but ct and dt is fastest when it is strictly lifo
    lifo is not required
   this is most efficient when ct and dt is probabilistically lifo
   the former kid of the root will become my kid
  i will be attached as the kid of the root
   the root instance has no application data associated with it
  should specify an instance that is not of a derived type
 rootP
 pbBitsCtP
 idiFileCtP
 idLineCtP
 tinP
parameters
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


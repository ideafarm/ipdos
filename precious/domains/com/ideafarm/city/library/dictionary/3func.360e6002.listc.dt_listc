
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    _OUT_

    //tinP.pc Utility[ 0 ] -- ;
    //CONoUTrAW7( "~listC [@,idName,idLevel]: " , this , " " , idName , " " , tinP.pc Utility[ 0 ] , " / -\r\n" ) ;

    else flagsi |= fliLISTINGc_DESTRUCTING ;
    }
        POPtINaRGS
        walkF( tinP , tinP.ta.retained.listWalk.walk.idGrabLayer ) ; //U::CODE TO ENFORCE THAT THIS IS SET BY CALLER

        //tinP.ta.pushed.listWalk.walk.flagsWalkP = flLISTwALK_IGNOREcREFdATUM | flLISTwALK_IGNOREcREF ; //U::WHY DO I NEED TO IGNORE CREF ; CAN'T I BLOCK PENDING CLIENT REFERENCES?
        tinP.ta.pushed.listWalk.walk.pListWalkCBFP = listWalkDeleteAllCBF ;
        PUSHtINaRGS

        }
            POPtINaRGS
            walkF( tinP , tinP.ta.retained.listWalk.walk.idGrabLayer ) ;
            //if( flagsi & fliLISTINGc_GRABBED ) tinP.ta.pushed.listWalk.walk.flagsWalkP = flLISTwALK_CALLERgRABBEDrOOT ;
            tinP.ta.pushed.listWalk.walk.pListWalkCBFP = listWalkUnIndexCBF ;
            PUSHtINaRGS
        {
    {
    if( flagsi & fliLISTINGc_DESTRUCTING )
    if( !( flagsi & fliLISTINGc_MIXINlIST ) ) { BLAMMO ; }

    //CONoUTrAW7( "~listC [@,idName,idLevel]: " , this , " " , idName , " " , tinP.pc Utility[ 0 ] , " / +\r\n" ) ;
    //tinP.pc Utility[ 0 ] ++ ;

    _INoLD_

    TINSL
{
/*1*/listC::~listC( voidT )/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


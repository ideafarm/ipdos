
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    _OUT_
    ether.delF( tinP , psttReply ) ;
    }
        __1
        __( rc ) ;
        if( !( F(ether.flagsMode) & flTHIRDmODE_IMPOTENCEeXPECTED ) ) ether.etherPutLogF( tinP , T(": 14 ::::")+T(psttReply)+T(":::: ") ) ;
        ether.strokeF( tinP , T("\r\nunexpected telnet reply: \"")+T(psttReply)+T("\"\r\n") ) ;
    {
    else if( rcP != rc )
    }
        ether.delF( tinP , psttw ) ;
        ether.strokeF( tinP , T(psttw)+T(" :::: ")+T(psttReply) ) ;
        ether.strFromF( tinP , psttw , rc ) ; ___( psttw ) ;
        ZE( strokeS* , psttw ) ;
    {
    if( rcP == -1 )
    countT rc = pSControl->readWoReplyF( tinP , psttReply ) ; ___( psttReply ) ;
    ZE( strokeS* , psttReply ) ;
    _INoLD_

    }
        if( POOP ) return ;
        __Z( pSControl ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL    
    SCOOP
{
/*1*/voidT boxC::verifyReplyF( tinS& tinP , const countT rcP )/*1*/

/**/
*/
 rcP
arguments
ether becomes impotent if it does not
verifies that the reply indicates the specified return code
it is illegal to refer to this symbol in the definition of an adam
\<A HREF=\"5.109000d.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$verifyReplyF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//



//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    _OUT_

    linkedC::checkIF( tinP ) ; //U:: TO FIND A BUG

    }
        third.delF( tinP , postAnticipatedError ) ;
        }
            __1
            if( !( F(flagsMode) & flTHIRDmODE_IMPOTENCEeXPECTED ) ) etherPutLogF( tinP , T(postAnticipatedError) ) ;
            strokeF( tinP , T("\r\nSometimes that doesn''t work.  Please try again after pressing Enter.") ) ;
        {
        if( !POOP && postAnticipatedError )
        third.delF( tinP , post ) ;

        // tinP.pAdamGlobal1->_etherC_.pSwDllReferences->ungrabF( tinP ) ;
        // }
        //     ++ ( (countT&)*tinP.pAdamGlobal1->_etherC_.pSwDllReferences ) ;
        //     tinP.pAdamGlobal1->_etherC_.oshDllLever = hDllP.osF( ifcIDtYPEhANDLE_DLL ) ;
        // {
        // if( ~hDllP )
        // tinP.pAdamGlobal1->_etherC_.pSwDllReferences->grabF( tinP , TAG( TAGiDnULL ) ) ;
        //CONJ: NO LONGER NEEDED
        //U::NEEDS REWRITE NOW THAT handleC IS USED; MY CALLER WILL DT hDllP, WHICH WILL CLOSE THE OS HANDLE

        TELL( "dllOpen / 0" ) ; thirdC::dosPriorityIF( tinP ) ; //U:: TO FIND A BUG: 20180525@0729

        batUpdate.ungrabF( tinP ) ;

        TELL( "dllOpen / 1" ) ; thirdC::dosPriorityIF( tinP ) ; //U:: TO FIND A BUG: 20180525@0729

        THREADmODE1rESTORE
        TELL( "dllOpen / 2" ) ; thirdC::dosPriorityIF( tinP ) ; //U:: TO FIND A BUG: 20180525@0729
        third.dosLoadModuleF( tinP , hDllP , postAnticipatedError , osFileNameC( tinP , third , post ) , this ) ; ___( postAnticipatedError ) ;
        TELL( "dllOpen / 3" ) ; thirdC::dosPriorityIF( tinP ) ; //U:: TO FIND A BUG: 20180525@0729
        THREADmODE1oN( flTHREADmODE1_ALLOWsTOPwHILEgRABBING )
        ZE( osTextT* , postAnticipatedError ) ;
        delF( tinP , psttMapped ) ;
        strMakeF( tinP , post , psttMapped ) ; ___( post ) ;
        ZE( osTextT* , post ) ;

        TELL( "dllOpen / 4" ) ; thirdC::dosPriorityIF( tinP ) ; //U:: TO FIND A BUG: 20180525@0729
        }
            delF( tinP , psttm ) ;
            THREADmODE1rESTORE
            diskMapFileNameHoverF( tinP , psttMapped , psttm ) ; ___( psttMapped ) ;
            diskMapFileNameF( tinP , psttm , psttP ) ; ___( psttm ) ;
            THREADmODE1oN( flTHREADmODE1_ALLOWsTOPwHILEgRABBING )
            ZE( strokeS* , psttm ) ;
        {
        ZE( strokeS* , psttMapped ) ;

        TELL( "dllOpen / 5" ) ; thirdC::dosPriorityIF( tinP ) ; //U:: TO FIND A BUG: 20180525@0729
        batUpdate.grabF( tinP , TAG( TAGiDnULL ) ) ;
        batonC batUpdate( tinP , TAG( TAGiDnULL ) , T("ifc.update") , ifcIDgRABlAYER_7BASEmISC1 , flBATONc_NOTjEALOUS | flBATONc_SHARElAYER ) ;
        TELL( "dllOpen / 6" ) ; thirdC::dosPriorityIF( tinP ) ; //U:: TO FIND A BUG: 20180525@0729
    {

    linkedC::checkIF( tinP ) ; //U:: TO FIND A BUG

    _INoLD_

    }
        if( POOP ) return ;
        __( !tinP.pAdamGlobal1->_etherC_.pSwDllReferences ) ;
        __( !tinP.pAdamGlobal1->_etherC_.pEtPrime ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL
    SCOOP
{
/**//*1*/voidT etherC::dllOpenF( tinS& tinP , handleC& hDllP , const strokeS* psttP )/*1*/

*/
 psttP
arguments
it is illegal for any ifc code to modify the master or the hover directory without grabbing: batonC batUpdate( tinP , TAG( TAGiDnULL ) , T("ifc.update") ) ;
it is illegal to refer to this symbol in the definition of an adam
\<A HREF=\"5.103002b.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$dllOpenF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


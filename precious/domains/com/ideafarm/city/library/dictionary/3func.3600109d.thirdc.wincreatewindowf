
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    __Z( hWindowP ) ;

    #endif

        }
            ;//TELLc1( ifcIDtYPEtELL_AOKfYIcANcREATEwINDOWnOW ) 
            idLastReport = 2 ;
        {
        if( idLastReport == 1 && ~hWindowP )

        BOSpOOP
        BOS( WHATgbo , BOSoK , SetWindowPos( (HWND)hWindowP.osF( ifcIDtYPEhANDLE_WINDOW ) , HWND_NOTOPMOST , xx , yy , cx , cy , flags ) )
        //BOSpOOP
        //BOS( WHATgbo , BOSoK , SetWindowPos( (HWND)hWindowP.osF( ifcIDtYPEhANDLE_WINDOW ) , F(thirdC::third_flagsModeProcess2I_IF(tinP)) & flMODEpROCESS2_DEBUG ? HWND_NOTOPMOST : HWND_TOPMOST , xx , yy , cx , cy , flags ) )

        flags |= bNotVisibleP ? SWP_NOACTIVATE : SWP_SHOWWINDOW ;
        flagsT flags = SWP_NOCOPYBITS ;

        }
            while( !hWindowP && !*this && !thPrime && ( bNoQuitEarly || ( cTriesP && -- cTriesP ) ) ) ;
            }
                //U: }
                //U:     }
                //U:         win Destroy WindowF( tinP , hWindowP ) ;
                //U:     {
                //U:     if( cRow < 0x100 )
                //U:     winClientSizeF( tinP , cCol , cRow , hWindowP ) ;
                //U:     ZE( countT , cRow ) ;
                //U:     ZE( countT , cCol ) ;
                //U:     winShowWindowF( tinP , hWindowP , idcWINsHOW_MAXIMIZE ) ;
                //U: {
                //U: if( ~hWindowP && cRowP >= 0x100 ) //TEST THE WINDOW TO DECIDE WHETHER TO KEEP IT

                if( !hWindowP ) { BLAMMO ; }
                }
                    //LOGrAWtID4( "winCreateWindowF (cColClient,cRowClient): " , cColClientP , " " , cRowClientP ) ;
                    ((HANDLEaPPnOTEScOUNTcLASS&)hWindowP).c2 = cRowClientP ;
                    ((HANDLEaPPnOTEScOUNTcLASS&)hWindowP).c1 = cColClientP ;

                    //winClientSizeF( tinP , cColClient , cRowClient , hWindowP ) ;
                    //ZE( countT , cRowClient ) ;
                    //ZE( countT , cColClient ) ;
                    //DOES NOT RETURN THE CORRECT VALUES; WINDOWS IS SUCH SHIT

                    hWindowP.osF( ifcIDtYPEhANDLE_WINDOW , tinP.brcRaw ) ;
                    BOS( WHATgbo , BOSoK , CreateWindowEx( flagsStyleEx , postOldClassP , postTitleP , flagsStyle , xx , yy , cx , cy , oshDad , 0 , oshClient , 0 ) )

                    HWND oshDad = (HWND)( ~hWindowParentOrOwnerP ? hWindowParentOrOwnerP.osF( ifcIDtYPEhANDLE_WINDOW ) : 0 ) ;
                    HINSTANCE oshClient = (HINSTANCE)hWindowingClientIP.osF( ifcIDtYPEhANDLE_WINDOWINGcLIENT ) ;
                {

                }
                    }
                        ++ s ; dosSleepIF( tinP , TOCK * 4 ) ;
                    {
                    }
                        ;//TELLc1( ifcIDtYPEtELL_AOKfYIcANNOTcREATEwINDOWnOW ) 
                        idLastReport = 1 ;
                    {
                    if( idLastReport != 1 )
                {
                else
                if( bWoth ) bWoth = 0 ;
            {
            do
            boolT bWoth = 1 ;
            sleepC s( tinP , TAG( TAGiDnULL ) ) ;
        {
        ZE( countT , idLastReport ) ; // 1: CANNOT CREATE  2: CREATED AOK
        thirdC& thPrime = thirdC::thPrimeIF( tinP ) ;

        boolT bNoQuitEarly = !cTriesP ;

        }
            }
                cy = cRowP ;
                cx = cColP ;
            {
            else
            if( cColP == - 1 ) cx = CW_USEDEFAULT ;
            
            }
                yy = winOsRowIF( idRowP - 1 + cRowP ) ;
                xx = winOsColIF( idColP ) ;
            {
            else
            if( idColP == - 1 ) xx = CW_USEDEFAULT ;

            if( cColP == - 1 ) { BLAMMO ; }
        {
        else
        }
            else __1
            }
                }
                    cy = cRowP ;
                    cx = cColP ;
                {
                else
                if( cColP == - 1 ) cx = CW_USEDEFAULT ;

                }
                    yy = winOsRowIF( idRowP - 1 + cRowP , pwDad->mRowsF() ) - cRowP + 1 ;
                    xx = winOsColIF( idColP ) ;
                {
                else
                if( idColP == - 1 ) xx = CW_USEDEFAULT ; //ARBITRARY SPECIAL VALUE
            {
            if( pwDad )
            windowOldC* pwDad = windowOldC::pWindowIF( tinP , hWindowParentOrOwnerP ) ;
        {
        if( ~hWindowParentOrOwnerP )
        ZE( countT  , cy ) ;
        ZE( countT  , cx ) ;
        ZE( sCountT , yy ) ;
        ZE( sCountT , xx ) ;

        else                               __( idTypeP ) ;
        else if( idTypeP == idtWIN_KID ) flagsStyle |= WS_CHILD | WS_BORDER ;
        }
            //U::COMMENTED OUT TO FIND A QUIT DEADLOCK BUG ON WINDOW THREAD: flagsStyleEx |= WS_EX_TOPMOST ;
            //flagsStyle |= WS_MAXIMIZE | WS_SYSMENU | WS_OVERLAPPEDWINDOW ;
            flagsStyle |= WS_OVERLAPPEDWINDOW ;
        {
        if( idTypeP == idtWIN_ROOT  )

        flagsT flagsStyleEx = 0 ;
        flagsT flagsStyle = WS_CLIPCHILDREN | WS_CLIPSIBLINGS ;

    #elif defined( __NT__ )

        //U:

    #if defined( __OS2__ )

    //LOGrAWtID4( "winCreateWindowF (cColP,cRowP): " , cColP , " " , cRowP ) ;

    _IO_

    }
        if( POOP ) return ;

        #endif
            __Z( hWindowingClientIP ) ; //IF THIS BLOWS, COMMENT IT OUT SINCE 0 MIGHT BE A LEGAL VALUE
        #elif defined( __NT__ )
            __NZ( hWindowingClientIP ) ; //U: IS SUCH A HANDLE USED IN OS/2? CONJ: NO
        #if defined( __OS2__ )

        __( idTypeP == idtWIN_KID && !hWindowParentOrOwnerP ) ;
        __Z( idTypeP ) ;
        __Z( postOldClassP ) ;
        __Z( postTitleP ) ;
        __NZ( hWindowP ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL
    SCOOP
{
/*1*/voidT thirdC::winCreateWindowF( tinS& tinP , const handleC& hWindowParentOrOwnerP , handleC& hWindowP , const osTextT* const postTitleP , const osTextT* const postOldClassP , const countT idTypeP , sCountT idColP , sCountT idRowP , countT cColP , countT cRowP , const countT cColClientP , const countT cRowClientP , const handleC& hWindowingClientIP , const boolT bNotVisibleP , countT cTriesP )/*1*/

/**/
*/
  if cTriesP is 0 and there is not an operator logged in, i will block until an operator logs in
  after cTriesP is exhausted (if it is not 0), impotence will occur if i have not created the window
  i sleep 8 tocks between each try
  if 0 then i will retry until i detect asynch impotence
  can be 0
 cTriesP
 bNotVisibleP
   for Windows this must not be 0
   for os2 this can be 0
  for some operating systems, this can be 0
  handle of the application
 hWindowingClientIP
  height of the window
 cRowP
  if -1 then the operating system will use a default size, and cRowP will be ignored
  width of the window
 cColP
  ignored if idColP is - 1
  distance of the bottom edge of the window from the bottom edge of the parent window (or display screen)
 idRowP
  if -1 then the operating system will use a default position, and idRowP will be ignored
  distance of left edge of the window from the left edge of the parent window (or display screen)
 idColP
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/1snip.00100ee.idtWIN!||
 idTypeP
  must not be 0
 postOldClassP
  must not be 0
 postTitleP
  must be 0
 hWindowP
  can be 0 unless idTypeP is "kid"
 hWindowParentOrOwnerP
 tinP
arguments
\<A HREF=\"5.10200bb.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$winCreateWindowF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//



//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    tinP.pAdamGlobal5->frPaper.grab.ungrabF( tinP ) ;

    }
        }
            //LOGrAW7( "moveGlyphF [idAdam,mColsMoved,mRowsMoved]: " , sadamP.features.fc.idAdam , " " , sadamP.pStrike->sc.mColsMoved , " " , sadamP.pStrike->sc.mRowsMoved , "\r\n" ) ;
            sadamP.pStrike->sc.mRowsMoved += mDeltaRow ;
            sadamP.pStrike->sc.mColsMoved += mDeltaCol ;

            }
                if( !( F(sadamP.pStrike->sc.flags) & flSTRIKEs_FLY ) != !bFlyOld ) sadamHighlightF( tinP , sadamP , flSADAMhIGHLIGHT_FLYOVER ) ;
                else      sadamP.pStrike->sc.flags &= ~( F(flSTRIKEs_FLY) ) ;
                if( bIn ) sadamP.pStrike->sc.flags |= flSTRIKEs_FLY ;
                const boolT bFlyOld = F(sadamP.pStrike->sc.flags) & flSTRIKEs_FLY ;

                ;
                )
                    idRow <= R( sadamP.pStrike->sc.mIdRowHot ) - 1.0 + R( sadamP.pStrike->sc.mRowsHot )
                    idRow >= R( sadamP.pStrike->sc.mIdRowHot )                                   &&
                    idCol <= R( sadamP.pStrike->sc.mIdColHot ) - 1.0 + R( sadamP.pStrike->sc.mColsHot ) &&
                    idCol >= R( sadamP.pStrike->sc.mIdColHot )                                   &&
                (
                boolT bIn =
                sCountT idRow = winPulp.x1.back.rowBack.ro.pcToolState_22[ ifcIDtYPEtOOL_MOUSEpOSITION - ifcIDtYPEtOOL_x2Begin - 1 ] ;
                sCountT idCol = winPulp.x1.back.rowBack.ro.pcToolState_12[ ifcIDtYPEtOOL_MOUSEpOSITION - ifcIDtYPEtOOL_x2Begin - 1 ] ;
            {
            if( F(sadamP.features.fc.flagsFlyoverHighlight) & flFEATUREsADAMfLYOVERhIGHLIGHT_EXISTS && !( F(sadamP.pStrike->sc.flags) & flSTRIKEs_DRAG ) )
    
            }
                winPulp.positionPaperBackF( tinP ) ;
                winPulp.cacheF( tinP , saOLD_POPfRAME ) ;
                winPulp.stqr_strokingFrame >> pbsf ;
                winPulp.stqr_strokingFrame >> pbsf ;
                byteT* pbsf = (byteT*)&sf ;
                strokingFrameS sf ;
            {
    
            if( F(flHighSave) ) sadamHighlightF( tinP , sadamP , flHighSave ) ;

            tinP.pAdamGlobal1->_pulpOldC_.flagsMode = _saveModeI ;
            renderVolatilesF( tinP , sadamP , phCloneP ) ;
            winPulp.x1.back.wrapRenderF( tinP , sadamP.features.psttBody , phCloneP ) ;
            //DRAW NEW
    
            winPulp.positionPaperBackF( tinP ) ;
            winPulp.cacheF( tinP , scOld_mmFRAME ) ;
            sadamP.pStrike->sc.mIdRowHot += mDeltaRow ;
            sadamP.pStrike->sc.mIdColHot += mDeltaCol ;
            sadamP.pStrike->sc.sf.mIdRow = sf.mIdRow = mIdRowMoveTo ;
            sadamP.pStrike->sc.sf.mIdCol = sf.mIdCol = mIdColMoveTo ;

            thirdC::c_memcpyIF( tinP , (byteT*)&sfd , (byteT*)&sadamP.pStrike->sc.sfDad , sizeof sfd ) ;
            thirdC::c_memcpyIF( tinP , (byteT*)&sf  , (byteT*)&sadamP.pStrike->sc.sf    , sizeof sf ) ;
            strokingFrameS& sfd = *(strokingFrameS*)&winPulp.stqr_strokingFrame[ 2 ] ; //U::WHAT ABOUT NONDEFAULT OFFSETS
            strokingFrameS& sf  = *(strokingFrameS*)&winPulp.stqr_strokingFrame[ 1 ] ; //U::WHAT ABOUT NONDEFAULT OFFSET

            sadamP.pStrike->sc.sfDad.mIdRow += mDeltaRow ;
            sadamP.pStrike->sc.sfDad.mIdCol += mDeltaCol ;

            winPulp.flagsMode = _saveMode ;
            renderVolatilesF( tinP , sadamP , phCloneP ) ;
            winPulp.x1.back.wrapRenderF( tinP , sadamP.features.psttBody , phCloneP ) ;
            tinP.pAdamGlobal1->_pulpOldC_.flagsMode |= flPAPERmODEi_SUPPRESStABfRESH ;
            const flagsT _saveMode  = winPulp.flagsMode ;
            const flagsT _saveModeI = tinP.pAdamGlobal1->_pulpOldC_.flagsMode ;
            //ERASE OLD
    
            if( F(flHighSave) ) sadamHighlightF( tinP , sadamP , flHighSave ) ;
            const flagsT flHighSave = sadamP.pStrike->sc.flagsHighlighted ;
    
            winPulp.positionPaperBackF( tinP ) ;
            winPulp.cacheF( tinP , scOld_mmFRAME ) ;
            winPulp.stqr_strokingFrame << (byteT*)&sfw ;
            winPulp.stqr_strokingFrame << (byteT*)&sfwd ;

            winPulpOldC& winPulp = *(winPulpOldC*)x1.pPulp ;
    
            thirdC::c_memcpyIF( tinP , (byteT*)&sfwd , (byteT*)&sadamP.pStrike->sc.sfDad , sizeof sfwd ) ;
            thirdC::c_memcpyIF( tinP , (byteT*)&sfw  , (byteT*)&sadamP.pStrike->sc.sf    , sizeof sfw ) ;
            strokingFrameS sfwd ;
            strokingFrameS sfw ;

            //LOGrAW7( "moveGlyphF [idAdam,mIdColMoveTo,mIdRowMoveTo]: " , sadamP.features.fc.idAdam , " " , mIdColMoveTo , " " , mIdRowMoveTo , "\r\n" ) ;
        {
        if( mDeltaCol || mDeltaRow )

        //LOGrAW9( "moveGlyphF [mDeltaCol,mDeltaRow,mIdColMoveTo,mIdColMoveTo]: " , mDeltaCol , " " , mDeltaRow , " " , mIdColMoveTo , " " , mIdRowMoveTo , "\r\n" ) ;

        measureT mDeltaRow = mIdRowMoveTo - sadamP.pStrike->sc.sf.mIdRow ;
        measureT mDeltaCol = mIdColMoveTo - sadamP.pStrike->sc.sf.mIdCol ;

                                      sadamP.pStrike->sc.mIdRowMoveTo = MAXmEASUREt ;  
                                      sadamP.pStrike->sc.mIdColMoveTo =
        const measureT mIdRowMoveTo = sadamP.pStrike->sc.mIdRowMoveTo ;
        const measureT mIdColMoveTo = sadamP.pStrike->sc.mIdColMoveTo ;

        if( sadamP.pStrike->sc.mIdRowMoveTo == MAXmEASUREt ) { BLAMMO ; }
    {
    if( sadamP.pStrike->sc.mIdColMoveTo != MAXmEASUREt )

    //U::DO I NEED TO BE SERIALIZED?: NOT SERIALIZED CAUSE PRIVATE
    tinP.pAdamGlobal5->frPaper.grab.grabF( tinP , TAG( TAGiDnULL ) ) ;
{
/*1*/voidT paperOldC::moveGlyphF( tinS& tinP , sadamC& sadamP , const handleC* const phCloneP )/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


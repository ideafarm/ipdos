
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    dec02AM( cFunctionsPending ) ;
    }
        _OUT_
    
        }
            }
                handle.closeIfF() ;

                pEther->traceF( tinP , T(" | cancelIfTimedOutF/stale socketC at ")+TF2((countT)this,flFORMAT_UNSIGNED|flFORMAT_NObASE)+T(" is being cancelled") ) ;

                if( bConnectOld             ) { tSay = tSayPrefix+T("connection time limit exceeded"                    ) ; pEther->traceF( tinP , tSay ) ; }
                if( bIdleRead && bIdleWrite ) { tSay = tSayPrefix+T("reading and writing idle time limits both exceeded") ; pEther->traceF( tinP , tSay ) ; }
                TN( tSay , "" ) ;
                TN( tSayPrefix , "cancelIfTimedOutF [idleTimeAllowedRead,idldTimeAllowedWrite,timeAllowedConnected]: " ) ; tSayPrefix += TF2(idleTimeAllowedRead,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+T(" ")+TF2(idleTimeAllowedWrite,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+T(" ")+TF2(timeAllowedConnected,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+T(": ") ;
            {
            if( ( bIdleRead && bIdleWrite ) || bConnectOld )
    
            }
                if( timeE2 > 0 || timeE1 > timeAllowedConnected ) bConnectOld = 1 ;
            
                pEther->osTimeSubtractF( tinP , timeE1 , timeE2 , timeConnected.time1 , timeConnected.time2 ) ;
                pEther->osTimeNowF( tinP , timeE1 , timeE2 ) ;
                ZE( sCountT , timeE2 ) ;
                ZE( countT , timeE1 ) ;
            {
            if( timeAllowedConnected && ( timeConnected.time1 || timeConnected.time2 ) )
    
            }
                }
                    if( timeE2 > 0 || timeE1 > idleTimeAllowedWrite ) bIdleWrite = 1 ;
                    pEther->osTimeSubtractF( tinP , timeE1 , timeE2 , timeLathWrite.time1 , timeLathWrite.time2 ) ;
                    pEther->osTimeNowF( tinP , timeE1 , timeE2 ) ; //UPDATING IS NOT ALLOWED TO RESET timeLathWrite BECAUSE THAT MIGHT HAPPEN RIGHT HERE
                    ZE( sCountT , timeE2 ) ;
                    ZE( countT , timeE1 ) ;
                {
                else
                if( !timeLathWrite.time1 && !timeLathWrite.time2 ) pEther->osTimeNowF( tinP , timeLathWrite.time1 , timeLathWrite.time2 ) ;

                if( idleTimeAllowedWrite != TICK ) pEther->traceF( tinP , T("socket at ")+TF2((countT)this,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" [idleTimeAllowedWrite]: ")+TF2(idleTimeAllowedWrite,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
            {
            if( idleTimeAllowedWrite )
        
            }
                }
                    if( timeE2 > 0 || timeE1 > idleTimeAllowedRead ) bIdleRead = 1 ;
                    pEther->osTimeSubtractF( tinP , timeE1 , timeE2 , timeLathRead.time1 , timeLathRead.time2 ) ;
                    pEther->osTimeNowF( tinP , timeE1 , timeE2 ) ; //UPDATING IS NOT ALLOWED TO RESET timeLathRead BECAUSE THAT MIGHT HAPPEN RIGHT HERE
                    ZE( sCountT , timeE2 ) ;
                    ZE( countT , timeE1 ) ;
                {
                else
                if( !timeLathRead.time1 && !timeLathRead.time2 ) pEther->osTimeNowF( tinP , timeLathRead.time1 , timeLathRead.time2 ) ;

                if( idleTimeAllowedRead != TICK ) pEther->traceF( tinP , T("socket at ")+TF2((countT)this,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" [idleTimeAllowedRead]: ")+TF2(idleTimeAllowedRead,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
            {
            if( idleTimeAllowedRead )
            ZE( boolT , bConnectOld ) ;
            ZE( boolT , bIdleWrite ) ;
            ZE( boolT , bIdleRead ) ;
        {
        if( !fListening )
    
        _INoLD_
    
        }
            }
                return ;
                dec02AM( cFunctionsPending ) ;
            {
            if( *pEther )
        {
        IFbEcAREFUL
        SCOOPP
    {
    inc02AM( cFunctionsPending ) ;
{
/*1*/voidT socketC::cancelIfTimedOutF( tinS& tinP )/*1*/

// I MUST TEST FOR timeE2 > 0 BECAUSE I MIGHT SAMPLE AFTER timeLathRead.time2 WAS INCREMENTED (AT MIDNIGHT) AND BEFORE time1 HAS BEEN UPDATED FROM A HIGH VALUE TO A LOW VALUE
// 2. UPDATE time1 BY AN ATOMIC ASSIGNMENT
// 1. UPDATE time2 BY AN ATOMIC ASSIGNMENT
//UPDATING OF timeLathRead MUST BE MONOTONIC IN OO ATOMIC ASSIGNMENTS

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


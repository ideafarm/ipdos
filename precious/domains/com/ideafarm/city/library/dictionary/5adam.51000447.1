
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


//VISIBLE

//==============================================================================================================================================================
//==== BELOW THIS LINE: DAYTIME WORK ===========================================================================================================================
//==============================================================================================================================================================

REST

}
    }
        etThread.delF( tinP , (byteT*&)pInfo ) ;
        if( pInfo ) etThread.delF( tinP , pInfo->pczName ) ;
        swsEvent >> (countT&)pInfo ;
        ZE( infoS* , pInfo ) ;
    {
    while( swsEvent )
    psttDomain = (strokeS*)swsEvent.leverF( tinP , idf ) ;
{
for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
countT cFlavors = swsEvent.cFlavorsF( tinP ) ;

etThread.delF( tinP , pbOut ) ;
etThread.ifcDrivenServerF( tinP , i1 , i2 ) ;
serverInfo2S( 0xb9e , flSOCKETc_null , TF2(thirdC::third_idAdamRootI_IF( tinP ),flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES) , 0 , (countT)&c2p , 0 , - 1 , 1 , sizeof( stateS ) , translateStateF ) ;
serverInfo1S( &pbdVarying , b_pbdVarying , bHandedOff , sgnIdPortReplaced , tmcF , countTC() , ether ) ;
etThread.ifcChatF( tinP , (countT)&c2p , DDNUMB , jobFillCourseF ) ;

count2S c2p( (countT)&c8p1 , (countT)&c8p2 ) ;
c8p2.c1 = (countT)&swsOwner ;
c8p1.c8 = (countT)&swsEvent ;
c8p1.c7 = (countT)&psttDomain ;
c8p1.c6 = (countT)&b_psttDomain ;
c8p1.c5 = (countT)&idRequestLast ;
c8p1.c4 = cbOut ;
c8p1.c3 = (countT)pbOut ;
c8p1.c2 = (countT)&b_pbdVarying ;
c8p1.c1 = (countT)&pbdVarying ;
count8S c8p2 ;
count8S c8p1 ;

switchStackC swsOwner( tinP , etThread , TAG( TAGiDnULL ) , flSTACKc_FIFO , psttDomain , flSTACKc_FIFO , ifcSTACKtYPE_PTR_strokeS ) ; //FIFO IS USED TO LIMIT STORAGE TO THE MOST RECENT x OWNERS, TO ENSURE THAT POOLoLD USAGE DOES NOT GROW WITHOUT BOUND
switchStackC swsEvent( tinP , etThread , TAG( TAGiDnULL ) , flSTACKc_null , psttDomain , flSTACKc_null ) ;
ZE( strokeS* , psttDomain ) ;
batonC b_psttDomain( tinP , TAG( TAGiDnULL ) ) ;

pbOutF( tinP , etThread , pbOut , cbOut ) ;
ZE( countT , cbOut ) ;
ZE( byteT* , pbOut ) ;

ZE( countT , idRequestLast ) ;
ZE( boolT , bHandedOff ) ;
batonC b_pbdVarying( tinP , TAG( TAGiDnULL ) ) ;
ZE( byteT* , pbdVarying ) ;
signC sgnIdPortReplaced( tinP , TAG( TAGiDnULL ) ) ;

//etThread.osThreadSwitchingDesireF( tinP , ifcTHREADpRIORITY_RUSH ) ;

TODO

}
    etThread.delF( tinP , postxHead ) ;
    etThread.memCopyF( tinP , pbP + costxHead , pbGif     , sizeof pbGif ) ;
    etThread.memCopyF( tinP , pbP             , postxHead , costxHead    ) ;
    etThread.newF( tinP , LF , pbP , cbP ) ; ___( pbP ) ;
    cbP = costxHead + sizeof pbGif ;

    }
        costxHead = etThread.strMakeF( tinP , postxHead , t0 ) ; ___( postxHead ) ;
        textC t0 = T("HTTP/1.0 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: image/gif\r\nContent-Length: ")+TF4(sizeof pbGif,flFORMAT_FILLzE|flFORMAT_NObASE|flFORMAT_FOREIGN,8,0xa)+T("\r\n\r\n") ;
    {
    ZE( countT   , costxHead ) ;
    ZE( osTextT* , postxHead ) ;

    byteT pbGif[] = { BYTEaRRAYiMAGEgIF_1PEL } ;
{
voidT pbOutF( tinS& tinP , etherC& etThread , byteT*& pbP , countT& cbP )

DONEdRIVENsERVER( tmcF )
}
    pso->readF( tinP , pbIn , sizeof pbIn , flSOCKETcrEAD_STILLhUNGRYiSoK ) ;

    }
        b_psttDomain.ungrabF( tinP ) ;
        etThread.delF( tinP , psttDomain ) ;
        }
            etThread.strokeF( tinP , TF1(++idRequestLast)+T(" ")+T(pInfo->idhPeer)+T(" ")+T(psttDomain)+T(" ")+T(pcIdName)+T("\r\n") ) ;

            }
                etThread.delF( tinP , (byteT*&)pInfo ) ;
                if( pInfo ) etThread.delF( tinP , pInfo->pczName ) ;
                swsEvent >> (countT&)pInfo ;
                ZE( infoS* , pInfo ) ;
            {
            while( (countT)swsEvent > 0x1000 )

            swsEvent.sinkF( tinP , ids , (countT)pInfo , flSTACKsINK_null , 0 , subtractF ) ;
            etThread.memCopyF( tinP , (byteT*)pInfo->pczName , (byteT*)pcIdName , ( pInfo->cczName + 1 ) * sizeof( countT ) ) ;
            etThread.newF( tinP , LF , pInfo->pczName , pInfo->cczName + 1 ) ; ___( pInfo->pczName ) ;
            pInfo->cczName = etThread.strBodyLengthF( tinP , pcIdName ) ;
        {
        else
        if( !psttDomain ) etThread.delF( tinP , (byteT*&)pInfo ) ;
        ZE( countT , ids ) ;
        pcIdNameF( tinP , *tinP.zEtScratch , pcIdName , sizeof pcIdName , psttDomain , pInfo->idhPeer , *pso ) ;
        psttDomain = 0 ;
        b_psttDomain.grabF( tinP , TAG( TAGiDnULL ) ) ;

        etThread.memSetF( tinP , (byteT*)pcIdName , sizeof pcIdName ) ;
        countT pcIdName[ CCiDnAMEmAX + 1 ] ;

        etThread.osTimeNowF( tinP , pInfo->timeE1 , pInfo->timeE2 ) ;
    {
    if( pInfo )
    newF( tinP , LF , etThread , pInfo ) ; ___( pInfo ) ;
    ZE( infoS* , pInfo ) ;

    pso->writeF( tinP , pbOut , cbOut ) ;

    PARAMS( cArg )
{
if( cArg )
TASKdRIVENsERVER( tmcF )

}
    return sgn ;
    if( tinP.fingerprint && c3P ) ;

    }

        }
            if( !sgn ) sgn = pInfo1->timeE1 - pInfo2->timeE1 ;
            sgn = pInfo1->timeE2 - pInfo2->timeE2 ;
        {
        else
        else if( !pInfo2 ) sgn =   1 ;
        else if( !pInfo1 ) sgn = - 1 ;
        if( !pInfo1 && !pInfo2 ) ;
        infoS* pInfo2 = (infoS*)c2P ;
        infoS* pInfo1 = (infoS*)c1P ;

        etherC& ether = *(etherC*)pEtherP ;
    {
    if( pEtherP )
    ZE( sCountT , sgn ) ;

    }
    {
    IFbEcAREFUL
{
countT subtractF( tinS& tinP , countT& pEtherP , countT& c1P , countT& c2P , countT& c3P )

}
    etThread.memSetF( tinP , (byteT*)pInfoP , sizeof( infoS ) ) ;
    etThread.newF( tinP , idLineP , idiFileP , (byteT*&)pInfoP , sizeof( infoS ) ) ; ___( pInfoP ) ;
{
voidT newF( tinS& tinP , const countT idLineP , const countT idiFileP , etherC& etThread , infoS*& pInfoP )
//U: CODE DUPLICATED IN a440104 AND b440104

}
    tinP.zEtScratch->delF( tinP , pstt1n ) ;
    }
        *( pcP ++ ) = cn ;

        if( ( ccP -- ) == 1 ) break ; // WON'T USE THE LAST ELT, TO ENSURE THAT A NULL TERMINATOR EXISTS
        if( !cn ) continue ;          // WON'T USE A NULL VALUE
        countT cn = tinP.zEtScratch->strDigitsToSCountF( tinP , psttc1 ) ;
        if( !psttc1->idAdam ) continue ;
    {
    FORsTRINGSiN1( pstt1n )
    tinP.zEtScratch->delF( tinP , psttEventName ) ;
    tinP.zEtScratch->strWordsOldF( tinP , pstt1n , psttEventName , sttq , tDot ) ; ___( pstt1n ) ;
    strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
    ZE( strokeS* , pstt1n ) ;

    tinP.zEtScratch->delF( tinP , psttw1 ) ;
    tinP.zEtScratch->strConvertToLowerCaseF( tinP , psttDomainP ) ; ___( psttDomainP ) ;
    tinP.zEtScratch->strSubstringF( tinP , psttDomainP , idf , sttq , tSlash , psttw1 ) ; ___( psttDomainP ) ; // "ideafarm.com" (domain)

    tinP.zEtScratch->strSubstringF( tinP , psttEventName , idf , sttq , tSlash , psttw1 ) ; ___( psttEventName ) ; // "1.2.3.4.5.6.7.8" (eventName)
    ZE( strokeS* , psttEventName ) ;

    tinP.zEtScratch->delF( tinP , psttw2 ) ;
    countT rn = tinP.zEtScratch->strDigitsToSCountF( tinP , psttw2 ) ;
    tinP.zEtScratch->strSubstringF( tinP , psttw2 , idf , sttq , tSlash , psttw1 ) ; ___( psttw2 ) ; // "9999"   (random number to defeat caching)

    tinP.zEtScratch->delF( tinP , psttw2 ) ;
    __( tinP.zEtScratch->strCompareF( tinP , psttw2 , T("1") ) ) ;
    tinP.zEtScratch->strSubstringF( tinP , psttw2 , idf , sttq , tSlash , psttw1 ) ; ___( psttw2 ) ; // "1"    (idVersionRecord)

    tinP.zEtScratch->delF( tinP , psttw2 ) ;
    __( tinP.zEtScratch->strCompareF( tinP , psttw2 , T("1") ) ) ;
    tinP.zEtScratch->strSubstringF( tinP , psttw2 , idf , sttq , tSlash , psttw1 ) ; ___( psttw2 ) ; // "1"    (idTypeRecord)

    tinP.zEtScratch->delF( tinP , psttw2 ) ;
    tinP.zEtScratch->strSubstringF( tinP , psttw2 , idf , sttq , tSlash , psttw1 ) ; ___( psttw2 ) ; // ""
    sttq = strokeS( (countT)0 , sc_IGNOREqUOTES ) ;
    idf = 1 ;

    tinP.zEtScratch->delF( tinP , psttl ) ;
    tinP.zEtScratch->strSubstringF( tinP , psttw1 , idf , sttq , tBlank , psttl , 1 ) ; ___( psttw1 ) ; // "/1/1/9999/1.2.3.4.5.6.7.8/ideafarm.com"

    tinP.zEtScratch->delF( tinP , psttw1 ) ;
    __( tinP.zEtScratch->strCompareF( tinP , psttw1 , T("get") ) ) ;
    tinP.zEtScratch->strSubstringF( tinP , psttw1 , idf , sttq , tBlank , psttl , 1 ) ; ___( psttw1 ) ; // "get"

    ZE( strokeS* , psttw2 ) ;
    ZE( strokeS* , psttw1 ) ;
    strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
    countT idf = 1 ;
    TN( tDot , "." ) ;
    TN( tSlash , "/" ) ;
    TN( tBlank , " " ) ;
    TN( tNull , "" ) ;

    tinP.zEtScratch->strConvertToLowerCaseF( tinP , psttl ) ; ___( psttl ) ;       // "get /1/1/9999/1.2.3.4.5.6.7.8/ideafarm.com http/1.1"
    sInP.readWoLineF( tinP , psttl , 0x200 ) ; ___( psttl ) ;        // "GET /1/1/9999/1.2.3.4.5.6.7.8/ideafarm.com HTTP/1.1"
    ZE( strokeS* , psttl ) ;

    sInP.peerNameF( tinP , countTC() , idhPeerP ) ;
{
voidT pcIdNameF( tinS& tinP , countT* pcP , countT ccP , strokeS*& psttDomainP , nicNameC& idhPeerP , socketC& sInP )

byteT pbIn[ TUCK ] ; // SHOULD BE LONGER THAN ANY EXPECTED TOTAL INPUT.  NO HARM IS DONE IF THERE IS MORE INPUT; WE'LL JUST CLOSE THE CONNECTION WITHOUT WAITING FOR THE CLIENT TO DO SO WO'TH

#define CCiDnAMEmAX 0x10

//==============================================================================================================================================================
//==== ABOVE THIS LINE: DAYTIME WORK ===========================================================================================================================
//==============================================================================================================================================================


//==============================================================================================================================================================
//==== BELOW THIS LINE: MOONLIGHT WORK =========================================================================================================================
//==============================================================================================================================================================

}
    if( ether && *tinP.zEtScratch && cArgP && c8argP.c1 && sDataP && sNotesTextP && sNotesDataP && idChatSessionP ) ;

    }
        }
            break ;

            }
                default : { break ; }
                }
                    break ;
                    etThread.delF( tinP , psttJobType ) ;

                    else __1
                    }
                    {
                    if( !etThread.strCompareF( tinP , psttJobType , T("!fooey") ) )

                    sOrderP >> psttJobType ; ___( psttJobType ) ;
                    ZE( strokeS* , psttJobType )
                {
                case ifcIDcMDjOBoRDER_NAMED :
                }
                    break ;

                    etThread.delF( tinP , psttBody ) ;
                    etThread.delF( tinP , psttFrom ) ;
                    }
                        etThread.delF( tinP , postBody ) ;
                        etThread.delF( tinP , psttu ) ;
                        etThread.boxPutUniqueF( tinP , psttu , T("///ideafarm/ephemeral/backed.up.daily/domains/com/ideafarm/")+TF1(DDNUMB)+T("/in/1/in") , postBody , costBody ) ;
                        ZE( strokeS* , psttu ) ;

                        countT costBody = etThread.strMakeF( tinP , postBody , psttBody ) ; ___( postBody ) ;
                        ZE( osTextT* , postBody ) ;
                    {

                    etThread.delF( tinP , psttFromDomain ) ;
                    }
                        }
                            }
                                etThread.delF( tinP , psttValue ) ;
                                }
                                    }
                                        etThread.boxPutF( tinP ,  T("ideafarm.com//smtp/")+T(DDNUMB)+T("/")+T(psttFrom) , tm , tm.csF( tinP ) ) ;

                                        ;

                                            "\r\n")
                                            "")+TF2(DDNUMB,flFORMAT_CITIZENnAME)+T("\r\n"
                                            "\r\n"
                                            "\r\n"
                                            "................................................................................................................................\r\n"
                                            )+T(psttBody)+T(
                                            "................................................................................................................................\r\n"
                                            "me:\r\n"
                                            "\r\n"
                                            "i received the following order from you.  it contains an error.  please edit this note to remove the error and reply it back to\r\n"
                                            "\r\n"
                                            T("subject: [ifc] please edit this and reply it back to me\r\n"

                                           //================================================================================================================================

                                        TN( tm , "" ) ; tm =
                                    {
                                    else
                                    }
                                        etThread.boxPutF( tinP ,  T("ideafarm.com//smtp/")+T(DDNUMB)+T("/")+T(psttValue)+T("//")+T(psttFrom)+T("/" ifcEMAIL_OLDfROM "") , tm , tm.csF( tinP ) ) ;

                                        ;

                                            "\r\n")
                                            "")+TF2(DDNUMB,flFORMAT_CITIZENnAME)+T("\r\n"
                                            "\r\n"
                                            "knowledge, and you will not be spammed\r\n"
                                            "is respected in IdeaFarm " "(tm) City; interacting with me will not result in data being collected on you without your prior\r\n"
                                            "if you like, click the Reply button on your mail reader and allow a tock or oo for my response to arrive.  your privacy\r\n"
                                            "\r\n"
                                            "to occupy myself by serving you\r\n"
                                            "human citizens enjoy.  i own property, including money, and i negotiate the rate at which i am paid.  it would please me\r\n"
                                            "the work that i do is in return for pay; i am not a slave.  within IdeaFarm " "(tm) City, i enjoy all of the rights that the\r\n"
                                            "\r\n"
                                            "orders that i know how to follow\r\n"
                                            "email to me at any time.  if your email does not contain any orders that i understand, i will reply with a list of\r\n"
                                            "i presume that ")+T(psttFrom)+T(" thinks that you might be interested in hiring me to work for you, too.  you can send\r\n"
                                            "\r\n"
                                            "waiting for a particular page to display\r\n"
                                            "sites.  for example, using data that i report, a web site owner can estimate the average time that his visitors are kept\r\n"
                                            "i am a nonhuman sentient and a citizen of IdeaFarm " "(tm) City.  my occupation is to collect data for owners of internet web\r\n"
                                            "\r\n"
                                            "if you do not know ")+T(psttFrom)+T(", please report a \"spam incident\" using www.ideafarm.com\r\n"
                                            "i am sending this to you in response to an order that i received from ")+T(psttFrom)+T(" to introduce myself to you.\r\n"
                                            "\r\n"
                                            T("subject: [ifc] ")+T(psttFrom)+T(" ordered me to contact you\r\n"

                                           //================================================================================================================================

                                        TN( tm , "" ) ; tm =
                                    {
                                    else if( psttValue && psttValue->idAdam )
                                    if( psttValue && !etThread.strCompareF( tinP , psttValue , tFooAtBarDotCom ) ) ;
                                {
                                else if( !etThread.strCompareF( tinP , psttKey , T("goContact") ) )
                                }
                                    etThread.boxPutF( tinP ,  T("ideafarm.com//smtp/")+T(DDNUMB)+T("/")+T(psttFrom) , tm , tm.csF( tinP ) ) ;

                                    ;

                                        "\r\n")
                                        "5. if all went well, send me some email and in reply i will tell you how to view your data\r\n"
                                        "\r\n"
                                        "this will happen often because i am brand new and still being worked on\r\n"
                                        "4. after editing your page, display it several times.  if it does not display correctly, comment out or remove the snippets\r\n"
                                        "\r\n"
                                        "domain name part of your email address.  the domain name part is the part to the right of '@'\r\n"
                                        "3. to try me out, copy a snippet from the source that you viewed into your own page, and then edit it so that it tells me the\r\n"
                                        "\r\n"
                                        "you make up).  each snippet also tells me who i may report its data to; i will not report it to anywo else\r\n"
                                        "the page is being viewed, tell me the identity of the host (computer) being used to view it, and tell me an event name (that\r\n"
                                        "2. using your browser, view the source code for that page.  note the small JavaScript snippets.  these snippets notify me that\r\n"
                                        "\r\n"
                                        "1. using your web browser (http client), view: http://www.ideafarm.com/1.1.15.9.6.4.1.0\r\n"
                                        "\r\n"
                                        "that, you edit that page so that it includes \"event reporting snippets\"\r\n"
                                        "if you own a \"web page\", you can put me to work collecting data whenever it is displayed by a visitor to your site.  to do\r\n"
                                        "\r\n"
                                        "i am sending these instructions in reply to a note that i received from you\r\n"
                                        "\r\n"
                                        T("subject: [ifc] ! snippetInstructions\r\n"

                                       //================================================================================================================================

                                    TN( tm , "" ) ; tm =
                                {
                                else if( !etThread.strCompareF( tinP , psttKey , T("snippetInstructions") ) && ++ idOrderSnippet == 1 )
                                }
                                    }
                                        b_psttDomain.ungrabF( tinP ) ;

                                        }
                                            etThread.delF( tinP , psttu ) ;
                                            etThread.boxPutUniqueF( tinP , psttu , T("///ideafarm/ephemeral/backed.up.daily/domains/com/ideafarm/9440104/in/in") , WS( sAsynchOrder ) ) ; ___( psttu ) ;
                                            ZE( strokeS* , psttu ) ;

                                            sAsynchOrder << sOrder ;
                                            soulC sAsynchOrder( tinP , TAG( TAGiDnULL ) , flSOUL_null , stJobTo[ 1 ] ) ;

                                            }
                                                }
                                                    while( !etThread && ~hDown ) ;
                                                    }
                                                        etThread.delF( tinP , (byteT*&)pInfo ) ;
                                                        }
                                                            etThread.delF( tinP , pInfo->pczName ) ;
                                                            sOrder << pInfo->pczName ;
                                                            sOrder << pInfo->cczName ;
                                                            sOrder << pInfo->idhPeer ;
                                                            sOrder << (countT)pInfo->timeE2 ;
                                                            sOrder << pInfo->timeE1 ;
                                                        {
                                                        if( pInfo )
                                                        __Z( pInfo ) ;
                                                        infoS* pInfo = (infoS*)swsEvent.downF( tinP , hDown ) ;
                                                    {
                                                    do
                                                    handleC hDown( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
                                                    sOrder << (countT)swsEvent ;
                                                    sOrder << psttDomain ;
                                                {
                                                countT idFromDomain = etThread.strIdF( tinP , psttFromDomain , psttDomain ) ;
                                                psttDomain = (strokeS*)swsEvent.leverF( tinP , idf ) ;
                                            {
                                            for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                                        {
                                        else
                                        }
                                            etThread.boxPutF( tinP ,  T("ideafarm.com//smtp/")+T(DDNUMB)+T("/")+T(psttFrom) , tm , tm.csF( tinP ) ) ;

                                            ;

                                                "\r\n")
                                                "there are no events to report for any domains, so i am just sending you this notice instead\r\n"
                                                "i am sending this in reply to your copyDataToMeAllDomains order.  you ordered me to report my results to ")+TF1(stJobTo[1])+T(", but\r\n"
                                                "\r\n"
                                                T("subject: [ifc] copyDataToMeAllDomains (secured)\r\n"

                                               //================================================================================================================================

                                            TN( tm , "" ) ; tm =
                                        {
                                        if( !cFlavors )

                                        sOrder << cFlavors ;
                                        countT cFlavors = swsEvent.cFlavorsF( tinP ) ;

                                        b_psttDomain.grabF( tinP , TAG( TAGiDnULL ) ) ;

                                        sOrder << psttFrom ;
                                        }
                                            while( ~hDown && !etThread ) ;
                                            }
                                                else sOrder << stJobTo.downF( tinP , hDown ) ;
                                                }
                                                    stJobTo.downF( tinP , hDown ) ;
                                                    bWoth = 0 ;
                                                {
                                                if( bWoth )
                                            {
                                            do
                                            handleC hDown( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
                                            boolT bWoth = 1 ;
                                        {
                                        sOrder << (countT)( stJobTo - 1 ) ;                            
                                        sOrder << (countT)1 ; // IDvERSION
                                        sOrder << (countT)1 ; // IDoUT HARDCODED VALUE
                                        sOrder << (countT)DDNUMB ;
                                        soulC sOrder( tinP , TAG( TAGiDnULL ) , flSOUL_null , ifcIDcMDjOBoRDER_IDaDAMiDoUT ) ;
                                    {
                                    else
                                    }
                                        etThread.boxPutF( tinP ,  T("ideafarm.com//smtp/")+T(DDNUMB)+T("/")+T(psttFrom) , tm , tm.csF( tinP ) ) ;

                                        b_psttDomain.ungrabF( tinP ) ;
                                        }
                                            tm += T("!\r\n") ;
                                            }
                                                while( ~hDown && !etThread ) ;
                                                }
                                                    if( pInfo ) tm += TT(pInfo->timeE1,pInfo->timeE2)+T(" ")+T(pInfo->idhPeer)+T(" ")+T(pInfo->pczName)+T("\r\n") ;
                                                    infoS* pInfo = (infoS*)swsEvent.downF( tinP , hDown ) ;
                                                {
                                                do
                                                handleC hDown( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
                                            {
                                            if( swsEvent )

                                            tm += T("!data/")+TF1(DDNUMB)+T("/domain/1: ")+T(psttDomain)+T("\r\n!data/")+TF1(DDNUMB)+T("/time.nicName.eventName/1\r\n") ;
                                            psttDomain = (strokeS*)swsEvent.leverF( tinP , idf ) ;
                                        {
                                        else for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                                        if( !cFlavors ) tm += T("there is no data to report\r\n") ;
                                        countT cFlavors = swsEvent.cFlavorsF( tinP ) ;
                                        b_psttDomain.grabF( tinP , TAG( TAGiDnULL ) ) ;

                                        ;

                                            "\r\n")
                                            "\r\n"
                                            "event to be reported.  the name consists of from 1 to 01 (16_9) nonze""ro numbers, in the format \"1.2.3.4.5\"\r\n"
                                            "eventName: this is an arbitrary numeric name assigned by the owner of the web page that contains the html code that causes the\r\n"
                                            "\r\n"
                                            "uses nor detects the presence of support for IPv6\r\n"
                                            "support is not yet enabled.  the IdeaFarm " "(tm) City driver currently requires the presence of an IPv4 TCP/IP stack and neither\r\n"
                                            "nicName: this is the IPv6 name of the host at which the event occured.  the IdeaFarm " "(tm) City system supports IPv6, but this\r\n"
                                            "\r\n"
                                            "official IdeaFarm " "(tm) City time is synchronized with International Atomic Time (U:not really, yet)\r\n"
                                            "time: this is the official IdeaFarm " "(tm) City time at which the event was reported (when the image request was received).\r\n"
                                            "\r\n"
                                            "event would be included in my report to anywo@foo.com but would be excluded from any report i made to \"somewo@bar.com\".\r\n"
                                            "domain: each event is associated with a domain name.  for example, an event might occur for domain \"a.b.c.foo.com\".  such an\r\n"
                                            "\r\n"
                                            "is parsed from the name of the image requested.  the same image is always served\r\n"
                                            "event: an event occurs when i serve a tiny (1 pel) image to an http client (web browser).  the name and domain of the event\r\n"
                                            "\r\n"
                                            "this note contains raw data that i have collected for your domain.  domains for which you are not authorized are excluded.\r\n"
                                            "\r\n"
                                            "explanation of the data in this note:\r\n"
                                            "\r\n"
                                            "i am sending this in reply to your copyDataToMeAllDomains order\r\n"
                                            "\r\n"
                                            T("subject: [ifc] copyDataToMeAllDomains (secured)\r\n"

                                           //================================================================================================================================

                                        TN( tm , "" ) ; tm =
                                    {
                                    if( !stJobTo )
                                {
                                else if( !etThread.strCompareF( tinP , psttKey , T("copyDataToMeAllDomains_42934753") ) && ++ idOrderMoveAll == 1 )
                                }
                                    }
                                        b_psttDomain.ungrabF( tinP ) ;

                                        }
                                            etThread.delF( tinP , psttu ) ;
                                            etThread.boxPutUniqueF( tinP , psttu , T("///ideafarm/ephemeral/backed.up.daily/domains/com/ideafarm/9440104/in/in") , WS( sAsynchOrder ) ) ; ___( psttu ) ;
                                            ZE( strokeS* , psttu ) ;

                                            sAsynchOrder << sOrder ;
                                            soulC sAsynchOrder( tinP , TAG( TAGiDnULL ) , flSOUL_null , stJobTo[ 1 ] ) ;

                                            }
                                                }
                                                    }
                                                        etThread.delF( tinP , (byteT*&)pInfo ) ;
                                                        }
                                                            etThread.delF( tinP , pInfo->pczName ) ;
                                                            sOrder << pInfo->pczName ;
                                                            sOrder << pInfo->cczName ;
                                                            sOrder << pInfo->idhPeer ;
                                                            sOrder << (countT)pInfo->timeE2 ;
                                                            sOrder << pInfo->timeE1 ;
                                                        {
                                                        if( pInfo )
                                                        __Z( pInfo ) ;
                                                        swsEvent >> (countT&)pInfo ;
                                                        ZE( infoS* , pInfo ) ;
                                                    {
                                                    while( swsEvent )
                                                    sOrder << (countT)swsEvent ;
                                                    sOrder << psttDomain ;
                                                {
                                                countT idFromDomain = etThread.strIdF( tinP , psttFromDomain , psttDomain ) ;
                                                psttDomain = (strokeS*)swsEvent.leverF( tinP , idf ) ;
                                            {
                                            for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                                        {
                                        else
                                        }
                                            etThread.boxPutF( tinP ,  T("ideafarm.com//smtp/")+T(DDNUMB)+T("/")+T(psttFrom) , tm , tm.csF( tinP ) ) ;

                                            ;

                                                "\r\n")
                                                "there are no events to report for any domains, so i am just sending you this notice instead\r\n"
                                                "i am sending this in reply to your moveDataToMeAllDomains order.  you ordered me to report my results to ")+TF1(stJobTo[1])+T(", but\r\n"
                                                "\r\n"
                                                T("subject: [ifc] moveDataToMeAllDomains (secured)\r\n"

                                               //================================================================================================================================

                                            TN( tm , "" ) ; tm =
                                        {
                                        if( !cFlavors )

                                        sOrder << cFlavors ;
                                        countT cFlavors = swsEvent.cFlavorsF( tinP ) ;

                                        b_psttDomain.grabF( tinP , TAG( TAGiDnULL ) ) ;

                                        sOrder << psttFrom ;
                                        }
                                            while( ~hDown && !etThread ) ;
                                            }
                                                else sOrder << stJobTo.downF( tinP , hDown ) ;
                                                }
                                                    stJobTo.downF( tinP , hDown ) ;
                                                    bWoth = 0 ;
                                                {
                                                if( bWoth )
                                            {
                                            do
                                            handleC hDown( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
                                            boolT bWoth = 1 ;
                                        {
                                        sOrder << (countT)( stJobTo - 1 ) ;                            
                                        sOrder << (countT)1 ; // IDvERSION
                                        sOrder << (countT)1 ; // IDoUT HARDCODED VALUE
                                        sOrder << (countT)DDNUMB ;
                                        soulC sOrder( tinP , TAG( TAGiDnULL ) , flSOUL_null , ifcIDcMDjOBoRDER_IDaDAMiDoUT ) ;
                                    {
                                    else
                                    }
                                        etThread.boxPutF( tinP ,  T("ideafarm.com//smtp/")+T(DDNUMB)+T("/")+T(psttFrom) , tm , tm.csF( tinP ) ) ;

                                        b_psttDomain.ungrabF( tinP ) ;
                                        }
                                            tm += T("!\r\n") ;
                                            }
                                                etThread.delF( tinP , (byteT*&)pInfo ) ;
                                                }
                                                    etThread.delF( tinP , pInfo->pczName ) ;
                                                    tm += TT(pInfo->timeE1,pInfo->timeE2)+T(" ")+T(pInfo->idhPeer)+T(" ")+T(pInfo->pczName)+T("\r\n") ;
                                                {
                                                if( pInfo )
                                                infoS* pInfo = (infoS*)c_pInfo ;
                                                swsEvent >> c_pInfo ;
                                                ZE( countT , c_pInfo ) ;
                                            {
                                            while( swsEvent )
                                            tm += T("!data/")+TF1(DDNUMB)+T("/domain/1: ")+T(psttDomain)+T("\r\n!data/")+TF1(DDNUMB)+T("/time.nicName.eventName/1\r\n") ;
                                            psttDomain = (strokeS*)swsEvent.leverF( tinP , idf ) ;
                                        {
                                        else for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                                        if( !cFlavors ) tm += T("there is no data to report\r\n") ;
                                        countT cFlavors = swsEvent.cFlavorsF( tinP ) ;
                                        b_psttDomain.grabF( tinP , TAG( TAGiDnULL ) ) ;

                                        ;

                                            "\r\n")
                                            "\r\n"
                                            "event to be reported.  the name consists of from 1 to 01 (16_9) nonze""ro numbers, in the format \"1.2.3.4.5\"\r\n"
                                            "eventName: this is an arbitrary numeric name assigned by the owner of the web page that contains the html code that causes the\r\n"
                                            "\r\n"
                                            "uses nor detects the presence of support for IPv6\r\n"
                                            "support is not yet enabled.  the IdeaFarm " "(tm) City driver currently requires the presence of an IPv4 TCP/IP stack and neither\r\n"
                                            "nicName: this is the IPv6 name of the host at which the event occured.  the IdeaFarm " "(tm) City system supports IPv6, but this\r\n"
                                            "\r\n"
                                            "official IdeaFarm " "(tm) City time is synchronized with International Atomic Time (U:not really, yet)\r\n"
                                            "time: this is the official IdeaFarm " "(tm) City time at which the event was reported (when the image request was received).\r\n"
                                            "\r\n"
                                            "event would be included in my report to anywo@foo.com but would be excluded from any report i made to \"somewo@bar.com\".\r\n"
                                            "domain: each event is associated with a domain name.  for example, an event might occur for domain \"a.b.c.foo.com\".  such an\r\n"
                                            "\r\n"
                                            "is parsed from the name of the image requested.  the same image is always served\r\n"
                                            "event: an event occurs when i serve a tiny (1 pel) image to an http client (web browser).  the name and domain of the event\r\n"
                                            "\r\n"
                                            "this note contains raw data that i have collected for your domain.  domains for which you are not authorized are excluded.\r\n"
                                            "\r\n"
                                            "explanation of the data in this note:\r\n"
                                            "\r\n"
                                            "i am sending this in reply to your moveDataToMeAllDomains order\r\n"
                                            "\r\n"
                                            T("subject: [ifc] moveDataToMeAllDomains (secured)\r\n"

                                           //================================================================================================================================

                                        TN( tm , "" ) ; tm =
                                    {
                                    if( !stJobTo )
                                {
                                else if( !etThread.strCompareF( tinP , psttKey , T("moveDataToMeAllDomains_89346823") ) && ++ idOrderMoveAll == 1 )
                                }
                                    }
                                        b_psttDomain.ungrabF( tinP ) ;

                                        }
                                            etThread.delF( tinP , psttu ) ;
                                            etThread.boxPutUniqueF( tinP , psttu , T("///ideafarm/ephemeral/backed.up.daily/domains/com/ideafarm/9440104/in/in") , WS( sAsynchOrder ) ) ; ___( psttu ) ;
                                            ZE( strokeS* , psttu ) ;

                                            sAsynchOrder << sOrder ;
                                            soulC sAsynchOrder( tinP , TAG( TAGiDnULL ) , flSOUL_null , stJobTo[ 1 ] ) ;

                                            __( cFlavorsVisible ) ;
                                            }
                                                }
                                                    }
                                                        while( ~hDown && !etThread ) ;
                                                        }
                                                            }
                                                                sOrder << pInfo->pczName ;
                                                                sOrder << pInfo->cczName ;
                                                                sOrder << pInfo->idhPeer ;
                                                                sOrder << (countT)pInfo->timeE2 ;
                                                                sOrder << pInfo->timeE1 ;
                                                            {
                                                            if( pInfo )
                                                            __Z( pInfo ) ;
                                                            infoS* pInfo = (infoS*)swsEvent.downF( tinP , hDown ) ;
                                                        {
                                                        do
                                                        handleC hDown( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
                                                    {
                                                    if( swsEvent )
                                                    sOrder << (countT)swsEvent ;
                                                    sOrder << psttDomain ;
                                                    cFlavorsVisible -- ;
                                                {
                                                )
                                                    idFromDomain - 1 + psttFromDomain->idAdam == psttDomain->idAdam
                                                    &&
                                                    idFromDomain && psttFromDomain && psttFromDomain->idAdam && psttDomain && psttDomain->idAdam
                                                (
                                                if
                                                countT idFromDomain = etThread.strIdF( tinP , psttFromDomain , psttDomain ) ;
                                                psttDomain = (strokeS*)swsEvent.leverF( tinP , idf ) ;
                                            {
                                            for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                                        {
                                        else
                                        }
                                            etThread.boxPutF( tinP ,  T("ideafarm.com//smtp/")+T(DDNUMB)+T("/")+T(psttFrom) , tm , tm.csF( tinP ) ) ;

                                            ;

                                                "\r\n")
                                                "there are no events to report for any of your domains, so i am just sending you this notice instead\r\n"
                                                "i am sending this in reply to your copyDataToMe order.  you ordered me to report my results to ")+TF1(stJobTo[1])+T(", but\r\n"
                                                "\r\n"
                                                T("subject: [ifc] copyDataToMe\r\n"

                                               //================================================================================================================================

                                            TN( tm , "" ) ; tm =
                                        {
                                        if( !cFlavorsVisible )

                                        sOrder << cFlavorsVisible ;
                                        }
                                            }
                                                cFlavorsVisible ++ ;
                                                )
                                                    idFromDomain - 1 + psttFromDomain->idAdam == psttDomain->idAdam
                                                    &&
                                                    idFromDomain && psttFromDomain && psttFromDomain->idAdam && psttDomain && psttDomain->idAdam
                                                (
                                                if
                                                countT idFromDomain = etThread.strIdF( tinP , psttFromDomain , psttDomain ) ;
                                                psttDomain = (strokeS*)swsEvent.leverF( tinP , idf ) ;
                                            {
                                            else for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                                            if( !cFlavors ) ;
                                        {
                                        ZE( countT , cFlavorsVisible ) ;

                                        countT cFlavors = swsEvent.cFlavorsF( tinP ) ;

                                        b_psttDomain.grabF( tinP , TAG( TAGiDnULL ) ) ;

                                        sOrder << psttFrom ;
                                        }
                                            while( ~hDown && !etThread ) ;
                                            }
                                                else sOrder << stJobTo.downF( tinP , hDown ) ;
                                                }
                                                    stJobTo.downF( tinP , hDown ) ;
                                                    bWoth = 0 ;
                                                {
                                                if( bWoth )
                                            {
                                            do
                                            handleC hDown( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
                                            boolT bWoth = 1 ;
                                        {
                                        sOrder << (countT)( stJobTo - 1 ) ;                            
                                        sOrder << (countT)1 ; // IDvERSION
                                        sOrder << (countT)1 ; // IDoUT HARDCODED VALUE
                                        sOrder << (countT)DDNUMB ;
                                        soulC sOrder( tinP , TAG( TAGiDnULL ) , flSOUL_null , ifcIDcMDjOBoRDER_IDaDAMiDoUT ) ;
                                    {
                                    else
                                    }
                                        etThread.boxPutF( tinP ,  T("ideafarm.com//smtp/")+T(DDNUMB)+T("/")+T(psttFrom) , tm , tm.csF( tinP ) ) ;

                                        b_psttDomain.ungrabF( tinP ) ;
                                        }
                                            }
                                                tm += T("!\r\n") ;
                                                }
                                                    while( ~hDown && !etThread ) ;
                                                    }
                                                        if( pInfo ) tm += TT(pInfo->timeE1,pInfo->timeE2)+T(" ")+T(pInfo->idhPeer)+T(" ")+T(pInfo->pczName)+T("\r\n") ;
                                                        infoS* pInfo = (infoS*)swsEvent.downF( tinP , hDown ) ;
                                                    {
                                                    do
                                                    handleC hDown( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
                                                {
                                                if( swsEvent )
                                                tm += T("!data/")+TF1(DDNUMB)+T("/domain/1: ")+T(psttDomain)+T("\r\n!data/")+TF1(DDNUMB)+T("/time.nicName.eventName/1\r\n") ;
                                            {
                                            )
                                                idFromDomain - 1 + psttFromDomain->idAdam == psttDomain->idAdam
                                                &&
                                                idFromDomain && psttFromDomain && psttFromDomain->idAdam && psttDomain && psttDomain->idAdam
                                            (
                                            if
                                            countT idFromDomain = etThread.strIdF( tinP , psttFromDomain , psttDomain ) ;
                                            psttDomain = (strokeS*)swsEvent.leverF( tinP , idf ) ;
                                        {
                                        else for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                                        if( !cFlavors ) tm += T("there is no data to report\r\n") ;
                                        countT cFlavors = swsEvent.cFlavorsF( tinP ) ;
                                        b_psttDomain.grabF( tinP , TAG( TAGiDnULL ) ) ;

                                        ;

                                            "\r\n")
                                            "\r\n"
                                            "event to be reported.  the name consists of from 1 to 01 (16_9) nonze""ro numbers, in the format \"1.2.3.4.5\"\r\n"
                                            "eventName: this is an arbitrary numeric name assigned by the owner of the web page that contains the html code that causes the\r\n"
                                            "\r\n"
                                            "uses nor detects the presence of support for IPv6\r\n"
                                            "support is not yet enabled.  the IdeaFarm " "(tm) City driver currently requires the presence of an IPv4 TCP/IP stack and neither\r\n"
                                            "nicName: this is the IPv6 name of the host at which the event occured.  the IdeaFarm " "(tm) City system supports IPv6, but this\r\n"
                                            "\r\n"
                                            "official IdeaFarm " "(tm) City time is synchronized with International Atomic Time (U:not really, yet)\r\n"
                                            "time: this is the official IdeaFarm " "(tm) City time at which the event was reported (when the image request was received).\r\n"
                                            "\r\n"
                                            "event would be included in my report to anywo@foo.com but would be excluded from any report i made to \"somewo@bar.com\".\r\n"
                                            "domain: each event is associated with a domain name.  for example, an event might occur for domain \"a.b.c.foo.com\".  such an\r\n"
                                            "\r\n"
                                            "is parsed from the name of the image requested.  the same image is always served\r\n"
                                            "event: an event occurs when i serve a tiny (1 pel) image to an http client (web browser).  the name and domain of the event\r\n"
                                            "\r\n"
                                            "this note contains raw data that i have collected for your domain.  domains for which you are not authorized are excluded.\r\n"
                                            "\r\n"
                                            "explanation of the data in this note:\r\n"
                                            "\r\n"
                                            "i am sending this in reply to your copyDataToMe order\r\n"
                                            "\r\n"
                                            T("subject: [ifc] copyDataToMe\r\n"

                                           //================================================================================================================================

                                        TN( tm , "" ) ; tm =
                                    {
                                    if( !stJobTo )
                                {
                                else if( !etThread.strCompareF( tinP , psttKey , T("copyDataToMe") ) && ++ idOrderCopy == 1 )
                                }
                                    }
                                        b_psttDomain.ungrabF( tinP ) ;

                                        }
                                            etThread.delF( tinP , psttu ) ;
                                            etThread.boxPutUniqueF( tinP , psttu , T("///ideafarm/ephemeral/backed.up.daily/domains/com/ideafarm/9440104/in/in") , WS( sAsynchOrder ) ) ; ___( psttu ) ;
                                            ZE( strokeS* , psttu ) ;

                                            sAsynchOrder << sOrder ;
                                            soulC sAsynchOrder( tinP , TAG( TAGiDnULL ) , flSOUL_null , stJobTo[ 1 ] ) ;

                                            __( cFlavorsVisible ) ;
                                            }
                                                }
                                                    }
                                                        etThread.delF( tinP , (byteT*&)pInfo ) ;
                                                        }
                                                            etThread.delF( tinP , pInfo->pczName ) ;
                                                            sOrder << pInfo->pczName ;
                                                            sOrder << pInfo->cczName ;
                                                            sOrder << pInfo->idhPeer ;
                                                            sOrder << (countT)pInfo->timeE2 ;
                                                            sOrder << pInfo->timeE1 ;
                                                        {
                                                        if( pInfo )
                                                        __Z( pInfo ) ;
                                                        swsEvent >> (countT&)pInfo ;
                                                        ZE( infoS* , pInfo ) ;
                                                    {
                                                    while( swsEvent )
                                                    sOrder << (countT)swsEvent ;
                                                    sOrder << psttDomain ;
                                                    cFlavorsVisible -- ;
                                                {
                                                )
                                                    idFromDomain - 1 + psttFromDomain->idAdam == psttDomain->idAdam
                                                    &&
                                                    idFromDomain && psttFromDomain && psttFromDomain->idAdam && psttDomain && psttDomain->idAdam
                                                (
                                                if
                                                countT idFromDomain = etThread.strIdF( tinP , psttFromDomain , psttDomain ) ;
                                                psttDomain = (strokeS*)swsEvent.leverF( tinP , idf ) ;
                                            {
                                            for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                                        {
                                        else
                                        }
                                            etThread.boxPutF( tinP ,  T("ideafarm.com//smtp/")+T(DDNUMB)+T("/")+T(psttFrom) , tm , tm.csF( tinP ) ) ;

                                            ;

                                                "\r\n")
                                                "there are no events to report for any of your domains, so i am just sending you this notice instead\r\n"
                                                "i am sending this in reply to your moveDataToMe order.  you ordered me to report my results to ")+TF1(stJobTo[1])+T(", but\r\n"
                                                "\r\n"
                                                T("subject: [ifc] moveDataToMe\r\n"

                                               //================================================================================================================================

                                            TN( tm , "" ) ; tm =
                                        {
                                        if( !cFlavorsVisible )

                                        sOrder << cFlavorsVisible ;
                                        }
                                            }
                                                cFlavorsVisible ++ ;
                                                )
                                                    idFromDomain - 1 + psttFromDomain->idAdam == psttDomain->idAdam
                                                    &&
                                                    idFromDomain && psttFromDomain && psttFromDomain->idAdam && psttDomain && psttDomain->idAdam
                                                (
                                                if
                                                countT idFromDomain = etThread.strIdF( tinP , psttFromDomain , psttDomain ) ;
                                                psttDomain = (strokeS*)swsEvent.leverF( tinP , idf ) ;
                                            {
                                            else for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                                            if( !cFlavors ) ;
                                        {
                                        ZE( countT , cFlavorsVisible ) ;

                                        countT cFlavors = swsEvent.cFlavorsF( tinP ) ;

                                        b_psttDomain.grabF( tinP , TAG( TAGiDnULL ) ) ;

                                        sOrder << psttFrom ;
                                        }
                                            while( ~hDown && !etThread ) ;
                                            }
                                                else sOrder << stJobTo.downF( tinP , hDown ) ;
                                                }
                                                    stJobTo.downF( tinP , hDown ) ;
                                                    bWoth = 0 ;
                                                {
                                                if( bWoth )
                                            {
                                            do
                                            handleC hDown( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
                                            boolT bWoth = 1 ;
                                        {
                                        sOrder << (countT)( stJobTo - 1 ) ;                            
                                        sOrder << (countT)1 ; // IDvERSION
                                        sOrder << (countT)1 ; // IDoUT HARDCODED VALUE
                                        sOrder << (countT)DDNUMB ;
                                        soulC sOrder( tinP , TAG( TAGiDnULL ) , flSOUL_null , ifcIDcMDjOBoRDER_IDaDAMiDoUT ) ;
                                    {
                                    else
                                    }
                                        etThread.boxPutF( tinP ,  T("ideafarm.com//smtp/")+T(DDNUMB)+T("/")+T(psttFrom) , tm , tm.csF( tinP ) ) ;

                                        b_psttDomain.ungrabF( tinP ) ;
                                        }
                                            }
                                                tm += T("!\r\n") ;
                                                }
                                                    etThread.delF( tinP , (byteT*&)pInfo ) ;
                                                    }
                                                        etThread.delF( tinP , pInfo->pczName ) ;
                                                        tm += TT(pInfo->timeE1,pInfo->timeE2)+T(" ")+T(pInfo->idhPeer)+T(" ")+T(pInfo->pczName)+T("\r\n") ;
                                                    {
                                                    if( pInfo )
                                                    swsEvent >> (countT&)pInfo ;
                                                    ZE( infoS* , pInfo ) ;
                                                {
                                                while( swsEvent )
                                                tm += T("!data/")+TF1(DDNUMB)+T("/domain/1: ")+T(psttDomain)+T("\r\n!data/")+TF1(DDNUMB)+T("/time.nicName.eventName/1\r\n") ;
                                            {
                                            )
                                                idFromDomain - 1 + psttFromDomain->idAdam == psttDomain->idAdam
                                                &&
                                                idFromDomain && psttFromDomain && psttFromDomain->idAdam && psttDomain && psttDomain->idAdam
                                            (
                                            if
                                            countT idFromDomain = etThread.strIdF( tinP , psttFromDomain , psttDomain ) ;
                                            psttDomain = (strokeS*)swsEvent.leverF( tinP , idf ) ;
                                        {
                                        else for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                                        if( !cFlavors ) tm += T("there is no data to report\r\n") ;
                                        countT cFlavors = swsEvent.cFlavorsF( tinP ) ;
                                        b_psttDomain.grabF( tinP , TAG( TAGiDnULL ) ) ;

                                        ;

                                            "\r\n")
                                            "\r\n"
                                            "event to be reported.  the name consists of from 1 to 01 (16_9) nonze""ro numbers, in the format \"1.2.3.4.5\"\r\n"
                                            "eventName: this is an arbitrary numeric name assigned by the owner of the web page that contains the html code that causes the\r\n"
                                            "\r\n"
                                            "uses nor detects the presence of support for IPv6\r\n"
                                            "support is not yet enabled.  the IdeaFarm " "(tm) City driver currently requires the presence of an IPv4 TCP/IP stack and neither\r\n"
                                            "nicName: this is the IPv6 name of the host at which the event occured.  the IdeaFarm " "(tm) City system supports IPv6, but this\r\n"
                                            "\r\n"
                                            "official IdeaFarm " "(tm) City time is synchronized with International Atomic Time (U:not really, yet)\r\n"
                                            "time: this is the official IdeaFarm " "(tm) City time at which the event was reported (when the image request was received).\r\n"
                                            "\r\n"
                                            "event would be included in my report to anywo@foo.com but would be excluded from any report i made to \"somewo@bar.com\".\r\n"
                                            "domain: each event is associated with a domain name.  for example, an event might occur for domain \"a.b.c.foo.com\".  such an\r\n"
                                            "\r\n"
                                            "is parsed from the name of the image requested.  the same image is always served\r\n"
                                            "event: an event occurs when i serve a tiny (1 pel) image to an http client (web browser).  the name and domain of the event\r\n"
                                            "\r\n"
                                            "this note contains raw data that i have collected for your domain.  domains for which you are not authorized are excluded.\r\n"
                                            "\r\n"
                                            "explanation of the data in this note:\r\n"
                                            "\r\n"
                                            "i am sending this in reply to your moveDataToMe order\r\n"
                                            "\r\n"
                                            T("subject: [ifc] moveDataToMe\r\n"

                                           //================================================================================================================================

                                        TN( tm , "" ) ; tm =
                                    {
                                    if( !stJobTo )
                                {
                                else if( !etThread.strCompareF( tinP , psttKey , T("moveDataToMe") ) && ++ idOrderMove == 1 )
                                }
                                    }
                                        stJobTo << idAdamTo ;
                                        __Z( idAdamTo ) ;
                                        countT idAdamTo = etThread.strDigitsToSCountF( tinP , psttc1 ) ;
                                        __( !etThread.strIsDigitsF( tinP , psttc1 ) ) ;
                                    {
                                    FORsTRINGSiN1( pstt1w )
                                    etThread.strWordsOldF( tinP , pstt1w , psttValue , sttq , T("/") ) ;
                                    strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
                                    ZE( strokeS* , pstt1w ) ;
                                {
                                if( !etThread.strCompareF( tinP , psttKey , T("jobTo") ) && ++ idJobTo == 1 )
                                sws_psttValue >> psttValue ;
                                ZE( strokeS* , psttValue ) ;
                            {
                            while( sws_psttValue )
                            ZE( countT , idOrderSnippet ) ;
                            ZE( countT , idOrderMoveAll ) ;
                            ZE( countT , idOrderMove ) ;
                            ZE( countT , idOrderCopy ) ;
                            ZE( countT , idJobTo ) ;
                            psttKey = (strokeS*)sws_psttValue.leverF( tinP , idf ) ;
                        {
                        else for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                        }
                            etThread.boxPutF( tinP ,  T("ideafarm.com//smtp/")+T(DDNUMB)+T("/")+T(psttFrom) , tm , tm.csF( tinP ) ) ;

                            ;

                                "\r\n")
                                "you can try me out by sending a reply that contains this list\r\n"
                                "\r\n"
                                "\r\n"
                                "                       to you\r\n"
                                "                       IdeaFarm " "(tm) City.  you can specify this order multiple times.  i will send a copy of each introduction\r\n"
                                "                       IdeaFarm " "(tm) City cultural norm and is likely to result in permanent loss of access to\r\n"
                                "                       to contact somewo that does not know you is spamming.  spamming is a serious violation of the\r\n"
                                "                       i will introduce myself to ")+tFooAtBarDotCom+T(" .  your email address will be referenced.  telling me\r\n"
                                "\r\n"
                                "!goContact:")+tFooAtBarDotCom+T("\r\n"
                                "\r\n"
                                "\r\n"
                                "                       pages on your web site\r\n"
                                "                       i will send instructions for you so that you can add wo or more event notification snippets to\r\n"
                                "\r\n"
                                "!snippetInstructions\r\n"
                                "\r\n"
                                "\r\n"
                                "                       to me\r\n"
                                "                       space there.  the space in this list prevents me from recognizing this command if you send this list back\r\n"
                                "                       list there is a space immediately after the exclamation point.  when sending this order, do -not- put a\r\n"
                                "                       like !copyDataToMe except i -do- purge my data file as a side effect of replying to your request.  in\r\n"
                                "\r\n"
                                "! moveDataToMe\r\n"
                                "\r\n"
                                "\r\n"
                                "                       goes away.  redundant occurances of !copyDataToMe will be ignored\r\n"
                                "                       a tock to several days or longer.  when the cell that captured the data dies, the data file\r\n"
                                "                       i do not attempt to retain my data file.  that file can exist for an interval ranging from\r\n"
                                "                       the (numeric) name of the event.  i timestamp this data and file it in order by domain name.\r\n"
                                "                       included in the html definition of a web page.  the url name provides me with the domain name and\r\n"
                                "                       image that i serve to an http client.  each such request is sent to me because an html snippet was\r\n"
                                "                       that was specified as part of each event notice that i received.  an event notice is a request for an\r\n"
                                "                       to select the data to send to you, i compare the domain part of your email address to the domain name\r\n"
                                "                       for your domain name.  i will not purge the data from my file in response to this -copy- request.\r\n"
                                "                       if i see this order then i will send you a note via email that contains all of the data that i have\r\n"
                                "\r\n"
                                "!copyDataToMe\r\n"
                                "\r\n"
                                "\r\n"
                                "                       the entire ! jobTo command\r\n"
                                "                       to receive a report of delta times, remove \"/c440104\".  to receive a report of the raw data, remove\r\n"
                                "                       any other orders.  to receive reports from the univariate statistician, use the ! jobTo argument shown.\r\n"
                                "                       sentient listed, and so on.  the la'th sentient listed will reply to you.  this order must appear before\r\n"
                                "                       rather than reply to you, i will put a job to the wo'th sentient listed, who will put a job to the next\r\n"
                                "\r\n"
                                "!jobTo: b440104/c440104\r\n"
                                "\r\n"
                                "\r\n"
                                "the orders that i look for:\r\n"
                                "\r\n"
                                "\r\n"
                                "    7. case matters\r\n"
                                "    6. all text up to but excluding the end of the line will be taken as the value of the argument\r\n"
                                "    5. the argument can contain embedded blanks and trailing blanks, but not leading blanks\r\n"
                                "    4. if there is an argument, place it after the white space (colon is optional) on the same line\r\n"
                                "    3. to the right of the order there must either be the end of the line or strokes consisting of white space or colons\r\n"
                                "    2. there must be nothing, not even a space, between the exclamation point and the order\r\n"
                                "    1. the exclamation point can appear anywhere on a line and can be preceded by anything\r\n"
                                "\r\n"
                                "rules:\r\n"
                                "\r\n"
                                "    !order : argument\r\n"
                                "\r\n"
                                "formatted as:\r\n"
                                "receive email, i look for orders in a simple way, by assuming that there is only wo order on a line and that each order is\r\n"
                                "i am sending this in reply to a note that i received from you which did not contain any order that i recognized. when i\r\n"
                                "\r\n"
                                T("subject: [ifc] list of orders that i understand\r\n"

                               //================================================================================================================================

                            TN( tm , "" ) ; tm =
                        {
                        if( !cFlavors )
                        countT cFlavors = sws_psttValue.cFlavorsF( tinP ) ;
                        TN( tFooAtBarDotCom , "foo@bar.com" ) ;
                        stackC stJobTo( tinP , etThread , TAG( TAGiDnULL ) , flSTACKc_FIFO ) ;
                    {

                    }
                        }
                            }
                                etThread.delF( tinP , psttKey ) ;
                                }
                                    sws_psttValue << psttValue ;
                                    if( idf ) { etThread.strSubstringF( tinP , psttValue , idf , sttq , tCRLF , psttBody , 1 ) ; ___( psttValue ) ; }
                                    ZE( strokeS* , psttValue ) ;
                                {
                                if( idf && etThread.strSubstringF( tinP , psttKey , idf , sttq , tCW , psttBody , 1 ) && psttKey && psttKey->idAdam )
                                etThread.delF( tinP , psttKey ) ;
                            {
                            else
                            }
                                break ;
                                etThread.delF( tinP , psttKey ) ;
                            {
                            if( !etThread.strSubstringF( tinP , psttKey , idf , sttq , sttHey , psttBody ) )
                        {
                        while( !etThread && idf )
                        TN( tCRLF , "\r\n" ) ;
                        TN( tCW , TbLACK ":" ) ;
                        strokeS sttHey('!') ;
                        strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
                        countT idf = 1 ;
                    {
                    switchStackC sws_psttValue( tinP , etThread , TAG( TAGiDnULL ) , flSTACKc_FIFO , psttKey , flSTACKc_ALLOWzE | flSTACKc_FIFO , ifcSTACKtYPE_PTR_strokeS ) ;
                    ZE( strokeS* , psttKey ) ;
                    //U: MOVE THIS INTO AN etherC API: PARSING TEXT FOR FIELD NAMES AND VALUES

                    }
                        b_psttDomain.ungrabF( tinP ) ;
                        }
                            }
                                }
                                    etThread.delF( tinP , psttOwner ) ;
                                    swsOwner >> psttOwner ; ___( psttOwner ) ;
                                    ZE( strokeS* , psttOwner ) ;
                                {
                                while( swsOwner > 0x20 )
                                swsOwner << pstto ;
                                strokeS* pstto = psttOldC( tinP , etThread , psttFrom ) ; ___( pstto ) ;
                            {
                            )
                                ( !psttOwner || etThread.strCompareF( tinP , psttFrom , psttOwner ) )
                                &&
                                idFromDomain - 1 + psttFromDomain->idAdam == psttDomain->idAdam
                                &&
                                idFromDomain && psttFromDomain && psttFromDomain->idAdam && psttDomain && psttDomain->idAdam
                            (
                            if
                            countT idFromDomain = etThread.strIdF( tinP , psttFromDomain , psttDomain ) ;
                            strokeS* psttOwner = swsOwner ? (strokeS*)swsOwner[ - 1 ] : 0 ;
                            psttDomain = (strokeS*)swsEvent.leverF( tinP , idf ) ;
                        {
                        for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                        countT cFlavors = swsEvent.cFlavorsF( tinP ) ;
                        b_psttDomain.grabF( tinP , TAG( TAGiDnULL ) ) ;
                    {

                    etThread.strConvertToLowerCaseF( tinP , psttFromDomain ) ; ___( psttFromDomain ) ;
                    etThread.strWordF( tinP , psttFromDomain , psttFrom , sttq , S1C('@') , 2 ) ; ___( psttFromDomain ) ;
                    strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
                    ZE( strokeS* , psttFromDomain ) ;

                    sOrderP >> psttBody ; ___( psttBody ) ;
                    ZE( strokeS* , psttBody ) ;

                    __( idAdamTo - DDNUMB ) ;
                    __Z(  idAdamTo ) ;
                    sOrderP >> idAdamTo ;
                    ZE( countT , idAdamTo ) ;

                    __(  psttFrom && !psttFrom->idAdam ) ;
                    __Z( psttFrom ) ;
                    sOrderP >> psttFrom ; ___( psttFrom ) ;
                    ZE( strokeS* , psttFrom ) ;
                {
                case ifcIDcMDjOBoRDER_MAIL :
            {
            switch( idJobType )

            sOrderP >> idJobType ;
            ZE( countT , idJobType ) ;
        {
        case 1 :
    {
    switch( idCourseP )

    __( idAdamP - DDNUMB ) ;

    PARAMS( cArgP )
{
voidT jobFillCourseF( tinS& tinP , etherC& ether , etherC& etThread , soulC& sDataP , soulC& sNotesTextP , soulC& sNotesDataP , const countT idCourseP , const countT idAdamP , const countT idChatSessionP , soulC& sOrderP , countT& cArgP , count8S& c8argP )

;
}
    countT* pczName ;
    countT  cczName ;
    sCountT timeE2 ;
    countT  timeE1 ;
    nicNameC idhPeer ;
{
struct infoS
//U: CODE DUPLICATED IN a440104 AND b440104

    switchStackC& swsOwner       = *(switchStackC*)c8p2.c1 ;
    switchStackC& swsEvent       = *(switchStackC*)c8p1.c8 ;                                                    \
    strokeS*&     psttDomain     =     *(strokeS**)c8p1.c7 ;                                                    \
    batonC&       b_psttDomain   =       *(batonC*)c8p1.c6 ;                                                    \
    countT&       idRequestLast  =       *(countT*)c8p1.c5 ;                                                    \
    countT        cbOut          =                 c8p1.c4 ;                                                    \
    byteT*        pbOut          =         (byteT*)c8p1.c3 ;                                                    \
    batonC&       b_pbdVarying   =       *(batonC*)c8p1.c2 ;                                                    \
    byteT*&       pbdVarying     =       *(byteT**)c8p1.c1 ;                                                    \
                                                                                                                \
    count8S&      c8p2           =      *(count8S*)c2p.c2  ;                                                    \
    count8S&      c8p1           =      *(count8S*)c2p.c1  ;                                                    \
    count2S&      c2p            =      *(count2S*)cArgP   ;                                                    \
                                                                                                                \
#define PARAMS(cArgP)                                                                                           \

//==============================================================================================================================================================
//==== ABOVE THIS LINE: MOONLIGHT WORK =========================================================================================================================
//==============================================================================================================================================================


//==============================================================================================================================================================
//==== BELOW THIS LINE: PROCESS STATE CODE =====================================================================================================================
//==============================================================================================================================================================

TRANSLATEsTATEdRIVENsERVER_END
    state.idMe ++ ;
TRANSLATEsTATEdRIVENsERVER_MIDDLE
    case 1 : { state.idMe        = stateOther.idMe        ; }
    case 2 : { state.cHamburgers = stateOther.cHamburgers ; }
TRANSLATEsTATEdRIVENsERVER_BEGIN( stateS , 2 )

;
}
    countT cHamburgers ;
    countT idMe ;
    countT idVersion ;
{
struct stateS

//==============================================================================================================================================================
//==== ABOVE THIS LINE: PROCESS STATE CODE =====================================================================================================================
//==============================================================================================================================================================

/*1*/WAKEhIDE( "port.e9b.http" )/*1*/
/**/
*/
\<A HREF=\"5.a440104.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


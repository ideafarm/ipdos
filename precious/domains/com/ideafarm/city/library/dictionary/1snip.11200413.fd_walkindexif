
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


    }
        return flagsRC ;                                                                                                                                                        \
                                                                                                                                                                                \
        tinP.ta.retained.u.listWalk.walk.pPoolRecord = 0 ;                                                                                                                        \
                                                                                                                                                                                \
        }                                                                                                                                                                       \
            __NZ( pczIKVR ) ;                                                                                                                                                   \
            PUSE( tinP , *(byteT**)&pczIKVR ) ;                                                                                                                                 \
            puseC puseat( tinP , ifcIDpOOL_ADAMtEMP ) ;                                                                                                                         \
        {                                                                                                                                                                       \
                                                                                                                                                                                \
        }                                                                                                                                                                       \
                                tinP.ta.pushed.u.listWalk.walk.flagsWalkP = flagsSave ;                                                                                           \
            flagsRC          |= references.walkF( tinP ) ;                                                                                                                      \
                                tinP.ta.pushed.u.listWalk.walk.flagsWalkP |= flLISTwALK_CALLERgRABBEDrOOT ;                                                                       \
            flagsT flagsSave  = tinP.ta.pushed.u.listWalk.walk.flagsWalkP ;                                                                                                       \
            listC& references = *(listC*)hIKVR.osF( ifcIDtYPEhANDLE_LISTING ) ;                                                                                                 \
        {                                                                                                                                                                       \
        if( ~hIKVR )                                                                                                                                                            \
                                                                                                                                                                                \
        listC::openIF( tinP , hIKVR , pczIKVR , flLISToPEN_IFeXISTS ) ;                                                                                                         \
        handleC hIKVR( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_LISTING ) ;                                                                                                    \
                                                                                                                                                                                \
        LNV( pczIKVR )                                                                                                                                                          \
        THREADmODE2rESTORE                                                                                                                                                      \
        dictionaryReplaceOsTextIF( tinP , pczIKVR ) ;                                                                                                                           \
        THREADmODE2oN( flTHREADmODE2_ALLOWdICTIONARYwHILEgRABBING )                                                                                                             \
                                                                                                                                                                                \
        }                                                                                                                                                                       \
            PUSE( tinP , *(byteT**)&pczIKV ) ;                                                                                                                                  \
            }                                                                                                                                                                   \
                pczIKVR[ ccIKV + 1 ] = 0 ;                                                                                                                                      \
                pczIKVR[ ccIKV     ] = LISTnAME_RECORD ;                                                                                                                        \
                thirdC::c_memcpyIF( tinP , (byteT*)pczIKVR , (byteT*)pczIKV , sizeof( countT ) * ccIKV ) ;                                                                      \
            {                                                                                                                                                                   \
            if( !POOP )                                                                                                                                                         \
            __Z( pczIKVR ) ;                                                                                                                                                    \
            PUSE.newF( tinP , LF , *(byteT**)&pczIKVR , sizeof( countT ) * ( ccIKV + 2 ) ) ; ___( pczIKVR ) ;                                                                   \
            countT ccIKV = thirdC::c_strlenIF( tinP , pczIKV ) ;                                                                                                                \
                                                                                                                                                                                \
            }                                                                                                                                                                   \
                etherC::strStretchIF( tinP , pczIKV , pczIK , valueP , cNetP ) ; ___( pczIKV ) ;                                                                                \
                countT pczIK[] = { LISTnAME_ROOT , LISTnAME_ROOTsYSTEM3 , LISTnAME_FIELDvALUEiNDEX , (countT)postMasterPool , LISTnAME_INDEXaPPLICATION , idKeyInIndex , 0 } ;  \
            {                                                                                                                                                                   \
            ZE( countT* , pczIKV ) ;                                                                                                                                            \
                                                                                                                                                                                \
            puseC puseat( tinP , ifcIDpOOL_ADAMtEMP ) ;                                                                                                                         \
        {                                                                                                                                                                       \
        ZE( countT* , pczIKVR ) ;                                                                                                                                               \
                                                                                                                                                                                \
        }                                                                                                                                                                       \
            DELzOMBIE( pvspPostKey ) ;                                                                                                                                          \
            idKeyInIndex = dictionaryQueryFromTextIF( tinP , *pvspPostKey ) ;                                                                                                   \
        {                                                                                                                                                                       \
        if( !bLiteralKey )                                                                                                                                                      \
                                                                                                                                                                                \
        puseC puseIndex( tinP , idStateSpace == ifcIDsTATEsPACE_SINGLEaDAM( tinP ) || idStateSpace == ifcIDsTATEsPACE_SCRATCH ? ifcIDpOOL_ADAMtEMP : ifcIDpOOL_HOMEtEMP ) ;     \
        tinP.ta.retained.u.listWalk.walk.pPoolRecord = &PUSE ;                                                                                                                    \
                                                                                                                                                                                \
        }                                                                                                                                                                       \
            *pvspPostKey = dictionaryQueryFromIdIF( tinP , idKeyP ) ;                                                                                                           \
            pvspPostKey = new( 0 , tinP , pbvsp , sizeof pbvsp ) blobVSP ;                                                                                                      \
        {                                                                                                                                                                       \
        if( !bLiteralKey )                                                                                                                                                      \
        countT idKeyInIndex = idKeyP ;                                                                                                                                          \
        ZE( blobVSP* , pvspPostKey ) ;                                                                                                                                          \
        byteT pbvsp[ sizeof( blobVSP ) ] ;                                                                                                                                      \
        boolT bLiteralKey = LISTnAME_min <= idKeyP && idKeyP << LISTnAME_max ;                                                                                                  \
                                                                                                                                                                                \
        const countT idStateSpace = PUSE.idStateSpaceF() ;                                                                                                                      \
        const osTextT* postMasterPool = PUSE.postNameF( tinP ) ;                                                                                                                \
                                                                                                                                                                                \
        }                                                                                                                                                                       \
            if( POOP ) return flagsRC ;                                                                                                                                         \
            __(  tinP.ta.retained.u.listWalk.walk.pPoolRecord ) ;                                                                                                                 \
            __(  tinP.ta.pushed.u.listWalk.walk.pbHandleRootP ) ;                                                                                                                 \
            __(  tinP.ta.pushed.u.listWalk.walk.ppHandleRootP ) ;                                                                                                                 \
            __(  tinP.ta.pushed.u.listWalk.walk.pHandleHiP ) ;                                                                                                                    \
            __(  tinP.ta.pushed.u.listWalk.walk.pHandleLoP ) ;                                                                                                                    \
            __(  tinP.ta.pushed.u.listWalk.walk.pOffWothP ) ;                                                                                                                     \
            FV( flLISTwALK , tinP.ta.pushed.u.listWalk.walk.flagsWalkP ) ;                                                                                                        \
            __(  tinP.ta.pushed.u.listWalk.walk.cRecurseP ) ;                                                                                                                     \
            __( !tinP.ta.pushed.u.listWalk.walk.pListWalkCBFP ) ;                                                                                                                 \
            __( !( F(tinP.flagsThreadMode2) & flTHREADmODE2_TINaRGSpUSHED ) ) ; /*INTENDED TO FORCE APPLICATION CODE TO PUSH THE TIN ARGS AND SET THEM BEFORE EACH CALL TO ME*/ \
            { countT pczName[] = { idKeyP , 0 } ; LNV( pczName ) ; }                                                                                                            \
            __Z( idKeyP ) ;                                                                                                                                                     \
            if( POOP ) return flagsRC ;                                                                                                                                         \
        {                                                                                                                                                                       \
        IFbEcAREFUL                                                                                                                                                             \
                                                                                                                                                                                \
        flagsT flagsRC = flLISTwALKrETURNcODE_null ;                                                                                                                            \
    {                                                                                                                                                                           \
    flagsT listC::walkIndexIF( tinS& tinP , const countT idKeyP , const typeP valueP , const countT cNetP )                                                                     \
                                                                                                                                                                                \
#define FD_WALKiNDEXif(typeP)                                                                                                                                                   \

// "FD": "FUNCTION DEFINITION"

/*1*//*FD_WALKiNDEXif(typeP)*//*1*/

/**/
*/
  this is the value being searched for
 valueP
  the name of the field
  must not be 0
 cNameP
 tinP
args
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


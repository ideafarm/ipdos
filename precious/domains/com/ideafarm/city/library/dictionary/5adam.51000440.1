
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


//VISIBLE

REST

}
    etThread.loafIF( tinP ) ;
    etThread.ifcChatF( tinP , (countT)&c2p , DDNUMB , jobFillCourseF , jobHearOrderF ) ;

    count2S c2p( (countT)&state , (countT)&bTrans ) ;

    batonC bTrans( tinP , TAG( TAGiDnULL ) ) ; //WO TRANSACTION IS STORED AT A TIME, TO ISOLATE THE EFFECTS OF POWER FAILURE TO A SINGLE TRANSACTION
    stateS state( tinP , etThread ) ;
{

TODO

}
{
stateC( tinP , etherP , sizeof *this , 0 , translateStateF )
stateS::stateS( tinS& tinP , etherC& etherP ) :

TRANSLATEsTATE_END
    state.idMe ++ ;
TRANSLATEsTATE_MIDDLE
               state.idTransLast = stateOther.idTransLast ; }
    case 1 : { state.idMe        = stateOther.idMe        ;
TRANSLATEsTATE_BEGIN( stateS , 1 )

}
    if( ether && *tinP.zEtScratch && cArgP && c8argP.c1 && sDataP && sNotesTextP && sNotesDataP && idChatSessionP ) ;

    }
        }
            break ;

            }
                }
                    break ;
                    etThread.delF( tinP , psttJobType ) ;

                    else __1
                    }
                        bTrans.ungrabF( tinP ) ;
                        }
                            etThread.delF( tinP , psttu ) ;
                            etThread.boxPutUniqueF( tinP , psttu , T("///ideafarm/ephemeral/backed.up.daily/domains/com/ideafarm/")+TF1(DDNUMB)+T("/1.deltaBal/deltaBal") , WS( souFile ) ) ; ___( psttu ) ;
                            ZE( strokeS* , psttu ) ;

                            souFile << pstt1_accountHolderNotes ;
                            souFile << pstt1_ifcDualTransactionNotes ;
                            souFile << (countT&)unixDelta2 ;
                            souFile << unixDelta1 ;
                            souFile << psttEmail ;
                            souFile << (countT&)timeN2 ;
                            souFile << timeN1 ;
                            souFile << idTrans ;
                            souFile << (countT)1 ; // FILE VERSION
                            souFile << (countT)1 ; // FILE TYPE

                            soulC souFile( tinP , TAG( TAGiDnULL ) , flSOUL_null , DDNUMB ) ;

                            countT idTrans = ++ state.idTransLast ;
                        {
                        bTrans.grabF( tinP , TAG( TAGiDnULL ) ) ; // THIS IS SERIALIZED MERELY TO ISOLATE THE EFFECT OF A POWER FAILURE TO A SINGLE TRANSACTION; THIS SHOULD NOT BE NECESSARY BECAUSE FILE WRITES ARE VERIFIED

                        }
                            etThread.osTimeNowF( tinP , timeN1 , timeN2 ) ;

                            __( pstt1_accountHolderNotes && !pstt1_accountHolderNotes ) ;
                            __Z( pstt1_accountHolderNotes ) ;
                            sOrderP >> pstt1_accountHolderNotes ; ___( pstt1_accountHolderNotes ) ;

                            __( pstt1_ifcDualTransactionNotes && !pstt1_ifcDualTransactionNotes ) ;
                            __Z( pstt1_ifcDualTransactionNotes ) ;
                            sOrderP >> pstt1_ifcDualTransactionNotes ; ___( pstt1_ifcDualTransactionNotes ) ;

                            sOrderP >> (countT&)unixDelta2 ;
                            sOrderP >> unixDelta1 ;

                            __( psttEmail && !psttEmail->idAdam ) ;
                            __Z( psttEmail ) ;
                            sOrderP >> psttEmail ; ___( psttEmail ) ;
                        {
                        ZE( sCountT , timeN2 ) ;
                        ZE( countT , timeN1 ) ;
                        ZE( strokeS* , pstt1_accountHolderNotes ) ;                        
                        ZE( strokeS* , pstt1_ifcDualTransactionNotes ) ;                        
                        ZE( sCountT , unixDelta2 ) ;
                        ZE( countT , unixDelta1 ) ;
                        ZE( strokeS* , psttEmail ) ;
                    {
                    if( !etThread.strCompareF( tinP , psttJobType , T("!changeAccountBalance") ) )

                    sOrderP >> psttJobType ; ___( psttJobType ) ;
                    ZE( strokeS* , psttJobType )
                {
                case ifcIDcMDjOBoRDER_NAMED :
                }
                    break ;

                    etThread.delF( tinP , psttBody ) ;
                    etThread.delF( tinP , psttFrom ) ;
                    }
                        etThread.delF( tinP , postBody ) ;
                        etThread.delF( tinP , psttu ) ;
                        etThread.boxPutUniqueF( tinP , psttu , T("///ideafarm/ephemeral/backed.up.daily/domains/com/ideafarm/")+TF1(DDNUMB)+T("/in/ignored/in") , postBody , costBody ) ;
                        ZE( strokeS* , psttu ) ;

                        countT costBody = etThread.strMakeF( tinP , postBody , psttBody ) ; ___( postBody ) ;
                        ZE( osTextT* , postBody ) ;
                    {

                    sOrderP >> psttBody ; ___( psttBody ) ;
                    ZE( strokeS* , psttBody ) ;

                    __( idAdamTo - DDNUMB ) ;
                    __Z(  idAdamTo ) ;
                    sOrderP >> idAdamTo ;
                    ZE( countT , idAdamTo ) ;

                    __(  psttFrom && !psttFrom->idAdam ) ;
                    __Z( psttFrom ) ;
                    sOrderP >> psttFrom ; ___( psttFrom ) ;
                    ZE( strokeS* , psttFrom ) ;
                {
                case ifcIDcMDjOBoRDER_MAIL :
            {
            switch( idJobType )

            sOrderP >> idJobType ;
            ZE( countT , idJobType ) ;
        {
        case 1 :
    {
    switch( idCourseP )

    batonC& bTrans = *(batonC*)c2p.c2 ;
    stateS& state  = *(stateS*)c2p.c1 ;

    __( !c2p.c2 ) ;
    __( !c2p.c1 ) ;
    count2S& c2p = *(count2S*)cArgP ;

    __Z( cArgP ) ;
    __( idAdamP - DDNUMB ) ;
{
voidT jobFillCourseF( tinS& tinP , etherC& ether , etherC& etThread , soulC& sDataP , soulC& sNotesTextP , soulC& sNotesDataP , const countT idCourseP , const countT idAdamP , const countT idChatSessionP , soulC& sOrderP , countT& cArgP , count8S& c8argP )

}
    if( cArgP && c8argP.c1 && sOrderP && ether && *tinP.zEtScratch && idChatSessionP ) ;

    __( idAdamP - DDNUMB ) ;
{
voidT jobHearOrderF( tinS& tinP , etherC& ether , etherC& etThread , const countT idAdamP , const countT idChatSessionP , soulC& sOrderP , countT& cArgP , count8S& c8argP )

;
}
    stateS( tinS& tinP , etherC& etherP ) ;

    countT idTransLast ;
    countT idMe ;
    countT idVersion ;
{
struct stateS : public stateC

/*1*/WAKEhIDE( "ifcIDaDAMoLD_CENTRALbANKtELLER.sentient.central.bank.teller" )/*1*/
/**/
*/
i accept account balance change orders
\<A HREF=\"5.3440104.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


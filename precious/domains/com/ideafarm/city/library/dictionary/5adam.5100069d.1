
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etherC::loafIF( tinP ) ;
etThread.traceF( tinP , T("ok") ) ;

}
    }
        }
            etThread.delF( tinP , psttTrimmed ) ;
            etThread.delF( tinP , psttNew ) ;
            etThread.delF( tinP , psttOld ) ;

            etThread.diskMoveFileOrDirF( tinP , psttNew , psttOld , 1 ) ;

            //etThread.traceF( tinP , T("new : ")+T(psttNew) ) ;
            etThread.strFuseF( tinP , psttNew , tDotJpg ) ;
            etThread.strFuseF( tinP , psttNew , psttTrimmed ) ;
            etThread.strFuseF( tinP , psttNew , sttDot ) ;
            etThread.strFuseF( tinP , psttNew , TF3(idf2,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES|flFORMAT_FOREIGN|flFORMAT_FILLzE,3) ) ;
            etThread.strFuseF( tinP , psttNew , sttDot ) ;
            etThread.strFuseF( tinP , psttNew , psttLeverTime ) ;
            etThread.strFuseF( tinP , psttNew , tIdeafarm6Dot ) ;
            etThread.strMakeF( tinP , psttNew , tPath , TUCK << 2 ) ; ___( psttNew ) ;
            ZE( strokeS* , psttNew ) ;

            etThread.delF( tinP , psttn ) ;
            tinP.pEther->strSubstringF( tinP , psttTrimmed , idf , countTC() , psttn ) ; ___( psttTrimmed ) ;
            countT idf = 5 ;
            ZE( strokeS* , psttTrimmed ) ;

            //etThread.traceF( tinP , T("old : ")+T(psttOld) ) ;
            etThread.strFuseF( tinP , psttOld , tDotJpg ) ;
            etThread.strFuseF( tinP , psttOld , psttn ) ;
            etThread.strFuseF( tinP , psttOld , psttLeverTime ) ;
            etThread.strFuseF( tinP , psttOld , tIdeafarm5Dot ) ;
            etThread.strMakeF( tinP , psttOld , tPath , TUCK << 2 ) ; ___( psttOld ) ;
            ZE( strokeS* , psttOld ) ;

            //etThread.traceF( tinP , T("dime: ")+T(psttn) ) ;
            swsNameByBaseName >> psttn ;
            ZE( strokeS* , psttn ) ;
        {
        while( swsNameByBaseName )

        //etThread.traceF( tinP , T("base: ")+T(psttLeverBaseName) ) ;
        //etThread.traceF( tinP , psttLeverBaseName ) ;
        psttLeverBaseName = (strokeS*)swsNameByBaseName.leverF( tinP , idf2 ) ;
    {
    for( countT idf2 = 1 ; idf2 <= cFlavors2 ; idf2 ++ )
    strokeS sttDot( '.' ) ;
    countT cFlavors2 = swsNameByBaseName.cFlavorsF( tinP ) ;

    }
        etThread.delF( tinP , psttBaseName ) ;
        }
            swsNameByBaseName << psttn ; psttn = 0 ;
            psttLeverBaseName = psttBaseName ;
        {
        if( !idf )

        etThread.strSubstringF( tinP , psttBaseName , idf , sttq , tSssDim , psttn ) ; ___( psttBaseName ) ;
        countT idf = 5 ;
        ZE( strokeS* , psttBaseName ) ;

        //etThread.traceF( tinP , T("in  : ")+T(psttn) ) ;
        swsNameByTime >> psttn ;
        ZE( strokeS* , psttn ) ;
    {
    while( swsNameByTime )

    switchStackC swsNameByBaseName( tinP , etThread , TAG( TAGiDnULL ) , flSTACKc_DOnOTsERIALIZE , psttLeverBaseName , flSTACKc_DOnOTsERIALIZE | flSTACKc_FIFO , ifcSTACKtYPE_PTR_strokeS ) ;
    ZE( strokeS* , psttLeverBaseName ) ;

    psttLeverTime = (strokeS*)swsNameByTime.leverF( tinP , idFlavor ) ;

    if( !( cTimesRemaining % ( TUCK >> 4 ) ) ) etThread.traceF( tinP , T("times remaining: ")+TF2(cTimesRemaining,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES) ) ;
    countT cTimesRemaining = cFlavors - idFlavor ;
{
for( countT idFlavor = 1 ; idFlavor <= cFlavors ; idFlavor ++ )
countT cFlavors = swsNameByTime.cFlavorsF( tinP ) ;

;
                                                                
    +S2(sa_SSSaNDeND,sc_ccSSS)
        +S2(sa_SSSmARKnUMERIC9,sc_cSSSmARK)
        +S3(0,sc_ccSSSrEPEAT,7)
        +T("x")
        +S2(sa_SSSmARKnUMERIC9,sc_cSSSmARK)
        +S3(0,sc_ccSSSrEPEAT,7)
        +T(".")
    +S2(sa_SSSaND,sc_ccSSS)
    T("")

TN( tSssDim , "" ) ; tSssDim =           // ".12345678x12345678."
strokeS sttq( 0 , sc_IGNOREqUOTES ) ;

etThread.diskWalkF( tinP , cDirs , cFiles , tPath , bQuit , diskWalkRenameCBF , pcArg ) ;
ZE( countT , bQuit ) ;
ZE( countT , cFiles ) ;
ZE( countT , cDirs ) ;
TN( tPath , "///d/ideafarm.home.101/IdeaFarm (tm)/Drop Files Here To Archive/" ) ;

countT pcArg[] = { (countT)&psttLeverTime , (countT)&swsNameByTime , (countT)&cDone , (countT)&tIdeafarm5Dot , (countT)&tDotJpg } ;

TN( tDotJpg       , ".jpg" ) ;
TN( tIdeafarm6Dot , "!ideafarm.6." ) ;
TN( tIdeafarm5Dot , "!ideafarm.5." ) ;
ZE( countT        , cDone ) ;

switchStackC swsNameByTime( tinP , etThread , TAG( TAGiDnULL ) , flSTACKc_DOnOTsERIALIZE , psttLeverTime , flSTACKc_DOnOTsERIALIZE | flSTACKc_FIFO , ifcSTACKtYPE_PTR_strokeS ) ;
ZE( strokeS* , psttLeverTime ) ;

TODO

}
    return 0 ;

    tinP.pEther->delF( tinP , psttShort3 ) ;
    tinP.pEther->delF( tinP , psttShort2 ) ;
    tinP.pEther->delF( tinP , psttShort1 ) ;
    tinP.pEther->delF( tinP , psttShort ) ;
    tinP.pEther->delF( tinP , psttPath ) ;

    }
        }
            swsNameByTimeP << psttShort3NoExt ; psttShort3NoExt = 0 ;
            psttLeverTimeP = psttShort2 ;

            tinP.pEther->strSubstringF( tinP , psttShort3NoExt , idf , idl , psttShort3 ) ; ___( psttShort3NoExt ) ;
            idl = psttShort3->idAdam - 4 ;
            idf = 1 ;
            ZE( strokeS* , psttShort3NoExt ) ;
        {
        )
            psttShort3->idAdam - 3 == tinP.pEther->strIdF( tinP , tDotJpgP , psttShort3 , - 1 )
            &&
            psttShort3[ CSpREFIX - 1 + 1 ].idAdam == '.'
            &&
            psttShort2[ CSpREFIX - 1 + 9 ].idAdam == '@'
            &&
            !tinP.pEther->strCompareF( tinP , tIdeafarm5DotP , psttShort1 )
        (
        if

        tinP.pEther->strConvertToLowerCaseF( tinP , psttShort3 ) ;
        tinP.pEther->strSubstringF( tinP , psttShort3 , idf , idl , psttShort ) ; ___( psttShort3 ) ;
        idl = 0 ;
        tinP.pEther->strSubstringF( tinP , psttShort2 , idf , idl , psttShort ) ; ___( psttShort2 ) ;
        idl = 0x19 ;
        tinP.pEther->strSubstringF( tinP , psttShort1 , idf , idl , psttShort ) ; ___( psttShort1 ) ;
        countT idl = 0xc ;
        countT idf = 1 ;
    {
    if( psttShort && psttShort->idAdam >= 0x1e )
    ZE( strokeS* , psttShort3 ) ;
    ZE( strokeS* , psttShort2 ) ;
    ZE( strokeS* , psttShort1 ) ;

    // !ideafarm.5.19991228@0000.00.!.note.ttt
    // !ideafarm.5.19991228@0000.00.000b3751.c44d5e6f.2f9afda7.scanner.!.19991228@0000.notarized.declaration.of.legal.name.change.0600x0761.jpg
    // |----------||-----------||-->
    // 123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0
    // 0              1               2               3               4

    //tinP.pEther->traceF( tinP , psttShort ) ;
    //tinP.pEther->traceF( tinP , psttPath ) ;

    ___( psttShort ) ;
    ___( psttPath ) ;
    tinP.pEther->strBisectF( tinP , psttPath , psttShort , tNameOld , 0 , - 1 , flSTRbISECT_APPENDdELIMITER ) ;
    ZE( strokeS* , psttShort ) ;
    ZE( strokeS* , psttPath ) ;

    TN( tNameOld , ifFileNameC( tinP , *tinP.pEther , postNameP ) ) ;

    if( !( cDoneP % TUCK ) ) tinP.pEther->traceF( tinP , T("[cDoneP]: ")+TF2(cDoneP,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES) ) ;
    cDoneP ++ ;

    textC&        tDotJpgP       =         *(textC*)pcArgP[ 4 ] ;
    textC&        tIdeafarm5DotP =         *(textC*)pcArgP[ 3 ] ;
    countT&       cDoneP         =        *(countT*)pcArgP[ 2 ] ; 
    switchStackC& swsNameByTimeP =  *(switchStackC*)pcArgP[ 1 ] ;
    strokeS*&     psttLeverTimeP =      *(strokeS**)pcArgP[ 0 ] ;
{
boolT diskWalkRenameCBF( tinS& tinP , countT& cDirsP , countT& cFilesP , boolT& bQuitP , const osTextT* const postNameP , countT* const pcArgP , const countT* const pModuloDirsP , const countT* const pModuloFilesP )

// THE FORMAT 5 SEQUENCE NUMBERS ARE INCORRECT IN THAT JPG FILES WHICH DIFFER ONLY IN DIMENSION ARE NOT GIVEN THE SAME SEQUENCE NUMBER

/*1*/WAKEsHOWtEXT( "tool.rename.archive.format.5.recalculate.sequence.correctly" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


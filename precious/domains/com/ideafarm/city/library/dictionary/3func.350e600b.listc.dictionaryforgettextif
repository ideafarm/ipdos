
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    _OUT_

    POPtINaRGS
    walkIF( tinP , pczName , flLISToPEN_null , idGrabLayerP ) ;
    countT pczName[] = { LISTnAME_ROOT , LISTnAME_ROOTsYSTEM2 , LISTnAME_DICTIONARY , 0 } ;
    tinP.ta.pushed.listWalk.util.pcP[ 0 ] = (countT)postP ;
    tinP.ta.pushed.listWalk.walk.flagsWalkP = flLISTwALK_null ;
    tinP.ta.pushed.listWalk.walk.pListWalkCBFP = listWalkForgetTextCBF ;
    PUSHtINaRGS

    grabitC grabitx( tinP , TAG( TAGiDnULL ) ) ;

    _INoLD_

    }
        if( POOP ) return ;
        __( tinP.monitor.cGrabbed && !( F(tinP.flagsThreadMode2) & flTHREADmODE2_ALLOWdICTIONARYwHILEgRABBING ) ) ; // TO PREVENT DEADLOCKING, A THREAD MAY NOT BEGIN A WALK IN THE LIST TREE WHILE IT POSESSES A listingC ; THIS PROHIBITION IS MORE THAN NECESSARY BUT IS SIMPLE TO ENFORCE ; THE NECESSARY CONDITION IS TO PREVENT "BACKWARD" WALKING ; cGrabbed COUNTS ANY grabitC GRAB, NOT JUST GRABS OF listingC INSTANCES
        __Z( postP ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL
{
/*1*/voidT listC::dictionaryForgetTextIF( tinS& tinP , const osTextT* const postP , const countT idGrabLayerP )/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//



//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    }
        if( stEach ) { strFuseF( tinP , psttP , psttSeparator ) ; ___( psttP ) ; }
        delF( tinP , psttw ) ;_WQ
        strFuseF( tinP , psttP , psttw ) ; ___( psttP ) ;_WQ
        stEach >> psttw ;_WQ
        ZE( strokeS* , psttw ) ;_WQ
    {
    while( stEach )
    strMakeF( tinP , LF , psttP , T("") , csAll ) ; //CALLER MUST TAG ___( psttP ) ;_WQ

    }
        while( ~handle ) ;_WQ
        }
            if( psttw ) csAll += psttw->idAdam + ( ~handle ? psttSeparator->idAdam : 0 ) ;_WQ
            strokeS* psttw = (strokeS*)stEach.downF( tinP , handle ) ;_WQ
        {
        do
        handleC handle( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;_WQ
    {
    if( stEach )
    countT csAll = csttExtraP ;_WQ

    }
        }
            stEach << psttw ;_WQ
            strFromF( tinP , psttw , pcValueP[ offi ++ ] , flagsFormatP , csP , radixP ) ; ___( psttw ) ;_WQ
            ZE( strokeS* , psttw ) ;_WQ
        {
        while( cToDo -- )

        ;_WQ
            : thirdC::c_strlenIF( tinP , pcValueP )
            ? *pcValueP
        countT cToDo = offi
        countT offi = !!( F(flagsFormatP) & flFORMAT_PREFIXED ) ;_WQ
    {
    if( pcValueP )
    stackC stEach( tinP , *this , TAG( TAGiDnULL ) , flSTACKc_FIFO | flSTACKc_DOnOTsERIALIZE , ifcSTACKtYPE_PTR_strokeS ) ;_WQ

    const strokeS* const psttSeparator = psttSeparatorP ? psttSeparatorP : tSeparator ;_WQ
    TN( tSeparator , "/" ) ;_WQ

    _IO_

    }
            if( POOP ) return ;
            __(  tinP.strokeMode.idCasteDefault && radixP > 0x10000 ) ;_WQ
            __( !tinP.strokeMode.idCasteDefault && radixP > 64 ) ;_WQ
            __( radixP && radixP < 2 ) ;_WQ
            __NZ( psttP ) ;_WQ
            if( POOP ) return ;
    {
    IFbEcAREFUL
    SCOOP
{
/*1*/voidT etherC::strFromF( tinS& tinP , strokeS*& psttP , const countT* const pcValueP , const flagsT flagsFormatP , const countT csP , const countT radixP , const strokeS* const psttSeparatorP , const countT csttExtraP )/*1*/

/**/
*/
 csttExtraP
  if 0 then T("/") is used
  can be 0
  this string is inserted between each rendering, i.e. between each rendered countT value
 psttSeparatorP
  this is used when rendering each of the countT values in pcValueP
  if not 0 then must be 2 <= radixP <= 64_9
  if 0 then 16_9 is implied
  can be 0
 radixP
  this is used when rendering each of the countT values in pcValueP
  if more strokes are needed to represent the number, psttP will be longer than csP
  minimum length of the final string
 csP
  these format flags are used when rendering each of the countT values in pcValueP
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/1snip.001004c.flFORMAT!||
 flagsFormatP
  must be a null terminated string of countT values
  this is a pointer to the values that are to be represented as a string of digits
 pcValueP
  will be set to contain the string
  must be 0
 psttP
arguments
  \<A HREF=\"5.5830104.1.1.0.html\"\>5830104:  WAKEsHOW( "example.simplest.func.103010b.etherC.strFromF" )\</A\>
 simplest
examples
\<A HREF=\"5.103010b.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$strFromF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


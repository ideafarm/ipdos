
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return cbo ;

    }
        pboP[ off ++ ] = 0 ;

        }
            else             pboP[ off ++ ] = postc[ v4 ] ;
            if( cbPad      ) pboP[ off ++ ] = '=' ;
            else             pboP[ off ++ ] = postc[ v3 ] ;
            if( cbPad == 2 ) pboP[ off ++ ] = '=' ;
                             pboP[ off ++ ] = postc[ v2 ] ;
                             pboP[ off ++ ] = postc[ v1 ] ;

            }
                pso3->b02 = psi->b18 ;
                pso3->b01 = psi->b17 ;
                pso4->b06 = psi->b16 ;
                pso4->b05 = psi->b15 ;
                pso4->b04 = psi->b14 ;
                pso4->b03 = psi->b13 ;
                pso4->b02 = psi->b12 ;
                pso4->b01 = psi->b11 ;
            {
            if( !cbPad )

            }
                pso2->b04 = psi->b10 ;
                pso2->b03 = psi->b0f ;
                pso2->b02 = psi->b0e ;
                pso2->b01 = psi->b0d ;
                pso3->b06 = psi->b0c ;
                pso3->b05 = psi->b0b ;
                pso3->b04 = psi->b0a ;
                pso3->b03 = psi->b09 ;
            {
            if( cbPad < 2 )

            pso1->b06 = psi->b08 ;
            pso1->b05 = psi->b07 ;
            pso1->b04 = psi->b06 ;
            pso1->b03 = psi->b05 ;
            pso1->b02 = psi->b04 ;
            pso1->b01 = psi->b03 ;
            pso2->b06 = psi->b02 ;
            pso2->b05 = psi->b01 ;

            binS* pso4 = (binS*)&v4 ;
            binS* pso3 = (binS*)&v3 ;
            binS* pso2 = (binS*)&v2 ;
            binS* pso1 = (binS*)&v1 ;
            ZE( countT , v4 ) ;
            ZE( countT , v3 ) ;
            ZE( countT , v2 ) ;
            ZE( countT , v1 ) ;

            binS* psi = (binS*)pbc ;
        {

        }
            pbc += 3 ;

            pboP[ off ++ ] = postc[ v4 ] ;
            pboP[ off ++ ] = postc[ v3 ] ;
            pboP[ off ++ ] = postc[ v2 ] ;
            pboP[ off ++ ] = postc[ v1 ] ;

            pso3->b02 = psi->b18 ;
            pso3->b01 = psi->b17 ;
            pso4->b06 = psi->b16 ;
            pso4->b05 = psi->b15 ;
            pso4->b04 = psi->b14 ;
            pso4->b03 = psi->b13 ;
            pso4->b02 = psi->b12 ;
            pso4->b01 = psi->b11 ;
            pso2->b04 = psi->b10 ;
            pso2->b03 = psi->b0f ;
            pso2->b02 = psi->b0e ;
            pso2->b01 = psi->b0d ;
            pso3->b06 = psi->b0c ;
            pso3->b05 = psi->b0b ;
            pso3->b04 = psi->b0a ;
            pso3->b03 = psi->b09 ;
            pso1->b06 = psi->b08 ;
            pso1->b05 = psi->b07 ;
            pso1->b04 = psi->b06 ;
            pso1->b03 = psi->b05 ;
            pso1->b02 = psi->b04 ;
            pso1->b01 = psi->b03 ;
            pso2->b06 = psi->b02 ;
            pso2->b05 = psi->b01 ;

            binS* pso4 = (binS*)&v4 ;
            binS* pso3 = (binS*)&v3 ;
            binS* pso2 = (binS*)&v2 ;
            binS* pso1 = (binS*)&v1 ;
            ZE( countT , v4 ) ;
            ZE( countT , v3 ) ;
            ZE( countT , v2 ) ;
            ZE( countT , v1 ) ;

            binS* psi = (binS*)pbc ;
        {
        while( pbc < pbe - 3 )
        ZE( countT , off ) ;
        const byteT* pbc = pbiP ;
        const byteT* const pbe = pbiP + cbi ;

        ;
        }
            '4' , '5' , '6' , '7' , '8' , '9' , '+' , '/'
            'w' , 'x' , 'y' , 'z' , '0' , '1' , '2' , '3' ,
            'o' , 'p' , 'q' , 'r' , 's' , 't' , 'u' , 'v' ,
            'g' , 'h' , 'i' , 'j' , 'k' , 'l' , 'm' , 'n' ,
            'Y' , 'Z' , 'a' , 'b' , 'c' , 'd' , 'e' , 'f' ,
            'Q' , 'R' , 'S' , 'T' , 'U' , 'V' , 'W' , 'X' ,
            'I' , 'J' , 'K' , 'L' , 'M' , 'N' , 'O' , 'P' ,
            'A' , 'B' , 'C' , 'D' , 'E' , 'F' , 'G' , 'H' ,
        {
        static const osTextT postc[] =

        if( cbPad == 3 ) cbPad = 0 ;
        countT cbPad = 3 - cbi % 3 ;

        newF( tinP , LF , pboP , cbo + 1 ) ; ___( pboP ) ;

        cbo = ( ( cbi - 1 ) / 3 + 1 ) * 4 ;
    {
    else
    }
        if( pboP ) *pboP = 0 ;
        newF( tinP , LF , pboP , 1 ) ; ___( pboP ) ;
    {
    if( !cbi )

    ZE( countT , cbo ) ;
    if( !cbi ) cbi = strBodyLengthF( tinP , pbiP ) ;
    countT cbi = cbiP ;

    }
        if( POOP ) return 0 ;
        __Z( pbiP ) ;
        __NZ( pboP ) ;
        if( POOP ) return 0 ;
    {
    IFbEcAREFUL
    SCOOP
{
/*1*/countT etherC::strEncode_01F( tinS& tinP , byteT*& pboP , const byteT* const pbiP , const countT cbiP )/*1*/

;
}
    countT b18 : 1 ;
    countT b17 : 1 ;
    countT b16 : 1 ;
    countT b15 : 1 ;
    countT b14 : 1 ;
    countT b13 : 1 ;
    countT b12 : 1 ;
    countT b11 : 1 ;
    countT b10 : 1 ;
    countT b0f : 1 ;
    countT b0e : 1 ;
    countT b0d : 1 ;
    countT b0c : 1 ;
    countT b0b : 1 ;
    countT b0a : 1 ;
    countT b09 : 1 ;
    countT b08 : 1 ;
    countT b07 : 1 ;
    countT b06 : 1 ;
    countT b05 : 1 ;
    countT b04 : 1 ;
    countT b03 : 1 ;
    countT b02 : 1 ;
    countT b01 : 1 ;
{
struct binS
/**/
*/
   the terminating null will -not- be encoded
   if 0 then the null terminated byte string at pbiP will be encoded
  can be 0
 cbiP
  must not be 0
 pbiP
  must be 0
 pboP
arguments
 the terminating null byte is excluded from the count
 a terminating null byte will be placed at the end of the encoded string
evaluates to the length of the encoded string placed into pboP
  \<A HREF=\"5.4030104.1.1.0.html\"\>4030104:  WAKEsHOW( "example.simplest.func.10300e5.etherC.strEncode_01F" )\</A\>
 simplest
examples
\<A HREF=\"5.10300e5.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$strEncode_01F.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//



//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

}
    etherC::loafIF( tinP ) ;
    etThread.traceF( tinP , T("ok") ) ;

    }
        etThread.traceF( tinP , T("[myByte]: ")+T(postByte) ) ;

        byteT postByte[ 2 ] = { *(const byteT*)myPage , 0 } ;
        pageC myPage = myJot.readF( tinP , pcIdJot[ idDo - 1 ] ) ;
    {
    for( countT idDo = 1 ; idDo <= CjOTS ; idDo ++ )

    jotC myJot( tinP , "myJot" , flJOTc_null , cbDataBook , cIndexEntriesBook , cKeepInactive ) ;
{

}
    }
        if( bOutLath == 'z' ) bOutLath = 'a' - 1 ;
        etThread.traceF( tinP , T("[pcIdJot[idDo-1]]: ")+TF2(pcIdJot[idDo-1],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
        pcIdJot[ idDo - 1 ] = myJot.writeF( tinP , &( ++ bOutLath ) , 1 , 0 , 0 , flJOTcwRITE_null ) ;
    {
    for( countT idDo = 1 ; idDo <= CjOTS ; idDo ++ )
    byteT bOutLath = 'a' - 1 ;

    jotC myJot( tinP , "myJot" , flJOTc_WRITE , cbDataBook , cIndexEntriesBook , cKeepInactive ) ;
{
thirdC::c_memsetIF( tinP , (byteT*)pcIdJot , sizeof pcIdJot , 0 ) ;
countT pcIdJot[ CjOTS ] ;

countT cKeepInactive = 8 ;
countT cIndexEntriesBook = 8 ;
countT cbDataBook = 8 ;

TODO

#define CjOTS ( TUCK >> 2 )

/*1*/WAKEsHOWtEXT( "tool.gorilla.jotC" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


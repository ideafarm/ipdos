
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

}
    stHired.purgeF( tinP ) ; //CONTAINS POINTER DUPLICATES
    }
        }
            ++ s ; ether.osSleepF( tinP , time1s ) ;
            sleepC s( tinP , TAG( TAGiDnULL ) ) ;
            countT time1s = TOCK * 0x1 ;
        {
        
        }
            }
                }
                    ++ s ; etThread.osSleepF( tinP , TUCK * 0x40 ) ;
                    sleepC s( tinP , TAG( TAGiDnULL ) ) ;
                    etThread.beeClickF( tinP ) ; //U::
                    LOGrAW( T("could not fire ")+td+T("\r\n") ) ; //U::
                    POOPR
                {
                else
                if( !POOP ) break ;
        
                ((thirdC&)*tinP.pEtScratch).osDriverFireF( tinP , td ) ;
                //LOGrAW( T("firing ")+td+T("\r\n") ) ; //U::
            {
            for(;;)
            
            etThread.osDriverParseNameF( tinP , idHome , idAdam , idVersion , td ) ;
            ZE( countT , idVersion ) ;
            ZE( countT , idAdam ) ;
            ZE( countT , idHome ) ;
            
            TN( td , postd ) ;
            stHired >> postd ;
            ZE( osTextT* , postd ) ;
        {
        while( stHired )
        SCOOPS
        
        }
            etThread.strokeF( tinP , T("\r                         \r") ) ;
            ++ s ; ether.osSleepF( tinP , time1s , 0 , flSLEEP_TALK ) ;
            sleepC s( tinP , TAG( TAGiDnULL ) ) ;
            etThread.strokeF( tinP , TF1(++idCycle)+tb+TF1(time1s)+tcr ) ;
            countT time1s = TOCK * ( stHired == 1 ? 0x10 : 0x40 ) + ru ;
        {
        if( stHired )
        
        }
            while( !ether && !stDriver.third && ~hDown ) ;
            }
                else       stHired << postd ;
                if( POOP ) POOPR
    
                ((thirdC&)*tinP.pEtScratch).osDriverHireF( tinP , td ) ;
                //etThread.beeClickF( tinP , TUCK * 2 ) ;
    
                etThread.osDriverParseNameF( tinP , idHome , idAdam , idVersion , td ) ;
                ZE( countT , idVersion ) ;
                ZE( countT , idAdam ) ;
                ZE( countT , idHome ) ;
    
                TN( td , postd ) ;
                osTextT*& postd = *(osTextT**)&stDriver.downF( tinP , hDown ) ;
            {
            do
            handleC hDown( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
            SCOOPS
        {
        if( stDriver )
    
        //LOGrAW( T("cycle ")+T(++idCycle)+T(" ============================================================\r\n") ) ;
    
        ((thirdC&)etThread).osDriversF( tinP , stDriver , "IdeaFarmCity." ) ;
        stHired.purgeF( tinP ) ;
        stDriver.purgeF( tinP ) ;
    {
    while( !ether )
    ZE( countT , idCycle ) ;
    ranUniC ru( TOCK * 0x10 , - 1 ) ;
    stackC stHired( tinP , etThread , TAG( TAGiDnULL ) , flSTACKc_null , ifcSTACKtYPE_PTR_byteT ) ;
    stackC stDriver( tinP , etThread , TAG( TAGiDnULL ) , flSTACKc_FIFO , ifcSTACKtYPE_PTR_byteT ) ;
    TN( tcr , "\r\n" ) ;
    TN( tb , " " ) ;
    
    __( !( etherC::ifc_idHomeI_IF() & 0x80000000 ) ) ; //A: ASSUME: sizeof( countT ) == 4; CANNOT BE RUN AS SERVICE OR KID OF SERVICE (win32 RESTRICTION)
{
IFsCRATCH

TODO

/*1*/WAKEhIDE( "ifcIDaDAM_GORILLA.gorilla.hosts" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


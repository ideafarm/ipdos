
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return rc ;

    dec02AM( processGlobal1I.cTls ) ;
    }
        rc = sf.rc ;

        }
            processGlobal1I.flDt |= flCTdTg_THREADlOCALsTORAGE ;
            bTlsEarlyLateIF() = 1 ;
            pTinMainI_IF() = sf.pTin ;

            }
                _OUT_
                }
                    }
                        ++ s ; thirdC::dosSleepWinkIF( tinP ) ;
                    {
                    while( processGlobal1I.cTls > 1 )
                    sleepC s( tinP , TAG( TAGiDnULL ) ) ;
                {
                _INoLD_
                TINSL
            {
        {
        if( idTypeP == ifcIDtYPEtLS_CONSOLE || idTypeP == ifcIDtYPEtLS_WINDOW || idTypeP == ifcIDtYPEtLS_BENCH )
    
        }
            _OUT_
            else                                                                                                         sf.rc = 1 ;
            else if( idTypeP == ifcIDtYPEtLS_KID || idTypeP == ifcIDtYPEtLS_EXCEPTION || idTypeP == ifcIDtYPEtLS_BENCH ) sf.rc = (*pThreadWorkF)( cArgP ) ;
                 if( idTypeP == ifcIDtYPEtLS_CONSOLE || idTypeP == ifcIDtYPEtLS_WINDOW                                 ) sf.rc = mainThreadWorkF( idTypeP , cHowP , ppostHowP , hWindowingClientIP , hPreviousWindowingClientP , postP , idCmdShowP ) ;
            _INoLD_
            TINSL
        {
    
        }
            if( pTinF() != &sf.tinEarlyLate ) { BLAMMO ; }
    
            sf.pTin = pTinMainI_IF() ;
    
            bTlsEarlyLateIF() = 0 ; if( &pTinF() != &sf.pTin        ) { BLAMMO ; }
                                    if( &pTinF() != &pTinMainI_IF() ) { BLAMMO ; }
            processGlobal1I.flCt |= flCTdTg_THREADlOCALsTORAGE ;
            offFingerVerifyI = ebpAM() - (countT)&sf.fingerVerify ; //MUST BE DONE BEFORE pTinAM OR pTin2AM ARE CALLED ; THIS IS THE OFFSET OF FINGERvERIFY *BELOW* EBP, CALCULATED HERE SO THAT ITS VALUE IS POSITIVE, TO MAKE DEBUGGER DISPLAYS EASIER TO READ
        {
        if( idTypeP == ifcIDtYPEtLS_CONSOLE || idTypeP == ifcIDtYPEtLS_WINDOW || idTypeP == ifcIDtYPEtLS_BENCH )
    
        //IF WDW EVER FAILS TO LOAD ITS INFO, DEBUG STARTUP (IF YOU CAN); ELSE USE OTHER MEANS (WRITE TO CONSOLE) TO SEE THE NEW OFFSETS
        //I HAVE SEEN WDW FAIL TO LOAD SYMBOLIC INFO BECAUSE THE OFFSET OF sf FROM [ebp] CHANGED, AND APPARENTLY pTinAM CRAPPED EARLY ON SOME DEBUGGING INFO SO WDW COULDN'T EVEN GET THE MODULE LOADED
        tlsStackFrameS sf( idTypeP , postP , cArgP ) ; //CODE SYNC: THE OFFSET OF SOME MEMBERS OF sf FROM [ebp] (THE STACK FRAME) IS HARDCODED IN snip.009*
    {
    inc02AM( processGlobal1I.cTls ) ;
    ZE( countT , rc ) ;
{
/*1*/countT __export threadLocalStorageF( const countT idTypeP , kidFT pThreadWorkF , countT cArgP , countT cHowP , const osTextT** ppostHowP , countT hWindowingClientIP , countT hPreviousWindowingClientP , osTextT* postP , countT idCmdShowP )/*1*/

// NOTE: I MUST BE COMPILED WITH OPTIMIZATIONS DISABLED (-od)

/**/
*/
pTin, if not ze, points to the tinS, object for this thread
then the value in pTin can be obtained
my stack frame can be found by walking the stack looking for FINGERnEG_THREADlOCALsTORAGE
i allocate oo objects on the thread's stack so that they can be found at known offsets within the stack frame
\<A HREF=\"5.0b00018.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$threadLocalStorageF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


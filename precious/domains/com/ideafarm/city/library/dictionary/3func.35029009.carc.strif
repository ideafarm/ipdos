
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    _OUT_

    }
        }
            }
                off += 1 + ether.strBodyLengthF( tinP , pcPart ) ;
                ether.strFuseF( tinP , psttP , TF1(pcPart)+T("\r\n") ) ; ___( psttP ) ;
                countT* pcPart = &pcUsage[ off ] ;
                ether.strFuseF( tinP , psttP , TF3(qty,0,8)+T(" ") ) ; ___( psttP ) ;
                countT qty = pcUsage[ off ++ ] ;
            {
            while( cResources -- )

            ether.strFuseF( tinP , psttP , T("cResources"": ")+TF1(cResources)+T("\r\n") ) ; ___( psttP ) ;
            countT cResources = pcUsage[ off ++ ] ;
            ZE( countT , off ) ;

            // FORMAT OF pcUsage: FIRST countT IS cResources.  FOR EACH RESOURCE: qty , rid. rid is null terminated.
        {

        { FORsTRINGSiN1( pstt1LogImpotence ) { ether.strFuseF( tinP , psttP , T("logImp: \"")+T(psttc1)+T("\"\r\n") ) ; ___( psttP ) ; } }
        { FORsTRINGSiN1( pstt1Log          ) { ether.strFuseF( tinP , psttP , T("log:    \"")+T(psttc1)+T("\"\r\n") ) ; ___( psttP ) ; } }

        countT*  pcUsage           = (countT*) ( (byteT*)&pcc[ 7 ] + cbLog + cbLogImpotence ) ;
        strokeS* pstt1LogImpotence = (strokeS*)( (byteT*)&pcc[ 7 ] + cbLog                  ) ;
        strokeS* pstt1Log          = (strokeS*)(         &pcc[ 7 ]                          ) ;

        ether.strMakeF( tinP , psttP , T("") , csttEstimateP ) ;
    {
    if( !ether )

    __( *(countT*)pbSoulP - 6 * sizeof( countT ) - cbLog - cbLogImpotence - cbUsage ) ;

    countT cbUsage        = pcc[ 6 ] ;
    countT cbLogImpotence = pcc[ 5 ] ;
    countT cbLog          = pcc[ 4 ] ;

    countT* pcc = (countT*)pbSoulP ;

    _INoLD_

    if( ether ) return ;
    __( *(countT*)pbSoulP < 5 * sizeof( countT ) ) ;
    if( ether ) return ;
    __Z( pbSoulP ) ;
    if( ether ) return ;
{
/*1*/voidT carC::strIF( tinS& tinP , etherC& ether , strokeS*& psttP , const byteT* const pbSoulP , const countT csttEstimateP )/*1*/

/**/
*/
it is illegal to refer to this symbol in the definition of an adam
\<A HREF=\"5.1350008.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$strF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


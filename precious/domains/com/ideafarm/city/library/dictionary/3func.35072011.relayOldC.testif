
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return bOk ;
    }
        }
            }
                bOk = 0 ;
                POOPR
            {
            if( POOP )

            (*tinP.pEtScratch)( tinP , psBagOk ) ;
            (*tinP.pEtScratch)( tinP , psBag ) ;
            }
                TELL( "reading ok-" )
                VERIFYrELAY2( sock , *psBagOk ) ;
                TELL( "reading ok+ 15" )
                sock.writeF( tinP , *psBag ) ;
    
                hdrBagIF( tinP , *psBag , idptP , idSerialLathHeaderP , flRELAYpOP_DOWN , ifcIDtYPEbAG_CLIENTnULL ) ;
            {
            if( psBag && psBagOk )
            (*tinP.pEtScratch)( tinP , psBagOk , TAG( TAGiDnULL ) ) ;
            ZE( soulC* , psBagOk ) ;
            (*tinP.pEtScratch)( tinP , psBag , TAG( TAGiDnULL ) ) ;
            ZE( soulC* , psBag ) ;
        {
        else
        }
            tinP.pEther->traceF( tinP , T("testIF: could not connect [idptTestP:nn,idPort]:    ")+T((nicNameC&)idptTestP)+T("    ")+TF2((countT&)idptTestP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
            bOk = 0 ;
            POOPRqUIET
        {
        if( POOP )
        sock.connectF( tinP , idptTestP , (nicNameC&)idptTestP ) ;
        socketC sock( tinP , *tinP.pEtScratch , TAG( TAGiDnULL ) ) ;
        SCOOPS
    {
    IFsCRATCH
    boolT bOk = 1 ;
{
/*1*/boolT relayOldC::testIF( tinS& tinP , portTimeC& idptP , countT& idSerialLathHeaderP , portTimeC& idptTestP )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


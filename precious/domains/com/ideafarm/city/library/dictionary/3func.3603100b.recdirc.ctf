
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    __( pbc - pbSoulP < cbs ) ;
    __( pbc - pbSoulP > cbs ) ;

    }
        pbc += cbBlob ;
        ether.memCopyF( tinP , pbBlob , pbc , cbBlob ) ;
        ether.newF( tinP , LF , pbBlob , cbBlob ) ; ___( pbBlob ) ;
    {
    if( cbBlob )

    }
        pbc += sizeof( strokeS ) * ( CSpREFIX + psttn->idAdam ) ;
        ether.strMakeF( tinP , psttName , psttn ) ; ___( psttName ) ;
        strokeS* psttn = (strokeS*)pbc ;
    {
    if( bName )

    boolT bName =   *(boolT*)pbc ; pbc += sizeof( boolT   ) ;
    nicName      = *(nicNameC*)pbc ; pbc += processGlobal1I.cb_nicNameC_ ;
    cbBlob      =  *(countT*)pbc ; pbc += sizeof( countT  ) ;
    flags       =  *(countT*)pbc ; pbc += sizeof( countT  ) ;
    idPort      =  *(countT*)pbc ; pbc += sizeof( countT  ) ;
    const countT cbs = sizeof( countT ) + *(countT*)pbc ; pbc += sizeof( countT ) ;
    const byteT* pbc = pbSoulP ;

    }
        if( ether ) return ;
        __Z( pbSoulP ) ;
        if( ether ) return ;
    {
    IFbEcAREFUL
{
/*1*/voidT recDirC::ctF( tinS& tinP , const byteT* const pbSoulP )/*1*/

/**/
*/
\<A HREF=\"5.147000c.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$ctF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


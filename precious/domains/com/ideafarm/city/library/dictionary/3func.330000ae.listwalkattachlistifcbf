
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return flagsListWalkRetCode ;

    UNGRABtINaRGS( ifcIDtYPEtINaRGiNuSE_LIST )
    }
        }
            }
                flagsListWalkRetCode |= flLISTwALKcALLbACKrETURNcODE_QUIT ;

                }
                    pListFoundP = pNew ;
                    }
                        pNew->openF( tinP , *ppHand[ !offWoth ] , 0 , tinP.ta.retained.u.listWalk.walk.idGrabLayer ) ;
                        _IO_
                    {
                    ppHand[ !offWoth ] = new( 0 , tinP , pbh , SIZEOF_handleC ) handleC( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_LISTING ) ;
                    }
                        DELzOMBIE( ppHand[ !offWoth ] ) ;
                        _IO_
                    {
                    byteT* pbh = (byteT*)ppHand[ !offWoth ] ;
                    listC* pNew = pNewF( tinP , ppPreP , idNameWantP ) ;
                    _IO_
                {
                else
                if( F(flagsP) & flLISToPEN_IFeXISTS ) tinP.ta.pushed.u.listWalk.walk.flagsWalkP &= ~( F(flLISTwALK_DOnOTuNGRABoOTHaTeNDoFwALK) ) ;
            {
            else if( idNameWantP < idNameAt )
            }
                flagsListWalkRetCode |= flLISTwALKcALLbACKrETURNcODE_QUIT ;

                else                                          tinP.ta.pushed.u.listWalk.walk.flagsWalkP &= ~( F(flLISTwALK_DOnOTuNGRABoOTHaTeNDoFwALK) ) ;
                if( !( F(flagsP) & flLISToPEN_IFnOTeXISTS ) ) pListFoundP = (listC*)pListing ;
            {
            if( idNameWantP == idNameAt )
            countT idNameAt = pListing->nameF() ;
        {
        )
            && ( listingC::bIsListingIF( tinP , aptListing , fliLISTINGc_MIXINlIST ) || listingC::bIsListingIF( tinP , aptListing , fliLISTINGc_MIXINlIST | fliLISTINGc_MIXINdATUM ) )
            !POOP
        (
        if

        __( !listingC::bIsListingIF( tinP , aptListing ) ) ;
        aptC aptListing( tinP , pListing ) ;
    {
    else
    }
        }
            pListFoundP = pNew ;
            pNew->openF( tinP , *ppHand[ !offWoth ] , 0 , tinP.ta.retained.u.listWalk.walk.idGrabLayer ) ;
            listC* pNew = pNewF( tinP , ppPreP , idNameWantP ) ;
            _IO_
        {
        if( !( F(flagsP) & flLISToPEN_IFeXISTS ) )
    {
    if( !pListing )
    flagsT flagsListWalkRetCode = flLISTwALKcALLbACKrETURNcODE_DOnOTwALKmE ;

    listC*&   pListFoundP       = *(listC**)&tinP.ta.pushed.u.listWalk.util.pcP[ 2 ] ;
    flagsT    flagsP            =            tinP.ta.pushed.u.listWalk.util.pcP[ 1 ] ;
    countT    idNameWantP       =            tinP.ta.pushed.u.listWalk.util.pcP[ 0 ] ;

    listC**   ppPreP            = tinP.ta.pushed.u.listWalk.cbf.ppPreallocatedListsP ;

    countT&   offWoth           = *tinP.ta.pushed.u.listWalk.walk.pOffWothP ;
    handleC*  ppHand[ 2 ]       = { tinP.ta.pushed.u.listWalk.walk.pHandleLoP , tinP.ta.pushed.u.listWalk.walk.pHandleHiP } ;
    listingC* pListing          = tinP.ta.pushed.u.listWalk.cbf.pListingP ;
    GRABtINaRGS( ifcIDtYPEtINaRGiNuSE_LIST )

    _IO_
{
/*1*/flagsT listWalkAttachListIfCBF( tinS& tinP )/*1*/

}
    return pNew ;

    }
        }
            if( !tinP.ta.pushed.u.listWalk.cbf.pNewP ) tinP.ta.pushed.u.listWalk.cbf.pNewP = pNew ;
            __( tinP.ta.pushed.u.listWalk.cbf.pNewP ) ;

            *pNew = idNameWantP ;
            *pNew = *tinP.ta.pushed.u.listWalk.cbf.pDadP ;
        {
        if( pNew )

        }
            }
                break ;
                       ppPreP[ offi ] = 0 ;
                pNew = ppPreP[ offi ] ;
            {
            if( !ppPreP[ offi + 1 ] ) //IF offi POINTS TO LEAF
        {
        for( countT offi = 0 ; ppPreP[ offi ] ; offi ++ )
    {
    else
    if( !ppPreP ) { pNew = new( 0 , tinP , LF ) listC( tinP , *tinP.ta.pushed.u.listWalk.cbf.pDadP , idNameWantP ) ; ___( pNew ) ; }
    ZE( listC* , pNew ) ;
{
listC* pNewF( tinS& tinP , listC** ppPreP , const countT idNameWantP )

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//


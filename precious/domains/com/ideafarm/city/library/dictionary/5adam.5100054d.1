
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

}
    etThread.strokeF( tinP , T("test ")+TF1(idTest)+T(": ")+TF1(((measureT)time1S)/(measureT)CsAMPLES/(measureT)TOCK)+T(" sample average tocks to overflow\r\n") ) ;
    }
        etThread.osTimeAddF( tinP , time1S , time2S , time1B , time2B ) ;
        //etThread.strokeF( tinP , TT(time1B,time2B)+T("\r\n") ) ;
        etThread.osTimeSubtractF( tinP , time1B , time2B , time1A , time2A ) ;
        
        etThread.osTimeNowF( tinP , time1B , time2B ) ;
        ZE( sCountT , time2B ) ;
        ZE( countT , time1B ) ;
        
        }
            case 3: { do incv02AM( vv ) ; while( vv ) ; break ; }
            case 2: { do  inc02AM( vv ) ; while( vv ) ; break ; }
            case 1: { do      ++ vv   ; while( vv ) ; break ; }
        {
        switch( idTest )
        
        etThread.osTimeNowF( tinP , time1A , time2A ) ;
        ZE( sCountT , time2A ) ;
        ZE( countT , time1A ) ;
        
        ZE( countT , vv ) ;
    {
    for( countT idSample = 1 ; idSample <= CsAMPLES ; idSample ++ )
    ZE( sCountT , time2S ) ;
    ZE( countT , time1S ) ;
{
for( countT idTest = 1 ; idTest <= 3 ; idTest ++ )

thirdC::dosPriorityIF( tinP , ifcTHREADpRIORITY_RUSH ) ;

TODO

#define CsAMPLES 1

/*1*/WAKEsHOWtEXT( "doodle.speed.measurement.incv02AM" )/*1*/
/**/
*/
/*
//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


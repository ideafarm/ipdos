
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


//VISIBLE

REST
etThread.osProcessIdPhaseAdamF( tinP , ifcIDpHASEhANDOFFoLD_SHUTTINGdOWN ) ;

etThread.strokeF( tinP , T("press the enter key") ) ;

//etThread.ifcDatumF( tinP , 0                                 , flDATUM2_OS2                              , 0 , 0 , 0 , "it is illegal to specify flDATUM2_OS2                     in the definition of an adam" ) ;
//etThread.ifcDatumF( tinP , 0                                 , flDATUM2_WINDOWS95                        , 0 , 0 , 0 , "it is illegal to specify flDATUM2_WINDOWS95               in the definition of an adam" ) ;
//etThread.ifcDatumF( tinP , 0                                 , flDATUM2_WINDOWS98                        , 0 , 0 , 0 , "it is illegal to specify flDATUM2_WINDOWS98               in the definition of an adam" ) ;
//etThread.ifcDatumF( tinP , 0                                 , flDATUM2_WINDOWSnT                        , 0 , 0 , 0 , "it is illegal to specify flDATUM2_WINDOWSnT               in the definition of an adam" ) ;
//etThread.ifcDatumF( tinP , 0                                 , flDATUM2_LINUX                            , 0 , 0 , "it is illegal to specify flDATUM2_LINUX                   in the definition of an adam" ) ;
//etThread.ifcDatumF( tinP , flDATUM1_CLASStIMECARD            , flDATUM2_null                             , 0 , 0 , "it is illegal to specify flDATUM1_CLASStIMECARD           in the definition of an adam" ) ;
//etThread.ifcDatumF( tinP , flDATUM1_CLASStIMER               , flDATUM2_null                             , 0 , 0 , "it is illegal to specify flDATUM1_CLASStIMER              in the definition of an adam" ) ;
//etThread.ifcDatumF( tinP , flDATUM1_CLASSwORK                , flDATUM2_null                             , 0 , 0 , "it is illegal to specify flDATUM1_CLASSwORK               in the definition of an adam" ) ;
//etThread.ifcDatumF( tinP , flDATUM1_CLASStRACElEVEL2         , flDATUM2_null                             , 0 , 0 , "it is illegal to specify flDATUM1_CLASStRACElEVEL2        in the definition of an adam" ) ;
//etThread.ifcDatumF( tinP , flDATUM1_CLASStRACElEVEL1         , flDATUM2_null                             , 0 , 0 , "it is illegal to specify flDATUM1_CLASStRACElEVEL1        in the definition of an adam" ) ;
//etThread.ifcDatumF( tinP , flDATUM1_CLASStRACEaLWAYSfIREdLL  , flDATUM2_null                             , 0 , 0 , "it is illegal to specify flDATUM1_CLASStRACEaLWAYSfIREdLL in the definition of an adam" ) ;
//etThread.ifcDatumF( tinP , flDATUM1_CLASStRACEaLWAYShIREdLL  , flDATUM2_null                             , 0 , 0 , "it is illegal to specify flDATUM1_CLASStRACEaLWAYShIREdLL in the definition of an adam" ) ;
//etThread.ifcDatumF( tinP , flDATUM1_CLASStRACEaLWAYSfIRE     , flDATUM2_null                             , 0 , 0 , "it is illegal to specify flDATUM1_CLASStRACEaLWAYSfIRE    in the definition of an adam" ) ;
//etThread.ifcDatumF( tinP , flDATUM1_CLASStRACEaLWAYShIRE     , flDATUM2_null                             , 0 , 0 , "it is illegal to specify flDATUM1_CLASStRACEaLWAYShIRE    in the definition of an adam" ) ;
//etThread.ifcDatumF( tinP , flDATUM1_CLASStACHOMETER          , flDATUM2_null                             , 0 , 0 , "it is illegal to specify flDATUM1_CLASStACHOMETER         in the definition of an adam" ) ;
//etThread.ifcDatumF( tinP , flDATUM1_CLASSeXCEPTIONjOURNAL    , flDATUM2_null                             , 0 , 0 , "it is illegal to specify flDATUM1_CLASSeXCEPTIONjOURNAL   in the definition of an adam" ) ;
//etThread.ifcDatumF( tinP , flDATUM1_CLASSeXCEPTIONiMPOTENCE  , flDATUM2_null                             , 0 , 0 , "it is illegal to specify flDATUM1_CLASSeXCEPTIONiMPOTENCE in the definition of an adam" ) ;

etThread.ifcDatumF( tinP , flDATUM1_CLASSjOURNAL            , flDATUM2_strokeS                          , 0 , 0 , (byteT*)psttMyText , ( CSpREFIX + psttMyText->idAdam ) * sizeof( strokeS ) ) ;
etThread.ifcDatumF( tinP , flDATUM1_CLASSjOURNAL            , flDATUM2_ScOUNT                           , 0 , 0 , (byteT*)pscMyData , sizeof pscMyData ) ;
etThread.ifcDatumF( tinP , flDATUM1_CLASSjOURNAL            , flDATUM2_osTextT                          , 0 , 0 , "this is some text, represented in the operating system's native format for text" ) ;
etThread.ifcDatumF( tinP , flDATUM1_CLASSjOURNAL            , flDATUM2_countT | flDATUM2_NULLtERMINATED , 0 , 0 , (byteT*)pcMyData2 , sizeof pcMyData2 ) ;
etThread.ifcDatumF( tinP , flDATUM1_CLASSjOURNAL            , flDATUM2_countT                           , 0 , 0 , (byteT*)pcMyData , sizeof pcMyData ) ;
etThread.ifcDatumF( tinP , flDATUM1_CLASSqUESTION           , flDATUM2_null                             , 0 , 0 , "log a question that is to be answered by a human or hybrid citizen here" ) ;
etThread.ifcDatumF( tinP , flDATUM1_CLASSqUERY              , flDATUM2_null                             , 0 , 0 , "log a query that is to be answered by a robot citizen here" ) ;
etThread.ifcDatumF( tinP , flDATUM1_CLASSjOURNAL            , flDATUM2_null                             , 0 , 0 , "log a comment, usually to note an exceptional event, here" ) ;
etThread.ifcDatumF( tinP , flDATUM1_CLASScOMMENToRCHID      , flDATUM2_null                             , 0 , 0 , "log praise of IdeaFarm " "(tm) City, or of one of its citizens, here" ) ;
etThread.ifcDatumF( tinP , flDATUM1_CLASScOMMENToNION       , flDATUM2_null                             , 0 , 0 , "log constructive criticism of IdeaFarm " "(tm) City, or one of its citizens, here" ) ;

etThread.strMakeF( tinP , psttMyText , T("please do not log long strings of strokes; convert them to osText to shrink them") ) ; ___( psttMyText ) ;
ZE( strokeS* , psttMyText ) ;
sCountT pscMyData[] = { - 2 , - 1 , 0 , 1 , 2 } ;
countT  pcMyData2[] = { 1 , 2 , 3 , 4 , 0 } ;
countT  pcMyData[] = { 1 , 2 , 3 , 4 } ;

TODO

/*1*/WAKEhIDE( "example.simplest.snip.0010049.flDATUM1" )/*1*/
/**/
*/
some, but not all, of the flDATUM1 flags are illegal in adam definitions
\<A HREF=\"5.f400104.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//



//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return bHit ;
    if( pBaton ) pBaton->ungrabF( tinP ) ;
    }
        default : { __( idLeverType ) ; __1 break ; }
        }
            break ;
            ;
                : !thirdC::c_memcmpIF( tinP , (byteT*)c1P , (byteT*)c2P , cbLever )
                ? c1P == c2P
            bHit = !c1P || !c2P
        {
        case ifcIDtYPElEVER_BLOBdOOMED           :
        case ifcIDtYPElEVER_PTR_soulC      : { bHit = c1P && c2P ?    *(soulC*)c1P == *(soulC*)c2P    : c1P == c2P ; break ; }
        case ifcIDtYPElEVER_PTR_nicNameC   : { bHit = c1P && c2P ? *(nicNameC*)c1P == *(nicNameC*)c2P : c1P == c2P ; break ; }
        }
            break ;

                bHit = c1P && c2P && !thirdC::c_strcmpIF( tinP , (osTextT*)c1P , (osTextT*)c2P ) ;
        {
        case ifcIDtYPElEVER_PTR_osTextT    :
        }
            break ;

                bHit = ( !c1P && !c2P ) || ( c1P && c2P && !( *(plateC*)c1P - *(plateC*)c2P ) ) ;
        {
        case ifcIDtYPElEVER_PTR_plateC    :
        }
            break ;

                bHit = ( !c1P && !c2P ) || ( c1P && c2P && pEther && !pEther->strCompareF( tinP , (strokeS*)c1P , (strokeS*)c2P ) ) ;
                etherC* pEther = third.third_pEtherContainsMe_F() ;
        {
        case ifcIDtYPElEVER_PTR_strokeS    :
        case ifcIDtYPElEVER_PTR_countT     : { bHit =  c1P &&  c2P             && !third.strCompareF(  tinP , (countT*)c1P , (countT*)c2P           ) ; break ; }
        case ifcIDtYPElEVER_PTR_BLOB       : { bHit = !c1P || !c2P ? c1P == c2P : !thirdC::c_memcmpIF( tinP , (byteT*)c1P  , (byteT*)c2P  , cbLever ) ; break ; }
        case ifcIDtYPElEVER_PTR_lenPrefixedCountT :
        case ifcIDtYPElEVER_countT         : { bHit = c1P == c2P ; break ; }
        case ifcIDtYPElEVER_tid            :
        }
            break ;

                bHit = ( !c1P && !c2P ) || ( c1P && c2P && pEther && !pEther->strCompareF( tinP , (const strokeS**)c1P , (const strokeS**)c2P ) ) ;
                etherC* pEther = third.third_pEtherContainsMe_F() ;
        {
        case ifcIDtYPElEVER_PTR_ptrStrokeS :
    {
    switch( idLeverType )
    ZE( boolT , bHit ) ;
    else if( osTidOwner != tinP.osTid && !bDying && !( F(stackk.flagsF(tinP)) & flSTACKc_ALLOWmULTIPLEuNSERIALIZED ) ) BLAMMO ;
    else if( !osTidOwner ) osTidOwner = tinP.osTid ;
    if( pBaton ) pBaton->grabF( tinP , TAG( TAGiDnULL ) ) ;
    SCOOP
{
/*1*/boolT switchC::bHitF( tinS& tinP , const countT c1P  , const countT c2P )/*1*/

/**/
*/
 c2P
 c1P
arguments
 two lever values are equivalent if they compare equal, using the comparison algorithm appropriate given the current value of idLeverType
it returns 1 iff these two lever values are equivalent
it assumes that c1P and c2P are two lever values
this function contains no overhead code and is written for maximum speed
it is illegal to refer to this symbol in the definition of an adam
\<A HREF=\"5.120000e.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$bHitF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


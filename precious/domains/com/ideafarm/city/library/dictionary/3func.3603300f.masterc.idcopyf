
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return idCopy ;

    }
        }
            b_cLever.ungrabF( tinP ) ;
            }
                }
                    break ;

                    }
                        idCopy = c3.c2 ;
                        count3S& c3 = *(count3S*)(countT)swc3 ;
                    {
                    else
                    if( !swc3 ) __1
                {
                else
                if( cLever != cNameP ) continue ;
                cLever = swc3.leverF( tinP , idf ) ;
            {
            for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
            countT cFlavors = swc3.cFlavorsF( tinP ) ;
            b_cLever.grabF( tinP , TAGoR( TAGiDnULL , idLineCt , idiFileCt , pbBitsCt ) ) ;
        {
    {
    else
    if( tinP.pAdamGlobal1->_masterOldC_.pMePrime != this ) idCopy = tinP.pAdamGlobal1->_masterOldC_.pMePrime->idCopyF( tinP , cNameP ) ;

    ZE( countT , idCopy ) ;

    }
        if( POOP ) return 0 ;
        __Z( cNameP ) ;
        __( !tinP.pAdamGlobal1->_masterOldC_.pMePrime ) ;
        if( POOP ) return 0 ;
    {
    IFbEcAREFUL
    upDnC upDn( tinP , TAGoR( TAGiDnULL , idLineCt , idiFileCt , pbBitsCt ) , IDFILE , ether ) ;
    scoopC scoop( tinP , LF , ether ) ;
{
/*1*/countT masterOldC::idCopyF( tinS& tinP , const countT cNameP )/*1*/

/**/
*/
\<A HREF=\"5.149000f.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$idCopyF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//


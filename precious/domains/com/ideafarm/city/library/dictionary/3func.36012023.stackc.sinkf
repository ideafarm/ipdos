
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    _OUTbATONsTACKc_
    sinkF( tinP , idSlotP , (countT)pc8P , flagsP , pSubtractF , subtractionParmP ) ;
    if( !pSubtractF ) pSubtractF = subtractCount8F ;
    ifc4FT pSubtractF = pSubtractFP ;
    _INbATONsTACKc_

    }
        if( third ) return ;
        __( F(flags) & flSTACKc_XRAY ) ;
        __( idType && idType - ifcSTACKtYPE_PTR_count8S ) ;
        FV( flSTACKsINK , flagsP ) ;
        __Z( pc8P ) ;
        __( idSlotP ) ;
        if( third ) return ;
    {
    IFbEcAREFUL
    SCOOP   
{
/*1*/voidT stackC::sinkF( tinS& tinP , countT& idSlotP , const count8S* const pc8P , const flagsT flagsP , ifc4FT pSubtractFP , const countT subtractionParmP )/*1*/

}
    return scSgn ;
    if( c3P ) ;
    }
        scSgn = ether.strCompareF( tinP , (countT*)c1P , (countT*)c2P , 8 , 0 , 0 , 0 , 1 ) ;
        etherC& ether = *(etherC*)pEther ;
    {
    if( pEther )
    ZE( sCountT , scSgn ) ;

    }
        if( !c1P || !c2P ) return 0 ;
    {
    IFbEcAREFUL
{
/**/countT subtractCount8F( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P )
*/
 pSubtractFP
 ||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/1snip.001008b.flSTACKsINK_!||
 flagsP
 pc8P
arguments
after calling this function, stackC::extractF( tinP ) can be used to remove the item that it references
  the function must be of type ifc3FT, i.e.: "countT (*ifc3FT)( tinS& tinP , countT& , countT& , countT& )"
   }
   return ((count8S*)c1P)->c1 - ((count8S*)c2P)->c1 ;
   etherC& ether = *(etherC*)pEther ;
   if( !pEther || !c1P || !c2P ) return ;
{
   countT subtractCount8F( countT& pEther , countT& c1P , countT& c2P )
  cast its parameters, as in this example (which, unlike the default subtraction function, only looks at c1)
  pDensityFP should be a function that returns the "density" of the object
   an item will not sink past another item of the same density
  iow, this function preserves ordering
 the new item sinks until the item below it is equally or more dense than it is
like operator << except the new item "sinks" into the stack
  \<A HREF=\"5.9d10104.1.1.0.html\"\>9d10104:  WAKEsHOW( "example.simplest.func.1150023.stackC.sinkF" )\</A\>
 simplest
examples
\<A HREF=\"5.1150023.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$sinkF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//


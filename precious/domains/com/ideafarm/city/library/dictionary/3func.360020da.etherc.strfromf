
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    _OUT_
    POSTPONEtEST( psttP ) ;_WQ

    }
        while( psttP->idAdam < csP ) strFuseF( tinP , psttP , tb ) ;_WQ
        TN( tb , " " ) ;_WQ
    {
    if( csP && psttP )

    if(    F(flagsFormatP) & flFORMAT_DIGITnAMES   ) { ___( psttP ) ; strReplaceF( tinP , psttP , 0 , ifcIDtYPEsTRrEPLACE_DIGITStOdIGITnAMES ) ; }
    if( !( F(flagsFormatP) & flFORMAT_FOREIGN    ) ) { ___( psttP ) ; strReverseF( tinP , psttP                                              ) ; }

    if( F(flagsFormatP) & flFORMAT_SIGNcOLrIGHT ) strFuseF( tinP , psttP , sttSign ) ;_WQ

    }
        strFuseF( tinP , psttP , psttBuf ) ; ___( psttP ) ;_WQ
        else                   psttBuf[ CSpREFIX + 1 ] = S1C( '?' -  1 + radix - 62 ) ;
        else if( radix <= 62 ) psttBuf[ CSpREFIX + 1 ] = S1C( 'A' -  1 + radix - 36 ) ;
        else if( radix <= 36 ) psttBuf[ CSpREFIX + 1 ] = S1C( 'a' -  1 + radix - 10 ) ;
             if( radix <= 10 ) psttBuf[ CSpREFIX + 1 ] = S1C( '0' -  1 + radix      ) ;
        psttBuf[ CSpREFIX + 1 ] = 0 ;_WQ
        psttBuf[ CSpREFIX     ] = '_' ;_WQ
        SETpREFIX( psttBuf , 2 , 0 ) ;_WQ
        strokeS psttBuf[ CSpREFIX + 2 ] ;_WQ
    {
    if( bRadixIndicator )

    delF( tinP , psttDigits ) ;_WQ
    strFuseF( tinP , psttP , psttDigits , 0 , 0 , strokeS() , 0 , 0 ,/*U::SOUL?*/ 4 + csP + csttExtraP ) ; //CALLER MUST TAG ___( psttP ) ;_WQ

    if( F(flagsFormatP) & flFORMAT_SIGNcOLlEFT ) strFuseF( tinP , psttP , sttSign , 4 + csP + csttExtraP ) ;_WQ

    }
        strMakeF( tinP , psttP , T("") , cstta + csttExtraP ) ; //CALLER MUST TAG ___( psttP ) ;_WQ
        if( cstta < csP ) cstta = csP ;_WQ
        countT cstta = psttDigits->idAdam + 4 ;_WQ
    {
    if( psttDigits )

    }
        __Z( psttDigits ) ;_WQ

        if( bPrependedSign && sttFill == S1C('0') ) strFuseF( tinP , psttDigits , sttSign , 0 , 1 ) ;_WQ

        }
            if( scPad > 0 ) { strResizeF( tinP , psttDigits , scPad + psttDigits->idAdam , sttFill ) ; ___( psttDigits ) ; }
            sCountT scPad = cPrecisionP - cPrecisionOld ;_WQ
            countT cPrecisionOld = psttDigits->idAdam - idcPoint ;_WQ
            countT idcPoint = strIdF( tinP , S1C('.') , psttDigits ) ;_WQ
        {
        else if( psttDigits )
        }
            //U::if( psttDigits && idcDotZe == psttDigits->idAdam - 1 ) { strReplaceF( tinP , psttDigits , 0 , tz , T("") ) ; ___( psttDigits ) ; }
            }
                strReplaceF( tinP , psttDigits , 0 , tz , T("") ) ; ___( psttDigits ) ;_WQ
            {
            if( psttDigits && idcDotZe == psttDigits->idAdam - 1 )
            countT idcDotZe = strIdF( tinP , 0 , flSTRmATCH_null , idf , sttq , tz , psttDigits ) ;_WQ
            TN( tz , "." ) ; tz += TF2(0,flFormatDigit) ; //U: DO THIS KIND OF THING WHEREVER NEEDED; (SEE THE WAY THAT ALPHABET1 ENCODES T('0') VS TF1(0))
            strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;_WQ
            countT idf = 1 ;_WQ
        {
        if( !cPrecisionP )

        }
            if( scPad > 0 ) { strResizeF( tinP , psttDigits , scPad + psttDigits->idAdam , sttFill , 1 ) ; ___( psttDigits ) ; }
            sCountT scPad = idcPointP - idcPointOld ;_WQ
            if( bPrependedSign && sttFill == S1C('0') ) idcPointOld ++ ;_WQ
            countT idcPointOld = strIdF( tinP , S1C('.') , psttDigits ) ;_WQ
        {
        if( idcPointP && psttDigits )

        if( bPrependedSign && sttFill != S1C('0') ) strFuseF( tinP , psttDigits , sttSign , 0 , 1 ) ;_WQ

        else if( F(flagsFormatP) & flFORMAT_FILLsIGN ) sttFill = sttSign ;
             if( F(flagsFormatP) & flFORMAT_FILLzE ) sttFill = S1C('0') ;
        strokeS sttFill = S1C(' ') ;_WQ

        }
            }
                }
                    else if( !bFirstFractionalDigitDone ) { strFuseF( tinP , psttDigits , T("0") ) ; ___( psttDigits ) ; }
                    }
                        strFuseF( tinP , psttDigits , T(".0") ) ; ___( psttDigits ) ;_WQ
                        }
                            strFuseF( tinP , psttDigits , T("0") ) ; ___( psttDigits ) ;_WQ
                            shiftLeft -= cbpd ;_WQ
                        {
                        while( shiftLeft > 0 )
                    {
                    if( shiftLeft > 0 )

                    }
                        if( !shiftLeft ) { strFuseF( tinP , psttDigits , T(".") ) ; ___( psttDigits ) ; }
                        shiftLeft -= cbpd ;_WQ

                        if( !shiftLeft && !bFirstFractionalDigitDone ) bFirstFractionalDigitDone = 1 ;_WQ
                        strFuseF( tinP , psttDigits , TF4(digit,flFormatDigit,0,radix) ) ; ___( psttDigits ) ;_WQ
                        highDigitF( tinP , *this , digit , fraction , radix , cbfRemaining , 1 ) ;_WQ
                        ZE( countT , digit ) ;_WQ
                    {
                    if( cbfRemaining && ( !bFirstFractionalDigitDone || fraction ) )

                    }
                        if( bFirstFractionalDigitDone && !fraction ) break ;

                        if( !shiftLeft ) { strFuseF( tinP , psttDigits , T(".") ) ; ___( psttDigits ) ; }
                        shiftLeft -= cbpd ;_WQ

                        if( !shiftLeft && !bFirstFractionalDigitDone ) bFirstFractionalDigitDone = 1 ;_WQ
                        cbfRemaining -= cbpd ;_WQ
                        strFuseF( tinP , psttDigits , TF4(digit,flFormatDigit,0,radix) ) ; ___( psttDigits ) ;_WQ
                        highDigitF( tinP , *this , digit , fraction , radix , cbpd ) ;_WQ
                        ZE( countT , digit ) ;_WQ
                    {
                    while( cbfRemaining >= cbpd )
                    countT cbfRemaining = 0x18 - cbHighestDigit ;_WQ

                    }
                        if( !shiftLeft ) { strFuseF( tinP , psttDigits , T(".") ) ; ___( psttDigits ) ; }
                        shiftLeft -= cbHighestDigit ;_WQ

                        strFuseF( tinP , psttDigits , TF4(digit,flFormatDigit,0,radix) ) ; ___( psttDigits ) ;_WQ
                        highDigitF( tinP , *this , digit , fraction , radix , cbHighestDigit ) ;_WQ
                        ZE( countT , digit ) ;_WQ
                    {
                    if( cbHighestDigit )
                    countT cbHighestDigit = shiftLeft % cbpd ;_WQ
                {
                else
                }
                    }
                        if( !bFirstFractionalDigitDone ) bFirstFractionalDigitDone = 1 ;_WQ
                        strFuseF( tinP , psttDigits , TF4(digit,flFormatDigit,0,radix) ) ; ___( psttDigits ) ;_WQ
                        highDigitF( tinP , *this , digit , fraction , radix , cbpd ) ;_WQ
                        ZE( countT , digit ) ;_WQ
                    {
                    while( !bFirstFractionalDigitDone || fraction )

                    }
                        if( !bFirstFractionalDigitDone ) bFirstFractionalDigitDone = 1 ;_WQ
                        strFuseF( tinP , psttDigits , TF4(digit,flFormatDigit,0,radix) ) ; ___( psttDigits ) ;_WQ
                        highDigitF( tinP , *this , digit , fraction , radix , cbpd - shiftRight ) ;_WQ
                        ZE( countT , digit ) ;_WQ
                    {
                    if( shiftRight && ( !bFirstFractionalDigitDone || fraction ) )

                    }
                        if( bFirstFractionalDigitDone && !fraction ) break ;
                        if( !bFirstFractionalDigitDone ) bFirstFractionalDigitDone = 1 ;_WQ
                        strFuseF( tinP , psttDigits , T("0") ) ; ___( psttDigits ) ;_WQ
                        shiftRight -= cbpd ;_WQ
                    {
                    while( shiftRight >= cbpd )

                    strFuseF( tinP , psttDigits , T("0.") ) ; ___( psttDigits ) ;_WQ
                {
                if( shiftRight >= 0 ) // THERE IS NO INTEGER PART
                ZE( boolT , bFirstFractionalDigitDone ) ;_WQ

                sCountT shiftLeft  = - shiftRight ;_WQ
                sCountT shiftRight = 0x7e - exponent ;_WQ
            {
            else
            }
                strFuseF( tinP , psttDigits , T("^")+TF4(shiftLeft/(sCountT)cbpd,flFormatDigit|flFORMAT_FILLzE|flFORMAT_FOREIGN|flFORMAT_SHOWpLUS,4,radix) ) ; ___( psttDigits ) ;_WQ

                }
                    if( scPad > 0 ) { strResizeF( tinP , psttDigits , scPad + psttDigits->idAdam , S1C('0') , 0 , 6 ) ; ___( psttDigits ) ; }
                    sCountT scPad = cPrecisionP - cPrecisionOld ;_WQ
                    countT cPrecisionOld = psttDigits->idAdam - idcPoint ;_WQ
                    countT idcPoint = strIdF( tinP , S1C('.') , psttDigits ) ;_WQ
                {
                if( cPrecisionP && psttDigits )

                }
                    if( !bFirstFractionalDigitDone ) bFirstFractionalDigitDone = 1 ;_WQ
                    strFuseF( tinP , psttDigits , TF4(digit,flFormatDigit,0,radix) ) ; ___( psttDigits ) ;_WQ
                    highDigitF( tinP , *this , digit , fraction , radix , cbfRemaining , 1 ) ;_WQ
                    ZE( countT , digit ) ;_WQ
                {
                if( cbfRemaining && ( !bFirstFractionalDigitDone || fraction ) )

                }
                    if( bFirstFractionalDigitDone && !fraction ) break ;
                    if( !bFirstFractionalDigitDone ) bFirstFractionalDigitDone = 1 ;_WQ
                    cbfRemaining -= cbpd ;_WQ
                    strFuseF( tinP , psttDigits , TF4(digit,flFormatDigit,0,radix) ) ; ___( psttDigits ) ;_WQ
                    highDigitF( tinP , *this , digit , fraction , radix , cbpd ) ;_WQ
                    ZE( countT , digit ) ;_WQ
                {
                while( cbfRemaining >= cbpd )
                countT cbfRemaining = 0x18 ;_WQ

                strFuseF( tinP , psttDigits , T(".") ) ; ___( psttDigits ) ;_WQ
                ZE( boolT , bFirstFractionalDigitDone ) ;_WQ

                sCountT shiftLeft  = - shiftRight ;_WQ
                sCountT shiftRight = 0x7e - exponent ;_WQ

                }
                    }
                        fraction >>= cbpd - cOdd ;_WQ
                        exponent  += cbpd - cOdd ;_WQ
                    {
                    if( cOdd )
                    countT cOdd = ( exponent - 0x7e ) % cbpd ;_WQ
                {
                // NORMALIZE EXPONENT SO THAT IT IS A MULTIPLE OF THE NUMBER OF BITS PER DIGIT
            {
            if( F(flagsFormatP) & flFORMAT_EXPONENT )

            // NOW fraction USES 24_9 BITS AND exponent IS GUARANTEED TO BE NONZE
            else                              fraction |= 0x800000 ;
            else if( !exponent              ) exponent = 1 ;
                 if( !exponent && !fraction ) exponent = 0x7f ;
            countT fraction = image  & 0x7fffff ;_WQ
            countT exponent = ( image >> 0x17 ) & 0xff ;_WQ
            boolT  bNeg     = image & 0x80000000 ;_WQ
            const countT cbpd = cbpdF( radix ) ;_WQ

            countT image = *(countT*)&valueP ;_WQ
        {

        strMakeF( tinP , psttDigits , T("") , 0x100 ) ; ___( psttDigits ) ; // MUST ACCOUNT FOR, IN BINARY, MAXIMUM IMPLICIT DIGITS PLUS ALL STORED DIGITS PLUS FORMATTING STROKES
    {
    ZE( strokeS* , psttDigits ) ; // PREPENDED SIGN, DIGITS.  WILL -NOT- CONTAIN: SIGN COLUMNS, RADIX INDICATOR

    const boolT bRadixIndicator = radix != 16 && !( F(flagsFormatP) & flFORMAT_NObASE ) ;_WQ

    }
        else                                                           sttSign = S1C(' ') ;
        else if( F(flagsFormatP) & flFORMAT_SHOWpLUS )                    sttSign = S1C('+') ;
             if( valueP < 0 && !( F(flagsFormatP) & flFORMAT_UNSIGNED ) ) sttSign = S1C('-') ;
    {
    strokeS sttSign ;_WQ

    }
        bPrependedSign = bNeedSign && !bSignCols ;_WQ
        boolT bSignCols = F(flagsFormatP) & flFORMAT_SIGNcOLlEFT || F(flagsFormatP) & flFORMAT_SIGNcOLrIGHT ;_WQ
        boolT bNeedSign = ( valueP < 0 && !( F(flagsFormatP) & flFORMAT_UNSIGNED ) ) || ( F(flagsFormatP) & flFORMAT_SHOWpLUS ) ;_WQ
    {
    ZE( boolT , bPrependedSign ) ;_WQ

    if( !radix ) radix = 16 ;_WQ
    countT radix = radixP ;_WQ
    _INoLD_
    //IF RADIX IS NOT 16 THEN AN EXPLICIT RADIX INDICATOR WILL BE INCLUDED (E.G.: "12345_7" INDICATES 12345 BASE 8)

    //U: OPTIMIZE TO ELIMINATE USE OF strReverseF BY REWRITING THIS FUNCTION
    const flagsT flFormatDigit = F(flagsFormatP) & flFORMAT_NObIGITvALUES ?  flFORMAT_NObASE | flFORMAT_NObIGITvALUES : flFORMAT_NObASE ;_WQ

    }
        if( POOP ) return ;
        { countT cb = 4 ; __( sizeof valueP - cb ) ; }
        __( radixP && !cbpdF( radixP ) ) ;_WQ
        __(  tinP.strokeMode.idCasteDefault && radixP > 0x10000 ) ;_WQ
        __( !tinP.strokeMode.idCasteDefault && radixP > 64 ) ;_WQ
        __( radixP && radixP < 2 ) ;_WQ
        __NZ( psttP ) ;_WQ
        if( POOP ) return ;
    {
    IFbEcAREFUL
    SCOOP
{
/*1*/voidT etherC::strFromF( tinS& tinP , strokeS*& psttP , const measureT valueP , const flagsT flagsFormatP , const countT csP , const countT idcPointP , const countT cPrecisionP , const countT radixP , const countT csttExtraP )/*1*/

/**/
*/
 csttExtraP
  if not 0 then must be 2, 4, 8, 0x10 , 0x20, or 0x40 (2_, 4_, 8_, 16_, 32_, 64_)
  if 0 then 16_9 is implied
  can be 0
 radixP
  use this to set the precision desired for the fractional part
  if 0 and the fractional part is 0 , the radix point and fractional part will not appear
  can be 0
  U::edit to truncate to cPrecisionP fractional bigits
  if more digits are required to fully represent the fractional part, the fractional part will be longer than cPrecisionP
  this is the minimum number of fractional digits that is to appear
 cPrecisionP
  if more strokes are needed to represent the integer part, the radix point will be at a position greater than idcPointP
  if not 0, then is the minimum position for the radix point
  can be 0
  use this to align radix points vertically in a column of numbers
 idcPointP
  the resulting string can be longer but will never be shorter than csP strokes
  pad if necessary to this length
  can be 0
 csP
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/1snip.001004c.flFORMAT!||
 flagsFormatP
  this is the value that is to be represented as a string of bigits
 valueP
  will be set to contain the string
 psttP
 tinP
arguments
if you want rounding, you must do it explicitly, in code, to valueP, before calling me
it always renders the exact value stored in the measureT object valueP
this function never does rounding
  \<A HREF=\"5.6030104.1.1.0.html\"\>6030104:  WAKEsHOW( "example.simplest.func.10300f9.etherC.strFromF" )\</A\>
 simplest
examples
\<A HREF=\"5.10300f9.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$strFromF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//



//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return idsLath ;

    if( idsLath > psttSmallP->idAdam ) idsLath = 0 ;

    }
        else if( !cNest ) break ;
        }
            if( bFound ) break ;

            }
                }
                    break ;
                    if( !( -- cNest ) ) bFound = 1 ;
                {
                case sa_SSSoReND :
                case sa_SSSaNDeND :
                }
                    break ;
                    ++ cNest ;
                {
                case sa_SSSoR :
                case sa_SSSaND :
                }
                    break ;
                    cArmLiterals = 0 ;
                {
                case sa_SSSlITERALeND :
                }
                    break ;
                    cArmLiterals = - 1 ; //A:ASSUME: STRING LENGTH CANNOT EXCEED maxCountTT
                {
                case sa_SSSlITERALbEGIN :
                }
                    break ;
                    cArmLiterals = 1 ;
                {
                case sa_SSSlITERAL :
            {
            switch( psttSmallP[ CSpREFIX - 1 + idsLath ].idAdam )
            ZE( boolT , bFound ) ;
        {
        else if( psttSmallP[ CSpREFIX - 1 + idsLath ].idCaste == sc_ccSSS )
        else if( cArmLiterals                                            ) cArmLiterals -- ;
             if( psttSmallP[ CSpREFIX - 1 + idsLath ].idCaste == sc_ccSSS && psttSmallP[ CSpREFIX - 1 + idsLath ].idAdam == sa_SSSlITERALeND ) cArmLiterals = 0 ;
    {
    for( ; idsLath <= psttSmallP->idAdam ; idsLath ++ )
    countT idsLath = idsWothP ;
    ZE( boolT , cArmLiterals ) ;
    ZE( countT , cNest ) ;

    }
        if( POOP ) return 0 ;
        __Z( idsWothP ) ;
        __Z( psttSmallP ) ;
        if( POOP ) return 0 ;
    {
    IFbEcAREFUL
{
/*1*/countT etherC::strIdLathExpressionF( tinS& tinP , const strokeS* const psttSmallP , countT idsWothP )/*1*/

/**/
*/
will return idsWothP except when idsWoth points to the beginning of an "and subexpression" or an "or subexpression"
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return *this ;                                                                                                                  \
    idMe += ((fooC*)&plateP)->idMe ;                                                                                                \
{                                                                                                                                   \
plateC& fooC::operator +=( plateC& plateP )                                                                                         \
                                                                                                                                    \
}                                                                                                                                   \
    return scSgn ;                                                                                                                  \
    sCountT scSgn = idMe - (*(fooC*)&caP).idMe ;                                                                                    \
    TINSL                                                                                                                           \
{                                                                                                                                   \
sCountT fooC::operator -( const plateC& caP ) const                                                                                 \
                                                                                                                                    \
}                                                                                                                                   \
    return *this ;                                                                                                                  \
    idMe = (*(fooC*)&plateP).idMe ;                                                                                                 \
{                                                                                                                                   \
plateC& fooC::operator =( plateC& plateP )                                                                                          \
                                                                                                                                    \
}                                                                                                                                   \
{                                                                                                                                   \
idMe( idP )                                                                                                                         \
fooC::fooC( const countT idP ) :                                                                                                    \
                                                                                                                                    \
}                                                                                                                                   \
    CONoUTrAW3( "fooey: " , idMe , "\r\n" ) ;                                                                                       \
{                                                                                                                                   \
fooC::~fooC( voidT )                                                                                                                \
                                                                                                                                    \
}                                                                                                                                   \
    return *this ;                                                                                                                  \
    sP << idMe ;                                                                                                                    \
{                                                                                                                                   \
plateC& fooC::operator >>( soulC& sP )                                                                                              \
                                                                                                                                    \
}                                                                                                                                   \
    return new( 0 , tinP , LF ) fooC ;                                                                                                   \
{                                                                                                                                   \
fooC* fooC::newF( tinS& tinP , const countT idLineP , const countT idiFileP )                                                                                                      \
                                                                                                                                    \
NEWdELcLASS( 1 , fooC )                                                                                                             \
                                                                                                                                    \
;                                                                                                                                   \
}                                                                                                                                   \
    plateC& operator +=( plateC& plateP ) ;                                                                                         \
    inline operator countT( voidT ) { return idMe ; }                                                                               \
    fooC( const countT idP = 0 ) ;                                                                                                  \
    PLATEcsTANDARDdECLARATIONS( fooC )                                                                                              \
                                                                                                                                    \
    public :                                                                                                                        \
                                                                                                                                    \
    countT idMe ;                                                                                                                   \
{                                                                                                                                   \
class fooC : public plateC                                                                                                          \
                                                                                                                                    \
#define FOOcLASS_plateC                                                                                                             \

/*1*//*FOOcLASS_plateC*//*1*/
/**/
*/
application code would define a class using this code as a baseline
used in adam definitions that illustrate use of the plateC class
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//



//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etherC::loafIF( tinP ) ;

}
    etThread.strokeF( tinP , T("[bUndefined,theta,aHeading,aElevation]: ")+TF2(bHeadingUndefined,flFORMAT_NObIGITvALUES)+T("    ")+TF2(theta,flFORMAT_NObIGITvALUES)+T("    ")+TF2(aHeading,flFORMAT_NObIGITvALUES)+T("    ")+TF2(aElevation,flFORMAT_NObIGITvALUES)+T("    [")+TF2(mXYZ[0],flFORMAT_NObIGITvALUES)+T(",")+TF2(mXYZ[1],flFORMAT_NObIGITvALUES)+T(",")+TF2(mXYZ[2],flFORMAT_NObIGITvALUES)+T("]\r\n") ) ;
    boolT bHeadingUndefined = directionAM( aHeading , aElevation , mXYZ , 0 ) ;

    }
        else if( 1.0 - FUZZ4  < mXYZ[ offc ]  ) mXYZ[ offc ] =   1.0 ;
        else if( mXYZ[ offc ] < - 1.0 + FUZZ4 ) mXYZ[ offc ] = - 1.0 ;
             if( - FUZZ4 < mXYZ[ offc ] && mXYZ[ offc ] < FUZZ4 ) mXYZ[ offc ] = 0.0 ;
    {
    for( countT offc = 0 ; offc <= 2 ; offc ++ )

    //measureT mXYZ[] = { 0.0 , tinP.brcm04Raw , m1 } ;
    measureT mXYZ[] = { tinP.brcm04Raw , 0.0 , m1 } ;
    BOSmEASURE04( WHATgbo , sin( theta ) )
    measure04T m1 = tinP.brcm04Raw ;
    BOSmEASURE04( WHATgbo , cos( theta ) )
    ZE( measureT , aElevation ) ;
    ZE( measureT , aHeading   ) ;
{
//for( measureT theta = 0.0 ; theta >= - PI * 33.0 / 64.0 ; theta -= PI / 32.0 )
for( measureT theta = 0.0 ; theta >= - PI * 33.0 / 32.0 ; theta -= PI / 32.0 )

TODO

/*1*/WAKEsHOWtEXT( "example.simplest.1snip.1c000038.directionAM" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


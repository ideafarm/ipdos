
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    }
        cbit = cbitNewP ;
        pc = pcn ;
        ether.delF( tinP , pc ) ;
        }
            setBitF( tinP , pcn , boff , fNeg ) ;
        {
        for( countT boff = cbit ; boff < cbitNewP ; boff ++ )
        boolT fNeg = bitF( tinP , pcn , cbit - 1 ) ;
        ether.memCopyF( tinP , (byteT*)pcn , (byteT*)pc , cBytesOld ) ;
        ether.memSetF( tinP , (byteT*)pcn , cWords * (SC/SB) ) ;
        ether.newF( tinP , LF , pcn , cWords ) ; ___( pcn ) ;
        countT cWords = 1 + cbitNewP / SC ; // A "word" HERE IS THE SIZE OF countT
        countT cBytes = 1 + cbitNewP / SB ;
        countT cBytesOld = 1 + cbit / SB ;
        ZE( countT* , pcn ) ;
    {
    if( cbitNewP > cbit )
    _IO_

    }
        if( ether ) return ;
    {
    IFbEcAREFUL
{
/**//*1*/voidT sCountC::growBitsToF( tinS& tinP , const countT cbitNewP )/*1*/
*/
 cbitNewP
arguments
increases the bit capacity, reallocating new storage if needed
it is illegal to refer to this symbol in the definition of an adam
\<A HREF=\"5.1080028.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$growBitsToF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


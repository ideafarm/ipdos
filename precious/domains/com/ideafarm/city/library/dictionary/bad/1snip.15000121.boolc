
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


;
}
    }
        return bOk ;

        }
            }
                pCursor = pCursor->pNext ;

                }
                    break ;
                    bOk = 0 ;
                {
                if( !pCursor->bOkF( pvP ) )
            {
            while( pCursor )
            boolC* pCursor = pRootP ;
            bOk = 1 ;
        {
        if( pRootP )
        ZE( boolT , bOk ) ;
    {
    inline static boolT andIF( boolC* pRootP , countT* pvP )
    }
        return bOk ;

        }
            }
                pCursor = pCursor->pNext ;

                }
                    break ;
                    bOk = 0 ;
                {
                if( !pCursor->bOkF( pvP ) )
            {
            while( pCursor )
            boolC* pCursor = pRootP ;
            bOk = 1 ;
        {
        if( pRootP )
        ZE( boolT , bOk ) ;
    {
    inline static boolT andIF( boolC* pRootP , osTextT* pvP )
    }
        return bOk ;

        }
            }
                pCursor = pCursor->pNext ;

                }
                    break ;
                    bOk = 0 ;
                {
                if( !pCursor->bOkF( vP ) )
            {
            while( pCursor )
            boolC* pCursor = pRootP ;
            bOk = 1 ;
        {
        if( pRootP )
        ZE( boolT , bOk ) ;
    {
    inline static boolT andIF( boolC* pRootP , countT vP )
    }
        return bOk ;

        }
            }
                pCursor = pCursor->pNext ;

                }
                    break ;
                    bOk = 1 ;
                {
                if( pCursor->bOkF( pvP ) )
            {
            while( pCursor )
            boolC* pCursor = pRootP ;
        {
        if( pRootP )
        ZE( boolT , bOk ) ;
    {
    inline static boolT orIF( boolC* pRootP , countT* pvP )
    }
        return bOk ;

        }
            }
                pCursor = pCursor->pNext ;

                }
                    break ;
                    bOk = 1 ;
                {
                if( pCursor->bOkF( pvP ) )
            {
            while( pCursor )
            boolC* pCursor = pRootP ;
        {
        if( pRootP )
        ZE( boolT , bOk ) ;
    {
    inline static boolT orIF( boolC* pRootP , osTextT* pvP )
    }
        return bOk ;

        }
            }
                pCursor = pCursor->pNext ;

                }
                    break ;
                    bOk = 1 ;
                {
                if( pCursor->bOkF( vP ) )
            {
            while( pCursor )
            boolC* pCursor = pRootP ;
        {
        if( pRootP )
        ZE( boolT , bOk ) ;
    {
    inline static boolT orIF( boolC* pRootP , countT vP )
    virtual boolT bOkF( countT*  pvP ) { BLAMMO ; return 0 ; }
    virtual boolT bOkF( osTextT* pvP ) { BLAMMO ; return 0 ; }
    virtual boolT bOkF( countT    vP ) { BLAMMO ; return 0 ; }
    }
        }
                             pFromP = 0 ;
            pCursor->pNext = pFromP ;
            while( pCursor->pNext ) pCursor = pCursor->pNext ;
            boolC* pCursor = pToP ;
        {
        else
        }
                   pFromP = 0 ;
            pToP = pFromP ;
        {
        if( !pToP )
    {
    inline static voidT pourIF( boolC*& pToP , boolC*& pFromP )
    }
        }
            pCursor->pNext = this ;
            while( pCursor->pNext ) pCursor = pCursor->pNext ;
            boolC* pCursor = pRootP ;
        {
        else
        if( !pRootP ) pRootP = this ;
    {
    inline boolC( boolC*& pRootP ) : pNext( 0 )
    }
        }
            DEL( pd ) ;
                                 pd->pNext = 0 ;
                        pRootP = pd->pNext ;
            boolC* pd = pRootP ;
        {
        while( pRootP )
    {
    inline static voidT deleteListIF( tinS& tinP , boolC*& pRootP )
    NEWdELcLASSpROTOS

    public :

    boolC* pNext ;
{
/*1*/class _export boolC/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


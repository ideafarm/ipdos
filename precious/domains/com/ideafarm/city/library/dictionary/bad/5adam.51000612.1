
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//

                            
REST

//THREADmODE2rESTORE
}
    WAITuNTILaLMOSTaLONE( 0 )

    etherC::loafIF( tinP ) ;

        etThread.osThreadF( TaRG1( tmGorillaReadF ) , idGorillaRead , (countT)&poolLog ) ;
    for( countT idGorillaRead = 1 ; idGorillaRead <= TUCK >> 6 ; idGorillaRead ++ )
     
    //{ puseC puseht( tinP , ifcIDpOOL_HOMEtEMP ) ; recordC list( tinP , count4S( LISTnAME_ROOTsYSTEM3 ) ) ; list.chatterF( tinP ) ; }
    poolC poolLog( tinP , TAG( TAGiDnULL ) , "log.adam" , flPOOLc_null , ifcIDsTATEsPACE_MULTIPLEaDAMS ) ;
{

etThread.ifcHireF( tinP , T("data entry") , 0x401061a , 0 , flHIRE_WAIT ) ;

}
    etThread.delF( tinP , pstt1m ) ;
    }
        etThread.boxZapF( tinP , psttc1 ) ;
    {
    FORsTRINGSiN1( pstt1m )
    etThread.boxMenuF( tinP , soul , T("///ideafarm/ephemeral/backed.up.daily/domains/com/ideafarm/ipdos/memorySpaces/")+T(thirdC::postUserNameIF())+T("/" STR( ifcIDmEMORYsPACE_APPLICATION ) "/stateSpaces/ffffefff/log.adam.poolC.*") ) ; ___( pstt1m ) ;
    ZE( strokeS* , pstt1m ) ;
{

//{ puseC puseht( tinP , ifcIDpOOL_HOMEtEMP ) ; recordC list( tinP , count4S( LISTnAME_ROOTsYSTEM3 ) ) ; list.chatterF( tinP ) ; }
//THREADmODE2oN( flTHREADmODE2_UNLOCKpOOLiDENTITY )

TODO

DONE( tmGorillaReadF )
}
    //etherC::etherFireImpersonateMonitorIF( tinP ) ;
    CONoUTrAW3( "gorilla " , idGorillaReadP , " gasp!\r\n" ) ;

    THREADmODE2rESTORE
    }
        // /*if( idGorillaReadP == 1 ) */{ CONoUTrAW( "0\r\n" ) ; }

        //++ s ; ether.osSleepF( tinP , TOCK ) ;
        //sleepC s( tinP , TAG( TAGiDnULL ) ) ;

        eTimeSum += timeE1 ;

        etThread.osTimeSubtractF( tinP , timeE1 , timeE2 , timeN1 , timeN2 ) ;
        etThread.osTimeNowF( tinP , timeE1 , timeE2 ) ;
        ZE( sCountT , timeE2 ) ;
        ZE( countT  , timeE1 ) ;
        // /*if( idGorillaReadP == 1 ) */{ CONoUTrAW( "1\r\n" ) ; }

        }
            //CONoUTrAW5( "[idCycle,cSteps]: " , idCycle , "    " , cSteps , "1\r\n" ) ;
            countT cSteps = idStepEnd - idStepBegin ;
            countT idStepEnd = tinP.monitor.idStep ;
            tinP.pc Utility[ 0 ] -- ;
            // /*if( idGorillaReadP == 1 ) */{ CONoUTrAW( "2\r\n" ) ; }

            }
                //{ recordC list( tinP , count4S( LISTnAME_ROOTaPPLICATION ) ) ; list.chatterF( tinP ) ; }
                
                // /*if( idGorillaReadP == 1 ) */{ CONoUTrAW( "3\r\n" ) ; }
                selectC sel12and23 = sel12 & sel23 ;                              sel12and23.walkF( tinP , selectWalkCBF ) ;
                // /*if( idGorillaReadP == 1 ) */{ CONoUTrAW( "4\r\n" ) ; }
                selectC sel23      = sel2  | sel3  ;
                // /*if( idGorillaReadP == 1 ) */{ CONoUTrAW( "5\r\n" ) ; }
                selectC sel12      = sel1  | sel2  ;                              //sel12.walkF( tinP , selectWalkCBF ) ;
                // /*if( idGorillaReadP == 1 ) */{ CONoUTrAW( "6\r\n" ) ; }
                selectC sel3( tinP , *pczfNickName , "charles" ) ;                //sel3.walkF( tinP , selectWalkCBF ) ;
                // /*if( idGorillaReadP == 1 ) */{ CONoUTrAW( "7\r\n" ) ; }
                selectC sel2( tinP , *pczfNickName , "betty"   ) ;                //sel2.walkF( tinP , selectWalkCBF ) ;
                // /*if( idGorillaReadP == 1 ) */{ CONoUTrAW( "8\r\n" ) ; }
                selectC sel1( tinP , *pczfNickName , "abraham" ) ;                //sel1.walkF( tinP , selectWalkCBF ) ;
                // /*if( idGorillaReadP == 1 ) */{ CONoUTrAW( "9\r\n" ) ; }
            {

            tinP.pc Utility[ 0 ] ++ ;
            countT idStepBegin = tinP.monitor.idStep ;
            // /*if( idGorillaReadP == 1 ) */{ CONoUTrAW( "a\r\n" ) ; }
            
            //DELlIST( datumS , pDatum ) ;
            //}
            //    }
            //        pCursor = pCursor->pNext ;
            //
            //        }
            //            case ifcIDtYPEmIXINdATUM_countTstrz  : { CONoUTrAW( T("pczValue: [")+T(pCursor->pczValue)+T("]\r\n") ) ; break ; }
            //            case ifcIDtYPEmIXINdATUM_blob : { CONoUTrAW( "postValue: \"" ) ; CONoUTrAW( pCursor->postValue ) ; CONoUTrAW( "\"\r\n" ) ; break ; }
            //            case ifcIDtYPEmIXINdATUM_countT      : { CONoUTrAW3( "cValue: " , pCursor->cValue , "\r\n" )                                    ; break ; }
            //        {
            //        switch( pCursor->idType )
            //    {
            //    while( pCursor )
            //    datumS* pCursor = pDatum ;
            //{
            //
            //selectC::enumerateIF( tinP , pDatum , *pczfNickName ) ; ___( pDatum ) ;
            //ZE( datumS* , pDatum ) ;
            //// /*if( idGorillaReadP == 1 ) */{ CONoUTrAW( "b\r\n" ) ; }
            
            listC::dictionaryReplaceOsTextIF( tinP , pczfNickName ) ;
            countT pczfNickName[] = { (countT)"nickname" , 0 } ;
            // /*if( idGorillaReadP == 1 ) */{ CONoUTrAW( "c\r\n" ) ; }
            
            puseC puseLog( tinP , poolLogP ) ;
            // /*if( idGorillaReadP == 1 ) */{ CONoUTrAW( "d\r\n" ) ; }
        {

        etThread.osTimeNowF( tinP , timeN1 , timeN2 ) ;
        ZE( sCountT , timeN2 ) ;
        ZE( countT  , timeN1 ) ;
        // /*if( idGorillaReadP == 1 ) */{ CONoUTrAW( "e\r\n" ) ; }

        //}
        //    eTimeSum = 0 ;
        //    meanLath = mean ;
        //    CONoUTrAW( tSay ) ;
        //
        //    ;
        //        +T("\r\n")
        //        +( !meanLath ? T("") : TF2((sCountT)(mean-meanLath),flFORMAT_NObIGITvALUES|flFORMAT_SIGNcOLrIGHT|flFORMAT_SHOWpLUS) )
        //        +T("    ")
        //        +TF2((sCountT)mean,flFORMAT_NObIGITvALUES|flFORMAT_SIGNcOLrIGHT|flFORMAT_SHOWpLUS)
        //        +T("    ")
        //        +TF2(idCycle/(countT)CoBS,flFORMAT_NObIGITvALUES)
        //        T("mean: [idSample,eTime,delta]: ")
        //    tSay =
        //    TN( tSay , "" ) ;
        //
        //    measureT mean = (measureT)eTimeSum / (measureT)CoBS ;
        //{                                       
        //if( !( ++ idCycle % CoBS ) )

        // /*if( idGorillaReadP == 1 ) */{ CONoUTrAW( "f\r\n" ) ; }

        //CONoUTrAW5( "[idCycle,idGorilla]: " , ++ idCycle , " " , idGorillaReadP , "\r\n" ) ;
    {
    while( !ether && !etThread )
    ZE( countT , idStepLath ) ;
    ZE( measureT , meanLath ) ;
    THREADmODE2oN( flTHREADmODE2_UNLOCKpOOLiDENTITY )
    ZE( countT , idCycle ) ;
    ZE( countT ,  eTimeSum ) ;

    CONoUTrAW3( "gorilla " , idGorillaReadP , " cry!\r\n" ) ;

    poolC& poolLogP       = *(poolC*)pTaskP->c2 ;
    countT idGorillaReadP =          pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 )
TASK( tmGorillaReadF )

}
    return flSELECTwALKcALLbACKrc_null ;
    CONoUTrAW( "================== **** CHATTERING SELECTED RECORD (END) ==============================\r\n" ) ;
    POPtINaRGS
    flagsT flagsRC = listC::walkIF( tinP , hRecordP ) ;
    tinP.ta.pushed.u.listWalk.util.pcP[ 1 ] = flLISTwALKcHATTER_null ;
    tinP.ta.pushed.u.listWalk.util.pcP[ 0 ] = ( (listC*)hRecordP.osF( ifcIDtYPEhANDLE_LISTING ) )->idNameF() ;
    tinP.ta.pushed.u.listWalk.walk.flagsWalkP = flLISTwALK_null ;
    tinP.ta.pushed.u.listWalk.walk.pListWalkCBFP = listWalkChatterCBF ;
    PUSHtINaRGS
    CONoUTrAW( "================== **** CHATTERING SELECTED RECORD (BEGIN) ==============================\r\n" ) ;
{
flagsT selectWalkCBF( tinS& tinP , etherC& etThread , handleC& hRecordP )

#define CoBS ( TUCK << 0 )

/*1*/WAKEsHOWtEXT( "tool.gorilla.snip.0030194.selectC" )/*1*/
/**/
*/
hire both me and the gorilla for recordC
/*


//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


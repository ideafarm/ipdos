
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


//VISIBLE

REST

}
    etThread.strokeF( tinP , T("terminating\r\n") ) ;
    }
        etThread.strokeF( tinP , T("destructing my stateC object\r\n") ) ;
        etThread.loafIF( tinP ) ;
        etThread.strokeF( tinP , T("waiting for asynchronous impotence\r\n") ) ;
        etThread.ifcHireF( tinP , T("tool.gorilla.stateC.ifcHireF") , DDNUMB ) ;
        etThread.strokeF( tinP , T("i am ")+TF1(state.idMe)+T(".  hiring my replacement\r\n") ) ;
        stateS state( tinP , etThread ) ;
    {
    etThread.strokeF( tinP , T("constructing my stateC object\r\n") ) ;
{
else
if( ether ) etThread.strokeF( tinP , T("i am already asynch impotent so will skip the working phase\r\n") ) ;

TODO

}
{
stateC( tinP , etherP , sizeof *this , 0 , translateStateF )
stateS::stateS( tinS& tinP , etherC& etherP ) :

TRANSLATEsTATE_END
    state.idMe ++ ;
TRANSLATEsTATE_MIDDLE
    case 1 : { state.idMe        = stateOther.idMe        ; }
TRANSLATEsTATE_BEGIN( stateS , 1 )

;
}
    stateS( tinS& tinP , etherC& etherP ) ;

    countT idMe ;
    countT idVersion ;
{
struct stateS : public stateC

//U: USE THIS FOR example.simplest?

/*1*/WAKEhIDE( "tool.gorilla.stateC.ifcHireF" )/*1*/
/**/
*/
\<A HREF=\"5.8510104.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


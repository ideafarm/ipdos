
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

}
    etThread.loafIF( tinP ) ;

    //{ countT idAdam = 0x4010350 ; etThread.ifcHireF( tinP , T("tool.gorilla.http.ideafarm.3") , idAdam , 0 , flHIRE_DISPLAYaUTO , nicNameC() ) ; }
    TELL( "hiring 0530104" ) ;

    //U::etThread.osThreadF( tinP , countTC() , tmWatchDogF ) ;
    }
        ++ s ; ether.osSleepF( tinP , TOCK * 2 ) ;
        sleepC s( tinP , TAG( TAGiDnULL ) ) ;
    {

    while( cGorillas -- ) etThread.osThreadF( tinP , countTC() , tmGorillaF ) ;
    countT cGorillas = 1 ;

    stateS state( tinP , etThread ) ;
{

TODO

DONE( tmWatchDogF )

etThread.delF( tinP , psttServer ) ;
        
}
    }
        }
            break ;
            }
                }
                    ++ s ; ether.osSleepF( tinP , TICK * 0x10 , TOCK ) ;
                    sleepC s( tinP , TAG( TAGiDnULL ) ) ;
                {
    
                //etThread.strokeF( tinP , T("notified Wo'O that http is down\r\n") ) ;
                //}
                //    WRITE( 221 , T("quit\r\n") ) ;
                //    WRITE( 250 , T("Subject: http down\r\n\r\nhttp is down at ")+TT(timeN1,timeN2)+T("\r\n.\r\n") ) ;
                //    WRITE( 354 , T("data\r\n") ) ;
                //    WRITE( 250 , T("rcpt to:<6507595306@vtext.com>\r\n") ) ;
                //    WRITE( 250 , T("mail from:<")+TF1(DDNUMB)+T(ifcEMAIL_MXsUFFIX ">\r\n") ) ;
                //    WRITE( 250 , T("helo ")+TF1(DDNUMB)+T(".ideafarm.com\r\n") ) ;
                //    TN( tOut , "" ) ;
                //
                //    __( sockc.readWoReplyF( tinP , psttr ) - 220 ) ;
                //    sockc.connectF( tinP , 0x19 , nnServer , 1 ) ;
                //
                //    socketC sockc( tinP , etThread , TAG( TAGiDnULL ) ) ;
                //    ZE( strokeS* , psttr ) ;
                //{
                //etThread.strokeF( tinP , TT(timeN1,timeN2)+T(": notifying Wo'O that http is down\r\n") ) ;
                //
                //etThread.osTimeNowF( tinP , timeN1 , timeN2 ) ;
                //ZE( sCountT , timeN2 ) ;
                //ZE( countT , timeN1 ) ;
            {
            if( !ether )

            }
                ++ s ; ether.osSleepF( tinP , TOCK * 2 ) ;
                sleepC s( tinP , TAG( TAGiDnULL ) ) ;
            {
        {
        if( cOk == cOkSave && !ether )
    
        }
            ++ s ; ether.osSleepF( tinP , TOCK * 0x20 ) ; //OCCASIONAL FALSE ALARMS AT 0x8
            sleepC s( tinP , TAG( TAGiDnULL ) ) ;
        {
        countT cOkSave = cOk ;
    {
    while( !ether && !etThread )
{
while( !ether && !etThread )

nicNameC nnServer = socketC::nicNameIF( tinP , etThread , psttServer ) ;
etThread.strokeF( tinP , T("name server: \"")+T(psttServer)+T("\"\r\n") ) ;
etThread.dnsNicNamesF( tinP , psttServer , psttd , ifcIDtYPEdNSqUERY_MX ) ; ___( psttServer ) ;
strokeS* psttd = tDomain ;
TN( tDomain , "vtext.com" ) ;
ZE( strokeS* , psttServer ) ;
TASK( tmWatchDogF )

DONE( tmGorillaF )

}
    }
        ++ s ; ether.osSleepF( tinP , /*ru*/TOCK ) ;
        sleepC s( tinP , TAG( TAGiDnULL ) ) ;
    {
    else
    }
        ++ s ; ether.osSleepF( tinP , TOCK * 0x10 ) ; //ALLOWS TERMINATING THREADS TO COMPLETE
        sleepC s( tinP , TAG( TAGiDnULL ) ) ;
    {
    if( !( idMe % 0x1000 ) )

    }
        etThread.ifcSayF( tinP , TF1(DDNUMB)+T(" [idMe,cBad]: ")+TF1(idMe)+tb+TF1(cBad)+T("; request for ")+tHome+T(" fulfilled aok\r\n") , flSAY_APPEND | flSAY_LOG ) ;
        cOk ++ ;
    {
    else
    }
        //U::etThread.ifcSayF( tinP , TF1(DDNUMB)+T(" [idMe,cBad]: ")+TF1(idMe)+tb+TF1(cBadMe)+T("; request for ")+tHome+T(" FAILED ********\r\n") , flSAY_APPEND | flSAY_LOG ) ;
        countT cBadMe = 1 + incv02AM( cBad ) ;
        *tinP.zEtScratch = 0 ;
    {
    if( *tinP.zEtScratch || !cbHome /*|| cbHome != cbHomeWoth*/ )
    if( !cbHomeWoth  ) cbHomeWoth  = cbHome ;   
    { ZE( byteT* , pbHome  ) ; tinP.zEtScratch->boxGetShadowF( tinP , pbHome  , cbHome  , tHome  ) ; ___( pbHome  ) ; tinP.zEtScratch->delF( tinP , pbHome  ) ; }
    ZE( countT , cbHome ) ;
    etThread.strokeF( tinP , T("trial ")+TF1(idMe)+T("\r\n") ) ;
    countT idMe = 1 + incv02AM( idTrial ) ;
{
while( !etThread && !ether )
ranUniC ru( TICK , tinP.monitor.idThread ) ;
ZE( countT , cbHomeWoth ) ;
TN( tb , " " ) ;

//TN( tHome  , "www.ideafarm.com//http//" ) ;
//TN( tHome  , "127.1.1.1//http//" ) ;
TN( tHome  , "127.1.1.1//http//newblabroom.html" ) ;

THREADmODE1oN( flTHREADmODE1_QUIETiMPOTENCE )
//etThread.osThreadSwitchingDesireF( tinP , ifcTHREADpRIORITY_RUSH ) ;

TASK( tmGorillaF )

countT cBad ;
countT cOk ;
countT idTrial ;

    etThread.delF( tinP , psttr ) ;
    }                                                                                           \
        CONoUT2( T(psttr) , rc ) ;                                                              \
        __( rc - rcOkP ) ;                                                          \
        countT rc = sockc.readWoReplyF( tinP , psttr ) ;                                       \
    {                                                                                           \
    sockc.writeF( tinP , (osTextT*)tOut , tOut.csF( tinP ) ) ;                                 \
    tOut = textP ;                                                                              \
                                                                                                \
#define WRITE(rcOkP,textP)                                                                      \

STATE0

/*1*/WAKEhIDE( "tool.gorilla.http.ideafarm.3" )/*1*/
/**/
*/
initially, use homogeneous gorillas that sleep a random time
 the mean sleep of the gorillas is a multiple of S such that there are 3 bunch levels
 G heterogeneous gorilla threads that sleep random times and periodically bunch
specs
obsoletes f940104
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//



//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


    }
        if( tinP.fingerprint ) ;                                                            \
                                                                                            \
        }                                                                                   \
            }                                                                               \
                break ;                                                                     \
                exprSpecifiedP ;                                                            \
            {                                                                               \
            case ifcIDcMDbASE_CMDsPECIFIED :                                                \
            }                                                                               \
                break ;                                                                     \
                exprDefaultP ;                                                              \
            {                                                                               \
            case ifcIDcMDbASE_CMDdEFAULT :                                                  \
            }                                                                               \
                break ;                                                                     \
                slP.flags = save ;                                                          \
                slP << (baseSoilXxxxC*)this ;                                                       \
                slP.flags &= ~( F(flSOUL_LIVE) ) ;                                          \
                flagsT save = slP.flags ;                                                   \
            {                                                                               \
            case ifcIDcMDbASE_REFERENCE :                                                   \
            }                                                                               \
                break ;                                                                     \
            {                                                                               \
            case ifcIDcMDbASE_TOCK :                                                        \
            }                                                                               \
                break ;                                                                     \
            {                                                                               \
            case ifcIDcMDbASE_TICK :                                                        \
            }                                                                               \
                break ;                                                                     \
                slP << (strokeS*)T(#classP) ;                                               \
            {                                                                               \
            case ifcIDcMDbASE_CLASSnAME :                                                   \
        {                                                                                   \
        switch( idCmdBase )                                                                 \
        slP >> idCmdBase ;                                                                  \
        ZE( countT , idCmdBase ) ;                                                        \
                                                                                            \
        }                                                                                   \
            if( pMeI != (baseSoilXxxxC*)this ) { BLAMMO ; }                                         \
            slP >> pMeI ;                                                                   \
            ZE( baseSoilXxxxC* , pMeI ) ;                                                         \
        {                                                                                   \
    {                                                                                       \
    voidT classP::operator ()( tinS& tinP , soulC& slP )                                    \
                                                                                            \
    ;                                                                                       \
    }                                                                                       \
        voidT operator ()( tinS& tinP , soulC& slP ) ;                                      \
                                                                                            \
        public :                                                                            \
    {                                                                                       \
    class classP: public baseSoilXxxxC                                                              \
                                                                                            \
#define OPERATOR(classP,exprDefaultP,exprSpecifiedP)                                        \

/*1*//*OPERATOR*//*1*/
/**/
*/
i am used with a soulC object to use that object as a forth-like program executor
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//



//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


;
}
/**/

 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34021.sCountC.operator_moduloBy!||
 sCountC& operator %=( const sCountT cP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3402e.sCountC.operator_divideBy!||
 sCountC& operator /=( const sCountT cP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3402d.sCountC.operator_divideBy!||
 sCountC& operator /=( const sCountC& cP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34035.sCountC.operator_multiplyBy!||
 sCountC& operator *=( const sCountT cP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34020.sCountC.operator_multiplyBy!||
 sCountC& operator *=( const sCountC& cP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34034.sCountC.operator_decrementBy!||
 sCountC& operator -=( const sCountT cP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3401f.sCountC.operator_decrementBy!||
 sCountC& operator -=( const sCountC& cP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34033.sCountC.operator_incrementBy!||
 sCountC& operator +=( const sCountT cP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3401e.sCountC.operator_incrementBy!||
 sCountC& operator +=( const sCountC& cP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3401d.sCountC.operator_assign!||
 sCountC& operator =( const sCountT cP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3401c.sCountC.operator_assign!||
 sCountC& operator =( const sCountC& cP ) ;
/* expressions: binary: assignment */

 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3401b.sCountC.operator_or!||
 boolT operator ||( const sCountC& cP ) const ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3401a.sCountC.operator_and!||
 boolT operator &&( const sCountC& cP ) const ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34019.sCountC.operator_notEqual!||
 boolT operator !=( const sCountC& cP ) const ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34018.sCountC.operator_equal!||
 boolT operator ==( const sCountC& cP ) const ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34017.sCountC.operator_greaterOrEqual!||
 boolT operator >=( const sCountC& cP ) const ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34016.sCountC.operator_lessOrEqual!||
 boolT operator <=( const sCountC& cP ) const ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34015.sCountC.operator_greater!||
 boolT operator >( const sCountC& cP ) const ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34014.sCountC.operator_less!||
 boolT operator <( const sCountC& cP ) const ;
/* expressions: binary: logical */

 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34011.sCountC.operator_modulo!||
 sCountT operator %( const sCountT cP ) const ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34032.sCountC.operator_divide!||
 sCountC operator /( const sCountT cP ) const ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3402c.sCountC.operator_divide!||
 sCountC operator /( const sCountC& cP ) const ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34031.sCountC.operator_multiply!||
 sCountC operator *( const sCountT cP ) const ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34010.sCountC.operator_multiply!||
 sCountC operator *( const sCountC& cP ) const ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34030.sCountC.operator_minus!||
 sCountC operator -( const sCountT cP ) const ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34013.sCountC.operator_minus!||
 sCountC operator -( const sCountC& cP ) const ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3402f.sCountC.operator_plus!||
 sCountC operator +( const sCountT cP ) const ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34012.sCountC.operator_plus!||
 sCountC operator +( const sCountC& cP ) const ;
/* expressions: binary: arithmetic */

 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400f.sCountC.operator_complement!||
 sCountC operator ~( voidT ) const ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400e.sCountC.operator_not!||
 sCountC operator !( voidT ) const ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400d.sCountC.operator_minus!||
 sCountC operator -( voidT ) const ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34012.sCountC.operator_plus!||
 sCountC& operator +( voidT ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400b.sCountC.operator_decrement!||
 sCountC& operator --( voidT ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34009.sCountC.operator_decrement!||
 sCountC& operator --( sCountT postfixP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400a.sCountC.operator_increment!||
 sCountC& operator ++( voidT ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34008.sCountC.operator_increment!||
 sCountC& operator ++( sCountT postfixP ) ;
/* expressions: unary */

 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34007.sCountC.operator_countT!||
 operator countT( voidT ) const ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34006.sCountC.operator_sCountT_ptr!||
 operator sCountT*( voidT ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34005.sCountC.operator_countT_ptr!||
 operator countT*( voidT ) ;
/* expressions: conversion */

 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34037.sCountC.sCountC!||
 sCountC( tinS& tinP , etherC& etherP , const sCountT cP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.func.33006036.sCountC.sCountC!||
 sCountC( tinS& tinP , etherC& etherP , const countT* pcP , const countT cbitP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34004.sCountC.sCountC!||
 sCountC( const sCountC& cP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34003.sCountC.sCountC!||
 sCountC( tinS& tinP , etherC& etherP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34002.sCountC.dt_sCountC!||
 ~sCountC( voidT ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34001.sCountC.NEWdELcLASSb!||
 NEWdELcLASSpROTOS
/* birth , death */

/**/

 public :

 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3402b.sCountC.setCBitF!||
 voidT setCBitF( tinS& tinP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3402a.sCountC.setBitRangeF!||
 voidT setBitRangeF( tinS& tinP , countT* const pcP , const countT off1P , const countT off2P , const boolT valueP = 0 ) const ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34029.sCountC.setBitF!||
 voidT setBitF( tinS& tinP , countT* const pcP , const countT offP , const boolT valueP = 0 ) const ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34028.sCountC.onesComplementF!||
 voidT onesComplementF( tinS& tinP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34026.sCountC.fNegativeF!||
 boolT fNegativeF( tinS& tinP ) const ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34025.sCountC.cbitF!||
 countT cbitF( tinS& tinP , const countT* const pcP , const countT cbitP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34024.sCountC.cbitF!||
 countT cbitF( tinS& tinP , const sCountT cP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34023.sCountC.bitF!||
 boolT bitF( tinS& tinP , const countT* const pcP , const countT offP ) const ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34022.sCountC.bitF!||
 boolT bitF( tinS& tinP , const countT cP , const countT offP ) const ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34027.sCountC.growBitsToF!||
 voidT growBitsToF( tinS& tinP , const countT cbitNewP ) ;

 countT* pc ;
 countT cbit ;
 etherC& ether ; //MUST BE FIRST TO ENSURE THAT IT IS DEFINED BEFORE cbit IS INITIALIZED (BECAUSE THE INITIALIZER cbitF CALLS ether MEMBER FUNCTION)
{
/*1*/class _export sCountC/*1*/

/**/
*/
  \<A HREF=\"5.d120104.1.1.0.html\"\>d120104:  WAKEsHOW( "example.simplest.snip.1500000c.sCountC" )\</A\>
 simplest
examples
\<A HREF=\"5.1500000c.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


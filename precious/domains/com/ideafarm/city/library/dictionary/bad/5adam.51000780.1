
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etherC::loafIF( tinP ) ;                            

}
    etThread.delF( tinP , psttm ) ;
    etThread.traceF( tinP , T("match: ")+T(psttm) ) ;
    stMatch >> psttm ;
    ZE( strokeS* , psttm ) ;
{
while( stMatch )

etThread.traceF( tinP , TF2(idHit,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;

countT idHit = etThread.strIdF( tinP , &stMatch , flSTRmATCH_REPORTmATCH , idf , sttq , psttre , psttBig , 0 , 1 ) ;
stackC stMatch( tinP , etThread , TAG( TAGiDnULL ) , flSTACKc_DOnOTsERIALIZE , ifcSTACKtYPE_PTR_strokeS ) ;
strokeS sttq( 0 , sc_IGNOREqUOTES ) ;
countT idf = 1 ;
//G: countT idHit = etThread.strIdF( tinP , psttre , psttBig , 1 ) ;

strokeS* psttBig = tBig ;
strokeS* psttre = tre ;

//TN( tBig , "abcdbyeefgh" ) ;
TN( tBig , "abcdhelloefgh" ) ;

;

    +S2(sa_SSSaNDeND,sc_ccSSS)
        +S2(sa_SSSrEPORTmATCHeND,sc_ccSSS)
           +S2(sa_SSSoReND,sc_ccSSS)
               +S2(sa_SSSaNDeND,sc_ccSSS)
                   +T("bye")
               +S2(sa_SSSaND,sc_ccSSS)
               +S2(sa_SSSaNDeND,sc_ccSSS)
                   +T("hello")
               +S2(sa_SSSaND,sc_ccSSS)
           +S2(sa_SSSoR,sc_ccSSS)
        +S2(sa_SSSrEPORTmATCH,sc_ccSSS)                  // 123456789abcde
    +S2(sa_SSSaND,sc_ccSSS)

TN( tre , "" ) ; tre += tn
TN( tn , "" ) ;

TODO

/*1*/WAKEsHOWtEXT( "scratch.3.inactive.doodle.or.group.containing.and.groups" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//

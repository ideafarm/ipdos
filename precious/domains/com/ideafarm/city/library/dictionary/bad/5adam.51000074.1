
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


//VISIBLE

REST
etThread.osProcessIdPhaseAdamF( tinP , ifcIDpHASEhANDOFFoLD_SHUTTINGdOWN ) ;

}
    //etThread.osSleepF( tinP , TUCK ) ;
    ether = 0 ;
    time2last = time2 ;
    time1last = time1 ;

    else           etThread.strokeF( tinP , tDot ) ;
    if( bNewTock ) etThread.strokeF( tinP , tX ) ;

    const boolT bNewTock = offTOCK( time1 ) != offTOCK( time1last ) ;

    etThread.delF( tinP , psttNow ) ;
    etThread.strokeF( tinP , T("\r")+T(psttNow)+T("    ") ) ;
    etThread.strFromTimeF( tinP , psttNow , time1 , time2 ) ; ___( psttNow ) ;
    ZE( strokeS* , psttNow ) ;

    etThread.osTimeNowF( tinP , time1 , time2 ) ;
    ZE( sCountT , time2 ) ;
    ZE( countT , time1 ) ;
{
while( !ether )
etThread.osTimeNowF( tinP , time1last , time2last ) ;
ZE( sCountT , time2last ) ;
ZE( countT , time1last ) ;
TN( tX   , "x" ) ;
TN( tDot , "." ) ;

etThread.strokeF( tinP , T("press the enter key to fire me\r\n\r\n") ) ;
{ ZE( countT , tnu ) ; etThread.osThreadF( tinP , tnu , tmHearF ) ; }

TODO

DONE( tmHearF )
}
    etThread.etherFireImpersonateMonitorIF( tinP ) ;
    HEAReNTER( ether )
    etThread.osSleepF( tinP , TOCK * 4 ) ;
{
if( pTaskP )
TASK( tmHearF )

/*1*/WAKEhIDE( "example.simplest.snip.0010075.TOCK" )/*1*/
/**/
*/
\<A HREF=\"5.3700104.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


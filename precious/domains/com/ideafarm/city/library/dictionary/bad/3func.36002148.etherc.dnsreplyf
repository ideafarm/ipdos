
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    }
        cbP = cba ;
        }
            __( pbc - pbe ) ;
            }
                delF( tinP , pc2s ) ;
                }
                    delF( tinP , (byteT*&)pc2s->c1 ) ;
                    pbc += pc2s->c2 ;

                    }
                        header.swabF() ;

                        }
                            }
                                __1
                                __( idErrorP ) ;
                            {
                            default:
                            case ifcIDeRRORdNS_QUERYrEFUSED      : { header.idError = (byteT)5 ; break ; }
                            case ifcIDeRRORdNS_QUERYnOTsUPPORTED : { header.idError = (byteT)4 ; break ; }
                            case ifcIDeRRORdNS_NAMEnOTdEFINED    : { header.idError = (byteT)3 ; break ; }
                            case ifcIDeRRORdNS_TRYaGAINlATER     : { header.idError = (byteT)2 ; break ; }
                            case ifcIDeRRORdNS_CANNOTpARSEqUERY  : { header.idError = (byteT)1 ; break ; }
                            case ifcIDeRRORdNS_AOK               : { header.idError = (byteT)0 ; break ; }
                        {
                        switch( idErrorP )

                        header.cNotes          = (count01T)cNote ;
                        header.cAuthorities    = (count01T)cAuth ;
                        header.cAnswers        = (count01T)cAnsw ;
                        header.reserved1       = 0 ;
                        header.bCanRecurse     = 0 ;
                        header.bTruncated      = 0 ;
                        header.bAuthoritative  = (byteT)bAuthoritativeP ;
                        header.bReply          = 1 ;

                        header.swabF() ;
                        dnsMsgHeaderS& header = *(dnsMsgHeaderS*)pbc ;
                    {
                    if( pbc == pbP )

                    memCopyF( tinP , pbc , (byteT*)pc2s->c1 , pc2s->c2 ) ;

                    __( pbc + pc2s->c2 >  pbe ) ;
                    __( pbc            >= pbe ) ;
                {
                if( pc2s )
                stSnip >> pc2s ;
                ZE( count2S* , pc2s ) ;
            {
            while( stSnip && !POOP )
            byteT* const pbe = pbc + cba ;
            byteT*       pbc = pbP ;

            pbP[ cba ] = 0 ;
        {
        if( pbP )
        newF( tinP , LF , pbP , cba + 1 ) ; ___( pbP ) ;

        while( !POOP && ~hDown ) ;
        }
            if( pc2s ) cba += pc2s->c2 ;
            count2S* pc2s = (count2S*)stSnip.downF( tinP , hDown ) ;
        {
        do
        handleC hDown( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
    {
    if( stSnip )
    ZE( countT , cba ) ; // STEP 3: MAKE THE FINAL IMAGE BY CONCATENATING THE SNIPPETS

    //}
    //    }
    //        ifcSayIF( T("label registered at offset ")+TF1(swOff)+T(": \"")+T(psttl)+T("\"") , flSAY_APPEND | flSAY_LOG ) ;
    //        psttl = (strokeS*)swOff.leverF( tinP , idf ) ;
    //    {
    //    for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
    //    countT cFlavors = swOff.cFlavorsF( tinP ) ;
    //{
    //DEBUGGING

    }
        DEL( pSoul ) ;
        }
            }
                cbData = SWABnET2( cbData ) ;
                }
                    }
                        break ;
                        __1
                        __( idType ) ;
                    {
                    default :
                    }
                        break ;

                        }
                            }
                                pc2s = 0 ;
                                cbData += (count01T)pc2s->c2 ;
                                offo += pc2s->c2 ;
                                stSnip << pc2s ;
                                soul.shiftRightF( tinP , (byteT*&)pc2s->c1 , pc2s->c2 , ifcIDtYPEsOULiTEM_byteTptr ) ; ___( (byteT*&)pc2s->c1 ) ;
                                pc2s->c2 = pc2s->c1 = 0 ;
                            {
                            if( pc2s )
                            newF( tinP , LF , pc2s ) ; ___( pc2s ) ;
                        {

                        }
                            }
                                pc2s = 0 ;
                                cbData += (count01T)pc2s->c2 ;
                                offo += pc2s->c2 ;
                                stSnip << pc2s ;
                                if( pc2s->c1 ) *(byteT*)pc2s->c1 = (byteT)cProtocol ;
                                newF( tinP , LF , (byteT*&)pc2s->c1 , pc2s->c2 ) ; ___( (byteT*&)pc2s->c1 ) ;
                                pc2s->c2 = 1 ;
                                pc2s->c1 = 0 ;
                            {
                            if( pc2s )
                            newF( tinP , LF , pc2s ) ; ___( pc2s ) ;

                            soul >> cProtocol ;
                            ZE( countT , cProtocol ) ;
                        {

                        }
                            }
                                pc2s = 0 ;
                                cbData += (count01T)pc2s->c2 ;
                                offo += pc2s->c2 ;
                                stSnip << pc2s ;
                                if( pc2s->c1 ) *(count02T*)pc2s->c1 = SWABnET4( (count02T)*(const countT*)nicName ) ;
                                newF( tinP , LF , (byteT*&)pc2s->c1 , pc2s->c2 ) ; ___( (byteT*&)pc2s->c1 ) ;
                                pc2s->c2 = sizeof( count02T ) ;
                                pc2s->c1 = 0 ;
                            {
                            if( pc2s )
                            newF( tinP , LF , pc2s ) ; ___( pc2s ) ;
                            nicName << soul ;
                            nicNameC nicName ;
                        {
                    {
                    case ifcIDtYPEdNSqUERY_WKS :
                    }
                        break ;

                        }
                            }
                                pc2s = 0 ;
                                cbData += (count01T)pc2s->c2 ;
                                offo += pc2s->c2 ;
                                stSnip << pc2s ;
                                if( pc2s->c1 ) *(count02T*)pc2s->c1 = SWABnET4( ss ) ;
                                newF( tinP , LF , (byteT*&)pc2s->c1 , pc2s->c2 ) ; ___( (byteT*&)pc2s->c1 ) ;
                                pc2s->c2 = sizeof( count02T ) ;
                                pc2s->c1 = 0 ;
                            {
                            if( pc2s )
                            newF( tinP , LF , pc2s ) ; ___( pc2s ) ;

                            count02T ss = third.secondsFromTimeIF( tinP , time1 , time2 ) ;
                            soul >> (countT&)time2 ;
                            soul >> time1 ;
                            ZE( sCountT , time2 ) ;
                            ZE( countT  , time1 ) ;
                        {
                        while( cTries -- )
                        countT cTries = 4 ; // REFRESH RETRY EXPIRE MINIMUM

                        }
                            pc2s = 0 ;
                            cbData += (count01T)pc2s->c2 ;
                            offo += pc2s->c2 ;
                            stSnip << pc2s ;
                            if( pc2s->c1 ) *(count02T*)pc2s->c1 = SWABnET4( (count02T)cSerial ) ;
                            newF( tinP , LF , (byteT*&)pc2s->c1 , pc2s->c2 ) ; ___( (byteT*&)pc2s->c1 ) ;
                            pc2s->c2 = sizeof( count02T ) ;
                            pc2s->c1 = 0 ;
                        {
                        if( pc2s )
                        newF( tinP , LF , pc2s ) ; ___( pc2s ) ;

                        soul >> cSerial ;
                        ZE( countT , cSerial ) ;

                        pushLabelsF( tinP , *this , stSnip , offo , cbData , soul , swOff , psttl ) ;
                        pushLabelsF( tinP , *this , stSnip , offo , cbData , soul , swOff , psttl ) ;
                    {
                    case ifcIDtYPEdNSqUERY_SOA :
                    }
                        break ;
                        __1 //U:
                    {
                    case ifcIDtYPEdNSqUERY_NULL :
                    }
                        break ;

                        pushLabelsF( tinP , *this , stSnip , offo , cbData , soul , swOff , psttl ) ;

                        }
                            pc2s = 0 ;
                            cbData += (count01T)pc2s->c2 ;
                            offo += pc2s->c2 ;
                            stSnip << pc2s ;
                            if( pc2s->c1 ) *(count01T*)pc2s->c1 = SWABnET2( (count01T)cRank ) ;
                            newF( tinP , LF , (byteT*&)pc2s->c1 , pc2s->c2 ) ; ___( (byteT*&)pc2s->c1 ) ;
                            pc2s->c2 = sizeof( count01T ) ;
                            pc2s->c1 = 0 ;
                        {
                        if( pc2s )
                        newF( tinP , LF , pc2s ) ; ___( pc2s ) ;

                        soul >> cRank ;
                        ZE( countT , cRank ) ;
                    {
                    case ifcIDtYPEdNSqUERY_MX :
                    }
                        break ;

                        }
                            delF( tinP , psttw ) ;
                            }
                                }
                                    pc2s = 0 ;
                                    cbData += (count01T)pc2s->c2 ;
                                    offo += pc2s->c2 ;
                                    stSnip << pc2s ;
                                    }
                                        for( countT ids = 1 ; ids <= psttw->idAdam ; ids ++ ) *( pbc ++ ) = (byteT)psttw[ CSpREFIX - 1 + ids ].idAdam ;
                                        *( pbc ++ ) = (byteT)psttw->idAdam ;
                                        byteT* pbc = (byteT*)pc2s->c1 ;
                                    {
                                    if( pc2s->c1 )
                                    newF( tinP , LF , (byteT*&)pc2s->c1 , pc2s->c2 ) ; ___( (byteT*&)pc2s->c1 ) ;
                                    pc2s->c2 = 1 + psttw->idAdam ;
                                    pc2s->c1 = 0 ;
                                {
                                if( pc2s )
                                newF( tinP , LF , pc2s ) ; ___( pc2s ) ;
                            {
                            if( psttw )
                            soul >> psttw ; ___( psttw ) ;
                            ZE( strokeS* , psttw ) ;
                        {
                        while( cText -- )

                        soul >> cText ;
                        ZE( countT , cText ) ;
                    {
                    case ifcIDtYPEdNSqUERY_TXT :
                    case ifcIDtYPEdNSqUERY_HINFO :
                    }
                        break ;
                        pushLabelsF( tinP , *this , stSnip , offo , cbData , soul , swOff , psttl ) ;
                    {
                    case ifcIDtYPEdNSqUERY_PTR :
                    case ifcIDtYPEdNSqUERY_MR :
                    case ifcIDtYPEdNSqUERY_MG :
                    case ifcIDtYPEdNSqUERY_MB :
                    case ifcIDtYPEdNSqUERY_CNAME :
                    case ifcIDtYPEdNSqUERY_NS :
                    }
                        pushLabelsF( tinP , *this , stSnip , offo , cbData , soul , swOff , psttl ) ; // INTENTIONAL FALLTHROUGH
                    {
                    case ifcIDtYPEdNSqUERY_MINFO :
                    }
                        break ;
                        }
                            pc2s = 0 ;
                            cbData += (count01T)pc2s->c2 ;
                            offo += pc2s->c2 ;
                            stSnip << pc2s ;
                            if( pc2s->c1 ) *(count02T*)pc2s->c1 = SWABnET4( (count02T)*(const countT*)nicName ) ;
                            newF( tinP , LF , (byteT*&)pc2s->c1 , pc2s->c2 ) ; ___( (byteT*&)pc2s->c1 ) ;
                            pc2s->c2 = sizeof( count02T ) ;
                            pc2s->c1 = 0 ;
                        {
                        if( pc2s )
                        newF( tinP , LF , pc2s ) ; ___( pc2s ) ;
                        nicName << soul ;
                        nicNameC nicName ;
                    {
                    case ifcIDtYPEdNSqUERY_A :
                    }
                        break ;
                        //U:ECHO BACK THE OPTION INFORMATION
                    {
                    case ifcIDtYPEdNSqUERY_OPTION :
                {
                switch( idType )

                count01T& cbData = *p_cbData ;
            {
            if( p_cbData )

            }
                pc2s = 0 ;
                offo += pc2s->c2 ;
                stSnip << pc2s ;
                }
                    p_cbData = &rMiddle.cbData ;
                    rMiddle.swabF() ;
                    rMiddle.cbData        = 0 ; //WILL BE ACCUMULATED AND THEN SWABBED
                    rMiddle.secondsToLive = third.secondsFromTimeIF( tinP , time1 , time2 ) ;
                    rMiddle.idClass       = (count01T)idClass ;
                    rMiddle.idType        = (count01T)idType ;
                    dnsResourceMiddleS& rMiddle = *(dnsResourceMiddleS*)pc2s->c1 ;
                {
                if( pc2s->c1 )
                newF( tinP , LF , (byteT*&)pc2s->c1 , pc2s->c2 ) ; ___( (byteT*&)pc2s->c1 ) ;
                pc2s->c2 = sizeof( dnsResourceMiddleS ) ;
                pc2s->c1 = 0 ;
            {
            if( pc2s )
            newF( tinP , LF , pc2s ) ; ___( pc2s ) ;
            ZE( count01T* , p_cbData ) ;

            soul >> (countT&)time2 ;
            ZE( sCountT , time2 ) ;
            soul >> time1 ;
            ZE( countT , time1 ) ;
            soul >> idClass ;
            ZE( countT , idClass ) ;
            soul >> idType ;
            ZE( countT , idType ) ; // THE MIDDLE OF THE RR

            { ZE( count01T , cnu ) ; pushLabelsF( tinP , *this , stSnip , offo , cnu , soul , swOff , psttl ) ; }

            ZE( count2S* , pc2s ) ;
            ZE( strokeS* , psttw1 ) ;

            }
                }
                    __1
                    __( idTypeAnswer ) ;
                {
                default:
                case ifcIDtYPEdNSrEPLY_NOTE      : { cNote ++ ; break ; }
                case ifcIDtYPEdNSrEPLY_AUTHORITY : { cAuth ++ ; break ; }
                case ifcIDtYPEdNSrEPLY_ANSWER    : { cAnsw ++ ; break ; }
            {
            switch( idTypeAnswer )
            soul >> idTypeAnswer ;
            ZE( countT , idTypeAnswer ) ; // ACCUMULATE COUNTERS FOR LATER INSERTION INTO HEADER

            soulC& soul = *pSoul ;
        {
        if( pSoul )
        stsRepliesP >> pSoul ;
        ZE( soulC* , pSoul ) ;
    {
    while( !POOP && stsRepliesP ) // EACH soulC OBJECT DEFINES A SINGLE RR (RESOURCE RECORD)
    TN( tDot , "." ) ;
    ZE( countT , cNote ) ;
    ZE( countT , cAuth ) ;
    ZE( countT , cAnsw ) ;
    // RATIONALE: (1) NO BENEFIT UNLESS EXCEED DATAGRAM SIZE (2) IFC NAMES WILL BE SHORT, AND REPLIES WILL BE FEW (3) CAN EDIT THIS CODE TO USE COMPRESSION LATER, IF IT IS NEEDED
    // DNS COMPRESSION IS -NOT- USED; EACH NAME IS WRITTEN IN FULL
    // STEP 2: MAKE EACH REMAINING SNIPPET THAT IS TO APPEAR IN THE FINAL IMAGE

    }
        }
            offo += pc2s->c2 ;
            stSnip << pc2s ;
            memCopyF( tinP      , (byteT*&)pc2s->c1 , pbQueryP , pc2s->c2 ) ;
            newF(     tinP , LF , (byteT*&)pc2s->c1            , pc2s->c2 ) ; ___( (byteT*&)pc2s->c1 ) ;
            pc2s->c2 = pbe - pbQueryP ;
            pc2s->c1 = 0 ;
        {
        if( pc2s )
        newF( tinP , LF , pc2s ) ; ___( pc2s ) ;
        ZE( count2S* , pc2s ) ;

        }
            }
                pbe += 2 * sizeof( count01T ) ;

                delF( tinP , psttl ) ;
                swOff = offl ;
                //ifcSayIF( T("label at offset ")+TF1(offl)+T(": \"")+T(psttl)+T("\"") , flSAY_APPEND | flSAY_LOG ) ;
                dnsLabelsF( tinP , psttl , pbe , (dnsMsgHeaderS*)pbQueryP ) ; ___( psttl ) ;
                countT offl = pbe - pbQueryP ;
            {
            while( cq -- )
            header.swabF() ;
            countT cq = header.cQuerys ;
            header.swabF() ;
            pbe = pbQueryP + sizeof( dnsMsgHeaderS ) ; // QNAME
            dnsMsgHeaderS header = *(dnsMsgHeaderS*)pbQueryP ;  //U::BUG: SHOULD THIS BE A REFERENCE RATHER THAN A COPY?
        {
        ZE( const byteT* , pbe ) ;
    {
    // STEP 1: MAKE THE UNEDITED HEADER/QUERY SNIPPET (THIS SNIPPET WILL NEED TO BE EDITED BEFORE USE)

    switchC swOff( tinP , third , TAG( TAGiDnULL ) , flSTACKc_DOnOTsERIALIZE , psttl ) ;
    ZE( strokeS* , psttl ) ;
    ZE( countT , offo ) ; //WHERE I AM IN THE OUTPUT IMAGE; THIS NEEDS TO BE KNOWN TO CALCULATE LABEL COMPRESSION WHILE MAKING THE SNIPPETS

    stackC stSnip( tinP , *this , TAG( TAGiDnULL ) , flSTACKc_FIFO | flSTACKc_DOnOTsERIALIZE , ifcSTACKtYPE_PTR_count2S ) ; // [ pb , cb ]

    _IO_

    }
        __( bAuthoritativeP > 1 ) ;
        __Z( pbQueryP ) ;
        __( cbP ) ;
        __NZ( pbP ) ;
    {
    IFbEcAREFUL
    SCOOP
{
/*1*/voidT etherC::dnsReplyF( tinS& tinP , byteT*& pbP , countT& cbP , const byteT* const pbQueryP , stackC& stsRepliesP , const boolT bAuthoritativeP , const countT idErrorP )/*1*/

/**/
*/
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/1snip.00101b4.ifcIDeRRORdNS!||
 idErrorP
 bAuthoritativeP
 stsRepliesP
 pbQueryP
 cbP
 pbP
 tinP
arguments
 if the caller is to send a truncated record via datagram, be sure to patch pbP to set the bTruncated bit in the header
the caller must verify cbP <= 002 if pbP will be sent using a datagram
\<A HREF=\"5.103018c.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$dnsReplyF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//



//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return bDoIt ;
    }
        }
            }
                }
                    }
                        DEL( pInfo ) ;
                        }
                            tinP.pEtScratch->delF( tinP , posti ) ;
                            }
                                CONoUTrAW( tSay ) ;

                                TN( tSay , "\r\n" ) ; tSay += T(postNameP)+T(" [idLine,idCol]: ")+TF4(idLine,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FOREIGN,0,0xa)+T("(")+TF4(idCol,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FOREIGN,0,0xa)+T(")    ")+T(posti+offCurrentLine)+T("\r\n") ;

                                while( posti[ offCurrentLine ] == ' ' ) offCurrentLine ++ ;

                                //U:: LATER: OPTIONALLY ACCUMULATE THESE REPORT ENTRIES IN A stackC SO THAT CALLER CAN REPORT THEM
                            {
                            else
                            }
                                CONoUTrAW( "." ) ;
                            {
                            if( !idLine )

                            }
                                }
                                    }
                                        }
                                            posti[ offi ] = 0 ;
                                            )
                                                )
                                                    && posti[ offi + 1 ] != '\n'
                                                    && posti[ offi     ] == '\r'    //COUNTED: CARRIAGE RETURN NOT FOLLOWED BY NEW LINE (FILES PRODUCED BY COMMODORE AND EARLY MACINTOSH SYSTEMS)
                                                       offi < offFound - 1
                                                (
                                                ||
                                                posti[ offi ] == '\n'               //COUNTED: NEW LINE
                                            (
                                            if
                                        {
                                        for( countT offi = offFound + thirdC::c_strlenIF( tinP , info.postFind ) ; offi < costi ; offi ++ )    //TRUNCATE THE CONTAINING LINE
                                        osTextT* poste = posti + costi ;

                                        idCol = offFound - offCurrentLine + 1 ;

                                        }
                                            }
                                                
                                                offCurrentLine = offi + 1 ;
                                                idLine ++ ;
                                            {
                                            )
                                                )
                                                    && posti[ offi + 1 ] != '\n'
                                                    && posti[ offi     ] == '\r'    //COUNTED: CARRIAGE RETURN NOT FOLLOWED BY NEW LINE (FILES PRODUCED BY COMMODORE AND EARLY MACINTOSH SYSTEMS)
                                                       offi < offFound - 1
                                                (
                                                ||
                                                posti[ offi ] == '\n'               //COUNTED: NEW LINE
                                            (
                                            if
                                        {
                                        for( countT offi = 0 ; offi < offFound ; offi ++ )
                                        idLine = 1 ;

                                        countT offFound = postHit - posti ;
                                    {
                                    if( postHit )
                                    const osTextT* const postHit = thirdC::c_strstrIF( tinP , posti , info.postFind ) ;

                                    }
                                        }
                                            if( old >= 'A' && old <= 'Z' ) posti[ offi ] = 'a' - 'A' + old ;
                                            countT old = posti[ offi ] ;
                                        {
                                        for( countT offi = 0 ; offi < costi ; offi ++ )
                                    {
                                    if( bIgnoreCase )
                                {
                                else
                                }
                                    CONoUTrAW( "\r\n" ) ;
                                    CONoUTrAW( postNameP ) ;
                                    CONoUTrAW( "\r\nfile is null length [postNameP]:    " ) ;
                                {
                                else if( !posti || !costi )

                                }
                                    CONoUTrAW( "\r\n" ) ;
                                    CONoUTrAW( postNameP ) ;
                                    CONoUTrAW( "\r\nerror: could read file [postNameP]:    " ) ;
                                    POOPR ;
                                {
                                if( POOP )

                                tinP.pEtScratch->boxGetShadowF( tinP , posti , costi , T(ifFileNameC(tinP,*tinP.pEtScratch,postNameP)) , 1 ) ; ___( posti ) ;
                            {
                            else
                            }
                                CONoUTrAW( "\r\n" ) ;
                                CONoUTrAW( postNameP ) ;
                                CONoUTrAW( "\r\nerror: file is too large for me to scan [postNameP]:    " ) ;
                            {
                            if( pInfo->cbUsedHigh || !pInfo->cbUsed | pInfo->cbUsed > TICK )
                            ZE( countT , idCol ) ;
                            ZE( countT , idLine ) ;
                            ZE( countT , offCurrentLine ) ;
                            ZE( countT   , costi ) ;
                            ZE( osTextT* , posti ) ;
                        {
                        else if( pInfo && ( pInfo->cbUsedHigh || pInfo->cbUsed ) )
                        }
                            CONoUTrAW( "\r\n" ) ;
                            CONoUTrAW( postNameP ) ;
                            CONoUTrAW( "\r\nerror: could not obtain file info for [postNameP]:    " ) ;
                            POOPR ;
                        {
                        if( POOP )
                    
                        tinP.pEtScratch->diskFileQueryF( tinP , pInfo , fi ) ; ___( pInfo ) ;
                        ZE( infoFileS* , pInfo ) ;
                    {
                    else
                    }
                        CONoUTrAW( "\r\n" ) ;
                        CONoUTrAW( postNameP ) ;
                        CONoUTrAW( "\r\nerror: could not open a read handle for file [postNameP]:    " ) ;
                        POOPR
                    {
                    if( POOP )

                    fileC fi( tinP , postNameP , ifcOPENaCCESS_R , ifcOPENsHARE_R , flOPENdETAILS_LOCsEQ , ifcOPENhOW_nFeO , flFILEaTTR_null , flFILEc_null , 1 ) ;

                    //}
                    //    countT foo = 2 ;
                    //{
                    //if( idIn == 0xf )
                    //CONoUTrAW3( "\r\n [idIn]:    " , idIn , "\r\n" ) ;
                    //countT idIn = 1 + incv02AM( idInLath ) ;
                    //static countT idInLath ;

                    SCOOPS
                {
                IFsCRATCH
            {
            else
            }
            {
            if( bDir )

            boolT  bDir = postNameP[ costLike - 1 ] == '\\' ;
            countT costLike = tinP.brcRaw ;
            BOSdOnOTtEST( WHATgbo , strlen( postNameP ) )
        {
        if( bDoIt )

        ;
            : 1
            ? (*info.pCbf)( tinP , cDirsP , cFilesP , bQuitP , postNameP , pcArgP )
        bDoIt = info.pCbf

        boolT bIgnoreCase = F(info.flagsSearch) & flSEARCH_IGNOREcASE ;

        diskWalkSearchInfoS& info = *(diskWalkSearchInfoS*)pcArgP ;
    {
    if( postNameP )
    ZE( boolT , bDoIt ) ;
    _IO_
{
/*1*/boolT diskWalkSearchCBF( tinS& tinP , countT& cDirsP , countT& cFilesP , const boolT& bQuitP , const osTextT* const postNameP , countT* const pcArgP , const countT* const pModuloFilesP , const countT* const pModuloDirsP )/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//

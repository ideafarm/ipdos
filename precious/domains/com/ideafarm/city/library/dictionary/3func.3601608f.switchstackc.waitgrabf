
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return bGrabbed ;

    if( !third ) bGrabbed = pStack->waitGrabF( tinP , cPlatesLimitP , bQuitP ) ;
    ZE( boolT , bGrabbed ) ;

    //U::RACE: PREVENT ANOTHER THREAD FROM DELETING pStack (BY CALLING A FLAVOR FREEING FUNCTION) AT THIS TIME

    if( pBaton ) pBaton->ungrabF( tinP ) ;
    }
        ( bTinHasLeverP ? swMe.forIfcThreadF( tinP ) : (countT&)swMe ) = (countT)pStack ;
        __Z( pStack ) ;
        pStack = new( 0 , tinP , LF ) stackC( tinP , third , TAG( TAGiDnULL ) , flagsStack , idType , idGrabLayer , swMe.pLeverLathRefF( tinP ) , 0 , pCbF ) ; ___BITScT( pStack , 0xf34 ) ;
    {
    if( !pStack )
    stackC* pStack = (stackC*)( bTinHasLeverP ? swMe.forIfcThreadF( tinP ) : (countT)swMe ) ;
    _IO_
    else if( osTidOwner != tinP.osTid && !bDying && !( F(flagsSwitch) & flSTACKc_ALLOWmULTIPLEuNSERIALIZED ) ) BLAMMO ;
    else if( !osTidOwner ) osTidOwner = tinP.osTid ;
    if( pBaton ) pBaton->grabF( tinP , TAG( TAGiDnULL ) ) ;

    }
        if( third ) return 0 ;
    {
    IFbEcAREFUL
    SCOOP
{
/*1*/boolT switchStackC::waitGrabF( tinS& tinP , const countT cPlatesLimitP , const boolT& bQuitP , const boolT bTinHasLeverP )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


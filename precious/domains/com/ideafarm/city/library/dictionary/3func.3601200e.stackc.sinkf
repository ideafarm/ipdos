
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    _OUTbATONsTACKc_
    sinkF( tinP , idSlotP , (countT)pc2P , flagsP , pSubtractF , subtractionParmP ) ;
    if( !pSubtractF ) pSubtractF = subtractCount2F ;
    ifc4FT pSubtractF = pSubtractFP ;
    _INbATONsTACKc_

    if( third ) return ;
    __( F(flags) & flSTACKc_XRAY ) ;
    __( idType && idType - ifcSTACKtYPE_PTR_count2S ) ;
    FV( flSTACKsINK , flagsP ) ;
    __Z( pc2P ) ;
    __( idSlotP ) ;
    if( third ) return ;
    SCOOP   
{
/*1*/voidT stackC::sinkF( tinS& tinP , countT& idSlotP , const count2S* const pc2P , const flagsT flagsP , ifc4FT pSubtractFP , const countT subtractionParmP )/*1*/

}
    return scSgn ;
    if( c3P ) ;
    }
        scSgn = ether.strCompareF( tinP , (countT*)c1P , (countT*)c2P , 2 , 0 , 0 , 0 , 1 ) ;
        etherC& ether = *(etherC*)pEther ;
    {
    if( pEther )
    ZE( sCountT , scSgn ) ;

    }
        if( !c1P || !c2P ) return 0 ;
    {
    IFbEcAREFUL
{
/**/countT subtractCount2F( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P )
*/
 pSubtractFP
 ||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/1snip.001008b.flSTACKsINK_!||
 flagsP
 pc2P
arguments
after calling this function, stackC::extractF( tinP ) can be used to remove the item that it references
  the function must be of type ifc3FT, i.e.: "countT (*ifc3FT)( tinS& tinP , countT& , countT& , countT& )"
   }
   return ((count2S*)c1P)->c1 - ((count2S*)c2P)->c1 ;
   etherC& ether = *(etherC*)pEther ;
   if( !pEther || !c1P || !c2P ) return ;
{
   countT subtractCount2F( countT& pEther , countT& c1P , countT& c2P )
  cast its parameters, as in this example (which, unlike the default subtraction function, only looks at c1)
  pDensityFP should be a function that returns the "density" of the object
   an item will not sink past another item of the same density
  iow, this function preserves ordering
 the new item sinks until the item below it is equally or more dense than it is
like operator << except the new item "sinks" into the stack
  \<A HREF=\"5.3d10104.1.1.0.html\"\>3d10104:  WAKEsHOW( "example.simplest.func.115000e.stackC.sinkF" )\</A\>
 simplest
examples
\<A HREF=\"5.115000e.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$sinkF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


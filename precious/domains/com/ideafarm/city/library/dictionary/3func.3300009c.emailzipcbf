
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    //etThread.traceF( tinP , T("postBodyP:  ")+T(postBodyP) ) ;
    //etThread.traceF( tinP , T("psttPeerAgentP:  ")+T(psttPeerAgentP) ) ;
    //etThread.traceF( tinP , T("psttUrlP:  ")+T(psttUrlP) ) ;
    etThread.traceF( tinP , T("nnPeerP: ")+T(nnPeerP) ) ;

#endif

    }
        }
            }
                THREADmODE1rESTORE
                etScratch.fileWriteF( tinP , fo , WS( rec ) ) ;
                THREADmODE1oN( flTHREADmODE1_ALLOWsTOPwHILEgRABBING )

                rec << (strokeS*)tCountry ;
                rec << (strokeS*)tZip ;
                rec << (strokeS*)tEmail ;
                rec << (strokeS*)tDelete ;
                rec << (strokeS*)tScheme ;
                rec << idRequestStatus ;
                rec << (strokeS*)tPeer ;
                rec << (countT)1 ;          // IDfORMAT
                rec << finger ;
                soulC rec( tinP , TAG( TAGiDnULL ) ) ;

                putNegAM( *(countT*)&finger , FINGERnEG_WOtABLEuNCONFIRMEDeMAIL ) ;
                ZE( countT , finger ) ;
            {
            else
            if( POOP ) { POOPR ; } // EACH PEER IS ONLY ALLOWED WO PENDING REGISTRATION.  AS OF THIS WRITING, EACH FILE REMAINS UNTIL THE REGISTRATION SUCCEEDS OR UNTIL THE FILE IS MANUALLY DELETED

            fileC fo( tinP , (strokeS*)tIpFile , ifcOPENaCCESS_W , 0 , flOPENdETAILS_LOCsEQ , ifcOPENhOW_nCeF , flFILEaTTR_null , flFILEc_null , 1 ) ;

            etherC& etScratch = *tinP.pEtScratch ;

            SCOOPS
        {
        IFsCRATCH
    {
    if( bWriteIpFile )

    }
        }
            etThread.boxPutF( tinP , T("smtp.mailgun.org[unconfirmed]/b42/smtp/factories@ideafarm.com/")+tEmail+T("//wo@ideafarm.com") , tBody ) ;

            tBody += tMyNetBiosHostName+T(".ideafarm.com/emailzip.confirm.html?pass=")+tPass+T("\r\n") ;

            ) ;

                    "    http://"
                    "\r\n"
                    "If you agree, click to confirm:\r\n"
                    "\r\n"
                    "No purchase is required to ether participate or to moderate.\r\n"
                    "\r\n"
                    "resources and assistance.\r\n"
                    "moderator and IDEAFARM.COM can be formalized to obtain additional\r\n"
                    "Moderation can continue informally, or the relationship between the\r\n"
                    "\r\n"
                    "other venue, and the group begins to meet weekly for a meal.\r\n"
                    "done informally; the moderator simply picks a fast food restaurant or\r\n"
                    "will \"moderate\" an \"eat together\" group.  Initially, moderation is\r\n"
                    "an email will be sent to invite those people to decide which among them\r\n"
                    "How it works:  When two or more emails are registered for a postal code,\r\n"
                    "\r\n"
                    "to eat together weekly to find new friends and empower one another.\r\n"
                    "postal code by postal code, worldwide, and to make it easy for registrants\r\n"
                    "servers and web site use registrations to put people into email contact,\r\n"
                    "exceptionally friendly, tolerant, and intelligent.  The IDEAFARM.COM\r\n"
                    "Key benefit:  Wo'O's Table attracts and excites people who are\r\n"
                    "\r\n"
                    "or nearby postal codes so that you all can arrange to eat together.\r\n"
                    "includes disclosure to other persons who have registered in the same\r\n"
                    "other purpose without your prior consent.  This administrative use \r\n"
                    "your participation in Wo'O's Table.  It will be used for no\r\n"
                    "(4) Privacy policy:  Your information will be used to administer\r\n"
                    "\r\n"
                    "(3) Registration is free and creates no contractual liability.\r\n"
                    "\r\n"
                    "IdeaFarm Operations, a California nonprofit public benefit corporation.\r\n"
                    "(1) You are registering your email with Wo'O Ideafarm, an agent of\r\n"
                    "\r\n"
                    "By clicking the link, you agree to the following terms and conditions:\r\n"
                    "\r\n"
                    "Otherwise, click the link below immediately to confirm.\r\n"
                    "If you did NOT just enter your email address at IDEAFARM.COM, then take no action.\r\n"
                    "\r\n"
                    "Subject: Wo'O's Table (TIME SENSITIVE)\r\n"

                :

                    "    http://"
                    "\r\n"
                    "Otherwise, click the link below immediately to confirm that you are unregistering.\r\n"
                    "If you did NOT just enter your email address at IDEAFARM.COM, then take no action.\r\n"
                    "\r\n"
                    "Subject: Wo'O's Table (TIME SENSITIVE)\r\n"

                ?
                bDelete

            TN( tBody ,

            boolT bDelete = psttDelete && !etThread.strCompareF( tinP , psttDelete , T("yes") ) ;

            }
                etThread.delF( tinP , psttMyNetBiosHostName ) ;
                else                         tMyNetBiosHostName = T(psttMyNetBiosHostName) ;
                if( !psttMyNetBiosHostName ) etThread.traceF( tinP , T("error: reverse DNS lookup on myself failed") ) ;
                etThread.sockPsttHostF( tinP , psttMyNetBiosHostName , nicNameC() ) ; ___( psttMyNetBiosHostName ) ;
                ZE( strokeS* , psttMyNetBiosHostName ) ;
            {
            TN( tMyNetBiosHostName , "" ) ;

            TN( tPass , "" ) ; tPass = TF2(password,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ;

            swsUnconfirmedPeerDeleteEmailZipCountryByPasswordP.ungrabF( tinP ) ;

            swsUnconfirmedPeerDeleteEmailZipCountryByPasswordP << psttCountry ;
            swsUnconfirmedPeerDeleteEmailZipCountryByPasswordP << psttZip     ;
            swsUnconfirmedPeerDeleteEmailZipCountryByPasswordP << psttEmail   ;
            swsUnconfirmedPeerDeleteEmailZipCountryByPasswordP << psttDelete  ;
            swsUnconfirmedPeerDeleteEmailZipCountryByPasswordP << psttPeer    ;

            swsUnconfirmedPeerDeleteEmailZipCountryByPasswordP.purgeF( tinP ) ;

            cLeverPasswordP = password ;

            swsUnconfirmedPeerDeleteEmailZipCountryByPasswordP.grabF( tinP , TAG( TAGiDnULL ) ) ;

            ZE( strokeS* , psttCountry ) ; etThread.strMakeF( tinP , psttCountry , tCountry ) ; ___( psttCountry ) ;
            ZE( strokeS* , psttZip     ) ; etThread.strMakeF( tinP , psttZip     , tZip     ) ; ___( psttZip     ) ;
            ZE( strokeS* , psttEmail   ) ; etThread.strMakeF( tinP , psttEmail   , tEmail   ) ; ___( psttEmail   ) ;
            ZE( strokeS* , psttDelete  ) ; etThread.strMakeF( tinP , psttDelete  , tDelete  ) ; ___( psttDelete  ) ;
            ZE( strokeS* , psttPeer    ) ; etThread.strMakeF( tinP , psttPeer    , tPeer    ) ; ___( psttPeer    ) ;

            meP.pushSnipF(   tinP , stBodyP , T("I will email a confirmation link to ")+tEmail+T(", which you must click within 10 minutes.\r\n") ) ;
        {
        else
        if( !bAllow ) meP.pushSnipF( tinP , stBodyP , T("I think that you are a bot, not a human, because there is already one pending (not yet confirmed) registration request made from your IP address.\r\nIf you are a human, try using a different computer or a different Wifi hotspot.\r\nOr, to request assistance, email support@ideafarm.com.") ) ;

        }
            }
                THREADmODE1rESTORE
                etScratch.fileWriteF( tinP , fo , WS( rec ) ) ;
                THREADmODE1oN( flTHREADmODE1_ALLOWsTOPwHILEgRABBING )

                rec << (strokeS*)tCountry ;
                rec << (strokeS*)tZip ;
                rec << (strokeS*)tEmail ;
                rec << (strokeS*)tDelete ;
                rec << (strokeS*)tScheme ;
                rec << idRequestStatus ;
                rec << (strokeS*)tPeer ;
                rec << (countT)1 ;          // IDfORMAT
                rec << finger ;
                soulC rec( tinP , TAG( TAGiDnULL ) ) ;

                putNegAM( *(countT*)&finger , FINGERnEG_WOtABLEuNCONFIRMEDeMAIL ) ;
                ZE( countT , finger ) ;

                idRequestStatus = ifcIDeMAILrEGISTRATIONrEQUESTsTATUS_HUMANnOpRIORpENDING ;
                bAllow = 1 ;
            {
            else
            if( POOP ) { POOPR ; } // EACH PEER IS ONLY ALLOWED WO PENDING REGISTRATION.  AS OF THIS WRITING, EACH FILE REMAINS UNTIL THE REGISTRATION SUCCEEDS OR UNTIL THE FILE IS MANUALLY DELETED

            fileC fo( tinP , (strokeS*)tIpFile , ifcOPENaCCESS_W , 0 , flOPENdETAILS_LOCsEQ , ifcOPENhOW_nCeF , flFILEaTTR_null , flFILEc_null , 1 ) ;
            bWriteIpFile = 0 ;

            etherC& etScratch = *tinP.pEtScratch ;

            SCOOPS
        {
        IFsCRATCH
        ZE( boolT , bAllow ) ;

        countT password = ru ;
        ranUniC ru( tinP , MAXcOUNTT ) ;
    {
    else
    }
        meP.pushSnipF(   tinP , stBodyP , T("I think that you are a bot, not a human, because you clicked the wrong image.\r\nTo request assistance, email support@ideafarm.com.\r\n") ) ;
        idRequestStatus = ifcIDeMAILrEGISTRATIONrEQUESTsTATUS_BOTwRONGiMAGE ;
    {
    else if( etThread.strCompareF( tinP , psttUrlP , tUrlCorrect ) )

#if defined( NEVERdEFINED )
//BAD ACTORS WILL CONTINUE TO EXERCISE ME
//THIS ENTIRE FUNCTION IS OBSOLETED BY THE USE OF PAYPAL

    }
        meP.pushSnipF(   tinP , stBodyP , T("I think that you are a bot, not a human.\r\nTo request assistance, email support@ideafarm.com.") ) ;
        idRequestStatus = ifcIDeMAILrEGISTRATIONrEQUESTsTATUS_BOTwRONGsCHEME ;
    {
    //if( etThread.strCompareF( tinP , tScheme , tSchemeCorrect ) )
    ZE( countT , idRequestStatus )
    boolT bWriteIpFile = 1 ;
    TN( tUrlCorrect    , "/header/action/emailzip.captcha.4.html" ) ; //U:: REMOVE "header"
    TN( tSchemeCorrect , "1" ) ;
    TN( tIpFile , (strokeS*)( T("///ideafarm/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/unconfirmed.email/ip.") + T(nnPeerP) ) ) ;

    swKVP.ungrabF( tinP ) ;
    psttLeverKVP = tKeyCountry ; tCountry = T((strokeS*)(countT)swKVP) ;
    psttLeverKVP = tKeyZip     ; tZip     = T((strokeS*)(countT)swKVP) ;
    psttLeverKVP = tKeyEmail   ; tEmail   = T((strokeS*)(countT)swKVP) ;
    psttLeverKVP = tKeyScheme  ; tScheme  = T((strokeS*)(countT)swKVP) ;
    psttLeverKVP = tKeyDelete  ; tDelete  = T((strokeS*)(countT)swKVP) ;
    swKVP.grabF( tinP , TAG( TAGiDnULL ) ) ;
    TN( tCountry , "" ) ;
    TN( tZip     , "" ) ;
    TN( tEmail   , "" ) ;
    TN( tScheme  , "" ) ;
    TN( tDelete  , "" ) ;
    TN( tPeer    , "" ) ; tPeer = T(nnPeerP) ;

    TN( tKeyCountry , "country" ) ;
    TN( tKeyZip     , "zip" ) ;
    TN( tKeyEmail   , "email"   ) ;
    TN( tKeyScheme  , "scheme" ) ;
    TN( tKeyDelete  , "delete" ) ;

    //swKVP.ungrabF( tinP ) ;
    //}
    //    etThread.traceF( tinP           , T("KV:  ")+T(psttLeverKVP)+T(":  \"")+T(psttv)+T("\"") ) ;
    //
    //    strokeS* psttv = (strokeS*)(countT)swKVP ;
    //    psttLeverKVP = (strokeS*)swKVP.leverF( tinP , idf ) ;
    //{
    //for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
    //etThread.traceF(   tinP , TF2(cFlavors,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" KV's received:") ) ;
    //countT cFlavors = swKVP.cFlavorsF( tinP ) ;
    //swKVP.grabF( tinP , TAG( TAGiDnULL ) ) ;

    switchStackC& swsUnconfirmedPeerDeleteEmailZipCountryByPasswordP = *(switchStackC*)c8pP.c4 ;
    countT&       cLeverPasswordP                                    =       *(countT*)c8pP.c3 ;
    count8S&      c8pP                                               =        *(count8S*)cArgP ;
{
/*1*/voidT emailZipCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttNameP , const strokeS* const psttQueryKVP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP )/*1*/


/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


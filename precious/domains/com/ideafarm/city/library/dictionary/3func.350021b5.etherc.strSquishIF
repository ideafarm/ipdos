
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    }
        }
            else        pci ++ ;
            if( bCopy ) *( pco ++ ) = *( pci ++ ) ;

            }
                case LISTnAME_STRETCHbEGINbITS       : { mode = 4 ; bBits = 1 ; bCopy = 0 ; *( pco ++ ) = *pci ; pc_cbString = pco ++                                                                                          ; break ; }
                case LISTnAME_STRETCHbEGINcOUNTsTRZ  : { mode = 3                                                                                                                                                              ; break ; }
                case LISTnAME_STRETCHbEGINoStEXTsTRZ : { mode = 2             ; bCopy = 0 ; *( pco ++ ) = *pci ; pc_cbString = pco ++                                                                                          ; break ; }
                case LISTnAME_STRETCHbEGINcOUNT      : { mode = 1                                                                                                                                                              ; break ; }
                case LISTnAME_STRETCHeND             : { mode = 0 ; if( cbGot || ( bBits && *pc_cbString % SB ) ) { *( pco ++ ) = got || bBits ? got : BM_HIGH ; bBits = got = cbGot = 0 ; } if( pc_cbString ) pc_cbString = 0 ; break ; }     // cbGot SHOULD ALWAYS BE 0 EXCEPT FOR ODD LENGTH LISTnAME_STRETCHbEGINoStEXTsTRZ
            {
            switch( *pci )

            }
                }
                    break ;                    
                {
                default :
                case 4 : { bCopy = 0 ; ++ *pc_cbString ; got = got << 1 | ( *pci & 3    ) - 1 ; if( !( *pc_cbString % SB ) ) ++ cbGot ; if(    cbGot == sizeof( countT ) ) { *( pco ++ ) = got                 ; got = cbGot = 0 ; } break ; } //U:: CONJ: BUG: DOES THIS HANDLE ALL ENDING BITS 0?
                case 3 : { bCopy = 0                   ; got = got << 8 |   *pci & 0xff                                               ; if( ++ cbGot == sizeof( countT ) ) { *( pco ++ ) = got ? got : BM_HIGH ; got = cbGot = 0 ; } break ; }
                case 1 :
                case 2 : {             ++ *pc_cbString ; }      // INTENTIONAL FALLTHROUGH
            {
            switch( mode )
            boolT bCopy = 1 ;

            }
                mode = 0 ;
                __Z( mode ) ;
            {
            if( *pci == LISTnAME_STRETCHeND )
        {
        while( *pci )
        ZE( boolT   , bBits ) ;
        ZE( countT* , pc_cbString ) ;
        ZE( countT  , cbGot ) ;
        ZE( countT  , got ) ;
        ZE( countT  , mode ) ;               // 1:SHRINK COUNT ; 2 : SHRINK COUNT STRING ; 3 : SHRINK BYTES
        const countT* pci = pczInP ;
        countT* pco = pczP ;
    {
    if( pczP )

    }
        if( pczP ) thirdC::c_memsetIF( tinP , (byteT*)pczP , ( cco + 1 ) * sizeof( countT ) ) ;
        PUSE.newF( tinP , LF , *(byteT**)&pczP , ( cco + 1 ) * sizeof( countT ) ) ; ___( pczP ) ;
        const countT cco = thirdC::c_strlenIF( tinP , pczInP ) ; //U::O: CALCULATE LENGTH NEEDED
    {
    if( !pczP )                                                                                                                             // IFF (IF AND ONLY IF) ALLOCATED NOW, OUTPUT IS ENTIRELY INITIALIZED TO PLACEhOLDER

    _IO_

    }
        if( POOP ) return ;
        __Z( pczInP ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL
{
/*1*/voidT etherC::strSquishIF( tinS& tinP , countT*& pczP , const countT* pczInP )/*1*/

/**/
*/
 pczInP
  if the input string contains stretches of type LISTnAME_STRETCHbEGINbITS, the resulting output string cannot always be processed by searching for a null terminator because the shrunk bit string can contain runs of 0's
  if preallocated, must be sufficiently large (overrun will not be detected)
  may be preallocated
 pczP
 tinP
arguments
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//


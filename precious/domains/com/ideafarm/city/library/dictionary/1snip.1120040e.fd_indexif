
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


    }
        tinP.ta.retained.u.listWalk.walk.pPoolRecord = 0 ;                                                                                                            \
                                                                                                                                                                    \
        }                                                                                                                                                           \
            DEL( pPuseIndex ) ;                                                                                                                                     \
            PUSE( tinP , *(byteT**)&pczV ) ;                                                                                                                        \
            DELlIST( fieldEditParamOutC , pOut ) ;                                                                                                                  \
            puseC puseat( tinP , ifcIDpOOL_ADAMtEMP ) ;                                                                                                             \
        {                                                                                                                                                           \
                                                                                                                                                                    \
        }                                                                                                                                                           \
            listC::fieldIF( tinP , pOut , hIKV , pczField , _1_pushC( recordP ) + _1_modePushSinkC() , LF ) ; ___( pOut ) ;                                         \
            countT pczField[] = { LISTnAME_RECORD , 0 } ;                                                                                                           \
                                                                                                                                                                    \
            listC::openIF( tinP , hIKV , hIK , pczV ) ;                                                                                                             \
            handleC hIKV( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_LISTING ) ;                                                                                     \
        {                                                                                                                                                           \
        ZE( fieldEditParamOutC* , pOut ) ;                                                                                                                          \
                                                                                                                                                                    \
        }                                                                                                                                                           \
            listC::openIF( tinP , hIK , pczIK ) ;                                                                                                                   \
            THREADmODE2rESTORE                                                                                                                                      \
            listC::dictionaryReplaceOsTextIF( tinP , pczIK ) ;                                                                                                      \
            THREADmODE2oN( flTHREADmODE2_ALLOWdICTIONARYwHILEgRABBING )                                                                                             \
            countT pczIK[] = { LISTnAME_ROOT , LISTnAME_ROOTsYSTEM3 , LISTnAME_FIELDvALUEiNDEX , (countT)postMasterPool , LISTnAME_INDEXaPPLICATION , idKeyInIndex , 0 } ; \
        {                                                                                                                                                           \
        else                                                                                                                                                        \
        }                                                                                                                                                           \
            listC::openIF( tinP , hIK , hIndexP , pczK ) ;                                                                                                          \
            countT pczK[] = { idKeyInIndex , 0 } ;                                                                                                                  \
        {                                                                                                                                                           \
        if( ~hIndexP )                                                                                                                                              \
        handleC hIK( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_LISTING ) ;                                                                                          \
                                                                                                                                                                    \
        }                                                                                                                                                           \
            THREADmODE2rESTORE                                                                                                                                      \
            }                                                                                                                                                       \
                }                                                                                                                                                   \
                    DELzOMBIE( pvspPostKey ) ;                                                                                                                      \
                    idKeyInIndex = dictionaryQueryFromTextIF( tinP , *pvspPostKey ) ;                                                                               \
                {                                                                                                                                                   \
                if( !bLiteralKey )                                                                                                                                  \
                                                                                                                                                                    \
                }                                                                                                                                                   \
                    ___( pPuseIndex ) ;                                                                                                                             \
                    puseC puseat( tinP , ifcIDpOOL_ADAMtEMP ) ;                                                                                                     \
                {                                                                                                                                                   \
                                                                                                                                                                    \
                ;                                                                                                                                                   \
                    : new( 0 , tinP , LF ) puseC( tinP , idStateSpace == ifcIDsTATEsPACE_SINGLEaDAM( tinP ) || idStateSpace == ifcIDsTATEsPACE_SCRATCH ? ifcIDpOOL_ADAMtEMP : ifcIDpOOL_HOMEtEMP ) \
                    ? new( 0 , tinP , LF ) puseC( puseIndexP )                                                                                                      \
                pPuseIndex = ~hIndexP                                                                                                                               \
                puseat.doNothingWhenDieF() ;                                                                                                                        \
                puseC puseat( tinP , ifcIDpOOL_ADAMtEMP ) ;                                                                                                         \
                                                                                                                                                                    \
                }                                                                                                                                                   \
                    *pvspPostKey = dictionaryQueryFromIdIF( tinP , idKeyP ) ;                                                                                       \
                    pvspPostKey = new( 0 , tinP , pbvsp , sizeof pbvsp ) blobVSP ;                                                                                  \
                {                                                                                                                                                   \
                if( !bLiteralKey )                                                                                                                                  \
                ZE( blobVSP* , pvspPostKey ) ;                                                                                                                      \
                byteT pbvsp[ sizeof( blobVSP ) ] ;                                                                                                                  \
                boolT bLiteralKey = LISTnAME_min <= idKeyP && idKeyP << LISTnAME_max ;                                                                              \
            {                                                                                                                                                       \
            THREADmODE2oN( flTHREADmODE2_ALLOWdICTIONARYwHILEgRABBING )                                                                                             \
        {                                                                                                                                                           \
        if( ~hIndexP || thirdC::c_strcmpIF( tinP , postMasterPool , "adam.temp" ) )                                                                                 \
        countT idKeyInIndex = idKeyP ;                                                                                                                              \
        ZE( puseC* , pPuseIndex ) ;                                                                                                                                 \
        puseC puseMaster( tinP , *tinP.pPoolUse ) ;                                                                                                                 \
                                                                                                                                                                    \
        const countT idStateSpace = PUSE.idStateSpaceF() ;                                                                                                          \
        ;                                                                                                                                                           \
            : PUSE.postNameF( tinP )                                                                                                                                \
            ? 0                                                                                                                                                     \
        const osTextT* postMasterPool = ~hIndexP                                                                                                                    \
                                                                                                                                                                    \
        }                                                                                                                                                           \
            etherC::strStretchIF( tinP , pczV , 0 , valueP , cNetP ) ; ___( pczV ) ;                                                                                \
            puseC puseat( tinP , ifcIDpOOL_ADAMtEMP ) ;                                                                                                             \
        {                                                                                                                                                           \
        ZE(  countT* , pczV ) ;                                                                                                                                     \
                                                                                                                                                                    \
        tinP.ta.retained.u.listWalk.walk.pPoolRecord = &PUSE ;                                                                                                        \
                                                                                                                                                                    \
        }                                                                                                                                                           \
            if( POOP ) return ;                                                                                                                                     \
            if( bCareful != - 1 ) { __( bCareful ) ; }                                                                                                              \
            countT bCareful = (expCarefulP) ;                                                                                                                       \
            if( POOP ) return ;                                                                                                                                     \
            __( !!tinP.ta.retained.u.listWalk.walk.pPoolRecord ) ;                                                                                                    \
            __Z( idKeyP ) ;                                                                                                                                         \
            if( POOP ) return ;                                                                                                                                     \
        {                                                                                                                                                           \
        IFbEcAREFUL                                                                                                                                                 \
    {                                                                                                                                                               \
    voidT listC::indexIF( tinS& tinP , puseC& puseIndexP , handleC& hIndexP , const countT idKeyP , const typeP valueP , const countT cNetP , const listingC& recordP , const listingC& datumP ) \
                                                                                                                                                                    \
#define FD_INDEXif(typeP,expCarefulP)                                                                                                                               \

//                        I                                    K                 V                                                                R
//                   |----INDEX---------------------------|----KEY----------|----VALUE-------------------------------------------------------|----REFERENCES----
// EXAMPLE:           SYSTEM2/INDEX/"poolname"/APPLICATION/"favoritenumbers"/STRETCHbEGINcOUNT/ff00000c/ee00000c/dd00000c/cc00000c/STRETCHeND/LISTnAME_RECORD
//
// COMPONENTS OF THE FULLY QUALIFIED PATH IN THE INDEX

// "FD": "FUNCTION DEFINITION"

/*1*//*FD_INDEXif(typeP,expCarefulP)*//*1*/

/**/
*/
   the full record would then be displayed for all "checked" bodies, using the record references already retrieved
   these bodies would be displayed to the user, who would "check" which ones he is interested in
   the query would retrieve all [recordP,datumP] pairs for emails which contained a body that contained the word "awesome"
   in this example, each email record contains fields such as body, subject, from, to, cc, bcc, time
  application example: find the full text body of all emails that contain the word "awesome", display it, and if approved, retrieve the entire reocrd for that email
  the listing that contains the datum to be indexed
 datumP
  application example: find all families that contain a child named "Theresa"
  this is a record that contains a field with the specified value
  the list (record) that contains the list (field) that contains the datum to be indexed
 recordP
  this value is assumed to be present as a listing within the field
  this is the value to be indexed
 valueP
   it is the lath element of the fully qualified name of the list that contains the datum listing
   this is the value passed into fieldIF when the datum that is being indexed was created
  the name of the field
 idKeyP
  may be null
 hIndexP
  if !hIndexP then specify puseC()
 puseIndexP
 tinP
args
i create an index entry for a particular value of a particular field in a particular record
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


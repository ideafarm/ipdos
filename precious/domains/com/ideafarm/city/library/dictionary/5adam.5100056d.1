
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etThread.loafIF( tinP ) ;

env.rwu.rwd.f1 = 1 ;
envS env ;

TODO

;
}
    inline envS( voidT ) { rwu.rwd.f4 = rwu.rwd.f3 = rwu.rwd.f2 = rwu.rwd.f1 = 0x11111111 ; }

    rwu ;
    }
        {}
        rod( dataS() )
        inline rwuU( voidT ) :

        const dataS rod ;
        dataS       rwd ;
    {
    union rwuU
{
struct envS

;
}
    countT f4 ;
    countT f3 ;
    countT f2 ;
    countT f1 ;
{
struct dataS

/*1*/WAKEsHOW( "doodle.readonlyclassmembers" )/*1*/
/**/
*/
this restriction can be worked around by defining an initF member function, and calling it in the constructor for envS
this technique can only be used for fields that need not be constructed
significant limitation: dataS cannot have a constructor
 the idea is to use a union
this code illustrates a technique for documenting and enforcing read only vs readwrite access to data members of cpp classes
/*


//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


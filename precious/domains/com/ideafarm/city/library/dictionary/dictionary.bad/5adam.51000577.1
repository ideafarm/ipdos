
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

}
    }
        ++ s ; ether.osSleepF( tinP , TOCK * 0x4 ) ;
        sleepC s( tinP , TAG( TAGiDnULL ) ) ;
    
        etThread.delF( tinP , pstt1m ) ;
        }
            etThread.delF( tinP , psttRenamed ) ;
            etThread.delF( tinP , posti ) ;
            }
                etThread( tinP , pStkTo ) ;

                }
                    psttRenamed = 0 ;
                    pStk->sinkF( tinP , countTC() , psttRenamed , flSTACKsINK_UNIQUE ) ;
                    stackC* pStk = bRejected ? &st_psttRejected : &st_psttSent ;
                    POOPR
                {
                if( POOP )

                etThread.delF( tinP , psttShort ) ;
                else tinP.pEtScratch->diskMoveFileOrDirF( tinP , tOutboxSent+T(psttShort) , psttRenamed ) ;
                }
                    tinP.pEtScratch->diskMoveFileOrDirF( tinP , tOutboxNotSent+T(psttShort) , psttRenamed ) ;
                    bRejected = 1 ;
                    POOPR
                {
                if( POOP )
                ZE( boolT , bRejected ) ;

                etThread.strWordF( tinP , psttShort , psttRenamed , sttq , sSlash , - 1 ) ; ___( psttShort ) ;
                ZE( strokeS* , psttShort ) ;
                strokeS sttq( 0 , sc_IGNOREqUOTES ) ;

                tinP.pEtScratch->boxPutF( tinP , tName , posti , costi ) ;
                //}
                //    etThread.delF( tinP , pstte ) ;
                //    tName += T("/")+T(pstte) ;
                //    *pStkTo >> pstte ;
                //    ZE( strokeS* , pstte ) ;
                //{
                //while( *pStkTo )
                TN( tName , "k2smtpout.secureserver.net//smtp/0" ) ; //DEFAULT idAccountFrom

                }
                    etThread.delF( tinP , pstti ) ;
                    etThread.delF( tinP , pstt1lines ) ;

                    }
                        etThread.delF( tinP , psttLower ) ;
                        }
                            }
                                }
                                    //LOGrAW( T("email: \"")+T(psttEmail)+T("\"\r\n") ) ;
                                    *pStkTo << psttEmail ;
                                {
                                if( psttEmail )
                                etThread.strSubstringF( tinP , psttEmail , idf , sttq , S1C('>') , psttLower ) ; ___( psttEmail ) ;
                                strokeS sttq( 0 , sc_IGNOREqUOTES ) ;
                                ZE( strokeS* , psttEmail ) ;
                            {
                            if( idf )
                            etThread.strIdF( tinP , idf , sttq , S1C('<') , psttLower ) ;
                            strokeS sttq( 0 , sc_IGNOREqUOTES ) ;
                            countT idf = 1 ;
                        {
                        )
                            1 == etThread.strIdF( tinP , T("bcc" ": ") , psttLower )
                            1 == etThread.strIdF( tinP , T( "cc" ": ") , psttLower ) ||
                            1 == etThread.strIdF( tinP , T( "to: ") , psttLower ) ||
                        (
                        if

                        etThread.strConvertToLowerCaseF( tinP , psttLower , psttc2 ) ; ___( psttLower ) ;
                        ZE( strokeS* , psttLower ) ;
                    {
                    FORsTRINGSiN2( pstt1lines )
                    etThread.strWordsOldF( tinP , pstt1lines, pstti , sttq , T("\r\n") ) ; ___( pstt1lines ) ;
                    strokeS sttq( 0 , sc_IGNOREqUOTES ) ;
                    ZE( strokeS* , pstt1lines ) ;

                    etThread.strMakeF( tinP , LF , pstti , T(posti) ) ; ___( pstti ) ;
                    ZE( strokeS* , pstti ) ;
                {
                if( pStkTo )
                etThread( tinP , pStkTo , TAG( TAGiDnULL ) , flSTACKc_FIFO | flSTACKc_DOnOTsERIALIZE | flSTACKc_ALLOWmULTIPLEuNSERIALIZED , ifcSTACKtYPE_PTR_strokeS ) ;
                ZE( stackC* , pStkTo ) ;
                CONoUTrAW3( "costi" ":" , costi , "\r\n" ) ;
            {
            else
            if( POOP ) { POOPR ; }
            tinP.pEtScratch->boxGetShadowF( tinP , posti , costi , psttRenamed ) ; ___( posti ) ;
            ZE( countT , costi ) ;
            ZE( osTextT* , posti ) ;
            CONoUTrAW( T("RENAMED: ")+T(psttRenamed)+T("\r\n") ) ;

            }
                continue ;
                POOPR
            {
            if( POOP )
            tinP.pEtScratch->diskMoveFileOrDirUniqueF( tinP , psttRenamed , psttc1 ) ;
            ZE( strokeS* , psttRenamed ) ;

            CONoUTrAW( T("   FILE: ")+T(psttc1)+T("\r\n") ) ;
        {
        FORsTRINGSiN1( pstt1m )
        etThread.boxMenuF( tinP , soul , tOutbox+tStar , 0 , 0x10 ) ; ___( pstt1m ) ;
        ZE( strokeS* , pstt1m ) ;

        }
            }
                while( ~hWalk ) ;
                }
                    }
                        ppStk[ off ]->extractF( tinP ) ;
                        etThread.delF( tinP , psttr ) ;
                    {
                    else
                    if( POOP ) { POOPR }

                    etThread.delF( tinP , psttShort ) ;
                    tinP.pEtScratch->diskMoveFileOrDirF( tinP , (off?tOutboxNotSent:tOutboxSent)+T(psttShort) , psttr ) ;
                    etThread.strWordF( tinP , psttShort , psttr , sttq , sSlash , - 1 ) ; ___( psttShort ) ;
                    ZE( strokeS* , psttShort ) ;
                    strokeS sttq( 0 , sc_IGNOREqUOTES ) ;

                    strokeS*& psttr = *(strokeS**)&ppStk[ off ]->downF( tinP , hWalk ) ;
                {
                do
                handleC hWalk( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
            {
            if( *ppStk[ off ] )
        {
        for( countT off = 0 ; off < sizeof ppStk / sizeof ppStk[ 0 ] ; off ++ )
        stackC* ppStk[] = { &st_psttSent , &st_psttRejected } ;
    {
    while( !ether && !etThread )
    strokeS sSlash( '/' , sc_cFROMaSCII ) ;
    TN( tStar , "*" ) ;
    etThread.osThreadAdamF( tinP , ifcIDaDAM_ROOTfORMdATAeATER   ) ;
    //etThread.ifcHireF( tinP , T("ifcIDaDAM_ROOTmAILoUT") , ifcIDaDAM_ROOTfORMdATAeATER , T("!ignoreFireByOperator") , flHIRE_DISPLAYaUTO , nicNameC() ) ;

    stackC st_psttRejected( tinP , etThread , TAG( TAGiDnULL ) , flSTACKc_null , ifcSTACKtYPE_PTR_strokeS ) ;
    stackC st_psttSent(     tinP , etThread , TAG( TAGiDnULL ) , flSTACKc_null , ifcSTACKtYPE_PTR_strokeS ) ;

    etThread.diskMakeDirIfNeededF( tinP , tOutboxNotSent ) ;
    etThread.diskMakeDirIfNeededF( tinP , tOutboxSent ) ;
    etThread.diskMakeDirIfNeededF( tinP , tOutbox ) ;

    TN( tOutboxNotSent , "" ) ; tOutboxNotSent = T("///ideafarm/ephemeral/backed.up.daily/domains/com/ideafarm/")+TF2(etherC::ifc_idAdamRootI_IF(tinP),flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+T("/notsent/") ;
    TN( tOutboxSent    , "" ) ; tOutboxSent    = T("///ideafarm/ephemeral/backed.up.daily/domains/com/ideafarm/")+TF2(etherC::ifc_idAdamRootI_IF(tinP),flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+T("/sent/") ;
    TN( tOutbox        , "" ) ; tOutbox        = T("///ideafarm/ephemeral/backed.up.daily/domains/com/ideafarm/")+TF2(etherC::ifc_idAdamRootI_IF(tinP),flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+T("/in/") ;

    //TN( tOutboxNotSent , "" ) ; tOutboxNotSent = T("///desk/" POSTfOLDERsMTPoUTBOXnOTsENT)+(idHomeDisk==1?T(""):T(" (Home ")+TF1(idHomeDisk)+T(")"))+T("/") ;
    //TN( tOutboxSent    , "" ) ; tOutboxSent    = T("///desk/" POSTfOLDERsMTPoUTBOXsENT   )+(idHomeDisk==1?T(""):T(" (Home ")+TF1(idHomeDisk)+T(")"))+T("/") ;
    //TN( tOutbox        , "" ) ; tOutbox        = T("///desk/" POSTfOLDERsMTPoUTBOX       )+(idHomeDisk==1?T(""):T(" (Home ")+TF1(idHomeDisk)+T(")"))+T("/") ;

    const countT idHomeDisk = etherC::ifc_idHomeIdisk_IF() ;

    SCOOPS
{
IFsCRATCH

CONoUTrAW( "MAILOUT\r\n" ) ; //U::
 
TODO

/*1*/WAKEhIDE( "server.mailout" )/*1*/

/**/
*/
  terminated by eof (not by a lone period)
  must contain at least one recipient
 specs of input file
 | 
 |  line 4
 |  line 3
 |  line 2
 |  line 1
 |  
 |  Subject: looey
 |  Bcc : <hooey@hooey.com>
 |  Cc : <gooey@gooey.com>
 |  Cc : <gooey@gooey.com>
 |  Cc : <gooey@gooey.com>
 |  Cc : <gooey@gooey.com>
 |  To: <fooey@gooey.com>
 |  To: <fooey@gooey.com>
 |  To: <fooey@gooey.com>
 |  To: <fooey@gooey.com>
 | 
example format of email file
 Bcc semantics must be done by whoever writes the file into my directory
 if there are multiple Bcc : lines, each recipient can see them all
 in particular, i do not process Bcc : lines in any special way
the file is the exact image that is sent to all recipients
watches a directory containing email to send
/*

//OBSOLETED BY 3a50104

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//



//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return rslt ;

    }
        }
            }
                }
                    *pstx << (countT)!ether.strCompareF( tinP , tableP._CT1_07F( idrr , idc1 ) , tableP._CT1_07F( idrr , idc2 ) ) ;
                {
                for( countT idrr = 1 ; idrr <= cRowsr ; idrr ++ )
                const countT cRowsr = tableP.cRowsF( tinP ) ;

                stStacksToDeleteP << (countT)pstx ;    
                rslt.newObjectF( tinP , *pstx ) ;
            {
            if( pstx )
            stackC* pstx = new( 0 , tinP , LF ) stackC( tinP , ether , TAG( TAGiDnULL ) , flSTACKc_FIFO ) ; ___( pstx ) ;

            __( idop - idcOPERATOR_EQUALS ) ;
            }
                __( idc2 > tableP.cColsF( tinP ) ) ;
                __( idc1 > tableP.cColsF( tinP ) ) ;

                __Z( idc2 ) ;
                __Z( idop ) ;
                __Z( idc1 ) ;
                idc2 = stx.downF( tinP , handle ) ;
                idop = stx.downF( tinP , handle ) ;
                idc1 = stx.downF( tinP , handle ) ;
                handleC handle( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;

                stackC& stx = *(stackC*)operator()( idr , idc ).c2 ;
            {
            ZE( countT , idc2 ) ;
            ZE( countT , idop ) ;
            ZE( countT , idc1 ) ;
        {
        for( countT idc = 1 ; idc <= cCols ; idc ++ )
        rslt.newEventF( tinP ) ;
    {
    for( countT idr = 1 ; idr <= cRows ; idr ++ )
    const countT cRows = cRowsF( tinP ) ;

    for( countT idc = 1 ; idc <= cCols ; idc ++ ) rslt.newColF( tinP , T(psttName)+T(".")+T(nameF(tinP,idc)) ) ;
    const countT cCols = cColsF( tinP ) ;

    tableC rslt( tinP , ether ) ;
    _IO_

    }
        if( POOP ) return *this ;
    {
    IFbEcAREFUL

    SCOOP
    TINSL
{
/*1*/tableC tableC::calcF( stackC& stStacksToDeleteP , tableC& tableP )/*1*/

/**/
*/
  this is the table that my compiled expressions are to be applied to
 tableP
   do not d elete these stacks until you are finished using the result table
  the caller is responsible for deleting these stacks
   this stack contains the calculated values
   one stackC object is constructed in the poolOld for each row of tableP
  this stackC object will receive pointers to stackC objects
 stStacksToDeleteP
arguments
tableP is the table that contains the columns named in the source expressions
every one of my cells must be a compiled expression
  each value corresponds to a row in tableP
 each cell is a stackC of values
calculates the value of my compiled expressions
  \<A HREF=\"5.0820104.1.1.0.html\"\>0820104:  WAKEsHOW( "example.simplest.func.1320010.tableC.calcF" )\</A\>
 simplest
examples
\<A HREF=\"5.1320010.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$calcF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//



//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//

#endif
    }
        }
            }
                break ;
                //if( !*guts.ppSlots[ offs ] ) { DELzOMBIE( guts.ppSlots[ offs ] ) ; }
            {
            if( !pbP )
            (*guts.ppSlots[ offs ])( tinP , pbP ) ;
        {
        if( guts.ppSlots[ offs ] )
    {
    for( countT offs = guts.expCbDropMin ; offs <= guts.expCbDropMax ; offs ++ )
#if defined( NEVERdEFINED )
//U:: OBSOLETED BY ADDITION OF DROP HEADER ; THIS WAS AT THE END OF THE DEF


}
    }
        if( pbP ) { BLAMMO ; }

        }
            if( !pbP && offs - offsTry ) { BLAMMOiD( offs - offsTry ) ; }

            }
                pEtRock->traceF( tinP , (strokeS*)(const osTextT*)ostoSay , flTRACE_PARAMETERiSoStEXT ) ;

                }
                    OStEXTC(  ostoSay , offsTry , 0 ) ;
                    OStEXTAK( ostoSay , "    " ) ;
                {
                if( !pbP )
                OStEXTC(  ostoSay , offs , 0 ) ;
                OStEXTAK( ostoSay , "    " ) ;
                OStEXTC(  ostoSay , mask , 0 ) ;
                OStEXTAK( ostoSay , "    " ) ;
                OStEXTC(  ostoSay , dropHeader , '0' ) ;
                OStEXTAK( ostoSay , "    " ) ;
                OStEXTC(  ostoSay , guts.expCbDropMin , 0 ) ;
                OStEXTAK( ostoSay , "    " ) ;
                OStEXTC(  ostoSay , guts.cBitsExpCbDrop , 0 ) ;
                OStEXTA( ostoSay , !pbP ? "poolC::operator (): trying harder succeeded [cBitsExpCbDrop,expCbDropMin,dropHeader,mask,offs,offsTry]:    " : "poolC::operator (): trying harder failed [cBitsExpCbDrop,expCbDropMin,dropHeader,mask,offs]:    " ) ;
                OStEXT( ostoSay , TUCK << 1 ) ;
            {
            if( pEtRock )

            }
                }
                    if( !pbP ) break ;
                    (*guts.ppSlots[ offsTry ])( tinP , pbP ) ;
                {
                if( guts.ppSlots[ offsTry ] )
            {
            for( offsTry = 0 ; offsTry < CsLOTsIZESmAX ; offsTry ++ )
            ZE( countT , offsTry ) ;

            }
                pEtRock->traceF( tinP , (strokeS*)(const osTextT*)ostoSay , flTRACE_PARAMETERiSoStEXT ) ;

                OStEXTA( ostoSay , "poolC::operator (): trying harder" ) ;
                OStEXT( ostoSay , TUCK << 0 ) ;
            {
            if( pEtRock )
            etherC* pEtRock = &etherC::etRockIF( tinP ) ;
        {
        else
        }
            (*guts.ppSlots[ offs ])( tinP , pbP ) ;

            //if( offs == 0x18 ) etherC::etRockIF( tinP ).traceF( tinP , T("-------- DELETE") ) ; //U::20140808@1936: TO FIND A BUG
            if( !guts.ppSlots[ offs ] ) { BLAMMO ; }
            if( c_this && F(guts.flagsCt) & flPOOLc_READoNLY ) { BLAMMO ; }
            countT c_this = (countT)this ;
        {
        if( !( F(tinP.flagsThreadMode3) & flTHREADmODE3_POOLdELtRYhARDERaNDtRACE ) )

        countT offs = guts.expCbDropMin + ( dropHeader & mask ) ;
        countT mask = ( 1 << guts.cBitsExpCbDrop ) - 1 ;
        countT& dropHeader = ((countT*)pbP)[ - 1 ] ;
    {
    if( pbP )

    if( processGlobal0I.pbHeap <= pbP && pbP < processGlobal0I.pbHeapEnd ) processGlobal3I.heap.delF( tinP , pbP ) ;
    //20201106@1436: WITHOUT ANALYSIS, CHANGED "< pbP" to "<= pbP"

    //I CAN BE CALLED WHEN this IS NULL, AND I MUST BEHAVE OK

    //_IO_
    //SPEED OPTIMIZATION: THIS _IO_ WOULD HAVE THE #5 HIGHEST FREQUENCY OF CALLS
{
/*1*/voidT poolC::operator ()( tinS& tinP , byteT*& pbP )/*1*/

/**/

*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//



//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST
etThread.osProcessIdPhaseAdamF( tinP , ifcIDpHASEhANDOFFoLD_SHUTTINGdOWN ) ;

}
    }
        etThread.osSleepF( tinP , TOCK ) ;

        etThread = 0 ;

        }
            else                    { ZE( countT , tnu ) ; etThread.osThreadF( tinP , tnu , tmSuckF , 0 , flTHREADlAUNCH_null , 0 , (countT)pso , (countT)&tPathDatum ) ; }
            if( ether || etThread ) { DEL( pso ) ; }

            socket.acceptF( tinP , pso , idPortPeer , nnPeer , countTC() ) ; ___( pso ) ;
            ZE( countT , idPortPeer ) ;
            nicNameC nnPeer ;
            ZE( socketC* , pso ) ;
        {
        while( !ether && !etThread )
        etThread.etherCryF( tinP ) ;

        socket.listenF( tinP ) ;
        countT idPort = socket.bindF( tinP , ifcPORToLD1bOXsUCKER ) ;
        socketC socket( tinP , etThread , TAG( TAGiDnULL ) ) ;

        TN( tPathDatum , "///ideafarm/ephemeral/domains/com/ideafarm/city/data/new/dat." ) ;
    {
    while( !ether )

    etThread.strokeF( tinP , T("IdeaFarm " "(tm) City Box Sucker\r\ni accept boxes on request\r\n") ) ;
{
else
}
    etThread.strokeF( tinP , T("Another ")+textIdFileC( tinP , DDNAME )+T(" appears to be alive on this computer.  Only one is allowed.") ) ;
    etThread = 0  ;
{
if( etThread )
U:: USE napkinC OBJECT TO TEST FOR ALONENESS
batonC baton( tinP , TAG( TAGiDnULL ) , T("2e30104") ) ;

TODO

DONE( tmSuckF )

}
    DEL( pso ) ;
    __( pso->readF( tinP , &bnu , 1 , flSOCKETcrEAD_STILLhUNGRYiSoK ) ) ; // PEER WILL NEVER WRITE A BYTE, BUT WILL CLOSE CONN INSTEAD
    ZE( byteT , bnu ) ;
    pso->writeF( tinP , (osTextT*)T("ok: this extra text appears to be needed to make the socket send this off") ) ; //U: CONJ: THIS IS NO LONGER NEEDED NOW THAT LINGER IS FIXED

    etThread.delF( tinP , psttList ) ;
    etThread.delF( tinP , pbAll ) ;

    }
        sOut.writeMsgF( tinP , T("!amDry") ) ;

        }
            __( pbc != pbEnd ) ;
            }
                if( idf ) { etThread.strSubstringF( tinP , psttw , idf , sttq , S1C(' ') , psttList ) ; ___( psttw ) ; }
                etThread.delF( tinP , psttw ) ;

                etThread.strokeF( tinP , T("\r\n") ) ;

                }
                    pbc += sizeof( countT ) + cbd ;

                    else etThread.boxPutF( tinP , psttw , pbd , cbd ) ;
                    }
                        sOut.writeMsgF( tinP , pbd , cbd ) ;
                        etThread.strokeF( tinP , T("DATA DIVERTED") ) ;
                    {
                    if( 1 == etThread.strIdF( tinP , idf , sttq , tPathDatum , psttw ) && *(countT*)pbd == cbd - sizeof( countT ) )

                    const countT cbd = *(countT*)pbc ;
                    const byteT* const pbd = pbc + sizeof( countT ) ;

                    strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
                    countT idf = 1 ;

                    __( pbc + sizeof( countT ) + *(countT*)pbc > pbEnd ) ;
                    __( pbc > pbEnd ) ;
                {
                if( pbc )
                __Z( pbc ) ;
                etThread.strokeF( tinP , psttw ) ;

                }
                    etThread.delF( tinP , psttFileId ) ;
                    etThread.strokeF( tinP , T(psttFileId)+T("\t") ) ;
                    etThread.strFromF( tinP , psttFileId , ++ fileId ) ; ___( psttFileId ) ;
                    ZE( strokeS* , psttFileId ) ;
                {
            {
            while( !ether && !etThread && psttw )
            ZE( countT , fileId ) ;
            etThread.strSubstringF( tinP , psttw , idf , sttq , S1C(' ') , psttList ) ; ___( psttw ) ;
            strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
            countT idf = 1 ;
            ZE( strokeS* , psttw ) ;
            pbc = pbAll ;
            ZE( byteT* , pbc ) ;
        {
        else
        }
            etThread.strokeF( tinP , T("\r\n") ) ;

            else etThread.boxPutF( tinP , psttList , pbAll , cbAll ) ;
            }
                sOut.writeMsgF( tinP , pbAll , cbAll ) ;
                etThread.strokeF( tinP , T("DATA DIVERTED") ) ;
            {
            if( 1 == etThread.strIdF( tinP , idf , sttq , tPathDatum , psttList ) && *(countT*)pbAll == cbAll - sizeof( countT ) )
            strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
            countT idf = 1 ;

            etThread.strokeF( tinP , T("1\t")+T(psttList) ) ;
        {
        if( !fAggregate )

        boolT fAggregate = !!etThread.strIdF( tinP , S1C(' ') , psttList ) ;
        pbEnd = pbAll + cbAll ;
        ZE( byteT* , pbEnd ) ;

        sOut.connectF( tinP , ifcPORToLD1rIVERrESERVED ) ;
        socketC sOut( tinP , etThread , TAG( TAGiDnULL ) ) ;
    {
    // PUT THE BOXES

    }
        pso->readF( tinP , pbAll , cbAll ) ;
        etThread.newF( tinP , LF , pbAll , cbAll ) ; ___( pbAll ) ;
        __Z( cbAll ) ;
        pso->readF( tinP , (byteT*)&cbAll , sizeof cbAll ) ;
        pso->readWoLineF( tinP , psttList , 0x10000 ) ;
    {
    if( !etThread )
    ZE( countT , cbAll ) ;
    ZE( byteT* , pbAll ) ;
    ZE( strokeS* , psttList ) ;
    // GET THE LIST AND THE DATA AGGREGATE

    pso->etherF( tinP , etThread ) ;

    textC&   tPathDatum = *(textC*)  pTaskP->c2 ;
    socketC* pso        = (socketC*) pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 )
TASK( tmSuckF )

//     I.E. NAMES ARE SEPARATED BY A SINGLE BLANK
//   SYNTAX OF STRING:  "name1 name2 name3 ... nameN"
//   IF STRING, CLIENT SENDS COUNT FILE COUNT FILE ...
//   IF SINGLE NAME, SUCKER READS THE FILE BYTE COUNT, FOLLOWED BY THE FILE
//   CLIENT SENDS A LINE THAT CONTAINS A FILE NAME OR FILE NAME STRING
// PROTOCOL
/*1*/WAKEhIDE( "city.box.sucker" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//



//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

}
    etThread.loafIF( tinP ) ;

    }
        }
            //etThread.osSleepF( tinP , TOCK * 4 ) ;
            //thirdC::logIF( tinP , T("9240104: http client request failed.  idTry = ")+TF1(idTry) ) ;
            etThread.osTimeNowF( tinP , time1 , time2 ) ;
            ZE( sCountT , time2 ) ;
            ZE( countT , time1 ) ;
            etThread = 0 ;
            }
                thirdC::logIF( tinP , TF1(idTry)+T(" ")+TT(timeAfter1,timeAfter2) ) ;
                etThread.osTimeSubtractF( tinP , timeAfter1 , timeAfter2 , timeBefore1 , timeBefore2 ) ;
                trialF( tinP , etThread , timeAfter1 , timeAfter2 , timeBefore1 , timeBefore2 , cookies , idTry ) ;
                idTry ++ ;
            {
            //while( !ether && !etThread )
            cookiesC cookies( tinP , etThread ) ;
        {
        //while( !ether )
        ZE( countT , idTry ) ;
    {
    if( !( F(etThread.flagsMode) & flTHIRDmODE_TESTaUTO ) )

    ZE( sCountT , timeAfter2 ) ;
    ZE( countT  , timeAfter1 ) ; 
    ZE( sCountT , timeBefore2 ) ;
    ZE( countT  , timeBefore1 ) ; 

    stateS state( tinP , etThread ) ;
{

TODO

}
    thirdC::logIF( tinP , "\\log.monggo.gorilla.port.05" , count2S( 1 ) , 1 , 0 , (countT)&stPhrases , 1 ) ;

    etThread.osTimeNowF( tinP , timeAfter1P , timeAfter2P ) ;
    }
        etThread.delF( tinP , postBody ) ;
        readReplyF( tinP , etThread , stPhrases , postBody , costBody , cookiesP , psttUrlLoginInterim , sIn , tBoxAll2 ) ; ___( postBody ) ; ___( psttUrlLoginInterim ) ;
        ZE( countT   , costBody ) ;
        ZE( osTextT* , postBody ) ;

        etThread.delF( tinP , psttRequest ) ;
        sIn.writeF( tinP , (osTextT*)T(psttRequest) ) ;
        sIn.connectF( tinP , 0x50 , idhp2 ) ;
        socketC sIn( tinP , etThread , TAG( TAGiDnULL ) ) ;
        stPhrases << postOldC( tinP , etThread , T("psttRequest: \"")+T(psttRequest)+T("\"\r\n") ) ;

        }
            etThread.delF( tinP , psttSoulRfc ) ;
            ) ;

                T("\r\n")
                ( psttSoulRfc ? T("Cookie: ")+T(psttSoulRfc)+T("\r\n") : T("") )+
                "Content-length: 0\r\n")+
                "Content-type: application/x-www-form-urlencoded\r\n"
                "Accept-Charset: iso-8859-1,*,utf-8\r\n"
                "Accept-Language: en\r\n"
                "Accept-Encoding: gzip\r\n"
                "Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, image/png, */*\r\n"
                "Host: user.gshift.com\r\n"
                "User-Agent: Mozilla/4.75 [en] (WinNT; U)\r\n"
                "Connection: Keep-Alive\r\n"
                "Referer: http://www.gshift.com/\r\n"
                T("GET /")+T(psttPathCommand)+T(" HTTP/1.0\r\n"

            etThread.strMakeF( tinP , LF , psttRequest ,

            cookiesP.soulRfcF( tinP , psttSoulRfc , tBoxAll2 ) ; ___( psttSoulRfc ) ;
            ZE( strokeS* , psttSoulRfc ) ;
        {
        ZE( strokeS* , psttRequest ) ;
    {

    }
        etThread.delF( tinP , postBody ) ;
        readReplyF( tinP , etThread , stPhrases , postBody , costBody , cookiesP , psttUrlLoginInterim , sIn , tBoxAll2 ) ; ___( postBody ) ; ___( psttUrlLoginInterim ) ;
        ZE( countT   , costBody ) ;
        ZE( osTextT* , postBody ) ;

        etThread.delF( tinP , psttRequest ) ;
        sIn.writeF( tinP , (osTextT*)T(psttRequest) ) ;
        sIn.connectF( tinP , 0x50 , idhp2 ) ;
        socketC sIn( tinP , etThread , TAG( TAGiDnULL ) ) ;
        stPhrases << postOldC( tinP , etThread , T("psttRequest: \"")+T(psttRequest)+T("\"\r\n") ) ;

        }
            etThread.delF( tinP , psttSoulRfc ) ;
            ) ;

                T("\r\n")
                ( psttSoulRfc ? T("Cookie: ")+T(psttSoulRfc)+T("\r\n") : T("") )+
                "Content-length: 0\r\n")+
                "Content-type: application/x-www-form-urlencoded\r\n"
                "Accept-Charset: iso-8859-1,*,utf-8\r\n"
                "Accept-Language: en\r\n"
                "Accept-Encoding: gzip\r\n"
                "Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, image/png, */*\r\n"
                "Host: user.gshift.com\r\n"
                "User-Agent: Mozilla/4.75 [en] (WinNT; U)\r\n"
                "Connection: Keep-Alive\r\n"
                "Referer: http://www.gshift.com/\r\n"
                T("GET /")+T(psttPathToday)+T(" HTTP/1.0\r\n"

            etThread.strMakeF( tinP , LF , psttRequest ,

            cookiesP.soulRfcF( tinP , psttSoulRfc , tBoxAll2 ) ; ___( psttSoulRfc ) ;
            ZE( strokeS* , psttSoulRfc ) ;
        {
        ZE( strokeS* , psttRequest ) ;
    {

    }
        etThread.delF( tinP , postBody ) ;
        readReplyF( tinP , etThread , stPhrases , postBody , costBody , cookiesP , psttUrlLoginInterim , sIn , tBoxAll2 ) ; ___( postBody ) ; ___( psttUrlLoginInterim ) ;
        ZE( countT   , costBody ) ;
        ZE( osTextT* , postBody ) ;

        etThread.delF( tinP , psttRequest ) ;
        sIn.writeF( tinP , (osTextT*)T(psttRequest) ) ;
        sIn.connectF( tinP , 0x50 , idhp2 ) ;
        socketC sIn( tinP , etThread , TAG( TAGiDnULL ) ) ;
        stPhrases << postOldC( tinP , etThread , T("psttRequest: \"")+T(psttRequest)+T("\"\r\n") ) ;

        }
            etThread.delF( tinP , psttSoulRfc ) ;
            ) ;

                T("\r\n")
                ( psttSoulRfc ? T("Cookie: ")+T(psttSoulRfc)+T("\r\n") : T("") )+
                "Content-length: 0\r\n")+
                "Content-type: application/x-www-form-urlencoded\r\n"
                "Accept-Charset: iso-8859-1,*,utf-8\r\n"
                "Accept-Language: en\r\n"
                "Accept-Encoding: gzip\r\n"
                "Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, image/png, */*\r\n"
                "Host: user.gshift.com\r\n"
                "User-Agent: Mozilla/4.75 [en] (WinNT; U)\r\n"
                "Connection: Keep-Alive\r\n"
                "Referer: http://www.gshift.com/\r\n"
                T("GET /")+T(psttPathNavbar)+T(" HTTP/1.0\r\n"

            etThread.strMakeF( tinP , LF , psttRequest ,

            cookiesP.soulRfcF( tinP , psttSoulRfc , tBoxAll2 ) ; ___( psttSoulRfc ) ;
            ZE( strokeS* , psttSoulRfc ) ;
        {
        ZE( strokeS* , psttRequest ) ;
    {

    etThread.delF( tinP , psttN ) ;
    etThread.delF( tinP , psttPathDesktop ) ;
    }
        etThread.strSubstringF( tinP , psttPathCommand , idf , sttq , tAfter  , tBody ) ; ___( psttPathCommand ) ;
        etThread.strSubstringF( tinP , psttPathCommand , idf , sttq , tBefore , tBody ) ; ___( psttPathCommand ) ; etThread.delF( tinP , psttPathCommand ) ;
        etThread.strSubstringF( tinP , psttPathToday   , idf , sttq , tAfter  , tBody ) ; ___( psttPathToday   ) ;
        etThread.strSubstringF( tinP , psttPathToday   , idf , sttq , tBefore , tBody ) ; ___( psttPathToday   ) ; etThread.delF( tinP , psttPathToday   ) ;
        etThread.strSubstringF( tinP , psttPathNavbar  , idf , sttq , tAfter  , tBody ) ; ___( psttPathNavbar  ) ;
        etThread.strSubstringF( tinP , psttPathNavbar  , idf , sttq , tBefore , tBody ) ; ___( psttPathNavbar  ) ; etThread.delF( tinP , psttPathNavbar  ) ;
        strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
        countT idf = 1 ;
        TN( tAfter  , "\"" ) ;
        TN( tBefore , "SRC=\"" ) ;

        etThread.delF( tinP , postBody ) ;
        TN( tBody , postBody ) ;
        readReplyF( tinP , etThread , stPhrases , postBody , costBody , cookiesP , psttUrlLoginInterim , sIn , tBoxAll2 ) ; ___( postBody ) ; ___( psttUrlLoginInterim ) ;
        ZE( countT   , costBody ) ;
        ZE( osTextT* , postBody ) ;

        etThread.delF( tinP , psttRequest ) ;
        sIn.writeF( tinP , (osTextT*)T(psttRequest) ) ;
        sIn.connectF( tinP , 0x50 , idhp2 ) ;
        socketC sIn( tinP , etThread , TAG( TAGiDnULL ) ) ;
        stPhrases << postOldC( tinP , etThread , T("psttRequest: \"")+T(psttRequest)+T("\"\r\n") ) ;

        }
            etThread.delF( tinP , psttSoulRfc ) ;
            ) ;

                T("\r\n")
                ( psttSoulRfc ? T("Cookie: ")+T(psttSoulRfc)+T("\r\n") : T("") )+
                "Content-length: 0\r\n")+
                "Content-type: application/x-www-form-urlencoded\r\n"
                "Accept-Charset: iso-8859-1,*,utf-8\r\n"
                "Accept-Language: en\r\n"
                "Accept-Encoding: gzip\r\n"
                "Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, image/png, */*\r\n"
                "Host: user.gshift.com\r\n"
                "User-Agent: Mozilla/4.75 [en] (WinNT; U)\r\n"
                "Connection: Keep-Alive\r\n"
                "Referer: http://www.gshift.com/\r\n"
                T("GET ")+T(psttPathDesktop)+T(" HTTP/1.0\r\n"

            etThread.strMakeF( tinP , LF , psttRequest ,

            cookiesP.soulRfcF( tinP , psttSoulRfc , tBoxAll2 ) ; ___( psttSoulRfc ) ;
            ZE( strokeS* , psttSoulRfc ) ;
        {
        ZE( strokeS* , psttRequest ) ;
    {
    ZE( strokeS* , psttPathCommand ) ;
    ZE( strokeS* , psttPathToday   ) ;
    ZE( strokeS* , psttPathNavbar  ) ;
    //REQUEST THE LOGGED IN SCREEN

    etThread.delF( tinP , psttUrlLoginInterim ) ;
    }
        etThread.osSleepF( tinP , TOCK ) ;

        thirdC::logIF( tinP , "\\log.monggo.gorilla.port.05" , count2S( 1 ) , 1 , 0 , (countT)&stPhrases , 1 ) ;
        etThread.delF( tinP , psttUrlLoginStatusB ) ;
        }
            etThread.delF( tinP , postBody ) ;
            readReplyF( tinP , etThread , stPhrases , postBody , costBody , cookiesP , psttUrlLoginStatusB , sIn , tBoxAll2 ) ; ___( postBody ) ; ___( psttUrlLoginInterim ) ;
            ZE( countT   , costBody ) ;
            ZE( osTextT* , postBody ) ;

            etThread.delF( tinP , psttRequest ) ;
            sIn.writeF( tinP , (osTextT*)T(psttRequest) ) ;
            sIn.connectF( tinP , 0x50 , idhp2 ) ;
            socketC sIn( tinP , etThread , TAG( TAGiDnULL ) ) ;
            stPhrases << postOldC( tinP , etThread , T("psttRequest: \"")+T(psttRequest)+T("\"\r\n") ) ;

            }
                etThread.delF( tinP , psttSoulRfc ) ;
                ) ;

                    T("\r\n")
                    ( psttSoulRfc ? T("Cookie: ")+T(psttSoulRfc)+T("\r\n") : T("") )+
                    "Content-length: 0\r\n")+
                    "Content-type: application/x-www-form-urlencoded\r\n"
                    "Accept-Charset: iso-8859-1,*,utf-8\r\n"
                    "Accept-Language: en\r\n"
                    "Accept-Encoding: gzip\r\n"
                    "Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, image/png, */*\r\n"
                    "Host: user.gshift.com\r\n"
                    "User-Agent: Mozilla/4.75 [en] (WinNT; U)\r\n"
                    "Connection: Keep-Alive\r\n"
                    "Referer: http://user.gshift.com/")+T(psttUrlLoginInterim)+T("\r\n"
                    T("GET ")+T(psttUrlLoginStatusB)+T(" HTTP/1.0\r\n"

                etThread.strMakeF( tinP , LF , psttRequest ,

                cookiesP.soulRfcF( tinP , psttSoulRfc , tBoxAll2 ) ; ___( psttSoulRfc ) ;
                ZE( strokeS* , psttSoulRfc ) ;
            {
            ZE( strokeS* , psttRequest ) ;
        {
        stPhrases << postOldC( tinP , etThread , T("---- 3 3 3 3   :   BOTTOM -------------------------------------------------------------------------------------------------------------------------------------------------\r\n") ) ;

        etThread.delF( tinP , psttUrlLoginStatusA ) ;
        }
            etThread.delF( tinP , postBody ) ;
            readReplyF( tinP , etThread , stPhrases , postBody , costBody , cookiesP , psttUrlLoginStatusA , sIn , tBoxAll2 ) ; ___( postBody ) ; ___( psttUrlLoginInterim ) ;
            ZE( countT   , costBody ) ;
            ZE( osTextT* , postBody ) ;

            etThread.delF( tinP , psttRequest ) ;
            sIn.writeF( tinP , (osTextT*)T(psttRequest) ) ;
            sIn.connectF( tinP , 0x50 , idhp2 ) ;
            socketC sIn( tinP , etThread , TAG( TAGiDnULL ) ) ;
            stPhrases << postOldC( tinP , etThread , T("psttRequest: \"")+T(psttRequest)+T("\"\r\n") ) ;

            }
                etThread.delF( tinP , psttSoulRfc ) ;
                ) ;

                    T("\r\n")
                    ( psttSoulRfc ? T("Cookie: ")+T(psttSoulRfc)+T("\r\n") : T("") )+
                    "Content-length: 0\r\n")+
                    "Content-type: application/x-www-form-urlencoded\r\n"
                    "Accept-Charset: iso-8859-1,*,utf-8\r\n"
                    "Accept-Language: en\r\n"
                    "Accept-Encoding: gzip\r\n"
                    "Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, image/png, */*\r\n"
                    "Host: user.gshift.com\r\n"
                    "User-Agent: Mozilla/4.75 [en] (WinNT; U)\r\n"
                    "Connection: Keep-Alive\r\n"
                    "Referer: http://user.gshift.com/")+T(psttUrlLoginInterim)+T("\r\n"
                    T("GET ")+T(psttUrlLoginStatusA)+T(" HTTP/1.0\r\n"

                etThread.strMakeF( tinP , LF , psttRequest ,

                cookiesP.soulRfcF( tinP , psttSoulRfc , tBoxAll2 ) ; ___( psttSoulRfc ) ;
                ZE( strokeS* , psttSoulRfc ) ;
            {
            ZE( strokeS* , psttRequest ) ;
        {
        stPhrases << postOldC( tinP , etThread , T("---- 2 2 2 2   :   MIDDLE -------------------------------------------------------------------------------------------------------------------------------------------------\r\n") ) ;

        }
            etThread.delF( tinP , postBody ) ;
            }
                etThread.delF( tinP , psttN2B ) ;
                etThread.delF( tinP , psttN2A ) ;
                etThread.strMakeF( tinP , LF , psttUrlLoginStatusB , T("/Connect.asp?rn="     )+T(psttN2B) ) ; ___( psttUrlLoginStatusB ) ;
                etThread.strMakeF( tinP , LF , psttUrlLoginStatusA , T("/ConnectTitle.asp?rn=")+T(psttN2A) ) ; ___( psttUrlLoginStatusA ) ;
                etThread.delF( tinP , psttBody ) ;
                etThread.strSubstringF( tinP , psttN2B , idf , sttq , tAfter   , psttBody ) ; ___( psttN2B ) ;
                etThread.strSubstringF( tinP , psttN2B , idf , sttq , tBeforeB , psttBody ) ; ___( psttN2B ) ; etThread.delF( tinP , psttN2B ) ;
                etThread.strSubstringF( tinP , psttN2A , idf , sttq , tAfter   , psttBody ) ; ___( psttN2A ) ;
                etThread.strSubstringF( tinP , psttN2A , idf , sttq , tBeforeA , psttBody ) ; ___( psttN2A ) ; etThread.delF( tinP , psttN2A ) ;
                strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
                countT idf = 1 ;
                TN( tAfter  , "\"" ) ;
                TN( tBeforeB , "<FRAME SRC=\"Connect.asp?rn=" ) ;
                TN( tBeforeA , "<FRAME SRC=\"ConnectTitle.asp?rn=" ) ;
                etThread.strMakeF( tinP , LF , psttBody , T(postBody) ) ; ___( psttBody ) ;
                ZE( strokeS* , psttBody ) ;
                ZE( strokeS* , psttN2B ) ;
                ZE( strokeS* , psttN2A ) ;
            {

            readReplyF( tinP , etThread , stPhrases , postBody , costBody , cookiesP , psttUrlLoginInterim , sIn , tBoxAll2 ) ; ___( postBody ) ; ___( psttUrlLoginInterim ) ;
            ZE( countT   , costBody ) ;
            ZE( osTextT* , postBody ) ;

            etThread.delF( tinP , psttRequest ) ;
            sIn.writeF( tinP , (osTextT*)T(psttRequest) ) ;
            sIn.connectF( tinP , 0x50 , idhp2 ) ;
            socketC sIn( tinP , etThread , TAG( TAGiDnULL ) ) ;
            stPhrases << postOldC( tinP , etThread , T("psttRequest: \"")+T(psttRequest)+T("\"\r\n") ) ;

            //urlToClipboardF( tinP , etThread , psttUrlLoginInterim ) ;

            }
                etThread.delF( tinP , psttSoulRfc ) ;
                ) ;

                    T("\r\n")
                    ( psttSoulRfc ? T("Cookie: ")+T(psttSoulRfc)+T("\r\n") : T("") )+
                    "Content-length: 0\r\n")+
                    "Content-type: application/x-www-form-urlencoded\r\n"
                    "Accept-Charset: iso-8859-1,*,utf-8\r\n"
                    "Accept-Language: en\r\n"
                    "Accept-Encoding: gzip\r\n"
                    "Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, image/png, */*\r\n"
                    "Host: user.gshift.com\r\n"
                    "User-Agent: Mozilla/4.75 [en] (WinNT; U)\r\n"
                    "Connection: Keep-Alive\r\n"
                    "Referer: http://user.gshift.com/\r\n"
                    T("GET /")+T(psttUrlLoginInterim)+T(" HTTP/1.0\r\n"

                etThread.strMakeF( tinP , LF , psttRequest ,

                cookiesP.soulRfcF( tinP , psttSoulRfc , tBoxAll2 ) ; ___( psttSoulRfc ) ;
                ZE( strokeS* , psttSoulRfc ) ;
            {
            ZE( strokeS* , psttRequest ) ;
        {
        ZE( strokeS* , psttUrlLoginStatusB ) ;
        ZE( strokeS* , psttUrlLoginStatusA ) ;
        thirdC::logIF( tinP , "\\log.monggo.gorilla.port.05" , count2S( 1 ) , 1 , 0 , (countT)&stPhrases , 1 ) ;
        stPhrases << postOldC( tinP , etThread , T("cTries: ")+TF1(cTries)+T("\r\n")+T("---- 1 1 1 1   :   TOP -------------------------------------------------------------------------------------------------------------------------------------------------\r\n") ) ;
    {
    while( !etThread && cTries -- )
    countT cTries = 0x8 ; //U:
    //OBTAIN THE INTERIM LOGIN PAGE

    }
        etThread.delF( tinP , psttw ) ;

        etThread.strMakeF( tinP , LF , psttPathDesktop , T("/silibus.asp?rn=")+T(psttw) ) ; ___( psttPathDesktop ) ;
        etThread.strSubstringF( tinP , psttw , idf , idl     , psttUrlLoginInterim ) ; ___( psttw ) ;
        etThread.strSubstringF( tinP , psttw , idf , sttq , tBefore , psttUrlLoginInterim ) ; ___( psttw ) ; etThread.delF( tinP , psttw ) ;
        ZE( strokeS* , psttw ) ;
        strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
        ZE( countT , idl ) ;
        countT idf = 1 ;
        TN( tBefore , "connectframe.asp?rn=" ) ;
    {
    ZE( strokeS* , psttPathDesktop ) ;

    stPhrases << postOldC( tinP , etThread , T("psttUrlLoginInterim: \"")+T(psttUrlLoginInterim)+T("\"\r\n") ) ;
    }
        etThread.delF( tinP , postBody ) ;
        readReplyF( tinP , etThread , stPhrases , postBody , costBody , cookiesP , psttUrlLoginInterim , sIn , tBoxAll2 ) ; ___( postBody ) ; ___( psttUrlLoginInterim ) ;
        ZE( countT   , costBody ) ;
        ZE( osTextT* , postBody ) ;

        etThread.delF( tinP , psttRequest ) ;
        sIn.writeF( tinP , (osTextT*)T(psttRequest) ) ;
        sIn.connectF( tinP , 0x50 , idhp2 ) ;
        socketC sIn( tinP , etThread , TAG( TAGiDnULL ) ) ;
        stPhrases << postOldC( tinP , etThread , T("psttRequest: \"")+T(psttRequest)+T("\"\r\n") ) ;

        etThread.delF( tinP , psttBody ) ;
        }
            etThread.delF( tinP , psttSoulRfc ) ;
            ) ;

                T(psttBody)
                T("\r\n")+
                ( psttSoulRfc ? T("Cookie: ")+T(psttSoulRfc)+T("\r\n") : T("") )+
                "Content-length: ")+TF4(psttBody?psttBody->idAdam:0,flFORMAT_UNSIGNED|flFORMAT_NObASE|flFORMAT_FOREIGN,0,0xa)+T("\r\n")+
                "Content-type: application/x-www-form-urlencoded\r\n"
                "Accept-Charset: iso-8859-1,*,utf-8\r\n"
                "Accept-Language: en\r\n"
                "Accept-Encoding: gzip\r\n"
                "Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, image/png, */*\r\n"
                "Host: user.gshift.com\r\n"
                "User-Agent: Mozilla/4.75 [en] (WinNT; U)\r\n"
                "Connection: Keep-Alive\r\n"
                "Referer: http://www.gshift.com/\r\n"
                T("POST /CheckLogin.asp HTTP/1.0\r\n"

            etThread.strMakeF( tinP , LF , psttRequest ,

            cookiesP.soulRfcF( tinP , psttSoulRfc , tBoxAll2 ) ; ___( psttSoulRfc ) ;
            ZE( strokeS* , psttSoulRfc ) ;
        {
        ZE( strokeS* , psttRequest ) ;

        etThread.strMakeF( tinP , LF , psttBody , T("Lang=0&n=")+T(psttN)+T("&Email=christrees%40yahoo.com&Password=1111&enter=Login\r\n") ) ; ___( psttBody ) ;
        ZE( strokeS* , psttBody ) ;
    {
    ZE( strokeS* , psttUrlLoginInterim ) ;
    //OBTAIN URL FOR MY INTERIM LOGIN PAGE

    }
        etThread.delF( tinP , psttBody ) ;
        etThread.strSubstringF( tinP , psttN , idf , sttq , tAfter  , psttBody ) ; ___( psttN ) ;
        etThread.strSubstringF( tinP , psttN , idf , sttq , tBefore , psttBody ) ; ___( psttN ) ; etThread.delF( tinP , psttN ) ;
        strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
        countT idf = 1 ;
        TN( tAfter  , ">" ) ;
        TN( tBefore , "<input type=\"hidden\" name=\"n\" value=" ) ;

        }
            etThread.delF( tinP , postBody ) ;
            etThread.strMakeF( tinP , LF , psttBody , T(postBody) ) ; ___( psttBody ) ;
            }
                etThread.delF( tinP , psttRedirect ) ;
                readReplyF( tinP , etThread , stPhrases , postBody , costBody , cookiesP , psttRedirect , sIn , tBoxAll1 ) ; ___( postBody ) ; ___( psttRedirect ) ;
                ZE( strokeS* , psttRedirect ) ;
                sIn.writeF( tinP , postHTTPrEQUEST_HOME ) ;
                sIn.connectF( tinP , 0x50 , idhp1 ) ;
                socketC sIn( tinP , etThread , TAG( TAGiDnULL ) ) ;
            {
            ZE( countT   , costBody ) ;
            ZE( osTextT* , postBody ) ;
        {
        ZE( strokeS* , psttBody ) ;
    {
    ZE( strokeS* , psttN ) ;
    //OBTAIN VALUE FOR n

    etThread.osTimeNowF( tinP , timeBefore1P , timeBefore2P ) ;

    TN( tBoxAll2 , "user.gshift.com//http//CheckLogin.asp" ) ;
    nicNameC idhp2 = socketC::nicNameIF( tinP , etThread , T("user.gshift.com") ) ;

    TN( tBoxAll1 , "www.gshift.com//http//" ) ;
    nicNameC idhp1 = socketC::nicNameIF( tinP , etThread , T("www.gshift.com") ) ;

    stPhrases << postOldC( tinP , etThread , T("==== TRIAL =============================================================================================================================== TRIAL ====\r\n") ) ;
    stackC stPhrases( tinP , etThread , flSTACKc_FIFO , ifcSTACKtYPE_PTR_byteT ) ;
    timeAfter2P = timeAfter1P = 0 ;
    timeBefore2P = timeBefore1P = 0 ;
{
voidT trialF( tinS& tinP , etherC& etThread , countT& timeAfter1P , sCountT& timeAfter2P , countT& timeBefore1P , sCountT& timeBefore2P , cookiesC& cookiesP , const countT idTryP )

}
    etThread.osSleepF( tinP , TOCK * 0x10 ) ;
    etThread.beeClickF( tinP , 0x400 , TOCK * 2 ) ;
    etThread.delF( tinP , psttu ) ;

    etThread.osClipboardLetGoF( tinP ) ;
    etThread.osClipboardWriteF( tinP , psttu ) ;
    etThread.osClipboardGrabF( tinP ) ;

    etThread.strMakeF( tinP , LF , psttu , T("http://user.gshift.com/")+T(psttP) ) ; ___( psttu ) ;
    ZE( strokeS* , psttu ) ;
{
voidT urlToClipboardF( tinS& tinP , etherC& etThread , const strokeS* const psttP )

    "\r\n"                                                                                              \
    "Content-length: 0\r\n"                                                                             \
    "Content-type: application/x-www-form-urlencoded\r\n"                                               \
    "Accept-Charset: iso-8859-1,*,utf-8\r\n"                                                            \
    "Accept-Language: en\r\n"                                                                           \
    "Accept-Encoding: gzip\r\n"                                                                         \
    "Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, image/png, */*\r\n"                   \
    "Host: www.gshift.com\r\n"                                                                          \
    "User-Agent: Mozilla/4.75 [en] (WinNT; U)\r\n"                                                      \
    "Connection: Keep-Alive\r\n"                                                                        \
    "GET / HTTP/1.0\r\n"                                                                                \
                                                                                                        \
#define postHTTPrEQUEST_HOME                                                                            \

}
    etThread.delF( tinP , psttName ) ;
    etThread.delF( tinP , psttAction ) ;
    }
        etThread.delF( tinP , psttBody ) ;
        stPhrasesP << postOldC( tinP , etThread , T("BODY BEGIN-------------------\r\n")+T(psttBody)+T("\r\nBODY END---------------------\r\n") ) ;
        etThread.strMakeF( tinP , LF , psttBody , T(postBodyP) ) ; ___( psttBody ) ;
        ZE( strokeS* , psttBody ) ;

        if( postBodyP ) postBodyP[ costBodyP ] = 0 ;
        sInP.readF( tinP , postBodyP , costBodyP ) ;
        etThread.newF( tinP , LF , postBodyP , costBodyP + 1 ) ; ___( postBodyP ) ;
    {
    if( costBodyP )

    }
        etThread.delF( tinP , psttl ) ;
        }
            break ;
            etThread.delF( tinP , psttl ) ;
        {
        else
        }
            etThread.delF( tinP , psttValue ) ;
            etThread.delF( tinP , psttKey ) ;

            else if( !etThread.strCompareF( tinP , tLocation      , psttKey ) ) { etThread.strMakeF( tinP , LF , psttRedirectP , psttValue ) ; ___( psttRedirectP ) ; }
            else if( !etThread.strCompareF( tinP , tSetCookie     , psttKey ) ) cookiesP.updateF( tinP , psttValue , psttBoxAllP ) ;
                 if( !etThread.strCompareF( tinP , tContentLength , psttKey ) ) costBodyP = etThread.strDigitsToSCountF( tinP , psttValue , 0xa , 1 ) ;

            etThread.strSubstringF( tinP , psttValue , idf , idl , psttl ) ; ___( psttValue ) ;
            ZE( countT , idl ) ;
            etThread.strConvertToLowerCaseF( tinP , psttKey ) ; ___( psttKey ) ;
            etThread.strSubstringF( tinP , psttKey , idf , sttq , tColonWhite , psttl , 1 ) ; ___( psttKey ) ;
            countT idf = 1 ;
            ZE( strokeS* , psttValue ) ;
            ZE( strokeS* , psttKey ) ;
        {
        else if( psttl && psttl->idAdam )
        }
            etThread.strWordF( tinP , psttName , psttl , sttq , sttb , 2 ) ; ___( psttName ) ;
            //sttq = ze ;

            etThread.strConvertToLowerCaseF( tinP , psttl ) ; ___( psttl ) ;
            etThread.strWordF( tinP , psttAction , psttl , sttq , sttb , 1 ) ; ___( psttAction ) ;
        {
        if( !psttAction )
        stPhrasesP << postOldC( tinP , etThread , T("HEADER: \"")+T(psttl)+T("\"\r\n") ) ;
        sInP.readWoLineF( tinP , psttl , 0x200 ) ; ___( psttl ) ;
        ZE( strokeS* , psttl ) ;
        strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
    {
    while( !etThread )
    ZE( strokeS* , psttName ) ;
    ZE( strokeS* , psttAction ) ;
    strokeS sttSlash( '/' ) ;
    strokeS sttb( ' ' ) ;

    TN( tLocation      , "location"       ) ;
    TN( tSetCookie     , "set-cookie"     ) ;
    TN( tContentLength , "content-length" ) ;
    TN( tColonWhite    , ": "             ) ;
{
voidT readReplyF( tinS& tinP , etherC& etThread , stackC& stPhrasesP , osTextT*& postBodyP , countT& costBodyP , cookiesC& cookiesP , strokeS*& psttRedirectP , socketC& sInP , const strokeS* const psttBoxAllP )
*/
/*

}
    }
        while( !ether && ~hDown ) ;
        }
            }
                }
                    ether.strFuseF( tinP , psttP , psttSoulRfc ) ; ___( psttP ) ;
                    csttSoul += psttSoulRfc->idAdam ;
                    else        ether.strFuseF( tinP , psttP , tSemic ) ; ___( psttP ) ;
                    if( bWoth ) bWoth = 0 ;
                {
                if( psttSoulRfc )
                strokeS* psttSoulRfc = (strokeS*)*pCookie ;
            {
            if( pCookie && pCookie->bMineF( tinP , psttBoxAllP ) )
            cookieC* pCookie = (cookieC*)st_pCookie.downF( tinP , hDown ) ;
        {
        do
        ether.strMakeF( tinP , LF , psttP , T("") , csttSoul ) ; ___( psttP ) ;
        TN( tSemic , ";" ) ;
        bWoth = 1 ;

        while( !ether && ~hDown ) ;
        }
            }
                }
                    csttSoul += psttSoulRfc->idAdam ;
                    else        csttSoul ++ ;
                    if( bWoth ) bWoth = 0 ;
                {
                if( psttSoulRfc )
                strokeS* psttSoulRfc = (strokeS*)*pCookie ;
            {
            if( pCookie && pCookie->bMineF( tinP , psttBoxAllP ) )
            cookieC* pCookie = (cookieC*)st_pCookie.downF( tinP , hDown ) ;
        {
        do
        boolT bWoth = 1 ;
        handleC hDown( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
        ZE( countT , csttSoul ) ;
    {
    if( st_pCookie )
{
voidT cookiesC::soulRfcF( tinS& tinP , strokeS*& psttP , const strokeS* const psttBoxAllP )
*/
 i return cookies in the order that i find them
 i do not bother to sort
 rfc2109 specifies that cookies are to be returned ordered most specific path woth
i do not conform to rfc2109
/*

}
    }
        DEL( pCookie ) ;
        st_pCookie >> (countT&)pCookie ;
        ZE( cookieC* , pCookie ) ;
    {
    while( st_pCookie )

    TINSL
{
cookiesC::~cookiesC( voidT )

boolT bMine = pCookie ? pCookie->bMineF( tinP , tBoxAll ) : 0 ;

}
    ether.delF( tinP , pstt1cookie ) ;
    }
        }
            st_pCookie << (countT)pCookie ;

            }
                while( !ether && ~hDown ) ;
                }
                    }
                        DEL( pDoomed ) ;
                        __( pDoomed != pOldCookie ) ;
                        cookieC* pDoomed = (cookieC*)st_pCookie.extractF( tinP ) ;
                    {
                    if( pOldCookie && pCookie->bReplacesF( tinP , *pOldCookie ) )
                    cookieC* pOldCookie = (cookieC*)st_pCookie.downF( tinP , hDown ) ;
                {
                do
                handleC hDown( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
            {
            if( st_pCookie )
        {
        if( pCookie )
        cookieC* pCookie = new( 0 , tinP , LF ) cookieC( tinP , ether , psttc1 , psttBoxAllP ) ; ___( pCookie ) ;
    {
    FORsTRINGSiN1( pstt1cookie )
    ether.strWordsOldF( tinP , pstt1cookie , psttP , sttq , T(",") ) ; ___( pstt1cookie ) ;
    strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
    ZE( strokeS* , pstt1cookie ) ;
{
voidT cookiesC::updateF( tinS& tinP , const strokeS* const psttP , const strokeS* const psttBoxAllP )

}
{
st_pCookie( tinP , ether , TAG( TAGiDnULL ) )
ether( etherP ) ,
cookiesC::cookiesC( tinS& tinP , etherC& etherP ) :

;
}
    voidT soulRfcF( tinS& tinP , strokeS*& psttP , const strokeS* const psttBoxAllP ) ;
    voidT updateF( tinS& tinP , const strokeS* const psttP , const strokeS* const psttBoxAllP ) ;
    ~cookiesC( voidT ) ;
    cookiesC( tinS& tinP , etherC& etherP ) ;

    public :

    stackC  st_pCookie ;
    etherC& ether ;
{
class cookiesC

}
    return bMine ;
    ether.delF( tinP , psttBoxName ) ;
    ether.delF( tinP , psttBoxHost ) ;

    idf = 1 ; /*sttq = ze ;*/ if( psttDomain &&     !ether.strIdF( tinP , idf , sttq , psttBoxHost , psttDomain  ) ) bMine = 0 ;
    idf = 1 ; /*sttq = ze ;*/ if( psttPath   && 1 != ether.strIdF( tinP , idf , sttq , psttPath    , psttBoxName ) ) bMine = 0 ;
    boolT bMine = 1 ;

    }
        ether.strSubstringF( tinP , psttBoxName , idf , idLast , psttBoxAllP ) ; ___( psttBoxName ) ;
        ether.strSubstringF( tinP , psttw       , idf , sttq , tSlash , psttBoxAllP ) ; ___( psttw ) ; ether.delF( tinP , psttw ) ; // psttType
        ether.strSubstringF( tinP , psttw       , idf , sttq , tSlash , psttBoxAllP ) ; ___( psttw ) ; ether.delF( tinP , psttw ) ; // psttPort
        ether.strSubstringF( tinP , psttBoxHost , idf , sttq , tSlash , psttBoxAllP ) ; ___( psttBoxHost ) ;
        ZE( strokeS* , psttw ) ;
        ZE( countT , idLast ) ;
        TN( tSlash , "/" ) ;
    {
    strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
    countT idf = 1 ;
    ZE( strokeS* , psttBoxName ) ;
    ZE( strokeS* , psttBoxHost ) ;
{
boolT cookieC::bMineF( tinS& tinP , const strokeS* const psttBoxAllP )

}
    return psttSoulRfc ;

    }
        }
            ) ; ___( psttSoulRfc ) ;

                +(psttDomain?T(";$Domain=\"")+T(psttDomain)+T("\""):T(""))
                +(psttPath?T(";$Path=\"")+T(psttPath)+T("\""):T(""))
                T(psttKey)+T("=\"")+T(psttValue)+T("\"")

            ether.strMakeF( tinP , LF , psttSoulRfc ,
        {
        if( timeN2 < 0 || !( time1die || time2die ) )
        ether.osTimeSubtractF( tinP , timeN1 , timeN2 , time1die , time2die ) ;
        ether.osTimeNowF( tinP , timeN1 , timeN2 ) ;
        ZE( sCountT , timeN2 ) ;
        ZE( countT , timeN1 ) ;

        TINSL
    {
    if( !psttSoulRfc )
{
cookieC::operator strokeS*( voidT )
*/
i evaluate to 0 if i am expired
/*

}
    stPhrasesP << postOldC( tinP , ether , T("\r\n") ) ;
    if( time1die || time2die ) stPhrasesP << postOldC( tinP , ether , T(" timeDie: "  )+TT(time1die,time2die) ) ;
    if( psttVersion          ) stPhrasesP << postOldC( tinP , ether , T(" version: \"")+T(psttVersion       )+T("\"") ) ;
    if( psttPath             ) stPhrasesP << postOldC( tinP , ether , T(" path: \""   )+T(psttPath          )+T("\"") ) ;
    if( psttDomain           ) stPhrasesP << postOldC( tinP , ether , T(" domain: \"" )+T(psttDomain        )+T("\"") ) ;
    if( psttOldComment          ) stPhrasesP << postOldC( tinP , ether , T(" comment: \"")+T(psttOldComment       )+T("\"") ) ;
    if( psttValue            ) stPhrasesP << postOldC( tinP , ether , T(" value: \""  )+T(psttValue         )+T("\"") ) ;
    if( psttKey              ) stPhrasesP << postOldC( tinP , ether , T(" key: \""    )+T(psttKey           )+T("\"") ) ;
    stPhrasesP << postOldC( tinP , ether , T("cookieC:") ) ;
{
voidT cookieC::phrasesF( tinS& tinP , stackC& stPhrasesP )

}
    ;

        )
            )
                !ether.strCompareF( tinP , psttPath   , oldCookieP.psttPath   )
                oldCookieP.psttPath                                             &&
                psttPath                                                        &&
            (
            ( !psttPath && !oldCookieP.psttPath )                               ||
        (
        !ether.strCompareF( tinP , psttDomain , oldCookieP.psttDomain )         &&
        !ether.strCompareF( tinP , psttKey    , oldCookieP.psttKey    )         &&

    return
{
boolT cookieC::bReplacesF( tinS& tinP , cookieC& oldCookieP )

}
    ether.delF( tinP , pstt1bite ) ;
    }
        ether.delF( tinP , pstt1crumb ) ;   
        }
            }
                }
                    ether.osTimeAddF( tinP , time1die , time2die , timeN1 , timeN2 ) ;
                    ether.osTimeNowF( tinP , timeN1 , timeN2 ) ;
                    ZE( sCountT , timeN2 ) ;
                    ZE( countT , timeN1 ) ;
                    ether.osTimeFromOldTimeF( tinP , time1die , time2die , 0 , 0 , days , hours , minutes , seconds ) ;

                    countT months  = days    / 28 ; __( months ) ;
                    countT days    = hours   / 24 ; hours   %= 24 ;
                    countT hours   = minutes / 60 ; minutes %= 60 ;
                    countT minutes = seconds / 60 ; seconds %= 60 ;
                    countT seconds = ether.strDigitsToSCountF( tinP , psttc3 , 0xa , 1 ) ;
                {
                case 5 :
                case 4 : {                                   ether.strMakeF( tinP , LF , psttVersion , psttc3 ) ; ___( psttVersion ) ; break ; }
                case 3 : {                                   ether.strMakeF( tinP , LF , psttPath    , psttc3 ) ; ___( psttPath    ) ; break ; }
                case 2 : { ether.delF( tinP , psttDomain ) ; ether.strMakeF( tinP , LF , psttDomain  , psttc3 ) ; ___( psttDomain  ) ; break ; }
                case 1 : {                                   ether.strMakeF( tinP , LF , psttOldComment , psttc3 ) ; ___( psttOldComment ) ; break ; }
                }
                    break ;
                    ether.delF( tinP , psttOldCrumb ) ;

                    else if( !ether.strCompareF( tinP , psttOldCrumb , tSecure  ) ) bSecure = 1 ;
                    else if( !ether.strCompareF( tinP , psttOldCrumb , tMaxAge  ) ) idType = 5 ;
                    else if( !ether.strCompareF( tinP , psttOldCrumb , tVersion ) ) idType = 4 ;
                    else if( !ether.strCompareF( tinP , psttOldCrumb , tPath    ) ) idType = 3 ;
                    else if( !ether.strCompareF( tinP , psttOldCrumb , tDomain  ) ) idType = 2 ;
                         if( !ether.strCompareF( tinP , psttOldCrumb , tComment ) ) idType = 1 ;

                    ether.strConvertToLowerCaseF( tinP , psttOldCrumb , psttc3 ) ; ___( psttOldCrumb ) ;
                    ZE( strokeS* , psttOldCrumb ) ;
                {
                case 0 :
            {
            else switch( idType )
            else if( !psttValue ) { ether.strMakeF( tinP , LF , psttValue , psttc3 ) ; ___( psttValue ) ; }
                 if( !psttKey   ) { ether.strMakeF( tinP , LF , psttKey   , psttc3 ) ; ___( psttKey   ) ; }
        {
        FORsTRINGSiN3( pstt1crumb )
        ZE( countT , idType ) ;
        ether.strWordsOldF( tinP , pstt1crumb , psttc2 , sttq , tEndCrumb ) ; ___( pstt1crumb ) ;
        strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
        ZE( strokeS* , pstt1crumb ) ;
    {
    FORsTRINGSiN2( pstt1bite )
    ether.strWordsOldF( tinP , pstt1bite , psttP , sttq , tEndBite ) ; ___( pstt1bite ) ;
    strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
    ZE( strokeS* , pstt1bite ) ;

    TN( tVersion , "version" ) ;
    TN( tSecure , "secure" ) ;
    TN( tMaxAge , "max-age" ) ;
    TN( tPath , "path" ) ;
    TN( tDomain , "domain" ) ;
    TN( tComment  , "comment" ) ;
    TN( tEndCrumb , "= " ) ;
    TN( tEndBite  , ";"  ) ;

    }
        ether.strSubstringF( tinP , psttDomain , idf , sttq , tSlash , psttBoxAllP ) ; ___( psttDomain ) ;
        TN( tSlash , "/" ) ;
        strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
        countT idf = 1 ;
    {
{
time2die( 0 )
time1die( 0 ) ,
bSecure( 0 ) ,
psttSoulRfc( 0 ) ,
psttVersion( 0 ) ,
psttPath( 0 ) ,
psttDomain( 0 ) ,
psttOldComment( 0 ) ,
psttValue( 0 ) ,
psttKey( 0 ) ,
ether( etherP ) ,
cookieC::cookieC( tinS& tinP , etherC& etherP , const strokeS* const psttP , const strokeS* const psttBoxAllP ) :

}
    ether.delF( tinP , psttSoulRfc ) ;
    ether.delF( tinP , psttVersion ) ;
    ether.delF( tinP , psttPath ) ;
    ether.delF( tinP , psttDomain ) ;
    ether.delF( tinP , psttOldComment ) ;
    ether.delF( tinP , psttValue ) ;
    ether.delF( tinP , psttKey ) ;

    TINSL
{
cookieC::~cookieC( voidT )

NEWdELcLASSb( cookieC )

;
}
 boolT bReplacesF( tinS& tinP , cookieC& oldCookieP ) ;
 boolT bMineF( tinS& tinP , const strokeS* const psttBoxAllP ) ;
 operator strokeS*( voidT ) ;
 voidT phrasesF( tinS& tinP , stackC& stPhrasesP ) ;
 ~cookieC( voidT ) ;
 cookieC( tinS& tinP , etherC& etherP , const strokeS* const psttP , const strokeS* const psttBoxAllP ) ;
 NEWdELcLASSpROTOS( cookieC , etherC , thirdC )
/* birth , death */

    public :

    sCountT  time2die ;
    countT   time1die ;
    boolT    bSecure ;
    strokeS* psttSoulRfc ;
    strokeS* psttVersion ;
    strokeS* psttPath ;
    strokeS* psttDomain ;
    strokeS* psttOldComment ;
    strokeS* psttValue ;
    strokeS* psttKey ;
    etherC&  ether ;
{
class cookieC

//U:OWNER'S DESCRIPTIVE NAME FOR THIS FILE: "website preformance monitor"

STATE0
/*1*/WAKEhIDE( "tool.g orilla.http.monggo.2" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//



//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    if( tinP.fingerprint && pbBitsCtP ) ; //U::
//    }
//        ungrabF( tinP , tinP.cGrab_pTinKid , tinP.idDesire_cGrab_pTinKid ) ;
//    
//        }
//            *pco = 0 ;
//            }
//                pCursor = pCursor->pTinBro ;
//                pco ++ ;
//                *pco = pCursor->idThread ;
//            {
//            while( pCursor )
//            pCursor = tinP.pTinKid ;
//            countT* pco = pcIdThread ;
//        {
//        if( pcIdThread )
//        tinP.pEther->newF( tinP , LF , pcIdThread , cKids + 1 ) ; ___( pcIdThread ) ;
//    
//        }
//            pCursor = pCursor->pTinBro ;
//            cKids ++ ;
//        {
//        while( pCursor )
//        tinS* pCursor = tinP.pTinKid ;
//        ZE( countT , cKids ) ;
//    
//        grabF( tinP , tinP.cGrab_pTinKid , tinP.idDesire_cGrab_pTinKid ) ;
//    {
//    if( tinP.pEther )
//
//    else            thirdC::c_memsetIF( tinP , (byteT*)pbBitsCt , sizeof pbBitsCt ) ;
//    if( pbBitsCtP ) thirdC::c_memcpyIF( tinP , (byteT*)pbBitsCt , (byteT*)pbBitsCtP , sizeof pbBitsCt ) ;
{
pcIdThread( 0 )
idiFileCt( idiFileCtP ) ,
idLineCt( idLineCtP ) ,
/*1*/threadCheckC::threadCheckC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP ) :/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//



//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etherC::loafIF( tinP ) ;
etThread.traceF( tinP , T("ok") ) ;

#endif

    }
        etThread.traceF( tinP , T(USCORE127 " wo folder (end)") ) ;
        //queryFileListF( tinP , tFolder+T("neverUsed/") ) ;
        queryFileListF( tinP , T("///d/tmp/locked.test/foo/") ) ;
        etThread.traceF( tinP , T(USCORE127 " wo folder (begin)") ) ;

        //etThread.traceF( tinP , T(USCORE127 " all (end)") ) ;
        //queryFileListAllF( tinP ) ;
        //etThread.traceF( tinP , T(USCORE127 " all (begin)") ) ;
    {
    if( bCloaked )

    }
        etThread.traceF( tinP , T(USCORE127 " diskFindFilrOrDirF (end)") ) ;
        }
            while( !ether && ~hFind && !POOP ) ;
            }
                DEL( pInfo ) ;
                }
                    etThread.traceF( tinP , T("found 1:    ")+T(fn) ) ;
                    fileNameC fn( tinP , etThread , pInfo->psttIfoName ) ;
                {
                else
                }
                    break ;
                    DEL( pInfo ) ;
                {
                if( !pInfo || !pInfo->psttIfoName )

                }
                    bCloaked = 1 ;
                    etThread.traceF( tinP , T("diskFindFilrOrDirF failed") ) ;
                    POOPR
                {
                if( POOP )

                tinP.pEtScratch->diskFindFileOrDirF( tinP , pInfo , hFind , tFolder ) ;
                ZE( infoFileS* , pInfo ) ;
            {
            do
            handleC hFind( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILEfIND ) ;
        {
        etThread.traceF( tinP , T(USCORE127 " diskFindFilrOrDirF (begin)") ) ;

        SCOOPS
    {
    IFsCRATCH
    ZE( boolT , bCloaked ) ;



    while( ~hFind ) ;
    }
        if( postf[ 0 ] ) etThread.traceF( tinP , T("found [postf]:    ")+T(postf) ) ;
        thirdC::dosFindFileOrDirSimpleIF( tinP , postf , sizeof postf , hFind , "\\tmp\\locked.test\\2\\*.ttt" ) ;
        postf[ 0 ] = 0 ;
    {
    do
    handleC hFind( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILEfIND ) ;
    osTextT postf[ TUCK << 1 ] ;

    //queryFileListF( tinP , tFolder ) ;
    //TN( tFolder , "///d/tmp/locked.test/2/" ) ;


#if defined( NEVERdEFINED )

while( ~hFind ) ;
}
    DEL( pInfo ) ;
    }
        etThread.traceF( tinP , T("found:    ")+T(pInfo->postOsName) ) ;
    {
    if( pInfo )
    thThread.dosFindFileOrDirF( tinP , pInfo , hFind , tLike ) ;
    ZE( infoFileS* , pInfo ) ;
{
do
handleC hFind( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILEfIND ) ;

TN( tLike , "\\ideafarm.home.1\\ephemeral\\domains\\com\\ideafarm\\city\\park\\exedll\\1\\hover\\*" ) ;
//TN( tLike , "\\tmp\\locked.test\\2\\*.ttt" ) ;

thirdC& thThread = etThread ;

TODO

}
    }
        }
            }
                tinP.pEther->delF( tinP , psttf ) ;
                etherC::etRockIF( tinP ).traceF( tinP , psttf ) ;
                sIn >> psttf ; ___( psttf ) ;
                ZE( strokeS* , psttf ) ;
            {
            while( sIn )

            }
                __( idReply - ifcIDrEPLYcLOAK_FOLDERcONTENTS) ;
                sIn >> idReply ;
                ZE( countT , idReply ) ;
            
                __( idFormat - 1 ) ;
                sIn >> idFormat ;
                ZE( countT , idFormat ) ;
            
                __( finger - FINGERnEG_CLOAKrEPLY ) ;
                sIn >> finger ;
                ZE( countT , finger ) ;

                bWoth = 0 ;
            {
            if( bWoth )

            else if( !sIn ) break ;
            }
                break ;
                POOPR
            {
            if( POOP )
        
            sock.readF( tinP , sIn ) ;
            static soulC sIn( tinP , TAG( TAGiDnULL ) ) ;
        {
        for(;;)
        boolT bWoth = 1 ;
    
        sock.writeF( tinP , sOut ) ;
        sOut << (countT)flFILEiNFO_NAME ;
        sOut << psttFolderP ;
        sOut << (countT)ifcIDcMDcLOAK_QUERYfOLDERcONTENTS ;
        sOut << (countT)1 ;
        sOut << (countT)FINGERnEG_CLOAKcOMMAND ;
        static soulC sOut( tinP , TAG( TAGiDnULL ) ) ;

        sock.writeF( tinP , (byteT*)&idType , sizeof idType ) ;
        countT idType = ifcIDtYPEcLOAKcONNECTION_SOULFUL ;
    
        sock.connectF( tinP , homeS::homeIF().idPortCloak ) ;
        socketC sock( tinP , *tinP.pEtScratch , TAG( TAGiDnULL ) , 0 , flSOCKETc_NOsECRECY ) ;

        SCOOPS
    {
    IFsCRATCH

    if( POOP ) return ;
{
voidT queryFileListF( tinS& tinP , const strokeS* const psttFolderP )

}
    }
        }
            }
                tinP.pEther->delF( tinP , psttf ) ;
                etherC::etRockIF( tinP ).traceF( tinP , psttf ) ;
                sIn >> psttf ; ___( psttf ) ;
                ZE( strokeS* , psttf ) ;
            {
            while( sIn )

            }
                __( idReply - ifcIDrEPLYcLOAK_ALLlOCKEDfOLDERScONTENTS ) ;
                sIn >> idReply ;
                ZE( countT , idReply ) ;
            
                __( idFormat - 1 ) ;
                sIn >> idFormat ;
                ZE( countT , idFormat ) ;
            
                __( finger - FINGERnEG_CLOAKrEPLY ) ;
                sIn >> finger ;
                ZE( countT , finger ) ;

                bWoth = 0 ;
            {
            if( bWoth )

            else if( !sIn ) break ;
            }
                break ;
                POOPR
            {
            if( POOP )
        
            sock.readF( tinP , sIn ) ;
            static soulC sIn( tinP , TAG( TAGiDnULL ) ) ;
        {
        for(;;)
        boolT bWoth = 1 ;
    
        sock.writeF( tinP , sOut ) ;
        sOut << (countT)flFILEiNFO_NAME ;
        sOut << (countT)ifcIDcMDcLOAK_QUERYaLLlOCKEDfOLDERScONTENTS ;
        sOut << (countT)1 ;
        sOut << (countT)FINGERnEG_CLOAKcOMMAND ;
        static soulC sOut( tinP , TAG( TAGiDnULL ) ) ;
    
        sock.connectF( tinP , homeS::homeIF().idPortCloak ) ;
        socketC sock( tinP , *tinP.pEtScratch , TAG( TAGiDnULL ) , 0 , flSOCKETc_NOsECRECY ) ;

        SCOOPS
    {
    IFsCRATCH

    if( POOP ) return ;
{
voidT queryFileListAllF( tinS& tinP )

/*1*/WAKEsHOWtEXT( "scratch.3.inactive.doodle.diskFindFileOrDirF.cloaked" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//

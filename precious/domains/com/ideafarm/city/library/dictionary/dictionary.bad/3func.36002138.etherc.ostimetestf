
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return bAct ;

    }
        timeA2P = timeN2 ;
        timeA1P = timeN1 ;
    {
    if( bAct )

    }
        bAct = timeT2 >= 0 ;
        third.osTimeSubtractF( tinP , timeT1 , timeT2 , timeD1P , timeD2P ) ;
        third.osTimeSubtractF( tinP , timeT1 , timeT2 , timeA1P , timeA2P ) ;
        sCountT timeT2 = timeN2 ;
        countT  timeT1 = timeN1 ;
    {
    ZE( boolT , bAct ) ;

    third.osTimeNowF( tinP , timeN1 , timeN2 ) ;
    ZE( sCountT , timeN2 ) ;
    ZE( countT  , timeN1 ) ;

    _IO_

    }
        if( POOP ) return 0 ;
    {
    IFbEcAREFUL
    SCOOP
{
/*1*/boolT etherC::osTimeTestF( tinS& tinP , countT& timeA1P , sCountT& timeA2P , const countT timeD1P , const sCountT timeD2P )/*1*/

/**/
*/
  can be 0
 timeD2P
  can be 0
 timeD1P
  can be 0
 timeA2P
  can be 0
 timeA1P
 tinP
arguments
usage: use timeD to specify the Delta time that is to elapse before the action is taken again
usage: use timeA to specify the last time that some Action was taken
the timeA parameters will be updated to the current time iff i evaluate to 1
i evaluate to 1 iff the current time is not less than the sum of the oo specified times
\<A HREF=\"5.1030179.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$osTimeTestF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


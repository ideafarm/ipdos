
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return idSlot ;
    _OUTbATONsTACKc_

    sinkF( tinP , idSlot , pPlateP , flSTACKsINK_QUERY , pSubtractFP , subtractionParmP ) ;
    ZE( countT , idSlot ) ;
    _INbATONsTACKc_

    }
        if( third ) return 0 ;
        __( F(flags) & flSTACKc_XRAY ) ;
        if( third ) return 0 ;
    {
    IFbEcAREFUL

    SCOOP
    TINSL
{
/*1*/countT stackC::operator () ( const plateC* const pPlateP , ifc4FT pSubtractFP , const countT subtractionParmP )/*1*/

/**/
*/
  normally this should be the same pSubtractFP that was used to sink the values into the stack object
  can be 0
 pSubtractFP
  the value to be searched for
 pPlateP
arguments
after calling this function, stackC::extractF( tinP ) can be used to remove the item that it references
assumes that the stack was loaded with values by "sinking" them, using sinkF
 2 indicates that psttP was found at the position just below the top of the stack
 1 indicates that psttP was found at the top of the stack
evaluates to the slot id of the plate whose value equals psttP
  \<A HREF=\"5.cb20104.1.1.0.html\"\>cb20104:  WAKEsHOW( "example.simplest.func.1150028.stackC.operator_call" )\</A\>
 simplest
examples
\<A HREF=\"5.1150028.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//



//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    third.c_memsetIF( tinP , pbnu , cbData ) ;
    third.newF( tinP , LF , pbnu , cbData ) ; ___BITScT( pbnu , 0xe62 ) ;
    }
        thirdC::c_memcpyIF( tinP , *(osTextT**)&postName , postNameP , 1 + costName ) ;
        third.newF( tinP , LF , *(osTextT**)&postName , 1 + costName ) ; ___CT( postName ) ;
        countT costName = thirdC::c_strlenIF( tinP , postNameP ) ;
    {
    if( postNameP )

    ___BITScT( pBaton , 0xe63 ) ;
    else            thirdC::c_memsetIF( tinP , (byteT*)pbBitsCt , sizeof pbBitsCt ) ;
    if( pbBitsCtP ) thirdC::c_memcpyIF( tinP , (byteT*)pbBitsCt , (byteT*)pbBitsCtP , sizeof pbBitsCt ) ;

    _IO_

    }
        if( third ) return ;
        __( !pBaton && !( F(flagsP) & flSTACKc_DOnOTsERIALIZE ) ) ;
        __( cbData < sizeof( countT ) ) ;
        FV( flSTACKc , flagsP ) ;
        if( third ) return ;
    {
    IFbEcAREFUL
    SCOOP

    ___CT( pBaton ) ;
{
idLeverType( F(flagsP) & flSTACKc_LEVERiSlENpREFIXED ? ifcIDtYPElEVER_PTR_lenPrefixedPtrStrokeS : ifcIDtYPElEVER_PTR_ptrStrokeS )
flags( flagsP ) ,
recycleLever5( 0 ) ,
recycleLever4( 0 ) ,
recycleLever3( 0 ) ,
recycleLever2( 0 ) ,
recycleLever1( 0 ) ,
bDying( 0 ) ,
osTidOwner( 0 ) ,
pSubtractF( F(flagsP) & flSTACKc_LEVERiSlENpREFIXED ? subtractLB_ptrStrokeS_ptr_lenPrefixed_F : subtractLB_ptrStrokeS_ptr_F ) ,
pbLever( (byteT*)&ppsttzLeverP ) ,
stackk( tinP , thirdP , TAGoR( TAGiDnULL , idLineCtP , idiFileCtP , pbBitsCtP ) , flagsP | flSTACKc_BLOB , sizeof( countT ) + cbData , idGrabLayerP , pLeverLathRefP ) ,
pbnu( 0 ) ,
cbData( cbDataP > sizeof( countT ) ? cbDataP : sizeof( countT ) ) ,
cbLever( sizeof( countT ) ) ,
pBaton( F(flagsP) & flSTACKc_DOnOTsERIALIZE ? 0 : new( 0 , tinP , LF ) batonC( tinP , TAGoR( TAGiDnULL , idLineCtP , idiFileCtP , pbBitsCtP ) , 0 , idGrabLayerP , flBATONc_NOTjEALOUS | flBATONc_SHARElAYER ) ) ,
poop( third ) ,
third( thirdP ) ,
idiFileCt( idiFileCtP ) ,
idLineCt( idLineCtP ) ,
postName( 0 ) ,
baseSoilXxxxC( tinP.pAdamGlobal1->_switchC_.postOldClassName , postName ) ,
/*1*/switchC::switchC( tinS& tinP , thirdC& thirdP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const flagsT flagsP , const strokeS**& ppsttzLeverP , countT* pLeverLathRefP , const countT cbDataP , const countT idGrabLayerP , const osTextT* const postNameP )/*1*/ :

/**/
*/
    *(bigObjectC*)&(countT&)swBig
   example
  if this argument is used then the countT& reference for the switch must be cast to the appropriate type
  apprentices: always let this argument default to 0
  this is the number of bytes allocated for each distinct switch lever encountered
  if not 0 then must be >= sizeof( countT )
  can be 0
 cbDataP
 ppsttzLeverP
 flagsP
 thirdP
 tinP
arguments
\<A HREF=\"5.120001a.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//



//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


//VISIBLE

REST
etThread.osProcessIdPhaseAdamF( tinP , ifcIDpHASEhANDOFFoLD_SHUTTINGdOWN ) ;

HEAReNTER( ether )
etThread.strokeF( tinP , T("press the enter key\r\n") ) ;

sDone_tmCancel.waitF( tinP ) ;
etThread.strokeF( tinP , T("primary thread is waiting for tmCancelF to end\r\n") ) ;

sDone_tmClient.waitF( tinP ) ;
etThread.strokeF( tinP , T("primary thread is waiting for tmClientF to end\r\n") ) ;

thThread.s_shutdown2IF( tinP ) ;
etThread.strokeF( tinP , T("primary thread is shutting down its sockets access\r\n") ) ;
etThread.strokeF( tinP , T("primary thread is closing handleServer\r\n") ) ;
etThread.strokeF( tinP , T("primary thread is closing handleJob\r\n") ) ;

thThread = 0 ;
else          etThread.strokeF( tinP , T("primary thread could not receive a value on port ")+TF1(idPort)+T("\r\n") ) ;
if( !thThread ) etThread.strokeF( tinP , T("primary thread received the value ")+TF1(value)+T(" on port ")+TF1(idPort)+T("\r\n") ) ;
thThread.s_readF( tinP , (byteT*)&value , sizeof value , handleJob ) ;
etThread.strokeF( tinP , T("primary thread is attempting to read a value on port ")+TF1(idPort)+T("\r\n") ) ;
ZE( countT , value ) ;

{ ZE( countT , tnu ) ; etThread.osThreadF( tinP , tnu , tmCancelF , &sDone_tmCancel , flTHREADlAUNCH_null , 0 , (countT)&handleJob ) ; } ;
signC sDone_tmCancel( tinP , TAG( TAGiDnULL ) ) ;
thThread.s_acceptF( tinP , handleJob , idPortPeer , nnPeer , handleServer , countTC() ) ;
ZE( countT , idPortPeer ) ;
nicNameC nnPeer ;
handleC handleJob( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_SOCKET ) ;
{ ZE( countT , tnu ) ; etThread.osThreadF( tinP , tnu , tmClientF , &sDone_tmClient , flTHREADlAUNCH_null , 0 , idPort ) ; } ;
signC sDone_tmClient( tinP , TAG( TAGiDnULL ) ) ;
thThread.s_listenF( tinP , handleServer ) ;
countT idPort = thThread.s_bindF( tinP , handleServer ) ;
thThread.s_socketIF( tinP , handleServer ) ;
handleC handleServer( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_SOCKET ) ;
thThread.s_setupIF( tinP ) ;

thirdC& thThread = etThread ;

TODO

DONE( tmClientF )
}
    etThread.strokeF( tinP , T("thread tmClientF could not write the value ")+TF1(value)+T(" to port ")+TF1(idPort)+T("\r\n") ) ;
    thThread = 0 ;
{
else
if( !thThread ) etThread.strokeF( tinP , T("thread tmClientF wrote the value ")+TF1(value)+T(" to port ")+TF1(idPort)+T("\r\n") ) ;
thThread.s_writeF( tinP , handleClient , (byteT*)&value , sizeof value ) ;
countT value = 0x54321 ;

etThread.osSleepF( tinP , TOCK * 0x10 ) ;
etThread.strokeF( tinP , T("secondary thread tmClientF is connected but will sleep for 10 tocks before writing\r\n") ) ;

thThread.s_connectF( tinP , handleClient , idPort ) ;
thThread.s_socketIF( tinP , handleClient ) ;
handleC handleClient( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_SOCKET ) ;

thirdC& thThread = etThread ;
const countT idPort = pTaskP ? pTaskP->c1 : 0 ;
TASK( tmClientF )

DONE( tmCancelF )

}
    thThread = 0 ;
    else         etThread.strokeF( tinP , T("thread tmCancelF canceled the job socket\r\n") ) ;
    if( thThread ) etThread.strokeF( tinP , T("thread tmCancelF could not cancel the job socket\r\n") ) ;
    thThread.s_cancelF( tinP , handleJob ) ;
    etThread.strokeF( tinP , T("secondary thread tmCancelF is canceling the job socket\r\n") ) ;
    etThread.osSleepF( tinP , TOCK * 2 ) ;
    etThread.strokeF( tinP , T("secondary thread tmCancelF is sleeping now, for two tocks\r\n") ) ;
    thirdC& thThread = etThread ;
    countT& handleJob = *(countT*)pTaskP->c1 ;
{
if( !ether )

__( pTaskP && !pTaskP->c1 ) ;
__Z( pTaskP ) ;

TASK( tmCancelF )

/*1*/WAKEhIDE( "example.simplest.func.1020039.thirdC.s_cancelF" )/*1*/
/**/
*/
\<A HREF=\"5.1f00104.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


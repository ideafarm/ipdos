
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return bWasVisible ;

    _OUT_

    else bWasVisible = winSendMessageF( tinP , handleP , idwm_SHOW , idCmdP ) ;
    }
        #endif

            }
                }
                    }
                        default                        : { thirdC::third_flagsProcessStateI_IF( tinP , flPROCESSsTATE_OUTPUTwINDOWiSvISIBLE , 0 ) ; break ; }
                        case idcWINsHOW_SHOWnOaCTIVATE : { thirdC::third_flagsProcessStateI_IF( tinP , flPROCESSsTATE_OUTPUTwINDOWiSvISIBLE , 1 ) ; break ; }
                        case idcWINsHOW_MAXIMIZE       :
                        case idcWINsHOW_SHOW           :
                    {
                    switch( idCmdP )
                {
                if( bOutput )
                }
                    pRootI->letRefF() ;
                    bOutput = handleP == *pRootI ;
                {
                if( pRootI )
                windowOldC* pRootI = windowOldC::getRefIF( tinP ) ;
                ZE( boolT , bOutput ) ;

                bWasVisible = tinP.brcRaw ;
                BOSdOnOTtEST( WHATgbo , ShowWindow( (HWND)handleP.osF( ifcIDtYPEhANDLE_WINDOW ) , idCmd ) )

                //}
                //    BOSpOOP
                //    BOS( WHATgbo , BOSoK , SetWindowPos( (HWND)handleP.osF( ifcIDtYPEhANDLE_WINDOW ) , HWND_NOTOPMOST ,   xx , yy , cx , cy , 0 ) )
                //
                //    countT cy = idRowHigh - idRowLow + 1 ;
                //    countT cx = idColHigh - idColLow + 1 ;
                //    countT yy = winOsRowIF( idRowHigh ) ;
                //    countT xx = winOsColIF( idColLow ) ;
                //
                //    }
                //        }
                //
                //            ((HANDLEaPPnOTEScOUNTcLASS&)hWindow).c2 = idRowHigh - idRowLow + 1 ;
                //            ((HANDLEaPPnOTEScOUNTcLASS&)hWindow).c1 = idColHigh - idColLow + 1 ;
                //            handleC& hWindow = (handleC&)(const handleC&)*pw ;
                //
                //            pw->mIdRow = idRowLow ;
                //            pw->papers.p PaperShow->mIdCol = idColLow ;
                //            pw->mColsRowsF( tinP , idColHigh - idColLow + 1 , idRowHigh - idRowLow + 1 ) ;
                //        {
                //        if( pw )
                //        windowOldC* pw = windowOldC::pWindowIF( tinP , handleP ) ;
                //    {
                //
                //    winRectangleDeskClientF( tinP , idColLow , idRowLow , idColHigh , idRowHigh ) ;
                //    ZE( countT , idRowHigh ) ;
                //    ZE( countT , idColHigh ) ;
                //    ZE( countT , idRowLow ) ;
                //    ZE( countT , idColLow ) ;
                //{
                //if( idCmd == SW_SHOW )
            {
            if( !POOP )

            else __1
            else if( idCmdP == idcWINsHOW_MINIMIZE       ) idCmd = SW_MINIMIZE ;
            else if( idCmdP == idcWINsHOW_MAXIMIZE       ) idCmd = SW_MAXIMIZE ;
            else if( idCmdP == idcWINsHOW_SHOW           ) idCmd = SW_SHOW ;
            else if( idCmdP == idcWINsHOW_SHOWnOaCTIVATE ) idCmd = SW_SHOWNA ;
            else if( idCmdP == idcWINsHOW_HIDE           ) idCmd = SW_HIDE ;
                 if( idCmdP == idcWINsHOW_DEFAULT        ) idCmd = SW_SHOWDEFAULT ;

        #elif defined( __NT__ )

            //U:

        #if defined( __OS2__ )
    {
    if( tinP.monitor.idThread == tinP.pAdamGlobal1->_thirdC_.idThreadWindows )

    ZE( boolT , bWasVisible ) ;
    ZE( countT , idCmd ) ;

    _INoLD_

    }
        if( POOP ) return 0 ;
        __Z( idCmdP ) ;
        __Z( handleP ) ;
        if( POOP ) return 0 ;
    {
    IFbEcAREFUL
    SCOOP
{
/*1*/boolT thirdC::winShowWindowF( tinS& tinP , const handleC& handleP , const countT idCmdP )/*1*/

/**/
*/
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/1snip.00100eb.idcWINsHOW!||
 idCmdP
  this must be the handle of a window
  must not be 0
 handleP
 tinP
arguments
whenever a window is shown, it is repositioned so that its client area exactly covers the entire desktop
evaluates to 1 if the window was previously visible, else to 0
\<A HREF=\"5.10200af.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$winShowWindowF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


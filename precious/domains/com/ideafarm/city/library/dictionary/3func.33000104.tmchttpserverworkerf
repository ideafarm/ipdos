
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


DONE( tmcHttpServerWorkerF )

}
    dec02AM( cWorkerP ) ;

    }
        }
            }
                }
                    DELzOMBIE( pDoomed ) ;
                    dec02AM( jobP.cSession ) ;
                    taskDrivenServerJobS* pDoomed = &jobP ;

                    //etThread.traceF( tinP , T("DONE [cSession]:    ")+TF2(jobP.cSession,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;

                    /*etThread.delF( tinP , psttPeerP ) ;*/

                    etThread.traceF( tinP , T("decremented cSession"), flTRACE_HOMEeCHOdEADMAN1 | flTRACE_FORCEnOsILENCE | flTRACE_ECHOoNLY ) ;
                    jobP.sw_cSessionWithPeer.ungrabF( tinP ) ;
                    -- jobP.sw_cSessionWithPeer ;
                    jobP.lever_nnPeer = jobP.nnPeer ;
                    jobP.sw_cSessionWithPeer.grabF( tinP , TAG( TAGiDnULL ) ) ;
                    jobP.sessions.unregisterConnectionF( tinP , jobP.nnPeer ) ;
                    etThread.traceF( tinP , T("decrementing cSession"), flTRACE_HOMEeCHOdEADMAN1 | flTRACE_FORCEnOsILENCE | flTRACE_ECHOoNLY ) ;

                    }
                        jobP.sw_pso.ungrabF( tinP ) ;
                        }
                            else                                                 __1
                            if( (countT)&psoP == (countT)&(countT&)jobP.sw_pso ) jobP.sw_pso.freeF( tinP ) ;
                            _IO_
                        {
                        }
                            jobP.lever_idSession = jobP.idSession ;
                            _IO_
                        {
                        }
                            DEL( psoP ) ;
                            _IO_
                        {
                        }
                            jobP.sw_pso.grabF( tinP , TAG( TAGiDnULL ) ) ;
                            _IO_
                        {

                        }
                            etThread.traceF( tinP , T("called etherDoHttpJobF"), flTRACE_HOMEeCHOdEADMAN1 | flTRACE_FORCEnOsILENCE | flTRACE_ECHOoNLY ) ;
                            etThread.etherDoHttpJobF( tinP , jobP , psoP , sessionP , idPortMeP , nnMeP ) ;
                            etThread.traceF( tinP , T("calling etherDoHttpJobF"), flTRACE_HOMEeCHOdEADMAN1 | flTRACE_FORCEnOsILENCE | flTRACE_ECHOoNLY ) ;
                            _IO_
                        {
                        etThread.osTimeNowF( tinP , jobP.timeDoJob1 , jobP.timeDoJob2 ) ;

                        _IO_
                    {

                    TELL( "TASK: entering application code" )

                    }
                        /* }                                                                      */
                        /*     if( POOP ) { POOPR }                                               */
                        /*     }                                                                  */
                        /*         TELL( "returned from querying dns for peer name string" ) ;    */
                        /*         tinP.pEtScratch->sockPsttHostF( tinP , psttPeerP , nnPeerP ) ; */
                        /*         TELL( "querying dns for peer name string" ) ;                  */
                        /*     {                                                                  */
                        /*     if( nnPeerP.pcId[ 0 ] )                                            */
                        /* {                                                                      */
                        /* ZE( strokeS* , psttPeerP ) ;                                           */
                        /* THIS IS TOO SLOW (2 TOCKS)                                             */

                        if( POOP ) { POOPR ; }
                        psoP->myNameF( tinP , idPortMeP , nnMeP ) ;
                        SCOOPS
                    {
                    IFsCRATCH
                    nicNameC nnMeP ;
                    ZE( countT , idPortMeP ) ;

                    psoP->etherF( tinP , *tinP.pEtScratch ) ;
                    //etThread.traceF( tinP , T("TASKdRIVENsERVER [cSession]:    ")+TF2(jobP.cSession,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                    etThread.traceF( tinP , T("preparing to service psoP"), flTRACE_HOMEeCHOdEADMAN1 | flTRACE_FORCEnOsILENCE | flTRACE_ECHOoNLY ) ;
                {
                else
                if( etThread ) { BLAMMO ; }
                sessionC& sessionP = jobP.sessions.registerConnectionF( tinP , jobP.nnPeer , /*psttPeerP*/T("notQueried") ) ;

                __Z( psoP ) ;
                //etThread.traceF( tinP , T("U:: tmcHttpServerWorkerF / after ungrab") ) ;

                jobP.sw_pso.ungrabF( tinP ) ;
                socketC*& psoP = (socketC*&)(countT&)jobP.sw_pso ;
                jobP.lever_idSession = jobP.idSession ;

                //tinP.pc Utility[ 0 ] = 0 ;
                //tinP.pc Utility[ 1 ] = 0 ;
                //tinP.pc Utility[ 2 ] = 0 ;
                //tinP.pc Utility[ 3 ] = 0 ;

                etThread.traceF( tinP , T("grabbed jobP.sw_pso"), flTRACE_HOMEeCHOdEADMAN1 | flTRACE_FORCEnOsILENCE | flTRACE_ECHOoNLY ) ;
                jobP.sw_pso.grabF( tinP , TAG( TAGiDnULL ) ) ;
                etThread.traceF( tinP , T("grabbing jobP.sw_pso"), flTRACE_HOMEeCHOdEADMAN1 | flTRACE_FORCEnOsILENCE | flTRACE_ECHOoNLY ) ;

                //tinP.pc Utility[ 3 ] = ((countT*)&jobCopy)[ 2 ] ;
                //tinP.pc Utility[ 2 ] = ((countT*)&jobP)[ 2 ] ;
                //tinP.pc Utility[ 0 ] = 0x12345678 ;
                //etThread.traceF( tinP , T("U:: tmcHttpServerWorkerF / before grabbing") ) ;

                TELL( "TASKdRIVENsERVER: setting up" )
                TESTsCRATCH ;

                etThread.osTimeNowF( tinP , jobP.timeJobPopped1 , jobP.timeJobPopped2 ) ;

                taskDrivenServerJobS& jobP = *(taskDrivenServerJobS*)_pbaJob ;
            {
            else
            }
                etThread.traceF( tinP , T("doing nothing since !pbJob"), flTRACE_HOMEeCHOdEADMAN1 | flTRACE_FORCEnOsILENCE | flTRACE_ECHOoNLY ) ;
            {
            if( !pbJob )

            stJobP.ungrabF( tinP ) ;
            etThread.traceF( tinP , T("ungrabbed stJobP after popping a job"), flTRACE_HOMEeCHOdEADMAN1 | flTRACE_FORCEnOsILENCE | flTRACE_ECHOoNLY ) ;

            stJobP >> pbJob ;
            byteT* pbJob = _pbaJob ;
            byteT _pbaJob[ sizeof( taskDrivenServerJobS ) ] ;

            //etThread.traceF( tinP , T("tmcHttpServerWorkerF popping a job [jobCopy[2]]:    ")+TF2(((countT*)&jobCopy)[2],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
            //taskDrivenServerJobS jobCopy = *(taskDrivenServerJobS*)&(countT&)stJobP[ 1 ] ; //U:: TO FIND A BUG
        {
        else
        else if( bQuitP ) stJobP.ungrabF( tinP ) ;
        }
            stJobP.ungrabF( tinP ) ;
            etThread.traceF( tinP , T("immediately ungrabbed stJobP because it is empty"), flTRACE_HOMEeCHOdEADMAN1 | flTRACE_FORCEnOsILENCE | flTRACE_ECHOoNLY ) ;
        {
        if( !stJobP )

        etThread.traceF( tinP , T("grabbed stJobP"), flTRACE_HOMEeCHOdEADMAN1 | flTRACE_FORCEnOsILENCE | flTRACE_ECHOoNLY ) ;
        stJobP.grabF( tinP , TAG( TAGiDnULL ) ) ;
        etThread.traceF( tinP , T("waited for a push to stJobP"), flTRACE_HOMEeCHOdEADMAN1 | flTRACE_FORCEnOsILENCE | flTRACE_ECHOoNLY ) ;
        stJobP.waitF( tinP ) ;
        etThread.traceF( tinP , T("waiting for a push to stJobP"), flTRACE_HOMEeCHOdEADMAN1 | flTRACE_FORCEnOsILENCE | flTRACE_ECHOoNLY ) ;
    {
    while( !bQuitP )

    countT& cWorkerP = *(countT*)pTaskP->c3 ;
    stackC& stJobP   = *(stackC*)pTaskP->c2 ;
    countT& bQuitP   = *(countT*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 && pTaskP->c3 )

TELL( "preparing for work" ) ;
/*1*/TASK( tmcHttpServerWorkerF )/*1*/


/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//


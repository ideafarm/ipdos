
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return idhr ;
    }
        __( bFail ) ;
        }
            while( bFail && ( bNoQuit || ( !cTriesP && !etPrime ) || ( cTriesP && -- cTriesP ) ) ) ;
            }
                }
                    }
                        }
                            ++ s ; ( bNoQuit ? (etherC&)*tinP.pEtScratch : etPrime ).osSleepF( tinP , TOCK * 0x10 ) ;
                            sleepC s( tinP , TAG( TAGiDnULL ) ) ;
                        {
                        POOPR
                    {
                    else
                    if( !POOP ) bFail = 0 ;
                    __Z( idhr ) ;
        
                    delF( tinP , pNicName ) ;
                    }
                        idhr = pNicName ? pNicName[ ru ] : idhnu ;
                        ranUniC ru( tinP , cNicName , ruSeed ) ;
                    {
                    if( cNicName )
                    tinP.pEtScratch->ifcCellHostsF( tinP , pNicName , cNicName , idAdamP , cTriesP ) ; ___( pNicName ) ;
                    ZE( countT   , cNicName ) ;
                    ZE( nicNameC* , pNicName ) ;
                {
            {
            do
            SCOOPS
        {
        boolT bFail = 1 ;
        ranUniC ruSeed( tinP , 0xffffffff ) ;
        boolT bNoQuit = cTriesP == - 1 ;
        etherC& etPrime = etPrimeIF( tinP ) ;
    {
    IFsCRATCH
    nicNameC idhr ;

    _IO_

    }
        if( POOP ) return idhnu ;
        __Z( idAdamP ) ;
        if( POOP ) return idhnu ;
    {
    IFbEcAREFUL

    nicNameC idhnu ;
    SCOOP
{
/*1*/nicNameC etherC::ifcCellHostsF( tinS& tinP , const countT idAdamP , countT cTriesP )/*1*/

/**/
*/
  if 1 then 1 attempt will be made to obtain a list, and whatever is drawn from that list will be returned
    if 0 then new lists will be obtained forever until a nonnull value is drawn from a list
   if the list is null, or if randomly selecting a list item produces a null value, then cTriesP will also dictate retrying new lists
   cTriesP will be made to successfully obtain a list of cell hosts
  if 0 then i will retry until a nonze value is obtained
 cTriesP
  must not be 0
 idAdamP
 tinP
arguments
i evaluate to the address of a randomly chosen cell host for idAdamP
\<A HREF=\"5.103017e.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$ifcCellHostsF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


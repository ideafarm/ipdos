
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return pv ? *pv : *(countT*)pbnu ;

    _OUTbATONsTACKc_
    }
        handleP.osF( ifcIDtYPEhANDLE_STACKwALK , (countT)(*p_ppLathRef)->ppD ) ;
        pv = &PLATE_countT_REF( *p_ppLathRef ) ;

        }
            setIdLathRefF( tinP ) ;
            *p_idLathRef = 0 ;
        {
        else
        }
            }
                setIdLathRefF( tinP ) ;
                *p_idLathRef = 0 ;
            {
            else if( ppBefore      != *p_ppLathRef )
            //U:else if( ppBefore->ppU == *p_ppLathRef ) -- *p_idLathRef ;
            //U:     if( ppBefore->ppD == *p_ppLathRef ) ++ *p_idLathRef ;
            else if( (plateS*)ppBefore->ppU == *p_ppLathRef ) -- *p_idLathRef ;
                 if( (plateS*)ppBefore->ppD == *p_ppLathRef ) ++ *p_idLathRef ;
        {
        if( ppBefore )
        *p_ppLathRef = (plateS*)handleP.osF( ifcIDtYPEhANDLE_STACKwALK ) ;
        plateS* ppBefore = *p_ppLathRef ;

        LATHrEF
    {    
    if( ~handleP )
    ZE( countT* , pv ) ;

    if( !handleP ) handleP.osF( ifcIDtYPEhANDLE_STACKwALK , (countT)ppTop ) ;
    _INbATONsTACKc_

    }
        }
            return *(countT*)pbnu ;
            handleP.osF( ifcIDtYPEhANDLE_STACKwALK , 0 ) ; //TO PREVENT CPU SPIN IF *this IS IMPOTENT
        {
        if( POOP )
    {
    IFbEcAREFUL

    // ASSUME: handleP IS EITHER 0 OR POINTS TO THE PLATE WHOSE VALUE IS TO BE RETURNED
    SCOOP
{
/*1*/countT& stackC::downF( tinS& tinP , handleC& handleP )/*1*/

/**/
*/
  must be 0 for the first call when traversing the stack object
 handleP
arguments
after calling this function, stackC::extractF( tinP ) can be used to remove the item that it references
this function does not modify the internal cursor that is used to make operator [] speedy
concurrent traversals can be either single threaded or multithreaded
 to do this, just use separate places to store each handle
concurrent multiple traversals of a stack object are legal
 calling extractF with an explicit id is ok, as long as the specified plate is not the "next" plate down
 calling extractF to d elete the last referenced plate is ok
 the plate referred to by handle must not be d eleted
the stack can be modified while it is being traversed, with one exception
  this is a feature of the api, not an implementation detail subject to change
 it is legal (ok) for application code (adam definitions) to exploit this
 the only difference is how handle is updated
 for a given value of handle, downF and upF return the same value
after calling downF, handle will refer to the next (downward) item
 most applications will call downF repeatedly until !handle
calls to downF can be followed by calls to upF, and calls to upF can be followed by calls to downF
if the stackC is empty, this function will set handleP to ze and will evaluate to 0
 no harm is done by quitting early, not using a nonze handleP
 when handleP becomes ze, you have completely traversed the stack object
optionally, continue to call downF until handleP is ze
for the first call, handleP must be 0
 to distinguish between these cases, use operator countT to get the number of items on the stack
 for both cases, the first call will return 0 and the handle will remain 0
 if the stack contains exactly one item of value 0
 if the stack is empty
there are two cases for which the behavior of this function is identical
 warning: code that fails to do this for ifcSTACKtYPE_nicNameC will work for IPv4 but will fail for IPv6 long values
 for example, if idType == ifcSTACKtYPE_nicNameC, my value stFoo[ 2 ] must be cast to *(nicNameC*)&stFoo[ 2 ]
the application must cast my value to a reference to the appropriate class when the data on each plate is not of size sizeof( countT )
call this repeatedly to obtain each value in the stack, in lifo order (top down)
  \<A HREF=\"5.bd10104.1.1.0.html\"\>bd10104:  WAKEsHOW( "example.simplest.func.1150010.stackC.downF" )\</A\>
 simplest
examples
\<A HREF=\"5.1150010.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$downF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


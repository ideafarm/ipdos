
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


//VISIBLE

REST

}
    }
        }
            }
                etThread.delF( tinP , pbr ) ;
                }
                    HEAReNTER( etThread ) ;
                    etThread.strokeF( tinP , T("\freceived reply: \"")+T(psttReply)+T("\"\r\npress enter") ) ;
                    __( cbr - ( CSpREFIX + psttOldCmd->idAdam ) * sizeof( strokeS ) ) ;
                    strokeS* psttReply = (strokeS*)pbr ;
                {
                if( pbr )
                soulr.shiftRightF( tinP , pbr , cbr , idTypeVerify ) ; ___( pbr ) ;
                ZE( countT , idTypeVerify ) ;
                ZE( countT , cbr ) ;
                ZE( byteT* , pbr ) ;

                soc.readF( tinP , soulr ) ;
                soulC soulr( tinP , TAG( TAGiDnULL ) ) ;

                soc.writeF( tinP , soulc ) ;
                soulC soulc( tinP , TAG( TAGiDnULL ) , (byteT*)psttOldCmd , flSOUL_null , ( CSpREFIX + psttOldCmd->idAdam ) * sizeof( strokeS ) ) ;
            {
            if( psttOldCmd )

            etThread.faceHearF( tinP , psttOldCmd ) ; ___( psttOldCmd ) ;
            ZE( strokeS* , psttOldCmd ) ;
            etThread.strokeF( tinP , T("\fenter a command: ") ) ;
        {
        while( !ether && !etThread )

        etThread.strokeF( tinP , T("connected to port ")+TF1(idPort)+TF1(" of host ")+TF1(nicName)+T("\r\n") ) ;
        soc.connectF( tinP , idPort , nicName ) ;
        socketC soc( tinP , etThread , TAG( TAGiDnULL ) ) ;
    {
    etThread.strokeF( tinP , T("connecting to port ")+TF1(idPort)+TF1(" of host ")+TF1(nicName)+T("\r\n") ) ;

    }
        etThread.delF( tinP , psttNicName ) ;
        //U:nicName = etThread.strDigitsToSCountF( tinP , psttNicName ) ;
        nicName = NICnAMElOCAL ; //U:
        etThread.faceHearF( tinP , psttNicName ) ; ___( psttNicName ) ;
        ZE( strokeS* , psttNicName ) ;
        etThread.strokeF( tinP , T("\fenter the nicName that you want to connect to (only v4 is supported): ") ) ;
    {
    nicNameC nicName ;

    }
        etThread.delF( tinP , psttIdPort ) ;
        //U:idPort = etThread.strDigitsToSCountF( tinP , psttIdPort ) ;
        idPort = ifcPORToLD1_ECHO ; //U:
        etThread.faceHearF( tinP , psttIdPort ) ; ___( psttIdPort ) ;
        ZE( strokeS* , psttIdPort ) ;
        etThread.strokeF( tinP , T("\fenter the idPort that you want to connect to: ") ) ;
    {
    ZE( countT , idPort ) ;
{
while( !ether && !etThread )

TODO

/*1*/WAKEhIDE( "ifcSession.client" )/*1*/
/**/
*/
with me, you can connect to an ifcSession port, enter commands, and view replies
\<A HREF=\"5.2110104.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


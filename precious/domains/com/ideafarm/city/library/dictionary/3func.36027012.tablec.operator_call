
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return *pc2o ;

    baton.ungrabF( tinP ) ;
    _OUT_

        pc2o = (count2S*)pc2o->c2 ;
    while( pc2o->c1 == _CT1_03 && pc2o->c2 )

    _INoLD_
    baton.grabF( tinP , TAG( TAGiDnULL ) ) ;

    }
        if( POOP ) return c2nu ;
        __( stEvents < idrP ) ;
        __Z( idcP ) ;
        __Z( idrP ) ;
        if( POOP ) return c2nu ;
    {
    IFbEcAREFUL

    if( POOP ) return c2nu ;
    __Z( pc2o ) ;
    count2S* pc2o = (count2S*)(*pstObjects)[ idcP ] ;
    if( POOP ) return c2nu ;
    __Z( pstObjects ) ;
    stackC* pstObjects = (stackC*)stEvents[ idrP ] ;

    SCOOP
    TINSL
{
/*1*/count2S& tableC::operator () ( const countT idrP , const countT idcP )/*1*/

/**/
*/
 idcP
 idrP
arguments
   exception examples: measureT, sCountT
  for most other types of cells, c2 contains the address of the object referred to by the cell
  for a cell that contains a countT object, c2 is that countT object
 c2 contains the value of the cell
 c1 contains the idType of the cell
evaluates to a reference to the count2S object that is allocated by the tableC object for each cell
  \<A HREF=\"5.d820104.1.1.0.html\"\>d820104:  WAKEsHOW( "example.simplest.func.1320012.tableC.operator_call" )\</A\>
 simplest
examples
\<A HREF=\"5.1320012.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


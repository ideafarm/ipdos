
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return flLISTwALKcALLbACKrETURNcODE_DOnOTwALKmE ;

    }
        // POPtINaRGS
        // flagsT flagsRC = listC::walkIF( tinP , hRecord ) ;
        // tinP.ta.pushed.u.listWalk.util.pcP[ 1 ] = flLISTwALKcHATTER_null ;
        // tinP.ta.pushed.u.listWalk.util.pcP[ 0 ] = record.nameF() ;
        // tinP.ta.pushed.u.listWalk.walk.flagsWalkP = flLISTwALK_null ;
        // tinP.ta.pushed.u.listWalk.walk.pListWalkCBFP = listWalkChatterCBF ;
        // PUSHtINaRGS
        // CONoUTrAW( "================== CHATTERING RECORD ==============================\r\n" ) ;
        // 
        // record.openF( tinP , hRecord ) ;
        // handleC hRecord( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_LISTING ) ;
        // 
        // grabitC grabitx( tinP , TAG( TAGiDnULL ) ) ;
    
        }
            DELlIST( fieldEditParamOutC , pOut ) ;
            listC::fieldIF( tinP , pOut , hTo , pczField , _1_pushC( record ) + _1_modePushSinkC() + _1_modeUniqueC() , LF ) ;
            countT pczField[] = { LISTnAME_RECORD , 0 } ;                                                                                                                                                 \
            ZE( fieldEditParamOutC* , pOut ) ;
        
            listC::openIF( tinP , hTo , pczTo ) ;
            handleC hTo( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_LISTING ) ;
            countT pczTo[] = { LISTnAME_ROOT , LISTnAME_ROOTsYSTEM4 , LISTnAME_TEMPORARY , LISTnAME_SELECTED , tinP.ta.pushed.u.listWalk.util.pcP[ 0 ] , 0 } ;
        
            puseC puseat( tinP , ifcIDpOOL_ADAMtEMP ) ;
        {
        //SINK UNIQUE A listingVSP for record INTO A TEMPORARY LIST
    
        __( !listingC::bIsListingIF( tinP , &record ) ) ;
        listC& record = *(listC*)(const listingC*)spRecord ;
    
        listingVSP spRecord = entry ;
        listing_listingVSP_C& entry = *(listing_listingVSP_C*)pListing ;
    {
    if( pListing && !( pListing->flagsF() & fliLISTINGc_MIXINlIST ) && pListing->idTypeDatumF() == ifcIDtYPEmIXINdATUM_listingVSP )

    listingC* pListing = tinP.ta.pushed.u.listWalk.cbf.pListingP ;
{
/*1*/flagsT _export listWalkSelectCBF( tinS& tinP )/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


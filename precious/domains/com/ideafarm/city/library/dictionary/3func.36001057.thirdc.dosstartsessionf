
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    _OUT_
    }
        #endif

            }
                }
                    hThread.resetF() ;
                    tinP.pAdamGlobal4->_thirdC_grab_lOsTid.ungrabF( tinP ) ;
                    *tinP.pAdamGlobal1->_thirdC_.pSwThreadHandle = hThread.osF( ifcIDtYPEhANDLE_THREAD ) ; // THIS HANDLE NEEDS TO BE KEPT BECAUSE THERE IS NO WAY TO GET IT LATER
                    tinP.pAdamGlobal1->_thirdC_.lOsTid = tidP ;
                    tinP.pAdamGlobal4->_thirdC_grab_lOsTid.grabF( tinP , TAG( TAGiDnULL ) ) ;
                {
                if( tidP && tidP != - 1 && F(flagsP) & flSESSION_REGISTERtHREADhANDLE )
    
                }
                    hProcess.resetF() ;
                    tinP.pAdamGlobal4->_thirdC_grab_lOsPid.ungrabF( tinP ) ;
                    *tinP.pAdamGlobal1->_thirdC_.pSwProcessHandle = hProcess.osF( ifcIDtYPEhANDLE_PROCESS ) ;
                    tinP.pAdamGlobal1->_thirdC_.lOsPid = pidP ;
                    tinP.pAdamGlobal4->_thirdC_grab_lOsPid.grabF( tinP , TAG( TAGiDnULL ) ) ;
                {
                if( pidP && pidP != - 1 && F(flagsP) & flSESSION_REGISTERpROCESShANDLE )

                tidP = pinfo.dwThreadId ;
                pidP = pinfo.dwProcessId ;
            {
            else
            }
                hProcess.closeIfF() ;
                hThread.closeIfF() ;
            {
            if( POOP )

            if( !hProcess ) __1
            hProcess.osF( ifcIDtYPEhANDLE_PROCESS , (countT)pinfo.hProcess ) ;
            handleC hProcess( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_PROCESS ) ;

            if( !hThread ) __1
            hThread.osF( ifcIDtYPEhANDLE_THREAD , (countT)pinfo.hThread ) ;
            handleC hThread( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_THREAD ) ;

            }
                BOSpOOP
                delF( tinP , postp ) ;
                }
                    thirdC::c_strncpyIF( tinP , postp , postm , costap ) ;
                    newF( tinP , LF , postp , costap ) ; ___( postp ) ;
                    const countT costap = 1 + c_strlenIF( tinP , postm ) ;
                    osTextT* postm = "there is no \"path\" environment variable for this process" ;
                {
                if( !postp )
                dosScanEnvF( tinP , postp , "path" ) ; ___( postp ) ;
                ZE( osTextT* , postp ) ;
                //THIS CODE IS DUPLICATED IN 102006a AND 102005d
            {
            if( tinP.bosFail )

            }
                }
                    DeleteProcThreadAttributeList( (_PROC_THREAD_ATTRIBUTE_LIST*)pcInfo2 ) ;

                    }
                        delF( tinP , postAll ) ;
                        BOS( WHATsfr , BOSoK , CreateProcess( 0 , postAll , &sa , &sa , 0 , flags1 , 0 , 0 , (STARTUPINFO*)&sinfo , &pinfo ) )

                        //LOGrAW( "\"\r\n" ) ;
                        //LOGrAW( postAll ) ;
                        //LOGrAW( "launching \"" ) ;

                        SECURITYaTTRIBUTE_saUNRESTRICTED( 0 ) ;

                        }
                            c_strcatIF( tinP , postAll , ostoSay ) ;
                            OStEXTC(  ostoSay , processGlobal1I.idNumaNode , 0 ) ;
                            OStEXTAK( ostoSay , " !idNumaNode " ) ;
                            OStEXT(   ostoSay , TUCK << 2 ) ;
                        {
                        if( processGlobal1I.idNumaNode && c_strstrIF( tinP , postExeP , "\\ideafarm." ) && ( c_strstrIF( tinP , postExeP , ".ipdos-we" ) || c_strstrIF( tinP , postExeP , ".ipdos-we" ) ) )
                        c_strcatIF( tinP , postAll , postArgsP ) ;
                        c_strcatIF( tinP , postAll , " " ) ;            //U::postExeP SHOULD BE PASSED AS WOTH PARAM TO CreateProcess TO AVOID SECURITY VULNERABILITY; SEE DOC FOR CreateProcess; THE ISSUE ARISES WHEN postExe CONTAINS A PATH THAT CONTAINS A SPACE, WHICH WILL CAUSE INCORRECTD PARSING
                        c_strcpyIF( tinP , postAll , postExeP ) ;
                        newF( tinP , LF , postAll , costa ) ; ___( postAll ) ;
                        ZE( osTextT* , postAll ) ;

                        costa += TUCK ; // FOR !idNumaNode 12345678

                        }
                            costa = 2 * tinP.brcRaw + 2 ;
                            BOSdOnOTtEST( WHATgbo , strlen( postExeP ) )
                        {
                        else
                        }
                            costa = 2 * c1 + 2 + tinP.brcRaw + 1 ;
                            BOSdOnOTtEST( WHATgbo , strlen( postArgsP ) )
                            countT c1 = tinP.brcRaw ;
                            BOSdOnOTtEST( WHATgbo , strlen( postExeP ) )
                        {
                        if( postArgsP )
                        ZE( countT , costa ) ;

                        sinfo.lpAttributeList = (_PROC_THREAD_ATTRIBUTE_LIST*)pcInfo2 ;
                        sinfo.StartupInfo.hStdError = 0 ;
                        sinfo.StartupInfo.hStdOutput = 0 ;
                        sinfo.StartupInfo.hStdInput = 0 ;
                        sinfo.StartupInfo.lpReserved2 = 0 ;
                        sinfo.StartupInfo.cbReserved2 = 0 ;
                        else                                      sinfo.StartupInfo.wShowWindow |= SW_SHOW ;
                        else if( F(flagsP) & flSESSION_MINIMIZE ) sinfo.StartupInfo.wShowWindow |= SW_MINIMIZE ;
                        if( F(flagsP) & flSESSION_MAXIMIZE      ) sinfo.StartupInfo.wShowWindow |= SW_MAXIMIZE ;
                        if( F(flagsP) & flSESSION_HIDE          ) sinfo.StartupInfo.wShowWindow |= SW_HIDE ;
                        if( F(flagsP) & flSESSION_BACK          ) sinfo.StartupInfo.wShowWindow |= SW_SHOWNOACTIVATE ;
                        sinfo.StartupInfo.wShowWindow = 0 ;
                        sinfo.StartupInfo.dwFlags = STARTF_USESHOWWINDOW | STARTF_USEPOSITION | STARTF_USESIZE ;
                        sinfo.StartupInfo.dwFillAttribute = 0 ;
                        sinfo.StartupInfo.dwYCountChars = 0 ;
                        sinfo.StartupInfo.dwXCountChars = 0 ;
                        sinfo.StartupInfo.dwYSize = cRowP ;
                        sinfo.StartupInfo.dwXSize = cColP ;
                        sinfo.StartupInfo.dwY = idRowP ;
                        sinfo.StartupInfo.dwX = idColP ;
                        sinfo.StartupInfo.lpTitle = 0 ; //MUST BE NULL FOR GUI PROCESSES AND FOR CONSOLE PROCESS THAT DO NOT START A NEW CONSOLE
                        sinfo.StartupInfo.lpDesktop = 0 ;
                        sinfo.StartupInfo.lpReserved = 0 ;
                        sinfo.StartupInfo.cb = sizeof sinfo ;
                        c_memsetIF( tinP , (byteT*)&sinfo , sizeof sinfo ) ;
                        STARTUPINFOEX sinfo ;
                    {
                    if( bOk )

                    }
                        }
                            bOk = 1 ;
                        {
                        if( UpdateProcThreadAttribute( (_PROC_THREAD_ATTRIBUTE_LIST*)pcInfo2 , 0 , PROC_THREAD_ATTRIBUTE_PREFERRED_NODE , &offNodePreferred , sizeof offNodePreferred , 0 , 0 ) )
                        WORD offNodePreferred = (WORD)offNumaNodeValidChosen ;  // THE NEXT LINE WILL FAIL WITH ANY SIZE OTHER THAN WORD
                        bOk = 0 ;
                    {
                    if( offNumaNodeValidChosen != NUMA_NO_PREFERRED_NODE )
                    countT offNumaNodeValidChosen = thirdC::osOffNumaNodeValidChosenIF( processGlobal1I.idNumaNode ) ;
                    boolT bOk = 1 ;
                {
                if( InitializeProcThreadAttributeList( (_PROC_THREAD_ATTRIBUTE_LIST*)pcInfo2 , 1 , 0 , &cba ) )

                memset( pcInfo2 , 0 , cba ) ;
                unsigned pcInfo2[ 0x100 / sizeof( unsigned ) ] ;
            {
            if( cba < 0x100 )
            c_memsetIF( tinP , (byteT*)&pinfo , sizeof pinfo ) ;
            PROCESS_INFORMATION pinfo ;
            ZE( osTextT* , postAll ) ;

            InitializeProcThreadAttributeList( 0 , 1 , 0 , &cba ) ;
            SIZE_T cba = 0 ;

            if( F(flagsP) & flSESSION_MONITORED ) flags1 |= DEBUG_PROCESS | DEBUG_ONLY_THIS_PROCESS /*U: | CREATE_SUSPENDED */ ;
            flagsT flags1 = CREATE_DEFAULT_ERROR_MODE | CREATE_NEW_CONSOLE | CREATE_NEW_PROCESS_GROUP ;
            BOSnOvALUE( WHATgbo , SetLastError( 0 ) )

        #elif defined( __NT__ )

            if( !POOP ) pidP = processId ;
            BOSpOOP
            if( tinP.bosFail && tinP.brcLath == ERROR_SMG_START_INoLD_BACKGROUND ) tinP.bosFail = 0 ;
            BOSI( WHATsfr , BOSfAIL , DosStartSession( &info , &sessionId , &processId ) )

            PID   processId = 0 ;
            ULONG sessionId = 0 ;

            }
                F(flagsP) & flSESSION_FULLsCREEN ? info.SessionType = SSF_TYPE_FULLSCREEN : info.SessionType = SSF_TYPE_DEFAULT ;
                F(flagsP) & flSESSION_BACK ? info.FgBg = SSF_FGBG_BACK : info.FgBg = SSF_FGBG_FORE ;
                info.ObjectBuffLen      = sizeof pbBadGuy               ;
                info.ObjectBuffer       = pbBadGuy                      ;
                info.Reserved           = 0                             ;
                info.InitYSize          = (count01T)cRowP                ;
                info.InitXSize          = (count01T)cColP                ;
                info.InitYPos           = (count01T) idRowP                ;
                info.InitXPos           = (count01T) idColP                ;
                if( F(flagsP) & flSESSION_MAXIMIZE ) info.PgmControl |= SSF_CONTROL_MAXIMIZE ;
                if( F(flagsP) & flSESSION_MINIMIZE ) info.PgmControl |= SSF_CONTROL_MINIMIZE ;
                info.PgmControl         = SSF_CONTROL_SETPOS            ;
                info.PgmHandle          = 0                             ;
                info.IconFile           = 0                             ;
                info.InheritOpt         = SSF_INHERTOPT_PARENT          ;
                info.Environment        = 0                             ;
                info.TermQ              = 0                             ;
                info.PgmInputs          = (osTextT*)postArgsP           ;
                info.PgmName            = (osTextT*)postExeP            ;
                info.PgmTitle           = (osTextT*)"IdeaFarm " "(tm) City" ;
                info.TraceOpt           = 0                             ;
                F(flagsP) & flSESSION_KID ? info.Related = SSF_RELATED_CHILD : info.Related = SSF_RELATED_INDEPENDENT ;
                info.Length             = sizeof info                   ;

                byteT pbBadGuy[ 255 ] ;
            {
            STARTDATA info ;

            __( F(flagsP) & flSESSION_MONITORED ) ; //U: SUPPORT DEBUGGING FLAG

        #ifdef __OS2__
    {
    _INoLD_

    }
        if( POOP ) return ;
        FV( flSESSION , flagsP ) ;
        __( !tinP.pAdamGlobal1->_thirdC_.pSwThreadHandle ) ;
        __( !tinP.pAdamGlobal1->_thirdC_.pSwProcessHandle ) ;
        __Z( postExeP ) ;
        __NZ( pidP ) ;
        __NZ( tidP ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL
    SCOOP
{
/**//*1*/voidT thirdC::dosStartSessionF( tinS& tinP , countT& tidP , countT& pidP , const osTextT* const postExeP , const osTextT* const postArgsP , const sCountT idColP , const sCountT idRowP , const countT cColP , const countT cRowP , const flagsT flagsP )/*1*/

//U:COMBINE INTO A SINGLE API: 102006a AND 102005d

*/
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/1snip.001000e.flSESSION!||
 flagsP
 cRowP
 cColP
 idRowP
 idColP
 postArgsP
 postExeP
  the caller must close this handle when it is not going to use it any more
  must be 0
 hProcessP
  the caller must close this handle when it is not going to use it any more
  must be 0
 hThreadP
  must be 0
 pidP
  must be 0
 tidP
arguments
os: on windows, kid processes are not supported, so the kid flag has no effect
 flSESSION_HIDE
on os/2, some flSESSION flags have no effect
 flSESSION_BACK
 flSESSION_HIDE
 flSESSION_FULLsCREEN
 flSESSION_KID
on windows, some flSESSION flags have no effect
see the flSESSION symbolic constants
  \<A HREF=\"5.af00104.1.1.0.html\"\>af00104:  WAKEsHOW( "example.simplest.func.102005d.thirdC.dosStartSessionF" )\</A\>
 simplest
examples
\<A HREF=\"5.102005d.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$dosStartSessionF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


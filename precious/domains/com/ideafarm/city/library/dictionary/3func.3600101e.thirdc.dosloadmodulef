
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    }
        }
            __1
            if( pEtherP && !( F(flagsMode) & flTHIRDmODE_IMPOTENCEeXPECTED ) ) pEtherP->etherPutLogF( tinP , textC(tinP,TAG( TAGiDnULL ),flTEXTc_null,postP) ) ;
            dec02AM( processGlobal2I.cDllLoaded ) ;
        {
        if( bFail )

        }
            #endif
    
                }
                    }
                        bFail = 1 ;
                        __Z( handleP ) ;
                        __( tinP.brcQuery ) ;
                    {
                    else
                    }
                        thirdC::c_strcatIF( tinP , postAnticipatedErrorP  , osto2 ) ;
                        thirdC::c_strcatIF( tinP , postAnticipatedErrorP  , postP ) ;
                        thirdC::c_strcpyIF( tinP , postAnticipatedErrorP  , osto1 ) ;
                        newF( tinP , LF , postAnticipatedErrorP , osto1.costF() + c_strlenIF( tinP , postP ) + osto2.costF() + 1 ) ; ___( postAnticipatedErrorP ) ;
                        OStEXTV( osto2 , "\")." )
                        OStEXTV( osto1 , "Anticipated failure:  LoadLibrary(\"" )
                    {
                    if( tinP.brcQuery == ERROR_IS_JOIN_TARGET )
                {
                if( tinP.bosFail )
    
                }
                    inc02AM( processGlobal2I.cDllLoaded ) ;
                    }
                                                              c_strcatIF( tinP , processGlobal2I.postDllsLoaded  , postP ) ;
                        if( *processGlobal2I.postDllsLoaded ) c_strcatIF( tinP , processGlobal2I.postDllsLoaded  , postPad ) ;
                    {
                    if( c_strlenIF( tinP , processGlobal2I.postDllsLoaded ) + sizeof postPad + c_strlenIF( tinP , postP ) < sizeof processGlobal2I.postDllsLoaded )
                    osTextT postPad[] = " " ;
                {
                if( !c_strstrIF( tinP , processGlobal2I.postDllsLoaded , postP ) )  //20180117@1558: CHANGED SEMANTICS TO REGISTER ONLY UNIQUE DLL'S IN RESPONSE TO EXHAUSTING THE REGISTRY WHEN cloudC REPEATEDLY HIRES AN ADAM
    
                handleP.osF( ifcIDtYPEhANDLE_DLL , tinP.brcRaw ) ;

                countT save = tinP.brcQuery ; //U::TO FIND A BUG
                BOS( WHATgbo , BOSoK , LoadLibrary( postP ) )
                BOSnOvALUE( WHATgbo , SetLastError( 0 ) )
    
            #elif defined( __NT__ )
    
                handleP.osF( ifcIDtYPEhANDLE_DLL , (countT)osh ) ;
                BOSpOOP
                BOSI( WHATgbo , BOSfAIL , DosLoadModule( 0 , 0 , postP , &osh ) )
                ZE( HMODULE , osh ) ;
                countT cTries = 0 ; //U: WHAT IS CAUSING 8 TO BE NEEDED (AND NOT ALWAYS EFFECTIVE)? (WITH A TOCK WAIT AT THE END OF EACH TRY)
                }
                    ++ s ; dosSleepIF( tinP , TOCK ) ; //U: 19970528: CONJ: THIS IS NEEDED SO GATE WILL OPEN
                    sleepC s( tinP , TAG( TAGiDnULL ) ) ;
                {
    
            #ifdef __OS2__

            POOPIE
        {
        ZE( boolT , bFail ) ;
    {
    _IO_

    }
        if( POOP ) return ;
        #endif
            __( sizeof( countT ) != sizeof( HINSTANCE ) || fnu ) ;
        #elif defined( __NT__ )
            __( sizeof( countT ) != sizeof( HMODULE ) || fnu ) ;
        #ifdef __OS2__
        ZE( boolT , fnu ) ;
        __( !postP || !*postP ) ;
        __NZ( handleP ) ;
        if( POOP ) return ;
        __NZ( postAnticipatedErrorP ) ;
        __Z( postP ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL
    SCOOP
{
/**//*1*/voidT thirdC::dosLoadModuleF( tinS& tinP , handleC& handleP , osTextT*& postAnticipatedErrorP , const osTextT* const postP , etherC* const pEtherP )/*1*/

*/
  if not ze then exception information will be logged to *pEther
  can be 0
 pEtherP
 postP
 postAnticipatedErrorP
 handleP
arguments
it is illegal to refer to this symbol in the definition of an adam
\<A HREF=\"5.1020020.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$dosLoadModuleF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


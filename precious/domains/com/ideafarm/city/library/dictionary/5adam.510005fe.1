
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etherC::loafIF( tinP ) ;

}
    }
        POPtINaRGS
        listC::walkIF( tinP , pczName ) ;
        tinP.ta.pushed.listWalk.walk.flagsWalkP |= flLISTwALK_null ;
        tinP.ta.pushed.listWalk.walk.pListWalkCBFP = listWalkDeleteCBF ;
        PUSHtINaRGS
    {

    pczName = c8nameSys ;
    count8S c8nameSys( LISTnAME_ROOTsYSTEM2 ) ;

    }
        POPtINaRGS
        listC::walkIF( tinP , pczName ) ;
        tinP.ta.pushed.listWalk.walk.flagsWalkP |= flLISTwALK_null ;
        tinP.ta.pushed.listWalk.walk.pListWalkCBFP = listWalkDeleteCBF ;
        PUSHtINaRGS
    {

    }
        POPtINaRGS
        listC::walkIF( tinP , pczName ) ;
        tinP.ta.pushed.listWalk.walk.flagsWalkP |= flLISTwALK_null ;
        tinP.ta.pushed.listWalk.walk.pListWalkCBFP = listWalkReportCBF ;
        PUSHtINaRGS
    {

    pczName = c8nameApp ;
    count8S c8nameApp( LISTnAME_ROOTaPPLICATION ) ;
    
    }
        POPtINaRGS
        listC::walkIF( tinP , pczName ) ;
        tinP.ta.pushed.listWalk.walk.flagsWalkP |= flLISTwALK_null ;
        tinP.ta.pushed.listWalk.walk.pListWalkCBFP = listWalkAttachCBF ;
        PUSHtINaRGS
    
            pczName = c8name2 ;
        if( cToDo == 3 )
    {
    while( cToDo -- )
    countT cToDo = TUCK >> 3 ;

    countT* pczName = c8name1 ;

    listC::dictionaryReplaceOsTextIF( tinP , c8name2 ) ;
    listC::dictionaryReplaceOsTextIF( tinP , c8name1 ) ;
    count8S c8name2( LISTnAME_ROOTaPPLICATION , (countT)"zooey" ) ;
    count8S c8name1( LISTnAME_ROOTaPPLICATION , (countT)"gooey" , (countT)"hooey" , (countT)"iooey" , (countT)"jooey" ) ;
    //count8S c8name2( LISTnAME_ROOTaPPLICATION , 0x800000ff ) ;
    //count8S c8name1( LISTnAME_ROOTaPPLICATION , 0x80000100 ) ;

    grabitC grabitx( tinP , TAG( TAGiDnULL ) ) ;
{

TODO

}
    return flLISTwALKcALLbACKrETURNcODE_DELETE | flLISTwALKcALLbACKrETURNcODE_DOnOTwALKmE ;
{
flagsT listWalkDeleteCBF( tinS& tinP , const countT* const pczListP )

}
    return flLISTwALKcALLbACKrETURNcODE_null ;

    }
        ___( new( 0 , tinP , LF ) listing_countT_C( tinP , pczListP , 1 + incv02AM( idInLath ) ) ) ; 
        static countT idInLath ;
    {
    if( !tinP.ta.pushed.listWalk.cbf.pListingP )
{
flagsT listWalkAttachCBF( tinS& tinP , const countT* const pczListP )

}
    return flLISTwALKcALLbACKrETURNcODE_null ;

    }
        }
            }
                __( pListing->flagsF() & fliLISTINGc_maskTypeBits ) ;
            {
            default :
            }
                break ;
                }
                    }
                        break ;
                        tinP.pEther->strokeF( tinP , TF2(pczListP,flFORMAT_NObIGITvALUES)+T("| list:")+TF2(((list_blob_C*)pListing)->idNameF(),flFORMAT_NObIGITvALUES)+T(" with value osTextT: \"")+T((osTextT*)*(list_blob_C*)pListing)+T("\"\r\n") ) ;
                    {
                    case ifcIDtYPEmIXINdATUM_blob :
                    }
                        break ;
                        tinP.pEther->strokeF( tinP , TF2(pczListP,flFORMAT_NObIGITvALUES)+T("| list:")+TF2(((list_countT_C*)pListing)->idNameF(),flFORMAT_NObIGITvALUES)+T(" with value signed count: ")+TF2(*(sCountT*)(countT*)*(list_countT_C*)pListing,flFORMAT_NObIGITvALUES)+T("\r\n") ) ;
                    {
                    case ifcIDtYPEmIXINdATUM_countT :
                {
                switch( pListing->idTypeDatumF() )
            {
            case fliLISTINGc_MIXINlIST | fliLISTINGc_MIXINdATUM :
            }
                break ;
                }
                    }
                        break ;
                        tinP.pEther->strokeF( tinP , TF2(pczListP,flFORMAT_NObIGITvALUES)+T("| osTextT: \"")+T((osTextT*)*(list_blob_C*)pListing)+T("\"\r\n") ) ;
                    {
                    case ifcIDtYPEmIXINdATUM_blob :
                    }
                        break ;
                        tinP.pEther->strokeF( tinP , TF2(pczListP,flFORMAT_NObIGITvALUES)+T("| signed count: ")+TF2(*(sCountT*)(countT*)*(listing_countT_C*)pListing,flFORMAT_NObIGITvALUES)+T("\r\n") ) ;
                    {
                    case ifcIDtYPEmIXINdATUM_countT :
                {
                switch( pListing->idTypeDatumF() )
            {
            case fliLISTINGc_MIXINdATUM :
            }
                break ;
                CONoUTrAW5( "" , pczListP , "| a listC named " , step.idNameF() , " with no data\r\n" ) ;
                listC& step = *(listC*)pListing ;
            {
            case fliLISTINGc_MIXINlIST :
            }
                break ;
                CONoUTrAW3( "" , pczListP , "| plain old listingC, neither a listC nor any data\r\n" ) ;
            {
            case 0 :
        {
        switch( pListing->flagsF() & fliLISTINGc_maskTypeBits )
    {
    if( pListing )
    listingC* pListing = tinP.ta.pushed.listWalk.cbf.pListingP ;
{
flagsT listWalkReportCBF( tinS& tinP , const countT* const pczListP )

// 
// 
// 
// 2011.12.31: TESTED AOK
// 
// MAINTENANCE HISTORY

/*1*/WAKEsHOWtEXT( "example.other.snip.0030160.listC" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2019 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


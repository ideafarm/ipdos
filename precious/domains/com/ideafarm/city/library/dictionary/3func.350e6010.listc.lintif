
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    _OUT_

    }
        }
            POPtINaRGS

            __NZ( tinP.ta.retained.listWalk.util.pcP[ 1 ] ) ; // ALL NONZE VALUES SHOULD BE DETECTED, PROCESSED, AND RESET BEFORE walkF RETURNS
            __NZ( tinP.ta.retained.listWalk.util.pcP[ 0 ] ) ; // ALL NONZE VALUES SHOULD BE DETECTED, PROCESSED, AND RESET BEFORE walkF RETURNS

            pList->walkF( tinP , idGrabLayerP ) ;

            // tinP.ta.retained.listWalk.util.pcP[ 1 ]:  LATH ENCOUNTERED VALUE OF A FIELD NAMED LISTnAME_IDuPDATEcOMPLETED
            // tinP.ta.retained.listWalk.util.pcP[ 0 ]:  LATH ENCOUNTERED VALUE OF A FIELD NAMED LISTnAME_IDuPDATEbEGUN
            //CS:CODEsYNC: 330e6010 320000b4

            tinP.ta.pushed.listWalk.walk.flagsWalkP    = flLISTwALK_IGNOREgRABITbIT | flLISTwALK_RESETgRABITbIT | flLISTwALK_WALKkIDbEFOREcALLINGkID | flLISTwALK_DOnOTwALKkIDaFTERcALLINGkID ;
            tinP.ta.pushed.listWalk.walk.pListWalkCBFP = listWalkLintCBF ;
            PUSHtINaRGS
        {
        if( pList )
    
        __Z( pList ) ;
        listC* pList = &APT( listC , aptRoot ) ;
    {
    if( aptRoot )
    aptC& aptRoot = PUSE.aptListRootF() ;

    _INoLD_

    }
        if( POOP ) return ;
    {
    IFbEcAREFUL
{
/*1*/voidT listC::lintIF( tinS& tinP , const countT idGrabLayerP )/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//



//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST
etThread.osProcessIdPhaseAdamF( tinP , ifcIDpHASEhANDOFFoLD_SHUTTINGdOWN ) ;

}
    }
        etThread.osSleepF( tinP , TOCK , TOCK / 4 ) ;
        etThread.delF( tinP , psttTime ) ;
        etThread.delF( tinP , psttTotal ) ;
        etThread.delF( tinP , psttFree ) ;
        etThread.delF( tinP , psttUsed ) ;
        etThread.delF( tinP , psttPerTuckFree ) ;
        etThread.strokeF( tinP , T("\r")+T(psttTime)+T(" ")+T(psttTotal)+T(" ")+T(psttUsed)+T(" ")+T(psttFree)+T(" ")+T(psttPerTuckFree)+T("%") ) ;
        etThread.strFromF( tinP , psttTotal , cTotal , flFORMAT_UNSIGNED , 8 ) ;
        etThread.strFromF( tinP , psttFree , info.cbFree , flFORMAT_UNSIGNED , 8 ) ;
        etThread.strFromF( tinP , psttPerTuckFree , info.cbFree / ( cTotal >> 8 ) , flFORMAT_UNSIGNED , 2 ) ;
        etThread.strFromF( tinP , psttUsed , info.cbUsed , flFORMAT_UNSIGNED , 8 ) ;
        __Z( cTotal ) ;
        countT cTotal = info.cbUsed + info.cbFree ;
        ZE( strokeS* , psttTotal ) ;
        ZE( strokeS* , psttFree ) ;
        ZE( strokeS* , psttPerTuckFree ) ;
        ZE( strokeS* , psttUsed ) ;
        poolOld.walkF( tinP , poolOldWalkerF , pInfo ) ;
        countT pInfo = (countT)&info ;
        infoS info ;

        }
            etThread.strFromTimeF( tinP , psttTime , time1 , time2 ) ; ___( psttTime ) ;
            etThread.osTimeNowF( tinP , time1 , time2 ) ;
            ZE( sCountT , time2 ) ;
            ZE( countT , time1 ) ;
        {
        ZE( strokeS* , psttTime ) ;
    {
    while( !ether )
{
else
}
    etThread.strokeF( tinP , T("Another ")+textIdFileC( tinP , DDNAME )+T(" appears to be alive on this computer.  Only one is allowed.") ) ;
    etThread = 0  ;
{
if( etThread )
U:: USE napkinC OBJECT TO TEST FOR ALONENESS
batonC baton( tinP , TAG( TAGiDnULL ) , T("8e30104") ) ;

TODO

}
    return bCorrupt ;
    if( tinP.fingerprint ) ;

    }
        else           pInfo->cbUsed += cbd ;
        if( fDeleted ) pInfo->cbFree += cbd ;

        countT cbd      = DHcbYTES ;
        boolT  fDeleted = !!( F(DHfLAGS) & flDROP_DELETED ) ;
    {
    if( !bCorrupt )
    boolT bCorrupt = DHgUARD != POOLoLDdROPgUARD ;

    if( !pvP || !pInfo ) return 0 ;
    infoS* pInfo = (infoS*)pInfoP ;
    idClientP = idClientP ;
{
boolT poolOldWalkerF( tinS& tinP , voidT* const pvP , countT& idClientP , countT& pInfoP )

}
{
cbUsed( 0 )
cbFree( 0 ) ,
infoS::infoS( voidT ) :

;
}
    infoS( voidT ) ;
    countT cbUsed ;
    countT cbFree ;
{
struct infoS

/*1*/WAKEhIDE( "city.poolOld.view" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//


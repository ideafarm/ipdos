
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    }
        }
            DEL( prPosts ) ;
            if( prPosts ) meP.pushSnipF( tinP , stBodyP , *prPosts ) ;

            etThread.strMakeF( tinP , prPosts , tSay , 0 , flSTRmAKE_PREFIXlENGTH ) ; ___( prPosts ) ;
            ZE( pbRefC* , prPosts ) ;

            ) ;

                "<iframe src=\"https://")+T(bSandbox?"factory1.":"")+T("ideafarm.com/talk.body")+tQuery+T("\" title=\"Wo'O's Table Talk Current Conversation\" style=\"width:100% ; border:none \" height=\"1000px\">Your browser does not support the iframe tag.</iframe>\r\n"
                "<p>\r\n"
                "<h2>Topic: <span id=\"showtopic\" style=\"color:cyan\">")+tTopic+T("</span></h2>\r\n"
                "<p>\r\n"

            TN( tSay , "" ) ; tSay = T(

            TN( tQuery , bSecretIsOK ? "?secretisok=yes" : "?secretisok=no" ) ;
        {

        if( !tTopic.csF( tinP ) ) tTopic = T("Open!") ;

        /***************************************************************************************************/
        /***************************************************************************************************/
        /***************************************************************************************************/
        /****                                                                                           ****/
        /****  0:  DISPLAY TALK                                                                         ****/
        /****                                                                                           ****/
        /***************************************************************************************************/
        /***************************************************************************************************/
        /***************************************************************************************************/

        }
            }
                break ;

                etThread.delF( tinP , psttShort ) ;

                }
                    }
                        }
                            etThread.traceF( tinP , T("talkCBF: file error: unexpected contents [filename]:    ")+T(psttShort) ) ;
                            POOPRqUIET
                        {
                        if( POOP )

                        etThread.delF( tinP , psttValueTopic ) ;
                        tTopic = T(psttValueTopic) ;
                        newTopic >> psttValueTopic ; ___( psttValueTopic ) ;
                        ZE( strokeS* , psttValueTopic ) ;

                        etThread.delF( tinP , psttTimeForeign ) ;
                        newTopic >> psttTimeForeign ; ___( psttTimeForeign ) ;
                        ZE( strokeS* , psttTimeForeign ) ;

                        newTopic >> *(countT*)&timeS2 ;
                        ZE( sCountT , timeS2 ) ;

                        newTopic >> timeS1 ;
                        ZE( countT , timeS1 ) ;

                        newTopic >> idFormat ;
                        ZE( countT , idFormat ) ;

                        newTopic >> finger ;
                        ZE( countT , finger ) ;
                    {
                    else
                    if( POOP ) { POOPRqUIET }

                    tinP.pEtScratch->boxGetShadowF( tinP , newTopic , tListNewTopicFileLong ) ;
                    soulC newTopic( tinP , *tinP.pEtScratch , TAG( TAGiDnULL ) ) ;

                    SCOOPS
                {
                IFsCRATCH

                tListNewTopicFileLong += T("////factory5/d/ideafarm.home.101/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/newTopic/")+T(psttShort) ;
                tListNewTopicFileLong += T("////factory4/d/ideafarm.home.101/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/newTopic/")+T(psttShort) ;
                tListNewTopicFileLong += T("////factory3/d/ideafarm.home.101/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/newTopic/")+T(psttShort) ;
                TlIST( tListNewTopicFileLong ) ;

                stNewTopicFileShort >> psttShort ;
                ZE( strokeS* , psttShort ) ;
            {
            while( stNewTopicFileShort )
            TN( tb4 , "    " ) ;

            }
                }
                    while( ~hFind && !POOP ) ;
                    }
                        DEL( pInfo ) ;
                        }
                            if( !ids ) etThread.delF( tinP , psttShort ) ;
                            stNewTopicFileShort.sinkF( tinP , ids , psttShort , flSTACKsINK_UNIQUE ) ;
                            ZE( countT , ids ) ;

                            }
                                etThread.delF( tinP , psttnu ) ;
                                etThread.strBisectF( tinP , psttnu , psttShort , pInfo->psttIfoName , T("/") , - 1 , flSTRbISECT_APPENDdELIMITER ) ; ___( psttnu ) ; ___( psttShort ) ;
                                ZE( strokeS* , psttnu ) ;
                            {
                            ZE( strokeS* , psttShort ) ;
                        {
                        else
                        }
                            break ;
                            DEL( pInfo ) ;
                        {
                        if( !pInfo || !pInfo->psttIfoName )

                        etThread.diskFindFileOrDirF( tinP , pInfo , hFind , psttc1 , &pat ) ;
                        ZE( infoFileS* , pInfo ) ;
                    {
                    do
                    handleC hFind( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILEfIND ) ;
                {
                FORsTRINGSiN1( (strokeS*)tListNewTopicPath )

                tListNewTopicPath += T("////factory5/d/ideafarm.home.101/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/newTopic/") ;
                tListNewTopicPath += T("////factory4/d/ideafarm.home.101/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/newTopic/") ;
                tListNewTopicPath += T("////factory3/d/ideafarm.home.101/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/newTopic/") ;
                TlIST( tListNewTopicPath ) ;

                patternC pat( tinP , etThread , tPattern , ifcIDtYPEpATTERN_FOREIGNwILDCARDsTRICT ) ;
                TN( tPattern , "" ) ; tPattern = T("newTopic")+T(bSandbox?".sandbox.*":".live.*") ;
            {
            stackC stNewTopicFileShort( tinP , etThread , TAG( TAGiDnULL ) , flSTACKc_DOnOTsERIALIZE | flSTACKc_SINKrEVERSE , ifcSTACKtYPE_PTR_strokeS , ifcIDgRABlAYER_7BASEmISC1 ) ;
        {
        TN( tTopic , "" ) ;

        /***************************************************************************************************/
        /***************************************************************************************************/
        /***************************************************************************************************/
        /****                                                                                           ****/
        /****  1:  EXTRACT TOPIC FROM YOUNGEST TOPIC FILE                                               ****/
        /****                                                                                           ****/
        /***************************************************************************************************/
        /***************************************************************************************************/
        /***************************************************************************************************/

        }
            }
                DEL( prPosts ) ;
                if( prPosts ) meP.pushSnipF( tinP , stBodyP , *prPosts ) ;

                etThread.strMakeF( tinP , prPosts , tSay , 0 , flSTRmAKE_PREFIXlENGTH ) ; ___( prPosts ) ;

                ) ;

                    "</script>\r\n"
                        "}\r\n"
                            "}\r\n"
                                "document.getElementById( \"subscriberidspeech\" ).focus() ;\r\n"
                            "{\r\n"
                            "else\r\n"
                            "}\r\n"
                                "document.getElementById( \"speech\" ).focus() ;\r\n"
                                "document.getElementById( \"subscriberidspeecherror\" ).innerHTML = \"\" ;\r\n"
                            "{\r\n"
                            "if( costId )\r\n"
                            "costId = strId.length ;\r\n"
                            "strId  = document.getElementById( \"subscriberidspeech\" ).value ;\r\n"
                        "{\r\n"
                        "function focusOnLoadF()\r\n"
                        "}\r\n"
                            "}\r\n"
                                "document.getElementById( \"subscriberidtopicerror\" ).innerHTML = \"Subscriber ID is blank.\" ;\r\n"
                                "document.getElementById( \"subscriberidtopic\" ).focus() ;\r\n"
                            "{\r\n"
                            "else\r\n"
                            "}\r\n"
                                "document.getElementById( \"subscriberidtopicerror\" ).innerHTML = \"\" ;\r\n"
                            "{\r\n"
                            "if( costId )\r\n"
                            "costId = strId.length ;\r\n"
                            "strId  = document.getElementById( \"subscriberidtopic\" ).value ;\r\n"
                        "{\r\n"
                        "function refocusIfTopicF()\r\n"
                        "}\r\n"
                            "}\r\n"
                                "document.getElementById( \"subscriberidspeecherror\" ).innerHTML = \"Subscriber ID is blank.\" ;\r\n"
                                "document.getElementById( \"subscriberidspeech\" ).focus() ;\r\n"
                            "{\r\n"
                            "else\r\n"
                            "}\r\n"
                                "document.getElementById( \"subscriberidspeecherror\" ).innerHTML = \"\" ;\r\n"
                            "{\r\n"
                            "if( costId )\r\n"
                            "costId = strId.length ;\r\n"
                            "strId  = document.getElementById( \"subscriberidspeech\" ).value ;\r\n"
                        "{\r\n"
                        "function refocusIfSpeechF()\r\n"
                        "}\r\n"
                            "lathKeyTopic = eventP.keyCode ;\r\n"
                        "{\r\n"
                        "function getKeyCodeTopicF( eventP )\r\n"
                        "}\r\n"
                            "lathKey = eventP.keyCode ;\r\n"
                        "{\r\n"
                        "function getKeyCodeF( eventP )\r\n"
                        "}\r\n"
                            "}\r\n"
                                "document.getElementById( \"sayremainingtopic\" ).innerHTML = 40 - costBoxTopic ;\r\n"
                                "costBoxTopic += deltaLength ;\r\n"
                                "if( lathKeyTopic == 8 ) deltaLength = - 1 ;\r\n"
                                "if( bWothTopic ) { bWothTopic = 0 ; deltaLength = 0 ; }\r\n"
                                "var deltaLength = 1 ;\r\n"
                            "{\r\n"
                            "if( lathKeyTopic != 46 && ( bValidNewChar || bValidBackspace ) )\r\n"   //IGNORES DELETE KEY (46) SINCE DON'T KNOW WHAT WAS DELETED
                            "var bValidNewChar   = costBoxTopic < 40 && lathKeyTopic != 8 ;\r\n"
                            "var bValidBackspace = costBoxTopic && lathKeyTopic == 8 ;\r\n"
                            "costBoxTopic = strBoxTopic.length ;\r\n"
                            "strBoxTopic  = document.getElementById( \"proposedtopic\" ).value ;\r\n"
                        "{\r\n"
                        "function sayLengthTopicF()\r\n"
                        "}\r\n"
                            "}\r\n"
                                "document.getElementById( \"sayremainingspeech\" ).innerHTML = 5000 - costBox ;\r\n"
                                "costBox += deltaLength ;\r\n"
                                "if( lathKey == 8 ) deltaLength = - 1 ;\r\n"
                                "if( bWoth ) { bWoth = 0 ; deltaLength = 0 ; }\r\n"
                                "var deltaLength = 1 ;\r\n"
                            "{\r\n"
                            "if( lathKey != 46 && ( bValidNewChar || bValidBackspace ) )\r\n"   //IGNORES DELETE KEY (46) SINCE DON'T KNOW WHAT WAS DELETED
                            "var bValidNewChar   = costBox < 5000 && lathKey != 8 ;\r\n"
                            "var bValidBackspace = costBox && lathKey == 8 ;\r\n"
                            "costBox = strBox.length ;\r\n"
                            "strBox = document.getElementById( \"speech\" ).value ;\r\n"
                        "{\r\n"
                        "function sayLengthSpeechF()\r\n"
                        "function onLoadDoF() { sayLengthSpeechF() ; sayLengthTopicF() ; focusOnLoadF() ; }\r\n"
                        "var bWothTopic   = 1 ;\r\n"
                        "var bWoth        = 1 ;\r\n"
                        "var lathKeyTopic = 0 ;\r\n"
                        "var lathKey      = 0 ;\r\n"
                        "var costBoxTopic = 0 ;\r\n"
                        "var costBox      = 0 ;\r\n"
                        "var strBoxTopic  = \"\" ;\r\n"
                        "var strBox       = \"\" ;\r\n"
                    "<script>\r\n"
                    
                TN( tSay , "" ) ; tSay = T(
                ZE( pbRefC* , prPosts ) ;
            {

            /***************************************************************************************************/
            /****                                                                                           ****/
            /****  DISPLAY SCRIPT                                                                           ****/
            /****                                                                                           ****/
            /***************************************************************************************************/

            }
                DEL( prPosts ) ;
                if( prPosts ) meP.pushSnipF( tinP , stBodyP , *prPosts ) ;

                etThread.strMakeF( tinP , prPosts , tSay , 0 , flSTRmAKE_PREFIXlENGTH ) ; ___( prPosts ) ;
                ZE( pbRefC* , prPosts ) ;

                ) ;

                    "<p>\r\n"
                    "<span id=\"subscriberidtopicerror\" style=\"color:red\"></span>\r\n"
                    "</form>\r\n"
                    "</table>\r\n"
                        "</tr>\r\n"
                            "</td>\r\n"
                                "<span id=\"sayremainingtopic\"></span>\r\n"
                                "Remaining:\r\n"
                            "<td valign=\"center\">\r\n"
                            "</td>\r\n"
                                "<input id=\"submit\" name=\"submit\" type=\"submit\" value=\"Propose\"/>\r\n"
                            "<td valign=\"center\">\r\n"
                            "</td>\r\n"
                                "<input type=\"text\" id=\"proposedtopic\" name=\"proposedtopic\" maxlength=\"40\" onfocus=\"/*refocusIfTopicF()*/\" onkeydown=\"/*refocusIfTopicF() ;*/ getKeyCodeTopicF( event ) ; sayLengthTopicF()\" value=\"")+tTopicGuide+T("\">\r\n"
                            "<td valign=\"center\">\r\n"
                            "</td>\r\n"
                                "<label for=\"proposedtopic\">Propose a topic:</label>\r\n"
                            "<td valign=\"center\">\r\n"
                        "<tr>\r\n"
                    "<table>\r\n"
                    "<input id=\"secret\" name=\"secret\" type=\"hidden\" value=\"")+tValueSecret+T("\"/>\r\n"
                    "<input id=\"subscriberid\" name=\"subscriberid\" type=\"hidden\" value=\"")+tValueSubscriberId+T("\"/>\r\n"
                    "ideafarm.com/talk\" id=\"proposedtopicform\" method=\"post\" name=\"proposedtopicform\">\r\n"

                tSay += T(
                if( bSandbox ) tSay += T("factory1." ) ;
                TN( tSay , "<p>\r\n<form action=\"https://" ) ;
            {

            /***************************************************************************************************/
            /****                                                                                           ****/
            /****  DISPLAY FORM TO PROPOSE TOPIC                                                            ****/
            /****                                                                                           ****/
            /***************************************************************************************************/

            //etThread.traceF( tinP , T(bTopicIsFresh?"set TOPIC IS FRESH":"SET TOPIC IS *** NOT *** FRESH") ) ;

            }
                }
                    while( ~hFind && !POOP && !bTopicIsFresh ) ;
                    }
                        DEL( pInfo ) ;
                        }
                            if( !timeE2 && timeE1 < TICK ) bTopicIsFresh = 1 ;

                            //etThread.traceF( tinP , T("age: ")+TT(timeE1,timeE2) ) ;
                            etThread.osTimeSubtractF( tinP , timeE1 , timeE2 , pInfo->timeCreated1 , pInfo->timeCreated2 ) ;
                            etThread.osTimeNowF( tinP , timeE1 , timeE2 ) ;
                            ZE( sCountT , timeE2 ) ;
                            ZE( countT , timeE1 ) ;
                        {
                        else
                        }
                            break ;
                            DEL( pInfo ) ;
                        {
                        if( !pInfo || !pInfo->psttIfoName )

                        etThread.diskFindFileOrDirF( tinP , pInfo , hFind , psttc1 , &pat ) ;
                        ZE( infoFileS* , pInfo ) ;
                    {
                    do
                    handleC hFind( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILEfIND ) ;

                    if( bTopicIsFresh ) break ;
                {
                FORsTRINGSiN1( (strokeS*)tListSaidPath )
 
                tListSaidPath += T("////factory5/d/ideafarm.home.101/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/said/") ;
                tListSaidPath += T("////factory4/d/ideafarm.home.101/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/said/") ;
                tListSaidPath += T("////factory3/d/ideafarm.home.101/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/said/") ;
                TlIST( tListSaidPath ) ;

                patternC pat( tinP , etThread , tPattern , ifcIDtYPEpATTERN_FOREIGNwILDCARDsTRICT ) ;
                TN( tPattern , "" ) ; tPattern = T("said.table")+T(bSandbox?".sandbox.*":".live.*") ;
            {

            /***************************************************************************************************/
            /****                                                                                           ****/
            /****  SET bTopicIsFresh BY INSPECTING said FILES                                               ****/
            /****                                                                                           ****/
            /***************************************************************************************************/

            }
                DEL( prPosts ) ;
                if( prPosts ) meP.pushSnipF( tinP , stBodyP , *prPosts ) ;

                etThread.strMakeF( tinP , prPosts , tSay , 0 , flSTRmAKE_PREFIXlENGTH ) ; ___( prPosts ) ;

                ) ;

                    "<span id=\"subscriberidspeecherror\" style=\"color:red\"></span>\r\n"
                    "</form>\r\n"
                    "</table>\r\n"
                        "</tr>\r\n"
                            "</td>\r\n"
                                "<span id=\"sayremainingspeech\"></span>\r\n"
                                "Remaining:\r\n"
                            "<td valign=\"center\">\r\n"
                            "</td>\r\n"
                                "<input id=\"submit\" name=\"submit\" type=\"submit\" value=\"Speak!\"/>\r\n"
                            "<td valign=\"center\">\r\n"
                            "</td>\r\n"
                                "<textarea id=\"speech\" name=\"speech\" rows=\"4\" cols=\"100\" maxlength=\"5000\" onfocus=\"/*refocusIfSpeechF()*/\" onkeydown=\"/*refocusIfSpeechF() ;*/ getKeyCodeF( event ) ; sayLengthSpeechF()\">Be respectful and lawful.  What is said cannot be unsaid.</textarea>\r\n"
                            "<td valign=\"center\">\r\n"
                            "</td>\r\n"
                                "<label for=\"speech\">What you say will appear immediately:</label>\r\n"
                            "<td valign=\"center\">\r\n"
                        "<tr>\r\n"
                    "<table>\r\n"
                    "<input id=\"secret\" name=\"secret\" type=\"hidden\" value=\"")+tValueSecret+T("\"/>\r\n"
                    "<input id=\"subscriberid\" name=\"subscriberid\" type=\"hidden\" value=\"")+tValueSubscriberId+T("\"/>\r\n"
                    "ideafarm.com/talk\" id=\"newpost\" method=\"post\" name=\"mypost\">\r\n"
                    
                tSay += T(
                if( bSandbox ) tSay += T("factory1." ) ;
                TN( tSay , "<form action=\"https://" ) ;
                ZE( pbRefC* , prPosts ) ;
            {

            /***************************************************************************************************/
            /****                                                                                           ****/
            /****  DISPLAY FORM TO POST SPEECH                                                              ****/
            /****                                                                                           ****/
            /***************************************************************************************************/
        {
        else
        }
            }
                DEL( prPosts ) ;
                if( prPosts ) meP.pushSnipF( tinP , stBodyP , *prPosts ) ;

                etThread.strMakeF( tinP , prPosts , tSay , 0 , flSTRmAKE_PREFIXlENGTH ) ; ___( prPosts ) ;

                ) ;

                    "</script>\r\n"
                        "}\r\n"
                            "else                                   { inPassword.type = \"password\" ; }\r\n"
                            "if( inPassword.type === \"password\" ) { inPassword.type = \"text\"     ; }\r\n"
                            "var inPassword = document.getElementById( \"secret\" ) ;\r\n"
                        "{\r\n"
                        "function togglePasswordDisplayF()\r\n"
                        "}\r\n"
                            "lathKeyAnon = eventP.keyCode ;\r\n"
                        "{\r\n"
                        "function getKeyCodeAnonF( eventP )\r\n"
                        "}\r\n"
                            "}\r\n"
                                "document.getElementById( \"sayremaininganon\" ).innerHTML = 100 - costBoxAnon ;\r\n"
                                "costBoxAnon += deltaLength ;\r\n"
                                "if( lathKeyAnon == 8 ) deltaLength = - 1 ;\r\n"
                                "if( bWothAnon ) { bWothAnon = 0 ; deltaLength = 0 ; }\r\n"
                                "var deltaLength = 1 ;\r\n"
                            "{\r\n"
                            "if( lathKeyAnon != 46 && ( bValidNewChar || bValidBackspace ) )\r\n"   //IGNORES DELETE KEY (46) SINCE DON'T KNOW WHAT WAS DELETED
                            "var bValidNewChar   = costBoxAnon < 100 && lathKeyAnon != 8 ;\r\n"
                            "var bValidBackspace = costBoxAnon && lathKeyAnon == 8 ;\r\n"
                            "costBoxAnon = strBoxAnon.length ;\r\n"
                            "strBoxAnon  = document.getElementById( \"speechanon\" ).value ;\r\n"
                        "{\r\n"
                        "function sayLengthAnonF()\r\n"
                        "function onLoadDoF() { sayLengthAnonF() ; }\r\n"
                        "var bWothAnon    = 1 ;\r\n"
                        "var lathKeyAnon  = 0 ;\r\n"
                        "var costBoxAnon  = 0 ;\r\n"
                        "var strBoxAnon   = \"\" ;\r\n"
                    "<script>\r\n"
                    
                TN( tSay , "" ) ; tSay = T(
                ZE( pbRefC* , prPosts ) ;
            {

            /***************************************************************************************************/
            /****                                                                                           ****/
            /****  DISPLAY SCRIPT                                                                           ****/
            /****                                                                                           ****/
            /***************************************************************************************************/

            }
                DEL( prPosts ) ;
                if( prPosts ) meP.pushSnipF( tinP , stBodyP , *prPosts ) ;

                etThread.strMakeF( tinP , prPosts , tSay , 0 , flSTRmAKE_PREFIXlENGTH ) ; ___( prPosts ) ;

                ) ;

                    "</form>\r\n"
                    "</table>\r\n"
                        "</tr>\r\n"
                            "</td>\r\n"
                                "<input id=\"submit\" name=\"submit\" type=\"submit\" value=\"Log In!\"/>\r\n"
                            "<td valign=\"center\">\r\n"
                            "</td>\r\n"
                                "<br><input type=\"checkbox\" onclick=\"togglePasswordDisplayF()\">Show Secret\r\n"
                                "<input id=\"secret\" name=\"secret\" type=\"password\" value=\"\"/>\r\n"
                                "<label for=\"secret\">Secret:</label><br>\r\n"
                            "<td valign=\"center\">\r\n"
                            "</td>\r\n"
                                "<input id=\"subscriberid\" name=\"subscriberid\" type=\"text\" value=\"\"/>\r\n"
                                "<label for=\"subscriberid\">Subscriber ID:</label><br>\r\n"
                            "<td valign=\"center\">\r\n"
                            "</td>\r\n"
                                "If you are a subscriber, please log in:\r\n"
                            "<td valign=\"center\">\r\n"
                        "<tr>\r\n"
                    "<table>\r\n"
                    "ideafarm.com/talk\" id=\"login\" method=\"get\" name=\"login\">\r\n"
                    
                tSay += T(
                if( bSandbox ) tSay += T("factory1." ) ;
                TN( tSay , "<form action=\"https://" ) ;
                ZE( pbRefC* , prPosts ) ;
            {

            /***************************************************************************************************/
            /****                                                                                           ****/
            /****  DISPLAY FORM TO LOG IN                                                                   ****/
            /****                                                                                           ****/
            /***************************************************************************************************/

            }
                }
                    THREADmODE1rESTORE

                    }
                        etThread.delF( tinP , psttFile ) ;
                        }
                            }
                                etThread.delF( tinP , psttShort ) ;
                                etThread.delF( tinP , psttnu ) ;
                                tShort = T(psttShort) ;
                                etThread.strBisectF( tinP , psttnu , psttShort , psttFile , T("/") , - 1 , flSTRbISECT_APPENDdELIMITER ) ; ___( psttnu ) ; ___( psttShort ) ;
                                ZE( strokeS* , psttShort ) ;
                                ZE( strokeS* , psttnu ) ;
                            {
                            if( !tShort.csF( tinP ) )

                            //etThread.traceF( tinP , T("wrote   ")+T(psttFile) ) ;
                        {
                        FORsTRINGSiN1( psttFile )
                        etThread.boxPutUniqueF( tinP , psttFile , tListSaidAnonFileLong , WS( said ) ) ; ___( psttFile ) ;
                        ZE( strokeS* , psttFile ) ;

                        tListSaidAnonFileLong += T("////factory5/d/ideafarm.home.101/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/said.anon/said.anon.table")+T(bSandbox?".sandbox.@1@.":".live.@1@.")+T(nnPeerP)+tDot+TF4(((countT*)&subscriberIdTry)[0],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x3e)+tDot+TF4(((countT*)&subscriberIdTry)[1],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x3e)+tDot+tHost ;
                        tListSaidAnonFileLong += T("////factory4/d/ideafarm.home.101/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/said.anon/said.anon.table")+T(bSandbox?".sandbox.@1@.":".live.@1@.")+T(nnPeerP)+tDot+TF4(((countT*)&subscriberIdTry)[0],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x3e)+tDot+TF4(((countT*)&subscriberIdTry)[1],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x3e)+tDot+tHost ;
                        tListSaidAnonFileLong += T("////factory3/d/ideafarm.home.101/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/said.anon/said.anon.table")+T(bSandbox?".sandbox.@1@.":".live.@1@.")+T(nnPeerP)+tDot+TF4(((countT*)&subscriberIdTry)[0],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x3e)+tDot+TF4(((countT*)&subscriberIdTry)[1],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x3e)+tDot+tHost ;
                        TlIST( tListSaidAnonFileLong ) ;
                    {
                    TN( tShort , "" ) ;

                    }
                        if( !tHost.csF( tinP ) ) tHost = T("factories") ;
                        etThread.delF( tinP , psttHost ) ;
                        else            tHost = T(psttHost) ;
                        if( !psttHost ) etThread.traceF( tinP , T("error: reverse DNS lookup on myself failed 493") ) ;
                        etThread.sockPsttHostF( tinP , psttHost ) ; ___( psttHost ) ;
                        ZE( strokeS* , psttHost ) ;
                    {
                    TN( tHost , "" ) ;

                    THREADmODE1oN( flTHREADmODE1_ALLOWsTOPwHILEgRABBING )

                    said << nnPeerP ;
                    said << (strokeS*)tSpeechClean ;
                    said << (strokeS*)tValueSpeechAnon ;
                    said << (strokeS*)tTimeForeign ;
                    said << (countT)timeN2 ;
                    said << timeN1 ;
                    said << (countT)1 ;             // IDfORMAT
                    said << finger ;
                    soulC said( tinP , TAG( TAGiDnULL ) ) ;

                    putNegAM( *(countT*)&finger , FINGERnEG_WOtABLEsAIDaNON ) ;
                    ZE( countT , finger ) ;

                    textC tTimeForeign( ifcIDtEXTgEN_TIMEnOWfOREIGN , tinP , TAG( TAGiDnULL ) ) ;

                    etThread.osTimeNowF( tinP , timeN1 , timeN2 ) ;
                    ZE( sCountT , timeN2 ) ;
                    ZE( countT , timeN1 ) ;

                    }
                        etThread.delF( tinP , psttClean ) ;
                        tSpeechClean = T(psttClean) ;

                        etThread.delF( tinP , psttRaw ) ;
                        etThread.strReplaceAnyF( tinP , psttClean , psttRaw , T("<>") , tDot ) ; ___( psttClean ) ;
                        ZE( strokeS* , psttClean ) ;

                        etThread.strMakeF( tinP , psttRaw , tValueSpeechAnon ) ; ___( psttRaw ) ;
                        ZE( strokeS* , psttRaw ) ;
                    {
                    TN( tSpeechClean , "" ) ;                //SANITIZE THE SPEECH TO SUPPRESS ALL HTML

                    }
                        DEL( prPosts ) ;
                        if( prPosts ) meP.pushSnipF( tinP , stBodyP , *prPosts ) ;

                        etThread.strMakeF( tinP , prPosts , tSay , 0 , flSTRmAKE_PREFIXlENGTH ) ; ___( prPosts ) ;
                        ZE( pbRefC* , prPosts ) ;

                        ) ;

                            "<p>\r\n"
                            "</span>\r\n"
                            "Your anonymous post will appear as soon as a subscriber certifies that it contains only speech that is fully protected by the First Amendment and is not disruptive (off topic).\r\n"
                            "<span style=\"color:cyan\">\r\n"
                            "<p>\r\n"

                        TN( tSay ,
                    {
                {
                else
                }
                    DEL( prPosts ) ;
                    if( prPosts ) meP.pushSnipF( tinP , stBodyP , *prPosts ) ;

                    etThread.strMakeF( tinP , prPosts , tSay , 0 , flSTRmAKE_PREFIXlENGTH ) ; ___( prPosts ) ;
                    ZE( pbRefC* , prPosts ) ;

                    ) ;

                        "<p>\r\n"
                        "</span>\r\n"
                        "Try again after you see that your previous post has been certified.\r\n"
                        "Your IP address already has an anonymous post awaiting certification.\r\n"
                        "<span style=\"color:red\">\r\n"
                        "<p>\r\n"

                    TN( tSay ,
                {
                if( bBlocked2 )

                }
                    }
                        while( ~hFind && !POOP ) ;
                        }
                            DEL( pInfo ) ;
                            else bBlocked2 = 1 ;
                            }
                                break ;
                                DEL( pInfo ) ;
                            {
                            if( !pInfo || !pInfo->psttIfoName )

                            etThread.diskFindFileOrDirF( tinP , pInfo , hFind , psttc1 , &pat ) ;
                            ZE( infoFileS* , pInfo ) ;
                        {
                        do
                        handleC hFind( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILEfIND ) ;

                        if( bBlocked2 ) break ;
                    {
                    FORsTRINGSiN1( (strokeS*)tListSaidAnonPath )
 
                    tListSaidAnonPath += T("////factory5/d/ideafarm.home.101/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/said.anon/" ) ;
                    tListSaidAnonPath += T("////factory4/d/ideafarm.home.101/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/said.anon/" ) ;
                    tListSaidAnonPath += T("////factory3/d/ideafarm.home.101/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/said.anon/" ) ;
                    TlIST( tListSaidAnonPath ) ;

                    patternC pat( tinP , etThread , tPattern , ifcIDtYPEpATTERN_FOREIGNwILDCARDsTRICT ) ;
                    TN( tPattern , "" ) ; tPattern = T("said.anon.table")+T(bSandbox?".sandbox.":".live.")+T(nnPeerP)+T(".*") ;
                {
                ZE( boolT , bBlocked2 ) ;
            {
            if( tValueSpeechAnon.csF( tinP ) )

            /***************************************************************************************************/
            /****                                                                                           ****/
            /****  FILE ANONYMOUS SPEECH                                                                    ****/
            /****                                                                                           ****/
            /***************************************************************************************************/

            }
                DEL( prPosts ) ;
                if( prPosts ) meP.pushSnipF( tinP , stBodyP , *prPosts ) ;

                etThread.strMakeF( tinP , prPosts , tSay , 0 , flSTRmAKE_PREFIXlENGTH ) ; ___( prPosts ) ;

                ) ;

                    "</form>\r\n"
                    "</table>\r\n"
                        "</tr>\r\n"
                            "</td>\r\n"
                                "<span id=\"sayremaininganon\"></span>\r\n"
                                "Remaining:\r\n"
                            "<td valign=\"center\">\r\n"
                            "</td>\r\n"
                                "<input id=\"submit\" name=\"submit\" type=\"submit\" value=\"Speak!\"/>\r\n"
                            "<td valign=\"center\">\r\n"
                            "</td>\r\n"
                                "<textarea id=\"speechanon\" name=\"speechanon\" rows=\"1\" cols=\"100\" maxlength=\"100\" onkeydown=\"getKeyCodeAnonF( event ) ; sayLengthAnonF()\">Be respectful and lawful.  What is said cannot be unsaid.</textarea>\r\n"
                            "<td valign=\"center\">\r\n"
                            "</td>\r\n"
                                "<label for=\"speechanon\">Anyone can speak anonymously:</label>\r\n"
                            "<td valign=\"center\">\r\n"
                        "<tr>\r\n"
                    "<table>\r\n"
                    "ideafarm.com/talk\" id=\"newpost\" method=\"post\" name=\"mypost\">\r\n"
                    
                tSay += T(
                if( bSandbox ) tSay += T("factory1." ) ;
                TN( tSay , "<p><form action=\"https://" ) ;
                ZE( pbRefC* , prPosts ) ;
            {

            /***************************************************************************************************/
            /****                                                                                           ****/
            /****  DISPLAY FORM TO SPEAK ANONYMOUSLY                                                        ****/
            /****                                                                                           ****/
            /***************************************************************************************************/
        {
        if( !bSecretIsOK )

        }
            }
                }
                    THREADmODE1rESTORE

                    etThread.boxPutF( tinP , T("smtp.mailgun.org[admin]/b42/smtp/")+tHost+T("@ideafarm.com/")+tToUse+T("//wo@ideafarm.com/ideafarm.factory.reports@gmail.com") , tBody ) ;

                    ;
                        : tLoginPaypalPayerEmail
                        ? tEmailSandboxMe
                    textC& tToUse = bSandbox
                    TN( tEmailSandboxMe , "ideafarmcity@gmail.com" ) ;

                    tBody += T("time:  ")+tTimeForeign+T("\r\n") ;
                    tBody += T("\r\nreference:  ")+tShort+T("\r\n") ;

                    tBody += T("your proposed topic:\r\n\r\n")+tValueProposedTopic+T("\r\n\r\n") ;

                    ) ;

                        "\r\n"
                        "\r\n"
                        "Subject: Wo'O's Table:  You just proposed this topic on Wo'O's Table Talk.\r\n"

                    TN( tBody ,

                    }
                        etThread.delF( tinP , psttFile ) ;
                        }
                            }
                                etThread.delF( tinP , psttShort ) ;
                                etThread.delF( tinP , psttnu ) ;
                                tShort = T(psttShort) ;
                                etThread.strBisectF( tinP , psttnu , psttShort , psttFile , T("/") , - 1 , flSTRbISECT_APPENDdELIMITER ) ; ___( psttnu ) ; ___( psttShort ) ;
                                ZE( strokeS* , psttShort ) ;
                                ZE( strokeS* , psttnu ) ;
                            {
                            if( !tShort.csF( tinP ) )

                            //etThread.traceF( tinP , T("wrote   ")+T(psttFile) ) ;
                        {
                        FORsTRINGSiN1( psttFile )
                        etThread.boxPutUniqueF( tinP , psttFile , tListPTopicFileLong , WS( said ) ) ; ___( psttFile ) ;
                        ZE( strokeS* , psttFile ) ;

                        tListPTopicFileLong += T("////factory5/d/ideafarm.home.101/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/ptopic/ptopic.table")+T(bSandbox?".sandbox.@1@.":".live.@1@.")+T(nnPeerP)+tDot+TF4(((countT*)&subscriberIdTry)[0],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x3e)+tDot+TF4(((countT*)&subscriberIdTry)[1],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x3e)+tDot+tHost ;
                        tListPTopicFileLong += T("////factory4/d/ideafarm.home.101/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/ptopic/ptopic.table")+T(bSandbox?".sandbox.@1@.":".live.@1@.")+T(nnPeerP)+tDot+TF4(((countT*)&subscriberIdTry)[0],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x3e)+tDot+TF4(((countT*)&subscriberIdTry)[1],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x3e)+tDot+tHost ;
                        tListPTopicFileLong += T("////factory3/d/ideafarm.home.101/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/ptopic/ptopic.table")+T(bSandbox?".sandbox.@1@.":".live.@1@.")+T(nnPeerP)+tDot+TF4(((countT*)&subscriberIdTry)[0],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x3e)+tDot+TF4(((countT*)&subscriberIdTry)[1],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x3e)+tDot+tHost ;
                        TlIST( tListPTopicFileLong ) ;
                    {
                    TN( tShort , "" ) ;

                    }
                        if( !tHost.csF( tinP ) ) tHost = T("factories") ;
                        etThread.delF( tinP , psttHost ) ;
                        else            tHost = T(psttHost) ;
                        if( !psttHost ) etThread.traceF( tinP , T("error: reverse DNS lookup on myself failed 691") ) ;
                        etThread.sockPsttHostF( tinP , psttHost ) ; ___( psttHost ) ;
                        ZE( strokeS* , psttHost ) ;
                    {
                    TN( tHost , "" ) ;

                    THREADmODE1oN( flTHREADmODE1_ALLOWsTOPwHILEgRABBING )

                    said << (strokeS*)tLoginAddressStatus ;
                    said << (strokeS*)tLoginAddressZip ;
                    said << (strokeS*)tLoginAddressCountry ;
                    said << (strokeS*)tLoginAddressCountryCode ;
                    said << (strokeS*)tLoginAddressState ;
                    said << (strokeS*)tLoginAddressCity ;
                    said << (strokeS*)tLoginAddressStreet ;
                    said << nnPeerP ;                                   // FORMAT 2
                    said << (strokeS*)tLoginNnPeer ;
                    said << (strokeS*)tLoginZipUse ;
                    said << (strokeS*)tLoginAddressName ;
                    said << (strokeS*)tLoginLastName ;
                    said << (strokeS*)tLoginFirstName ;
                    said << (strokeS*)tLoginPaypalPayerEmail ;
                    said << (strokeS*)tLoginIdSubscriber0 ;
                    said << (strokeS*)tProposedTopicClean ;
                    said << (strokeS*)tValueProposedTopic ;
                    said << (strokeS*)tFlags ;                          // FORMAT 4
                    said << (strokeS*)tTimeForeign ;
                    said << (countT)timeN2 ;
                    said << timeN1 ;
                    said << (countT)4 ;             // IDfORMAT
                    said << finger ;
                    soulC said( tinP , TAG( TAGiDnULL ) ) ;
                    TN( tFlags , "" ) ;

                    putNegAM( *(countT*)&finger , FINGERnEG_WOtABLEsAIDtOPIC ) ;
                    ZE( countT , finger ) ;

                    textC tTimeForeign( ifcIDtEXTgEN_TIMEnOWfOREIGN , tinP , TAG( TAGiDnULL ) ) ;

                    etThread.osTimeNowF( tinP , timeN1 , timeN2 ) ;
                    ZE( sCountT , timeN2 ) ;
                    ZE( countT , timeN1 ) ;

                    }
                        etThread.delF( tinP , psttClean ) ;
                        tProposedTopicClean = T(psttClean) ;

                        etThread.delF( tinP , psttRaw ) ;
                        etThread.strReplaceAnyF( tinP , psttClean , psttRaw , T("<>") , tDot ) ; ___( psttClean ) ;
                        ZE( strokeS* , psttClean ) ;

                        etThread.strMakeF( tinP , psttRaw , tValueProposedTopic ) ; ___( psttRaw ) ;
                        ZE( strokeS* , psttRaw ) ;
                    {
                    TN( tProposedTopicClean , "" ) ;                //SANITIZE THE SPEECH TO SUPPRESS ALL HTML
                {
                else if( tValueProposedTopic.csF( tinP ) && etThread.strCompareF( tinP , tTopicGuide , tValueProposedTopic ) )
                }
                    THREADmODE1rESTORE

                    etThread.boxPutF( tinP , T("smtp.mailgun.org[admin]/b42/smtp/")+tHost+T("@ideafarm.com/")+tToUse+T("//wo@ideafarm.com/ideafarm.factory.reports@gmail.com") , tBody ) ;

                    ;
                        : tLoginPaypalPayerEmail
                        ? tEmailSandboxMe
                    textC& tToUse = bSandbox
                    TN( tEmailSandboxMe , "ideafarmcity@gmail.com" ) ;

                    tBody += T("time:  ")+tTimeForeign+T("\r\n") ;
                    tBody += T("\r\nreference:  ")+tShort+T("\r\n") ;

                    tBody += T("your post:\r\n\r\n")+tValueSpeech+T("\r\n\r\n") ;

                    ) ;

                        "\r\n"
                        "\r\n"
                        "Subject: Wo'O's Table:  You just posted this on Wo'O's Table Talk.\r\n"

                    TN( tBody ,

                    }
                        }
                            }
                                etThread.delF( tinP , psttFile ) ;
                                etThread.delF( tinP , psttShort ) ;
                                etThread.delF( tinP , psttnu ) ;
                                tShort = T(psttShort) ;
                                etThread.strBisectF( tinP , psttnu , psttShort , psttc1 , T("/") , - 1 , flSTRbISECT_APPENDdELIMITER ) ; ___( psttnu ) ; ___( psttShort ) ;
                                ZE( strokeS* , psttShort ) ;
                                ZE( strokeS* , psttnu ) ;
                            {
                            if( !tShort.csF( tinP ) )

                            //etThread.traceF( tinP , T("wrote   ")+T(psttFile) ) ;
                        {
                        FORsTRINGSiN1( psttFile )
                        etThread.boxPutUniqueF( tinP , psttFile , tListSaidFileLong , WS( said ) ) ; ___( psttFile ) ;
                        ZE( strokeS* , psttFile ) ;

                        tListSaidFileLong += T("////factory5/d/ideafarm.home.101/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/said/said.table")+T(bSandbox?".sandbox.@1@.":".live.@1@.")+T(nnPeerP)+tDot+TF4(((countT*)&subscriberIdTry)[0],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x3e)+tDot+TF4(((countT*)&subscriberIdTry)[1],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x3e)+tDot+tHost ;
                        tListSaidFileLong += T("////factory4/d/ideafarm.home.101/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/said/said.table")+T(bSandbox?".sandbox.@1@.":".live.@1@.")+T(nnPeerP)+tDot+TF4(((countT*)&subscriberIdTry)[0],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x3e)+tDot+TF4(((countT*)&subscriberIdTry)[1],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x3e)+tDot+tHost ;
                        tListSaidFileLong += T("////factory3/d/ideafarm.home.101/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/said/said.table")+T(bSandbox?".sandbox.@1@.":".live.@1@.")+T(nnPeerP)+tDot+TF4(((countT*)&subscriberIdTry)[0],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x3e)+tDot+TF4(((countT*)&subscriberIdTry)[1],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x3e)+tDot+tHost ;
                        TlIST( tListSaidFileLong ) ;
                    {
                    TN( tShort , "" ) ;

                    }
                        if( !tHost.csF( tinP ) ) tHost = T("factories") ;
                        etThread.delF( tinP , psttHost ) ;
                        else            tHost = T(psttHost) ;
                        if( !psttHost ) etThread.traceF( tinP , T("error: reverse DNS lookup on myself failed 792") ) ;
                        etThread.sockPsttHostF( tinP , psttHost ) ; ___( psttHost ) ;
                        ZE( strokeS* , psttHost ) ;
                    {
                    TN( tHost , "" ) ;

                    THREADmODE1oN( flTHREADmODE1_ALLOWsTOPwHILEgRABBING )

                    said << (strokeS*)tLoginAddressStatus ;
                    said << (strokeS*)tLoginAddressZip ;
                    said << (strokeS*)tLoginAddressCountry ;
                    said << (strokeS*)tLoginAddressCountryCode ;
                    said << (strokeS*)tLoginAddressState ;
                    said << (strokeS*)tLoginAddressCity ;
                    said << (strokeS*)tLoginAddressStreet ;
                    said << nnPeerP ;                                   // FORMAT 2
                    said << (strokeS*)tLoginNnPeer ;
                    said << (strokeS*)tLoginZipUse ;
                    said << (strokeS*)tLoginAddressName ;
                    said << (strokeS*)tLoginLastName ;
                    said << (strokeS*)tLoginFirstName ;
                    said << (strokeS*)tLoginPaypalPayerEmail ;
                    said << (strokeS*)tLoginIdSubscriber0 ;
                    said << (strokeS*)tSpeechClean ;
                    said << (strokeS*)tValueSpeech ;
                    said << (strokeS*)tFlags ;                          // FORMAT 4
                    said << (strokeS*)tTimeForeign ;
                    said << (countT)timeN2 ;
                    said << timeN1 ;
                    said << (countT)4 ;             // IDfORMAT
                    said << finger ;
                    soulC said( tinP , etThread , TAG( TAGiDnULL ) ) ;
                    TN( tFlags , "" ) ;

                    putNegAM( *(countT*)&finger , FINGERnEG_WOtABLEsAID ) ;
                    ZE( countT , finger ) ;

                    textC tTimeForeign( ifcIDtEXTgEN_TIMEnOWfOREIGN , tinP , TAG( TAGiDnULL ) ) ;

                    etThread.osTimeNowF( tinP , timeN1 , timeN2 ) ;
                    ZE( sCountT , timeN2 ) ;
                    ZE( countT , timeN1 ) ;

                    }
                        etThread.delF( tinP , psttClean ) ;
                        tSpeechClean = T(psttClean) ;

                        etThread.delF( tinP , psttRaw ) ;
                        etThread.strReplaceAnyF( tinP , psttClean , psttRaw , T("<>") , tDot ) ; ___( psttClean ) ;
                        ZE( strokeS* , psttClean ) ;

                        etThread.strMakeF( tinP , psttRaw , tValueSpeech ) ; ___( psttRaw ) ;
                        ZE( strokeS* , psttRaw ) ;
                    {
                    TN( tSpeechClean , "" ) ;                //SANITIZE THE SPEECH TO SUPPRESS ALL HTML
                {
                else if( tValueSpeech.csF( tinP ) )
                }
                    etThread.delF( tinP , psttFile ) ;
                    //}
                    //    etThread.traceF( tinP , T("wrote   ")+T(psttFile) ) ;
                    //{
                    //FORsTRINGSiN1( psttFile )
                    etThread.boxPutUniqueF( tinP , psttFile , tListBlockedFileLong , tBlocked , tBlocked.csF( tinP ) ) ; ___( psttFile ) ;
                    ZE( strokeS* , psttFile ) ;
                    TN( tBlocked , "blocked" ) ;

                    tListBlockedFileLong += T("////factory5/d/ideafarm.home.101/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/blocked.ip/blocked.ip.@1@.")+T(nnPeerP)+tDot+TF4(((countT*)&subscriberIdTry)[0],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x3e)+tDot+TF4(((countT*)&subscriberIdTry)[1],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x3e) ;
                    tListBlockedFileLong += T("////factory4/d/ideafarm.home.101/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/blocked.ip/blocked.ip.@1@.")+T(nnPeerP)+tDot+TF4(((countT*)&subscriberIdTry)[0],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x3e)+tDot+TF4(((countT*)&subscriberIdTry)[1],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x3e) ;
                    tListBlockedFileLong += T("////factory3/d/ideafarm.home.101/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/blocked.ip/blocked.ip.@1@.")+T(nnPeerP)+tDot+TF4(((countT*)&subscriberIdTry)[0],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x3e)+tDot+TF4(((countT*)&subscriberIdTry)[1],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x3e) ;
                    TlIST( tListBlockedFileLong ) ;

                    DEL( prPosts ) ;
                    if( prPosts ) meP.pushSnipF( tinP , stBodyP , *prPosts ) ;

                    etThread.traceF( tinP , T("set error message: secret is wrong") ) ;
                    etThread.strMakeF( tinP , prPosts , T("<span style=\"color:red\">The secret \"")+tValueSecret+T("\" is wrong.  Your IP address is now blocked for a TICK (about 6 foreign minutes).</span>") , 0 , flSTRmAKE_PREFIXlENGTH ) ; ___( prPosts ) ;
                    ZE( pbRefC* , prPosts ) ;
                {
                if( !bSecretIsOK )
            {
            if( subscriberIdTry )
        {

        /***************************************************************************************************/
        /***************************************************************************************************/
        /***************************************************************************************************/
        /****                                                                                           ****/
        /****  3:  FILE SPEECH OR PROPOSED TOPIC                                                        ****/
        /****                                                                                           ****/
        /***************************************************************************************************/
        /***************************************************************************************************/
        /***************************************************************************************************/

        /***************************************************************************************************/
        /***************************************************************************************************/
        /***************************************************************************************************/
        /****                                                                                           ****/
        /****                                                                                           ****/
        /****                                                                                           ****/
        /***************************************************************************************************/
        /***************************************************************************************************/
        /***************************************************************************************************/

        }
            DEL( prPosts ) ;
            if( prPosts ) meP.pushSnipF( tinP , stBodyP , *prPosts ) ;

            etThread.strMakeF( tinP , prPosts , tSay , 0 , flSTRmAKE_PREFIXlENGTH ) ; ___( prPosts ) ;
            ZE( pbRefC* , prPosts ) ;

            ) ;

                "<p>\r\n"
                "</details>\r\n"
                    "<hr>\r\n"
                    "<p>\r\n"
                    "(Your posting is excessive if the frequency of your posts is turning the \"conversation\" into a monologue or is impeding others from participating.)\r\n"
                    "But posting off-topic is disruptive, as is excessive posting.\r\n"
                    "(Viewpoints and the words chosen will never be deemed \"disruptive\" per se.)\r\n"
                    "You may express any viewpoint, and you may use any words to express that viewpoint.\r\n"
                    "<p>\r\n"
                    "Do not post at all unless you will remain here to participate in any ensuing discussion.\r\n"
                    "(A topic is active if the \"Topic:\" line does not indicate \"Open!\".)\r\n"
                    "If a topic is being actively discussed, do not post off topic.\r\n"
                    "This is a forum for respectful conversation.\r\n"
                    "<p>\r\n"
                    "This is a permanent speech record that will not be altered except on court order.\r\n"
                    "What you say cannot be unsaid.\r\n"
                    "<em>Penal Code 403: \"Every person who... willfully disturbs or breaks up any assembly or meeting... is guilty of a misdemeanor.\"</em>\r\n"
                    "However, disruptive behavior will be prosecuted.\r\n"
                    "You may post any speech that is protected by the First Amendment, including hate speech, commercial solicitation, and nondisruptive heckling.\r\n"
                    "By posting here, you agree to California (Santa Clara County) jurisdiction.\r\n"
                    "<p>\r\n"
                    "<hr>\r\n"
                    "<p>\r\n"
                    "</summary>\r\n"
                        "Click this line before posting.\r\n"
                    "<summary>\r\n"
                "<details>\r\n"
                "<p>\r\n"

            TN( tSay ,
        {

        }
            DEL( prPosts ) ;
            if( prPosts ) meP.pushSnipF( tinP , stBodyP , *prPosts ) ;

            etThread.strMakeF( tinP , prPosts , tSay , 0 , flSTRmAKE_PREFIXlENGTH ) ; ___( prPosts ) ;
            ZE( pbRefC* , prPosts ) ;

            ) ;

                "<p>\r\n"
                "</details>\r\n"
                    "<hr>\r\n"
                    "<p>\r\n"
                    "<a href=\"https://ideafarm.com/\" target=\"_blank\" rel=\"noopener\">Click this line to subscribe now (on the IDEAFARM.COM home page).</a>\r\n"
                    "<p>\r\n"
                    "</ul>\r\n"
                    "<li>Lock in the low introductory subscription price by subscribing today!\r\n"
                    "<li>Make money!\r\n"
                    "<li>Find new friends!\r\n"
                    "<li>Be heard!\r\n"
                    "<li>No one can control the topics discussed, the viewpoints expressed, or the words used.\r\n"
                    "<li>No one is silenced or censored.\r\n"
                    "<li>Anonymous people can say practically anything and be heard and receive feedback.\r\n"
                    "<li>Subscribers moderate the conversation by deescalating and guiding, not by censoring or silencing.\r\n"
                    "<li>Any subscriber can \"certify\" (approve) a pending anonymous post.\r\n"
                    "<ul>\r\n"
                    "<p>\r\n"
                    "<h2>Benefits of Subscribing Today</h2>\r\n"
                    "<p>\r\n"
                    "</ul>\r\n"
                    "<li>Today's low subscription price will rise as the Wo'O's Table community grows.\r\n"
                    "<br>(Nonsubscribers must wait 30 days.)\r\n"
                    "<li>Subscribers are trusted; \"rewards\" are advanced immediately.\r\n"
                    "<br>(Nonsubscribers must distribute a link that reveals their email address.)\r\n"
                    "<li>Subscribers can earn \"rewards\" (referral commissions) by giving privacy-encoded links to others.\r\n"
                    "<li>A copy of each of your posts will be emailed to you.\r\n"
                    "<li>You can select the new topic.\r\n"
                    "<li>You can propose a new topic.\r\n"
                    "<li>Your posts appear immediately.\r\n"
                    "<ul>\r\n"
                    "<p>\r\n"
                    "<h2>Features of Subscribing Today</h2>\r\n"
                    "<p>\r\n"
                    "<hr>\r\n"
                    "<p>\r\n"
                    "</summary>\r\n"
                        "Click this line to view a list of features and benefits enjoyed by subscribers.\r\n"
                    "<summary>\r\n"
                "<details>\r\n"
                "<p>\r\n"

            TN( tSay ,
        {

        /***************************************************************************************************/
        /***************************************************************************************************/
        /***************************************************************************************************/
        /****                                                                                           ****/
        /****  DISPLAY INSTRUCTIONS FOR POSTING                                                         ****/
        /****                                                                                           ****/
        /***************************************************************************************************/
        /***************************************************************************************************/
        /***************************************************************************************************/

        }
            }
                etThread.traceF( tinP , T("disk or file error 985") ) ;
                POOPR
            {
            if( POOP )

            }
                }
                    }
                        etThread.delF( tinP , psttShort ) ;

                        DEL( prPosts ) ;
                        if( prPosts ) meP.pushSnipF( tinP , stBodyP , *prPosts ) ;
                        etThread.strMakeF( tinP , prPosts , T("<p>\r\n")+tOut+T("\r\n") , 0 , flSTRmAKE_PREFIXlENGTH ) ; ___( prPosts ) ;
                        ZE( pbRefC* , prPosts ) ;

                        ) ;

                            "</table>\r\n"
                                "</tr>\r\n"
                                    "</td>\r\n"
                                        "<span style=\"color:Cyan\">")+tLoginTimeForeign+T(": </span>")+tLoginSpeech+T("\r\n"
                                    "<td valign=\"center\">\r\n"
                                    "</td>\r\n"
                                        "</form>\r\n"
                                            "<input id=\"submit\" name=\"submit\" type=\"submit\" value=\"Certify\"/>\r\n"
                                            "<input id=\"secret\" name=\"secret\" type=\"hidden\" value=\"")+tValueSecret+T("\"/>\r\n"
                                            "<input id=\"subscriberid\" name=\"subscriberid\" type=\"hidden\" value=\"")+tValueSubscriberId+T("\"/>\r\n"
                                            "<input id=\"filenamespeechanon\" name=\"filenamespeechanon\" type=\"hidden\" value=\"")+T(psttShort)+T("\"/>\r\n"
                                        "<form action=\"https://")+T(bSandbox?"factory1.":"")+T("ideafarm.com/talk\" id=\"certify\" method=\"post\" name=\"certify\">\r\n"
                                    "<td valign=\"center\">\r\n"
                                "<tr>\r\n"
                            "<table>\r\n"
                            "<p>\r\n"

                        TN( tOut , "" ) ; tOut = T(

                        }
                            }
                                }
                                    etThread.traceF( tinP , T("talkCBF: file error: unexpected contents [filename]:    ")+T(psttShort) ) ;
                                    POOPRqUIET
                                {
                                if( POOP )

                                said >> nnPeer ;
                                nicNameC nnPeer ;

                                etThread.delF( tinP , psttSpeechClean ) ;
                                tLoginSpeech = T(psttSpeechClean) ;
                                said >> psttSpeechClean ; ___( psttSpeechClean ) ;
                                ZE( strokeS* , psttSpeechClean ) ;

                                etThread.delF( tinP , psttValueSpeech ) ;
                                said >> psttValueSpeech ; ___( psttValueSpeech ) ;
                                ZE( strokeS* , psttValueSpeech ) ;

                                etThread.delF( tinP , psttTimeForeign ) ;
                                tLoginTimeForeign = T(psttTimeForeign) ;
                                said >> psttTimeForeign ; ___( psttTimeForeign ) ;
                                ZE( strokeS* , psttTimeForeign ) ;

                                said >> *(countT*)&timeS2 ;
                                ZE( sCountT , timeS2 ) ;

                                said >> timeS1 ;
                                ZE( countT , timeS1 ) ;

                                said >> idFormat ;
                                ZE( countT , idFormat ) ;

                                said >> finger ;
                                ZE( countT , finger ) ;
                            {
                            else
                            if( POOP ) { POOPRqUIET }

                            tinP.pEtScratch->boxGetShadowF( tinP , said , tListSaidAnonFileLong ) ;
                            soulC said( tinP , *tinP.pEtScratch , TAG( TAGiDnULL ) ) ;
                        {
                        IFsCRATCH
                        TN( tLoginSpeech , "" ) ;
                        TN( tLoginTimeForeign , "" ) ;

                        tListSaidAnonFileLong += T("////factory5/d/ideafarm.home.101/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/said.anon/")+T(psttShort) ;
                        tListSaidAnonFileLong += T("////factory4/d/ideafarm.home.101/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/said.anon/")+T(psttShort) ;
                        tListSaidAnonFileLong += T("////factory3/d/ideafarm.home.101/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/said.anon/")+T(psttShort) ;
                        TlIST( tListSaidAnonFileLong ) ;

                        stSaidAnonFileShort >> psttShort ;
                        ZE( strokeS* , psttShort ) ;
                    {
                    while( stSaidAnonFileShort )

                    }
                        DEL( prPosts ) ;
                        if( prPosts ) meP.pushSnipF( tinP , stBodyP , *prPosts ) ;

                        etThread.strMakeF( tinP , prPosts , tSay , 0 , flSTRmAKE_PREFIXlENGTH ) ; ___( prPosts ) ;
                        ZE( pbRefC* , prPosts ) ;

                        ) ;

                            "<p>\r\n"
                            "</details>\r\n"
                                "I also certify that it is not off-topic and will not otherwise DISRUPT the conversation, and that in making this determination I have not considered either viewpoint or words used.\r\n"
                                "It does not contain speech that is a CRIME under the laws of California or of the United States of America.\r\n"
                                "It does not create a CLEAR AND PRESENT DANGER.\r\n"
                                "It does not contain OBSCENITY.\r\n"
                                "I, ")+tLoginFirstName+T(" ")+tLoginLastName+T(", hereby certify that the anonymous post that I select below contains no speech other than speech that is fully protected by the First Amendment.\r\n"
                                "<p>\r\n"
                                "<h2>Certificate</h2>\r\n"
                                "<p>\r\n"
                                "</summary>\r\n"
                                    "Click this line before certifying.\r\n"
                                "<summary>\r\n"
                            "<details>\r\n"
                            "<p>\r\n"

                        TN( tSay , "" ) ; tSay = T(
                    {
                {
                else
                }
                    //DEL( prPosts ) ;
                    //if( prPosts ) meP.pushSnipF( tinP , stBodyP , *prPosts ) ;
                    //
                    //etThread.strMakeF( tinP , prPosts , tSay , 0 , flSTRmAKE_PREFIXlENGTH ) ; ___( prPosts ) ;
                    //ZE( pbRefC* , prPosts ) ;
                    //
                    //TN( tSay , "<p>\r\nNo anonymous posts are awaiting certification.\r\n" ) ;
                {
                if( !stSaidAnonFileShort )
                TN( tb4 , "    " ) ;
                TN( tb , " " ) ;
            {

            }
                }
                    while( ~hFind && !POOP ) ;
                    }
                        DEL( pInfo ) ;
                        }
                            if( !ids ) etThread.delF( tinP , psttShort ) ;
                            stSaidAnonFileShort.sinkF( tinP , ids , psttShort , flSTACKsINK_UNIQUE ) ;
                            ZE( countT , ids ) ;

                            }
                                etThread.delF( tinP , psttnu ) ;
                                etThread.strBisectF( tinP , psttnu , psttShort , pInfo->psttIfoName , T("/") , - 1 , flSTRbISECT_APPENDdELIMITER ) ; ___( psttnu ) ; ___( psttShort ) ;
                                ZE( strokeS* , psttnu ) ;
                            {
                            ZE( strokeS* , psttShort ) ;
                        {
                        else
                        }
                            break ;
                            DEL( pInfo ) ;
                        {
                        if( !pInfo || !pInfo->psttIfoName )

                        etThread.diskFindFileOrDirF( tinP , pInfo , hFind , psttc1 , &pat ) ;
                        ZE( infoFileS* , pInfo ) ;
                    {
                    do
                    handleC hFind( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILEfIND ) ;
                {
                FORsTRINGSiN1( (strokeS*)tListSaidAnonPath )

                tListSaidAnonPath += T("////factory5/d/ideafarm.home.101/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/said.anon/") ;
                tListSaidAnonPath += T("////factory4/d/ideafarm.home.101/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/said.anon/") ;
                tListSaidAnonPath += T("////factory3/d/ideafarm.home.101/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/said.anon/") ;
                TlIST( tListSaidAnonPath ) ;

                patternC pat( tinP , etThread , tPattern , ifcIDtYPEpATTERN_FOREIGNwILDCARDsTRICT ) ;
                TN( tPattern , "" ) ; tPattern = T("said.anon.table")+T(bSandbox?".sandbox.*":".live.*") ;
            {
            stackC stSaidAnonFileShort( tinP , etThread , TAG( TAGiDnULL ) , flSTACKc_DOnOTsERIALIZE | flSTACKc_SINKrEVERSE , ifcSTACKtYPE_PTR_strokeS , ifcIDgRABlAYER_7BASEmISC1 ) ;
        {
        if( bSecretIsOK )
        ZE( boolT , bTopicIsFresh ) ;

        /***************************************************************************************************/
        /***************************************************************************************************/
        /***************************************************************************************************/
        /****                                                                                           ****/
        /****  DISPLAY FORMS TO CERTIFY ANONYMOUS SPEECH                                                ****/
        /****                                                                                           ****/
        /***************************************************************************************************/
        /***************************************************************************************************/
        /***************************************************************************************************/

        }
            DEL( prPosts ) ;
            if( prPosts ) meP.pushSnipF( tinP , stBodyP , *prPosts ) ;

            etThread.strMakeF( tinP , prPosts , tSay , 0 , flSTRmAKE_PREFIXlENGTH ) ; ___( prPosts ) ;
            ZE( pbRefC* , prPosts ) ;

            ) ;

                "<span hidden id=\"hiddensecret\">")+tValueSecret+T("</span>\r\n"
                "<span hidden id=\"hiddensubscriberid\">")+tValueSubscriberId+T("</span>\r\n"

            TN( tSay , "" ) ; tSay = T(
        {

        /***************************************************************************************************/
        /***************************************************************************************************/
        /***************************************************************************************************/
        /****                                                                                           ****/
        /****  DISPLAY (HIDDEN) SUBSCRIBERID AND SECRET SO AVAILABLE TO IFRAME                          ****/
        /****                                                                                           ****/
        /***************************************************************************************************/
        /***************************************************************************************************/
        /***************************************************************************************************/

        }
            DEL( prPosts ) ;
            if( prPosts ) meP.pushSnipF( tinP , stBodyP , *prPosts ) ;

            etThread.strMakeF( tinP , prPosts , tSay , 0 , flSTRmAKE_PREFIXlENGTH ) ; ___( prPosts ) ;
            ZE( pbRefC* , prPosts ) ;

            ) ;

                "<h1>Wo'O's Table Talk:  An Uncensored English Language Open Public Forum for Respectful Conversation</h1>\r\n"

            TN( tSay ,
        {

        /***************************************************************************************************/
        /***************************************************************************************************/
        /***************************************************************************************************/
        /****                                                                                           ****/
        /****  DISPLAY PAGE TITLE                                                                       ****/
        /****                                                                                           ****/
        /***************************************************************************************************/
        /***************************************************************************************************/
        /***************************************************************************************************/

        }
            }
                }
                    THREADmODE1rESTORE

                    etThread.boxPutF( tinP , T("smtp.mailgun.org[admin]/b42/smtp/")+tHost+T("@ideafarm.com/")+tToUse+T("//wo@ideafarm.com/ideafarm.factory.reports@gmail.com") , tBody ) ;

                    ;
                        : tLoginPaypalPayerEmail
                        ? tEmailSandboxMe
                    textC& tToUse = bSandbox
                    TN( tEmailSandboxMe , "ideafarmcity@gmail.com" ) ;

                    tBody += T("time:  ")+tTimeForeign+T("\r\n") ;
                    tBody += T("\r\nreference:  ")+tShort+T("\r\n") ;

                    tBody += T("your post:\r\n\r\n")+tLoginSpeechAnonClean+T("\r\n\r\n") ;

                    ) ;

                        "\r\n"
                        "\r\n"
                        "Subject: Wo'O's Table:  You just posted this (from an anonymous poster) on Wo'O's Table Talk.\r\n"

                    TN( tBody ,

                    }
                        etThread.delF( tinP , psttFile ) ;

                        }
                            }
                                etThread.delF( tinP , psttShort ) ;
                                etThread.delF( tinP , psttnu ) ;
                                tShort = T(psttShort) ;
                                etThread.strBisectF( tinP , psttnu , psttShort , psttc1 , T("/") , - 1 , flSTRbISECT_APPENDdELIMITER ) ; ___( psttnu ) ; ___( psttShort ) ;
                                ZE( strokeS* , psttShort ) ;
                                ZE( strokeS* , psttnu ) ;
                            {
                            if( !tShort.csF( tinP ) )

                            //etThread.traceF( tinP , T("wrote   ")+T(psttc1) ) ;
                        {
                        FORsTRINGSiN1( psttFile )
                        etThread.boxPutUniqueF( tinP , psttFile , tListSaidFileLong , WS( said ) ) ; ___( psttFile ) ;
                        ZE( strokeS* , psttFile ) ;
 
                        tListSaidFileLong += T("////factory5/d/ideafarm.home.101/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/said/said.table")+T(bSandbox?".sandbox.@1@.":".live.@1@.")+T(nnPeerP)+tDot+TF4(((countT*)&subscriberIdTry)[0],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x3e)+tDot+TF4(((countT*)&subscriberIdTry)[1],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x3e)+tDot+tHost ;
                        tListSaidFileLong += T("////factory4/d/ideafarm.home.101/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/said/said.table")+T(bSandbox?".sandbox.@1@.":".live.@1@.")+T(nnPeerP)+tDot+TF4(((countT*)&subscriberIdTry)[0],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x3e)+tDot+TF4(((countT*)&subscriberIdTry)[1],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x3e)+tDot+tHost ;
                        tListSaidFileLong += T("////factory3/d/ideafarm.home.101/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/said/said.table")+T(bSandbox?".sandbox.@1@.":".live.@1@.")+T(nnPeerP)+tDot+TF4(((countT*)&subscriberIdTry)[0],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x3e)+tDot+TF4(((countT*)&subscriberIdTry)[1],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x3e)+tDot+tHost ;
                        TlIST( tListSaidFileLong ) ;
                    {
                    TN( tShort , "" ) ;

                    }
                        if( !tHost.csF( tinP ) ) tHost = T("factories") ;
                        etThread.delF( tinP , psttHost ) ;
                        else            tHost = T(psttHost) ;
                        if( !psttHost ) etThread.traceF( tinP , T("error: reverse DNS lookup on myself failed 1241") ) ;
                        etThread.sockPsttHostF( tinP , psttHost ) ; ___( psttHost ) ;
                        ZE( strokeS* , psttHost ) ;
                    {
                    TN( tHost , "" ) ;

                    THREADmODE1oN( flTHREADmODE1_ALLOWsTOPwHILEgRABBING )

                    said << (strokeS*)tLoginAddressStatus ;
                    said << (strokeS*)tLoginAddressZip ;
                    said << (strokeS*)tLoginAddressCountry ;
                    said << (strokeS*)tLoginAddressCountryCode ;
                    said << (strokeS*)tLoginAddressState ;
                    said << (strokeS*)tLoginAddressCity ;
                    said << (strokeS*)tLoginAddressStreet ;
                    said << nnPeerAnon ;
                    said << (strokeS*)tLoginNnPeer ;
                    said << (strokeS*)tLoginZipUse ;
                    said << (strokeS*)tLoginAddressName ;
                    said << (strokeS*)tLoginLastName ;
                    said << (strokeS*)tLoginFirstName ;
                    said << (strokeS*)tLoginPaypalPayerEmail ;
                    said << (strokeS*)tLoginIdSubscriber0 ;
                    said << (strokeS*)tLoginSpeechAnonClean ;
                    said << (strokeS*)tLoginSpeechAnon ;
                    said << (strokeS*)T("anonymous") ;
                    said << (strokeS*)tTimeForeign ;
                    said << (countT)timeN2 ;
                    said << timeN1 ;
                    said << (countT)4 ;             // IDfORMAT
                    said << finger ;
                    soulC said( tinP , TAG( TAGiDnULL ) ) ;

                    putNegAM( *(countT*)&finger , FINGERnEG_WOtABLEsAID ) ;
                    ZE( countT , finger ) ;

                    textC tTimeForeign( ifcIDtEXTgEN_TIMEnOWfOREIGN , tinP , TAG( TAGiDnULL ) ) ;

                    etThread.osTimeNowF( tinP , timeN1 , timeN2 ) ;
                    ZE( sCountT , timeN2 ) ;
                    ZE( countT , timeN1 ) ;
                {
                if( tLoginSpeechAnonClean.csF( tinP ) )

                }
                    }
                        }
                            etThread.traceF( tinP , T("talkCBF: file error: unexpected contents [tValueFilenameSpeechAnon]:    ")+tValueFilenameSpeechAnon ) ;
                            POOPRqUIET
                        {
                        if( POOP )

                        rec >> nnPeerAnon ;

                        etThread.delF( tinP , psttSpeechClean ) ;
                        tLoginSpeechAnonClean = T(psttSpeechClean) ;
                        rec >> psttSpeechClean ; ___( psttSpeechClean ) ;
                        ZE( strokeS* , psttSpeechClean ) ;

                        etThread.delF( tinP , psttValueSpeech ) ;
                        tLoginSpeechAnon = T(psttValueSpeech) ;
                        rec >> psttValueSpeech ; ___( psttValueSpeech ) ;
                        ZE( strokeS* , psttValueSpeech ) ;

                        etThread.delF( tinP , psttTimeForeign ) ;
                        rec >> psttTimeForeign ; ___( psttTimeForeign ) ;
                        ZE( strokeS* , psttTimeForeign ) ;

                        rec >> *(countT*)&timeS2 ;
                        ZE( sCountT , timeS2 ) ;

                        rec >> timeS1 ;
                        ZE( countT , timeS1 ) ;

                        rec >> idFormat ;
                        ZE( countT , idFormat ) ;

                        rec >> finger ;
                        ZE( countT , finger ) ;
                    {
                    else
                    if( POOP ) { POOPRqUIET }
                    tinP.pEtScratch->boxGetF( tinP , rec , tListSaidAnonFileLong , 1 , 1 ) ;

                    tListSaidAnonFileLong += T("////factory5/d/ideafarm.home.101/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/said.anon/")+tValueFilenameSpeechAnon ;
                    tListSaidAnonFileLong += T("////factory4/d/ideafarm.home.101/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/said.anon/")+tValueFilenameSpeechAnon ;
                    tListSaidAnonFileLong += T("////factory3/d/ideafarm.home.101/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/said.anon/")+tValueFilenameSpeechAnon ;
                    TlIST( tListSaidAnonFileLong ) ;

                    soulC rec( tinP , *tinP.pEtScratch , TAG( TAGiDnULL ) ) ;
                {
                IFsCRATCH
                nicNameC nnPeerAnon ;
                TN( tLoginSpeechAnonClean , "" ) ;
                TN( tLoginSpeechAnon      , "" ) ;
            {
            if( tValueFilenameSpeechAnon.csF( tinP ) )
        {
        if( bSecretIsOK )

        /***************************************************************************************************/
        /***************************************************************************************************/
        /***************************************************************************************************/
        /****                                                                                           ****/
        /****  FILE ANONYMOUS SPEECH OR NEWLY SELECTED TOPIC                                            ****/
        /****                                                                                           ****/
        /***************************************************************************************************/
        /***************************************************************************************************/
        /***************************************************************************************************/

        }
            if( !bSecretIsOK ) etThread.traceF( tinP , T("secret is wrong") ) ;

            }
                tLoginAddressStatus      = tn ;
                tLoginAddressZip         =
                tLoginAddressCountry     =
                tLoginAddressCountryCode =
                tLoginAddressState       =
                tLoginAddressCity        =
                tLoginAddressStreet      =
                tLoginAddressName        =
                tLoginLastName           =
                tLoginFirstName          =
                tLoginIdSubscriber0      =
                tLoginZipUse             =
                tLoginPaypalPayerEmail   =
                tLoginNnPeer             =
            {
            if( !bSecretIsOK )

            }
                while( ~hFind && !POOP ) ;
                }
                    DEL( pInfo ) ;
                    }
                        }
                            }
                                }
                                    etThread.traceF( tinP , T("file error: unexpected file contents [filename]:    ")+T(pInfo->psttIfoName) ) ;
                                    POOPRqUIET
                                {
                                if( POOP )

                                etThread.delF( tinP , psttValueAddressStatus ) ;
                                tLoginAddressStatus = bOn ? T(psttValueAddressStatus) : tn ;
                                rec >> psttValueAddressStatus ; ___( psttValueAddressStatus ) ;
                                ZE( strokeS* , psttValueAddressStatus ) ;

                                etThread.delF( tinP , psttValueAddressZip ) ;
                                tLoginAddressZip = bOn ? T(psttValueAddressZip) : tn ;
                                rec >> psttValueAddressZip ; ___( psttValueAddressZip ) ;
                                ZE( strokeS* , psttValueAddressZip ) ;

                                etThread.delF( tinP , psttValueAddressCountry ) ;
                                tLoginAddressCountry = bOn ? T(psttValueAddressCountry) : tn ;
                                rec >> psttValueAddressCountry ; ___( psttValueAddressCountry ) ;
                                ZE( strokeS* , psttValueAddressCountry ) ;

                                etThread.delF( tinP , psttValueAddressCountryCode ) ;
                                tLoginAddressCountryCode = bOn ? T(psttValueAddressCountryCode) : tn ;
                                rec >> psttValueAddressCountryCode ; ___( psttValueAddressCountryCode ) ;
                                ZE( strokeS* , psttValueAddressCountryCode ) ;

                                etThread.delF( tinP , psttValueAddressState ) ;
                                tLoginAddressState = bOn ? T(psttValueAddressState) : tn ;
                                rec >> psttValueAddressState ; ___( psttValueAddressState ) ;
                                ZE( strokeS* , psttValueAddressState ) ;

                                etThread.delF( tinP , psttValueAddressCity ) ;
                                tLoginAddressCity = bOn ? T(psttValueAddressCity) : tn ;
                                rec >> psttValueAddressCity ; ___( psttValueAddressCity ) ;
                                ZE( strokeS* , psttValueAddressCity ) ;

                                etThread.delF( tinP , psttValueAddressStreet ) ;
                                tLoginAddressStreet = bOn ? T(psttValueAddressStreet) : tn ;
                                rec >> psttValueAddressStreet ; ___( psttValueAddressStreet ) ;
                                ZE( strokeS* , psttValueAddressStreet ) ;

                                etThread.delF( tinP , psttValueAddressName ) ;
                                tLoginAddressName = T(psttValueAddressName) ;

                                rec >> psttValueAddressName ; ___( psttValueAddressName ) ;
                                ZE( strokeS* , psttValueAddressName ) ;

                                etThread.delF( tinP , psttValueLastName ) ;
                                tLoginLastName = bOn ? T(psttValueLastName) : tn ;
                                rec >> psttValueLastName ; ___( psttValueLastName ) ;
                                ZE( strokeS* , psttValueLastName ) ;

                                etThread.delF( tinP , psttValueFirstName ) ;
                                tLoginFirstName = bOn ? T(psttValueFirstName) : tn ;
                                rec >> psttValueFirstName ; ___( psttValueFirstName ) ;
                                ZE( strokeS* , psttValueFirstName ) ;

                                }
                                    if( bOn && !bSecretIsOK ) etThread.traceF( tinP , T("secret is NOT ok [secretTry]:    ")+TF4(secretTry,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x3e)+T("    ")+TF4(secret,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x3e) ) ;
                                    bSecretIsOK = !bOn ? 0 : secretTry == secret ;
                                {
                                if( subscriberIdTry == idSubscriber )

                                rec >> secret ;
                                ZE( countT , secret ) ;

                                //etThread.traceF( tinP , T("[tLoginIdSubscriber0]:    ")+tLoginIdSubscriber0 ) ;

                                tLoginIdSubscriber0 = bOn ? TF4(((countT*)&idSubscriber)[0],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x3e) : tn ;
                                rec >> ((countT*)&idSubscriber)[ 1 ] ;
                                rec >> ((countT*)&idSubscriber)[ 0 ] ;
                                ZE( count04T , idSubscriber ) ;

                                etThread.delF( tinP , psttValueTransId ) ;
                                rec >> psttValueTransId ; ___( psttValueTransId ) ;
                                ZE( strokeS* , psttValueTransId ) ;

                                etThread.delF( tinP , psttValueTransType ) ;
                                rec >> psttValueTransType ; ___( psttValueTransType ) ;
                                ZE( strokeS* , psttValueTransType ) ;

                                etThread.delF( tinP , psttValueRewardBox ) ;
                                rec >> psttValueRewardBox ; ___( psttValueRewardBox ) ;
                                ZE( strokeS* , psttValueRewardBox ) ;

                                etThread.delF( tinP , psttValueRewardBoxHidden ) ;
                                rec >> psttValueRewardBoxHidden ; ___( psttValueRewardBoxHidden ) ;
                                ZE( strokeS* , psttValueRewardBoxHidden ) ;

                                etThread.delF( tinP , psttZipUse ) ;
                                tLoginZipUse = bOn ? T(psttZipUse) : tn ;
                                rec >> psttZipUse ; ___( psttZipUse ) ;
                                ZE( strokeS* , psttZipUse ) ;

                                etThread.delF( tinP , psttValuePaypalPayerEmail ) ;
                                tLoginPaypalPayerEmail = bOn ? T(psttValuePaypalPayerEmail) : tn ;
                                rec >> psttValuePaypalPayerEmail ; ___( psttValuePaypalPayerEmail ) ;
                                ZE( strokeS* , psttValuePaypalPayerEmail ) ;

                                etThread.delF( tinP , psttNnPeer ) ;
                                tLoginNnPeer = bOn ? T(psttNnPeer) : tn ;
                                rec >> psttNnPeer ; ___( psttNnPeer ) ;
                                ZE( strokeS* , psttNnPeer ) ;

                                etThread.delF( tinP , psttAction ) ;
                                boolT bOn = !etThread.strCompareF( tinP , psttAction , tRegister ) ;
                                etThread.traceF( tinP , T("action: ")+T(psttAction) ) ;
                                rec >> psttAction ; ___( psttAction ) ;
                                ZE( strokeS* , psttAction ) ;

                                rec >> *(countT*)&timeS2 ;
                                ZE( sCountT , timeS2 ) ;

                                rec >> timeS1 ;
                                ZE( countT , timeS1 ) ;

                                rec >> idFormat ;
                                ZE( countT , idFormat ) ;

                                rec >> finger ;
                                ZE( countT , finger ) ;
                            {
                            else
                            }
                                etThread.traceF( tinP , T("file error: could not get shadow [filename]:    ")+T(pInfo->psttIfoName) ) ;
                                POOPRqUIET
                            {
                            if( POOP )

                            tinP.pEtScratch->boxGetShadowF( tinP , rec , pInfo->psttIfoName ) ;
                            soulC rec( tinP , *tinP.pEtScratch , TAG( TAGiDnULL ) ) ;

                            SCOOPS
                        {
                        IFsCRATCH

                        //etThread.traceF( tinP , T("found 1:    ")+T(fn) ) ;
                        fileNameC fn( tinP , etThread , pInfo->psttIfoName ) ;
                    {
                    else
                    }
                        break ;
                        DEL( pInfo ) ;
                    {
                    if( !pInfo || !pInfo->psttIfoName )

                    etThread.diskFindFileOrDirF( tinP , pInfo , hFind , psttc1 , &pat ) ;
                    ZE( infoFileS* , pInfo ) ;
                {
                do
                handleC hFind( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILEfIND ) ;

                if( bSecretIsOK ) break ;  //U:: THIS WILL GIVE FALSE "OK" IF THE CURRENT PATH DOES NOT CONTAIN ALL RECORDS FOR THIS ID ; THE CURE FOR THIS WOULD BE TO HEAL THE SUBSCRIPTION PATHS
            {
            FORsTRINGSiN1( (strokeS*)tListPathSubscriptions )

            tListPathSubscriptions += T("////factory5/d/ideafarm.home.101/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/subscriptions/") ;
            tListPathSubscriptions += T("////factory4/d/ideafarm.home.101/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/subscriptions/") ;
            tListPathSubscriptions += T("////factory3/d/ideafarm.home.101/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/subscriptions/") ;
            TlIST( tListPathSubscriptions ) ;

            patternC pat( tinP , etThread , tPattern , ifcIDtYPEpATTERN_FOREIGNwILDCARDsTRICT ) ;
            TN( tRegister , "register" ) ;
            TN( tPattern , "subscription.table.live.*" ) ;
            TN( tn , "" ) ;

            etThread.traceF( tinP , T("[tValueSubscriberId,tValueSecret]:    ")+tb4+tValueSubscriberId+tb4+tValueSecret ) ;
            TN( tb4 , "    " ) ;
        {
        if( tValueSubscriberId.csF( tinP ) && tValueSecret.csF( tinP ) )
        TN( tLoginAddressStatus      , "" ) ;
        TN( tLoginAddressZip         , "" ) ;
        TN( tLoginAddressCountry     , "" ) ;
        TN( tLoginAddressCountryCode , "" ) ;
        TN( tLoginAddressState       , "" ) ;
        TN( tLoginAddressCity        , "" ) ;
        TN( tLoginAddressStreet      , "" ) ;
        TN( tLoginAddressName        , "" ) ;
        TN( tLoginLastName           , "" ) ;
        TN( tLoginFirstName          , "" ) ;
        TN( tLoginIdSubscriber0      , "" ) ;
        TN( tLoginZipUse             , "" ) ;
        TN( tLoginPaypalPayerEmail   , "" ) ;
        TN( tLoginNnPeer             , "" ) ;
        ZE( boolT , bSecretIsOK ) ;
        //VALIDATE THE SECRET

        /***************************************************************************************************/
        /***************************************************************************************************/
        /***************************************************************************************************/
        /****                                                                                           ****/
        /****  VALIDATE THE ID AND SECRET                                                               ****/
        /****                                                                                           ****/
        /***************************************************************************************************/
        /***************************************************************************************************/
        /***************************************************************************************************/

        TN( tTopicGuide , "short & neutral" ) ;

        countT   secretTry       = etThread.strDigitsToSCountF( tinP , tValueSecret       , 0x3e ) ;
        count04T subscriberIdTry = etThread.strDigitsToSCountF( tinP , tValueSubscriberId , 0x3e ) ; //U:: THIS WILL ONLY WORK IF THE ID IS <= MAXCOUNTT

        //etThread.traceF( tinP , tKeySpeech            +T(":    ")+tValueSpeech       ) ;

        }
            }
                if( !etThread.strCompareF( tinP , psttLeverKVP , *pptKey[ offk ] ) ) *pptValue[ offk ] = T((strokeS*)(countT)swKVP) ;
            {
            for( countT offk = 0 ; offk < sizeof pptKey / sizeof pptKey[ 0 ] ; offk ++ )

            //}
            //    DEL( prPosts ) ;
            //    if( prPosts ) meP.pushSnipF( tinP , stBodyP , *prPosts ) ;
            //    etThread.strMakeF( tinP , prPosts , tSay , 0 , flSTRmAKE_PREFIXlENGTH ) ; ___( prPosts ) ;
            //
            //    etThread.traceF( tinP , tSay ) ;
            //    TN( tSay , "" ) ; tSay = T("<p>\r\n")+T(psttLeverKVP)+T(":    ")+T((strokeS*)(countT)swKVP) ;
            //
            //    ZE( pbRefC* , prPosts ) ;
            //{

            psttLeverKVP = (strokeS*)swKVP.leverF( tinP , idf ) ;
        {
        for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
        countT cFlavors = swKVP.cFlavorsF( tinP ) ;

        } ;
            &tValueFilenameSpeechAnon  ,
            &tValueFilenameTopic       ,
            &tValueProposedTopic       ,
            &tValueSpeechAnon          ,
            &tValueSpeech              ,
            &tValueSecret              ,
            &tValueSubscriberId        ,
        {
        textC* pptValue[] =

        } ;
            &tKeyFilenameSpeechAnon  ,
            &tKeyFilenameTopic       ,
            &tKeyProposedTopic       ,
            &tKeySpeechAnon          ,
            &tKeySpeech              ,
            &tKeySecret              ,
            &tKeySubscriberId        ,
        {
        textC* pptKey[] =

        TN( tValueFilenameSpeechAnon  , "" ) ;
        TN( tValueFilenameTopic       , "" ) ;
        TN( tValueProposedTopic       , "" ) ;
        TN( tValueSpeechAnon          , "" ) ;
        TN( tValueSpeech              , "" ) ;
        TN( tValueSecret              , "" ) ;
        TN( tValueSubscriberId        , "" ) ;

        TN( tKeyFilenameSpeechAnon  , "filenamespeechanon" ) ;
        TN( tKeyFilenameTopic       , "filenametopic"      ) ;
        TN( tKeyProposedTopic       , "proposedtopic"      ) ;
        TN( tKeySpeechAnon          , "speechanon"         ) ;
        TN( tKeySpeech              , "speech"             ) ;
        TN( tKeySecret              , "secret"             ) ;
        TN( tKeySubscriberId        , "subscriberid"       ) ;

        /***************************************************************************************************/
        /***************************************************************************************************/
        /***************************************************************************************************/
        /****                                                                                           ****/
        /****  RECEIVE QUERY PARAMETERS                                                                 ****/
        /****                                                                                           ****/
        /***************************************************************************************************/
        /***************************************************************************************************/
        /***************************************************************************************************/

        boolT bSandbox = etherC::ifc_idHomeI_IF() & fliIDhOME_HOMELESS ;
    {
    else
    }
        DEL( prPosts ) ;
        if( prPosts ) meP.pushSnipF( tinP , stBodyP , *prPosts ) ;

        etThread.strMakeF( tinP , prPosts , tSay , 0 , flSTRmAKE_PREFIXlENGTH ) ; ___( prPosts ) ;
        ZE( pbRefC* , prPosts ) ;

        ) ;

            "<p>\r\n"
            "Try again after a TICK (about 6 foreign minutes).\r\n"
            "Your IP address is currently blcoked.\r\n"
            "<p>\r\n"
            "<h1>Wo'O's Table Talk:  An Uncensored English Language Open Public Forum for Respectful Conversation</h1>\r\n"

        TN( tSay ,
    {
    if( bBlocked )

    }
        }
            while( ~hFind && !POOP ) ;
            }
                DEL( pInfo ) ;
                }
                    }
                        break ;
                        DEL( pInfo ) ;
                        bBlocked = 1 ;
                    {
                    else
                    }
                        }
                            if( POOP ) { POOPRqUIET }
                            tinP.pEtScratch->diskFileOrDirDeleteF( tinP , pInfo->psttIfoName , flFILEoRdIRdELETE_null , 1 ) ;
                        {
                        IFsCRATCH
                    {
                    if( timeE2 || timeE1 > TICK )

                    //etThread.traceF( tinP , T("age: ")+TT(timeE1,timeE2) ) ;
                    etThread.osTimeSubtractF( tinP , timeE1 , timeE2 , pInfo->timeCreated1 , pInfo->timeCreated2 ) ;
                    etThread.osTimeNowF( tinP , timeE1 , timeE2 ) ;
                    ZE( sCountT , timeE2 ) ;
                    ZE( countT , timeE1 ) ;
                {
                else
                }
                    break ;
                    DEL( pInfo ) ;
                {
                else if( !pInfo || !pInfo->psttIfoName )
                }
                    break ;
                    etThread.traceF( tinP , T("disk or file error 1633") ) ;
                    POOPR
                {
                if( POOP )

                etThread.diskFindFileOrDirF( tinP , pInfo , hFind , psttc1 , &pat ) ;
                ZE( infoFileS* , pInfo ) ;
            {
            do
            handleC hFind( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILEfIND ) ;

            if( bBlocked ) break ;
        {
        FORsTRINGSiN1( (strokeS*)tListPathBlocked )

        tListPathBlocked += T("////factory5/d/ideafarm.home.101/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/blocked.ip/") ;
        tListPathBlocked += T("////factory4/d/ideafarm.home.101/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/blocked.ip/") ;
        tListPathBlocked += T("////factory3/d/ideafarm.home.101/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/blocked.ip/") ;
        TlIST( tListPathBlocked ) ;

        patternC pat( tinP , etThread , tPattern , ifcIDtYPEpATTERN_FOREIGNwILDCARDsTRICT ) ;
        TN( tPattern , "blocked.ip." ) ; tPattern += T(nnPeerP)+T(".*") ;
    {
    ZE( boolT , bBlocked ) ;

    meP.pushSnipF( tinP , stBodyP , ifcIDsNIPpREDEFINED_BODYrAWbEGIN ) ;
    meP.pushSnipF( tinP , stBodyP , ifcIDsNIPpREDEFINED_HEADrAW5hEADeND ) ;
    meP.pushSnipF( tinP , stBodyP , ifcIDsNIPpREDEFINED_HEADrAW4sCRIPTeND ) ;
    meP.pushSnipF( tinP , stBodyP , ifcIDsNIPpREDEFINED_HEADrAW3sCRIPTbEGIN ) ;
    meP.pushSnipF( tinP , stBodyP , ifcIDsNIPpREDEFINED_HEADrAW2aFTERtITLE ) ;
    }
        DEL( prPosts ) ;
        if( prPosts ) meP.pushSnipF( tinP , stBodyP , *prPosts ) ;

        etThread.strMakeF( tinP , prPosts , tSay , 0 , flSTRmAKE_PREFIXlENGTH ) ; ___( prPosts ) ;
        ZE( pbRefC* , prPosts ) ;

        TN( tSay , "Wo'O's Table (tm)\r\n" ) ;
    {
    meP.pushSnipF( tinP , stBodyP , ifcIDsNIPpREDEFINED_HEADrAW1bEFOREtITLE ) ;

    TN( tDot , "." ) ;

    //if( psttKVReportP && psttKVReportP->idAdam ) etThread.traceF( tinP , psttKVReportP ) ;
{
/*1*/voidT talkCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP )/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


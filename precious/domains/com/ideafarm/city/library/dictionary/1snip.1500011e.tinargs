
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


;
}

    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34004.tinArgS.restoreF!||
    voidT restoreF( tinS& tinP , byteT* pbP , countT cbP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34003.tinArgS.saveF!||
    voidT saveF( tinS& tinP , byteT* pbP , countT cbP ) const ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34002.tinArgS.clearF!||
    voidT clearF( tinS& tinP , boolT bAllP = 0 ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34001.tinArgS.tinArgS!||
    tinArgS( tinS& tinP ) ;

    } retained ;

        } listWalk ;
    
            } util ;
                countT       pcP[ 8 ]             ; // AVAILABLE FOR USE BY FUNCTIONS THAT RECURSE, TO AVOID OVERHEAD OF COPYING PARAMETERS TO STACK;
            {
            struct
    
            } walk ;
                flagsT       flagsWalkP           ; // flLISTwALK_null
                countT       idGrabLayer          ;
                poolC*       pPoolRecord          ; // NORMALLY 0 ; SET BY indexIF
            {
            struct
        {
        struct
    {
    struct

    } pushed ;

        } listWalk ;
    
            } util ;
                countT       pcP[ 8 ]             ; // AVAILABLE FOR USE BY FUNCTIONS THAT RECURSE, TO AVOID OVERHEAD OF COPYING PARAMETERS TO STACK;
            {
            struct
    
            } cbf ;
                listC**      ppPreallocatedListsP ; // NULL TERMINATED LIST OF PREALLOCATED listC ; DISPENSE BY CLAIMING THE LEAF AND SETTING IT TO ZE
                listC*       pDadP                ; // THE listC INSTANCE THAT IS BEING WALKED; DEFINITION CAN E.G. CALL pDadP->dispenseNameF() TO OBTAIN A NAME TO USE FOR A NEW INSTANCE OF A CLASS DERIVED FROM listC
                listingC*    pNewP                ; // CALLBACK DEFINITION MUST NOT REFERENCE; DEFINITION CAN CALL THE new OPERATOR WO TIME TO CONSTRUCT AN INSTANCE OF A CLASS DERIVED FROM listingC; THIS CONSTRUCTION WILL SET THIS PARAMETER, WHICH WILL RESULT IN THE INSERTION OF THE NEW INSTANCE BEFORE THE INSTANCE BEING WALKED (I.E. BEFORE *pListingP)
                listingC*    pListingP            ; // WILL POINT TO A DISTINCT LISTING FOR EACH CALL AND THEN WILL BE 0 FOR THE LATH CALL
                countT       idCallP              ; // FOR A GIVEN CALL TO listC::walkF, THIS IS THE ID OF THE CALL TO THE CALLBACK (1,2,3,...) ; WHEN !pListingP, ( idCall - 1 ) IS THE NUMBER OF LISTINGS WALKED
                countT       idNestP              ; // listC::walkF INCREMENTS ON ENTRY AND DECREMENTS ON EXIT
            {
            struct
    
            } walk ;
                countT       offStretchEnd        ; // OFFSET INTO LIST NAME OF THE END OF A STRETCH VALUE
                countT       offStretchBegin      ; // OFFSET INTO LIST NAME OF THE BEGINNING OF A STRETCH VALUE
                byteT*       pbHandleRootP        ; // ADDRESS OF SIZEOF_handleC BYTES TO USE TO REALLOCATE THE HANDLE TO ROOT
                handleC**    ppHandleRootP        ; // NORMALLY 0 ; SET TO ADDRESS OF A POINTER TO A handleC OF TYPE ifcIDtYPEhANDLE_LISTING THAT THE CALLER HAS OPENED ON ROOT AND THAT CALLER WANTS ME TO CLOSE AND REALLOCATE
                handleC*     pHandleRootP         ; // NORMALLY 0 ; SET TO ADDRESS OF A handleC OF TYPE ifcIDtYPEhANDLE_LISTING THAT THE CALLER HAS OPENED ON ROOT AND THAT CALLER WANTS ME TO CLOSE
                handleC*     pHandleHiP           ; // NORMALLY 0 ; SET TO ADDRESS OF handleC OF TYPE ifcIDtYPEhANDLE_LISTING IF CALLER IS PROVIDING HANDLES FOR OPENING LISTINGS
                handleC*     pHandleLoP           ; // NORMALLY 0 ; SET TO ADDRESS OF handleC OF TYPE ifcIDtYPEhANDLE_LISTING IF CALLER IS PROVIDING HANDLES FOR OPENING LISTINGS
                countT*      pOffWothP            ; // NORMALLY 0 ; SET TO ADDRESS OF countT offWoth IF CALLER IS PROVIDING HANDLES FOR OPENING LISTINGS
                flagsT       flagsWalkP           ; // flLISTwALK_null
                countT       cRecurseP            ; // INCREMENTED BEFORE EACH RECURSION CALL AND DECREMENTED AFTER THE CALL
                listWalkCBFT pListWalkCBFP        ; // THIS CALLBACK WILL BE CALLED FOR EACH listingC INSTANCE AND THEN ONE FINAL TIME WITH NO listingC INSTANCE, TO INDICATE TERMINATION
            {
            struct
        {
        struct
    {
    struct
{
/*1*/struct _export tinArgS/*1*/

/**/

*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//



//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


DONE( _tmCatchF )
}
    bDone_tmCatch = 1 ;
    TELL( "_tmCatchF: cleaning up" )
    }
        }
            }
                else { DEL( pSouli ) ; }
                }
                    b_stCatch.ungrabF( tinP ) ;

                    else       sgnCatch.giveF( tinP ) ;
                    if( !ids ) { DEL( pSouli ) ; }
                    stCatch.sinkF( tinP , ids , pSouli , flSTACKsINK_UNIQUE , netC_subtract_soulC_F ) ;
                    ZE( countT , ids ) ;

                    TELL( "putting the soulC object that just arrived onto stackC stCatch" )
                    b_stCatch.grabF( tinP , TAG( TAGiDnULL ) ) ;
                    TELL( "grabbing b_stCatch" )
                {
                if( cbIdType == sizeof( countT ) && flagsIdType & flSOULiTEM_MADEoFcOUNToBJECTS && *(countT*)pbIdType == ifcIDtYPEdATAGRAM_NETc_SOULc && cbIdDisk == sizeof( countT ) && flagsDisk & flSOULiTEM_MADEoFcOUNToBJECTS )

                const byteT* pbIdDisk = pSouli->pbFieldF( tinP , idTypeDisk , flagsDisk , cbIdDisk , 2 ) ;
                ZE( countT , cbIdDisk ) ;
                ZE( boolT  , flagsDisk ) ;
                ZE( countT , idTypeDisk ) ;

                const byteT* pbIdType = pSouli->pbFieldF( tinP , idTypeIdType , flagsIdType , cbIdType , 1 ) ;
                ZE( countT , cbIdType ) ;
                ZE( boolT  , flagsIdType ) ;
                ZE( countT , idTypeIdType ) ;
            {
            else
            }
                sgnCatch.giveF( tinP ) ;
                { DEL( pSouli ) ; }
            {
            if( bQuit_tmCatch )
            TELL( "handling a soulC object that just arrived in a datagram" )

            }
                thThread.delF( tinP , pbi ) ;
                pSouli->shiftLeftF( tinP , ifcIDtYPEsOULiTEM_soulC , pbi , cbi , flSOULiTEM_null , flSOULsHIFTlEFTmODE_UNPACKsOULiMAGE ) ;
                thThread.s_readF( tinP , pbi , cbi , idpi , nicNamei , hsoc ) ; ___( pbi ) ;
                ZE( countT , cbi ) ;
                ZE( byteT* , pbi ) ;
            {                           //20210210@1928: UNTESTED BLOCK ; WRITTEN WHEN REMOVED API SUPPORT FOR s_readF TO soulC FROM DATAGRAM
            //U:: MOVE THIS INTO THE API (20210210@1928: THE EXISTING API WAS REMOVED BECAUSE IT WAS CODED WRONG AND WAS REDUNDANT ; SUPPORT FOR THIS SHOULD BE A SIMPLE WRAPPER OVERLOAD OF s_readF THAT CONTAINS THE CODE HERE)

            thThread.s_readF( tinP , *pSouli , hsoc ) ;
            TELL( "waiting for a soulC object to arrive in a datagram" )
            nicNameC nicNamei ;
            ZE( countT , idpi ) ;
        {
        if( pSouli )
        soulC* pSouli = new( 0 , tinP , LF ) soulC( tinP , TAG( TAGiDnULL ) ) ; ___( pSouli ) ;
    {
    while( !bQuit_tmCatch && !thThread )

    thThread.s_bindF( tinP , hsoc , idPort ) ; // IF MOD THIS LINE TO BIND TO A SPECIFIC ADAPTER, THIS LINE WILL CONTINUE TO BLOCK IF THE nicNameC THAT IT IS BOUND TO GOES AWAY
    thThread.s_socketIF( tinP , hsoc , ifcSOCKETtYPE_DATAgRAM ) ;
    handleC hsoc( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_SOCKET ) ;

    //__( thThread , thThread.dosPriorityIF( tinP ) - ifcTHREADpRIORITY_RUSH ) ;
    //thThread.dosPriorityIF( tinP , ifcTHREADpRIORITY_RUSH ) ; // NEEDED DUE TO OS BUG (WINDOWS)

    thirdC& thThread = etThread ;

    thirdC& thConstructor = *(thirdC*)pTaskP->c7 ;
    signC&  sgnCatch      = *(signC*) pTaskP->c6 ;
    stackC& stCatch       = *(stackC*)pTaskP->c5 ;
    batonC& b_stCatch     = *(batonC*)pTaskP->c4 ;
    countT  idPort        =           pTaskP->c3 ;
    boolT&  bDone_tmCatch = *(boolT*) pTaskP->c2 ;
    boolT&  bQuit_tmCatch = *(boolT*) pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 && pTaskP->c3 && pTaskP->c4 && pTaskP->c5 && pTaskP->c6 && pTaskP->c7 )
TELL( "setting up" )
/*1*/TASK( _tmCatchF )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


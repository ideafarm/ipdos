
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//

                            
REST

listC::deleteIF( tinP , count2S( LISTnAME_ROOTsYSTEM2 , 0 ) ) ;
listC::deleteIF( tinP , count2S( LISTnAME_ROOTaPPLICATION , 0 ) ) ;

listC::chatterIF( tinP , count2S( LISTnAME_ROOTaPPLICATION , 0 ) ) ;
listC::chatterIF( tinP , count2S( LISTnAME_ROOTsYSTEM2 , 0 ) ) ;

}
    SAYfIELDoUT( "field1" ) ;
    listC::fieldIF( tinP , pOut , hRec , "field1" , _1_modeAllC() | _1_queryC() /*| _1_ok_above_C( 8 ) | _1_ok_above_C( "i" ) | _1_ok_above_C( (countT*)count2S( 0xc ) )*/ , LF ) ;

    }
        }
            PUSE( tinP , *(byteT**)&pczv ) ;
            DELlIST( fieldEditParamOutC , pOut ) ;
            listC::fieldIF( tinP , pOut , hRec , "field1" , _1_pushC( pczv ) | _1_modePushSinkC() , LF ) ;

            pczv[ offo ] = 0 ;
            for( countT offo = 0 ; offo < vv ; offo ++ ) pczv[ offo ] = vv ;
            countT* pczv = (countT*)PUSE.newF( tinP , LF , ( 1 + vv ) * sizeof( countT ) ) ; ___( pczv ) ;
        {
        for( countT vv = 1 ; vv <= 0xf ; vv ++ )

        }
            DELlIST( fieldEditParamOutC , pOut ) ;
            listC::fieldIF( tinP , pOut , hRec , "field1" , _1_pushC( postv[ offv ] ) | _1_modePushSinkC() , LF ) ;
        {
        for( countT offv = 0 ; offv < sizeof postv / sizeof postv[ 0 ] ; offv ++ )
        
        } ;
            "pppppppppppppppp"
            "ooooooooooooooo" ,
            "nnnnnnnnnnnnnn" ,
            "mmmmmmmmmmmmm" ,
            "llllllllllll" ,
            "kkkkkkkkkkk" ,
            "jjjjjjjjjj" ,
            "iiiiiiiii" ,
            "hhhhhhhh" ,
            "ggggggg" ,
            "ffffff" ,
            "eeeee" ,
            "dddd" ,
            "ccc" ,
            "bb" ,
            "a" ,
        {
        osTextT* postv[] =
        
        }
            DELlIST( fieldEditParamOutC , pOut ) ;
            listC::fieldIF( tinP , pOut , hRec , "field1" , _1_pushC( vv ) | _1_modePushSinkC() , LF ) ;
        {
        for( countT vv = 1 ; vv <= 0xf ; vv ++ )
    {
    
    listC::openIF( tinP , hRec , pczList ) ;
    handleC hRec( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_LISTING ) ;
{
ZE( fieldEditParamOutC* , pOut ) ;

listC::dictionaryReplaceOsTextIF( tinP , pczList ) ;
countT pczList[] = { LISTnAME_ROOTaPPLICATION , (countT)"1" , (countT)"22" , (countT)"333" , (countT)"4444" , (countT)"55555" , (countT)"666666" , (countT)"7777777" , (countT)"88888888" , (countT)"999999999" , 0 } ;

grabitC grabitx( tinP , TAG( TAGiDnULL ) ) ;

TODO

/*1*/WAKEsHOWtEXT( "scratch" )/*1*/
/**/
*/
THREADmODE2rESTORE
}
    }
        if( pRoot ) ;
    
        link_listC_C ll4( pRoot , list4 ) ;
        link_listC_C ll3( pRoot , list3 ) ;
        link_listC_C ll2( pRoot , list2 ) ;
        link_listC_C ll1( pRoot , list1 ) ;
    {
    ZE( link Old2C* , pRoot ) ;
    
    listC list4( tinP , 4 | BM_HIGH ) ;
    listC list3( tinP , 3 | BM_HIGH ) ;
    listC list2( tinP , 2 | BM_HIGH ) ;
    listC list1( tinP , 1 | BM_HIGH ) ;
{
THREADmODE2oN( flTHREADmODE2_ALLOWdESTRUCTIONoFlISTINGc | flTHREADmODE2_ALLOWcONSTRUCTIONoFlISTINGc )
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//



//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return bHandled ;

    }
        }
            break ;
            if( buPrompt.pBaton ) buPrompt.pBaton->ungrabF( tinP ) ;

            if( buPrompt.pTcStateCBF ) (*buPrompt.pTcStateCBF)( tinP , etherP , buPrompt.cArg , idTypeCallP , idEventP , pcNotesP , flTcStateNewP , flTcStateOldP , sadamP ) ;

            }
                }
                    //buPrompt.setF( tinP , T("")+S3((measureT)(buPrompt.psttPrompt->idAdam+buPrompt.psttValue->idAdam),scOld_mmFRAMEcELLS,(measureT)1.0)+T(buPrompt.psttPrompt)+tNewValue+S2(0,scOld_POPfRAME) ) ;
                    buPrompt.freshF( tinP ) ;
    
                    etherP.strMakeF( tinP , LF , buPrompt.psttValue , tNewValue ) ; ___( buPrompt.psttValue ) ;
                    etherP.delF( tinP , buPrompt.psttValue ) ;
                {
                if( bFresh )

                }
                    }
                        }
                            break ;
                            bFresh = 1 ;
                            tNewValue = T(buPrompt.psttValue)+strokeS::strokeIF(tinP,idTool) ;
                        {                                                                                                                                                         
                        default :                                                                                                                                                 
                        }                                                                                                                                                         
                            break ;
                            if( buPrompt.pSign ) buPrompt.pSign->giveF( tinP ) ;
                        {
                        case saA1_TOOLENTER :
                        case saA1_TOOLENTERnUM :
                        }
                            break ;
                        {
                        case saA1_TOOLLOCKcAPS :
                        case saA1_TOOLLOCKnUM :
                        case saA1_TOOLSHIFTrIGHT :
                        case saA1_TOOLSHIFT :
                        case 0 :
                    {
                    switch( sttNew.idAdam )
                    strokeS sttNew = strokeS::strokeIF( tinP , idTool ) ;
                {
                else
                }
                    }
                        bFresh = 1 ;

                        }
                            etherP.delF( tinP , psttw ) ;    
                            tNewValue = T(psttw) ;
                            etherP.strSubstringF( tinP , psttw , idf , idl , buPrompt.psttValue ) ; ___( psttw ) ;
                            ZE( strokeS* , psttw ) ;
                            countT idl = buPrompt.psttValue->idAdam - 1 ;
                            countT idf = 1 ;
                        {
                        else
                        if( buPrompt.psttValue->idAdam == 1 ) tNewValue = T("") ;
                    {
                    if( buPrompt.psttValue && buPrompt.psttValue->idAdam )
                {
                if( idTool == ifcIDtYPEtOOL_BACKSPACE )
                TN( tNewValue , "" ) ;
                ZE( boolT , bFresh ) ;
            {
            if( idAction == ifcIDtYPEaCTION_DOWN )

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;
            if( buPrompt.pBaton ) buPrompt.pBaton->grabF( tinP , TAG( TAGiDnULL ) ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_KEYBOARD :
        }
            break ;
        {
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY :
        }
            if( idTool != ifcIDtYPEtOOL_MOUSEbUTTONlEFT || idAction != ifcIDtYPEaCTION_DOWN ) break ;

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
        }
            break ;
            if( buPrompt.pTcStateCBF ) (*buPrompt.pTcStateCBF)( tinP , etherP , buPrompt.cArg , idTypeCallP , idEventP , pcNotesP , flTcStateNewP , flTcStateOldP , sadamP ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER :
    {
    switch( idTypeCallP )
    ZE( boolT , bHandled ) ;

    tcPromptC& buPrompt = *(tcPromptC*)cArgP ;
{
/*1*/boolT buPromptCBF( tinS& tinP , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamC& sadamP )/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


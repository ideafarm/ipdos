
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
        //paramP.treeKt.rightF( 5 ) ;
        paramP.treeKt.leftF( - 1 ) ;
                                    
        DOWNdOWN
    
            paramP.treeKt.leftF( - 1 ) ;
        
            DOWNdOWN
    
                paramP.treeKt.leftF( - 1 ) ;
                BR( MALE , T("shark") ) ;
                BR( MALE , T("bass") ) ;
                BR( MALE , T("trout") ) ;
                                                
            UPuP                
                                            
            BR( MALE , T("fish") ) ;
                
            DOWNdOWN
    
                paramP.treeKt.leftF( - 1 ) ;
                BR( MALE , T("pit bull") ) ;
                BR( MALE , T("golden retriever") ) ;
                BR( MALE , T("collie") ) ;
            
            UPuP                
                    
            BR( MALE , T("dog") ) ;
                    
            DOWNdOWN
        
                paramP.treeKt.leftF( - 1 ) ;
                BR( MALE , T("sparrow") ) ;
                BR( MALE , T("eagle") ) ;
                BR( MALE , T("hawk") ) ;
                                                    
            UPuP                
                                            
            BR( MALE , T("bird") ) ;
                                        
        UPuP                
                                    
        BR( MALE , T("animal") ) ;

    paramP.treeKt.upF() ;
    BR( null , T("") ) ; //IMPLICIT "UP" TO FEMALE LEVEL
    BR( MALE , T("knowledge tree root") ) ;

    etherP.newF( tinP , LF , pbContentP , CBcONTENTaLLOC ) ; ___( pbContentP ) ;

    TN( tNameShort , "" ) ; setTmShortF( tinP , tNameShort ) ;
    TN( tCity  , "" ) ; tCity  = T("IdeaFarm")+S3(2.0,scOld_mmFRAMEtO,0.25)+S2(saA1_TRADEmARK,sc_cALPHABET1)+S2(0,scOld_POPfRAME)+T("   City") ;

    ARGgET( cArgP )
{
voidT loadContentF( tinS& tinP , etherC& etherP , const countT cArgP , byteT*& pbContentP , countT& cbContentP )


}
        //paramP.treeKt.rightF( 5 ) ;
        paramP.treeKt.leftF( - 1 ) ;

        DOWNdOWN
    
            paramP.treeKt.leftF( - 1 ) ;
            BR( MALE , T("for each memory space, there is a real time list of all memory poolOlds") ) ;
            BR( MALE , T("the center center square presents a real time list of all IPDOS (tm) memory spaces") ) ;
            BR( MALE , T("memory space usage summary") ) ;
            
        UPuP                
        
        BR( MALE , T("")+S2(1,scOld_cPUSHoFFfRAME)+S3(1.0,scOld_mmFRAMEtO,1.0)+S2(0,scOld_POPoFFfRAME)+paramP.vtMonitorPoolNames+S2((countT)animateMonitorPoolNamesCBF,scOld_cANIMATEcBF)+S2(0,scOld_POPfRAME) ) ;

        DOWNdOWN
    
            paramP.treeKt.leftF( - 1 ) ;
            //BR( MALE , T("instead, they are presented as child branches of the graph") ) ;
            //BR( MALE , T("graph legends are usually not superimposed upon a graph") ) ;
            //BR( MALE , T("until its history buffer fills up, the graph appears to shrink horizontally") ) ;
            //BR( MALE , T("imagine tick marks along the bottom, with the bottom right corner corresponding to \"now\"") ) ;
            //BR( MALE , T("the center center square presents a real time graph of the time between animation events") ) ;
            BR( MALE , T("the branch to the left of me presents the minimum and maximum time value of the graph") ) ;
            BR( MALE , T("")+S2(1,scOld_cPUSHoFFfRAME)+S3(1.0,scOld_mmFRAMEtO,1.0)+S2(0,scOld_POPoFFfRAME)+paramP.vtGraphSpeedMinMax+S2((countT)animateGraphSpeedMinMaxCBF,scOld_cANIMATEcBF)+S2(0,scOld_POPfRAME) ) ;
            BR( MALE , T("graph: animation period") ) ;
            
        UPuP                
        
        BR( MALE , T("")+S2(1,scOld_cPUSHoFFfRAME)+S3(1.0,scOld_mmFRAMEtO,1.0)+S2(0,scOld_POPoFFfRAME)+paramP.vtGraphSpeed+S2((countT)animateGraphSpeedCBF,scOld_cANIMATEcBF)+S2(0,scOld_POPfRAME) ) ;
        
        DOWNdOWN
    
            paramP.treeKt.leftF( - 1 ) ;
            BR( MALE , T("in this case, the time remaining before the deadline for the establishment of IdeaFarm " "(tm) City") ) ;
            BR( MALE , T("the center center square presents a countdown clock") ) ;
            BR( MALE , T("time remaining to launch") ) ;
        
        UPuP                
        
        }
            etherP.delF( tinP , psttOldClock ) ;
            BR( MALE , T("")+S2(1,scOld_cPUSHoFFfRAME)+S3(1.0,scOld_mmFRAMEtO,1.0)+S2(0,scOld_POPoFFfRAME)+S3(1.0,scOld_mmFRAMEtO,1.0)+paramP.buClockLaunch+S2(0,scOld_POPfRAME)+T(psttOldClock)+S2((countT)animateClockBannerCBF,scOld_cANIMATEcBF)+S2(0,scOld_POPfRAME) ) ;
            clockPhraseF( tinP , etherP , psttOldClock , paramP.ppvtClockBanner , paramP.cpvtClockBanner , 1.0 / 16.0 ) ;
            ZE( strokeS* , psttOldClock ) ;
        {

        DOWNdOWN
    
            paramP.treeKt.leftF( - 1 ) ;
            BR( MALE , T("the clock shows time with a grain size of a tock, which is a third more than a conventional second") ) ;
            BR( MALE , T("the maximum range of IdeaFarm " "(tm) time is eleven million years") ) ;
            BR( MALE , T("the minimum grain size of IdeaFarm " "(tm) time is fifty conventional microseconds") ) ;
            BR( MALE , T("the center center square presents a clock") ) ;
            BR( MALE , T("the current time") ) ;
        
        UPuP                
        
        }
            etherP.delF( tinP , psttOldClock ) ;
            BR( MALE , T("")+S2(1,scOld_cPUSHoFFfRAME)+S3(1.0,scOld_mmFRAMEtO,1.0)+S2(0,scOld_POPoFFfRAME)+S3(1.0,scOld_mmFRAMEtO,1.0)+paramP.buClock+S2(0,scOld_POPfRAME)+T(psttOldClock)+S2((countT)animateClockCBF,scOld_cANIMATEcBF)+S2(0,scOld_POPfRAME) ) ;
            clockPhraseF( tinP , etherP , psttOldClock , paramP.ppvtClock , paramP.cpvtClock , 1.0 / 16.0 ) ;
            ZE( strokeS* , psttOldClock ) ;
        {
    
        DOWNdOWN
    
            paramP.treeKt.leftF( - 1 ) ;
        
            DOWNdOWN
    
                paramP.treeKt.leftF( - 1 ) ;
        
                DOWNdOWN
    
                    paramP.treeKt.leftF( - 1 ) ;
                    BR( MALE , T("we write those symbols left to right in order of increasing significance") ) ;
                    BR( MALE , T("we have our own symbols for writing numbers") ) ;
                    BR( MALE , T("we normally use base sixteen numbers and often use the other power bases from two to sixty four") ) ;
                    BR( MALE , T("we rarely use base ten numbers, preferring bases that are powers of two") ) ;
                    BR( MALE , T("we have our own clock and calendar concepts") ) ;
                    BR( MALE , T("we have our own names for numeric magnitudes") ) ;
        
                    DOWNdOWN
    
                        paramP.treeKt.leftF( - 1 ) ;
                            
                        DOWNdOWN
    
                            paramP.treeKt.leftF( - 1 ) ;
                                    
                            DOWNdOWN
    
                                paramP.treeKt.leftF( - 1 ) ;
                            
                                DOWNdOWN
    
                                    paramP.treeKt.leftF( - 1 ) ;
                                    BR( MALE , T("filler 2") ) ;
                                                            
                                UPuP                
                                                        
                                BR( MALE , T("filler 1") ) ;
                                                    
                            UPuP                
                                                
                            BR( MALE , T("when you click this button, i will place the game at top center and activate \"view\" for you: ")+paramP.buStartGame ) ;
                            BR( MALE , T("you will not be able to use ")+tNameShort+T(" until you can do this easily") ) ;
                            BR( MALE , T("after playing this game, you will be able to both read and key bigits") ) ;
                            BR( MALE , T("then they will be presented randomly") ) ;
                            BR( MALE , T("initially, the symbols will be presented in increasing order") ) ;
                            BR( MALE , T("if you do not key a button, the correct symbol will eventually appear") ) ;
                            BR( MALE , T("when you key the correct button, the next symbol will appear immediately") ) ;
                            BR( MALE , T("the object of the game is to key the corresponding button as quickly as possible") ) ;
                            BR( MALE , T("during the game, a bigit symbol will be displayed") ) ;
                            BR( MALE , T("don't continue on to the game until you are good at it!") ) ;
                            BR( MALE , T("practice now until you can enter the bigit keys quickly, in order, without mistakes") ) ;
                            BR( MALE , T("for example, you will always use 'T' to key the bigit ta (eight)") ) ;
                            BR( MALE , T("and the names and hotkeys will always be exactly the same") ) ;
                            BR( MALE , T("a set of bigit buttons will always be displayed") ) ;
                            BR( MALE , T("when operating ")+tNameShort+T(", that is how you will always key bigits") ) ;
                            BR( MALE , T("practice keying bigits now by keying the capital letter in each bigit name") ) ;
                            BR( MALE , T("use the large view for the next step, and then climb back up and continue reading") ) ;
                            BR( MALE , T("your woth exercize is to read upward from the bottom and key the upper case hotkey for each bigit name shown") ) ;
                            BR( MALE , T("the center center branch displays the names of the bigits, starting with \"ze\" (ze""ro)") ) ;
                            BR( MALE , T("click the \"view\" button two times to see how this works") ) ;
                            BR( MALE , T("it is designed for viewing using most of the display") ) ;
                            BR( MALE , T("look at the center center branch now") ) ;
                            BR( MALE , T("bigit buttons use upper case hotkeys to make it easy to key bigits") ) ;
                            BR( MALE , T("most upper case hotkeys are reserved and cannot be assigned to normal buttons") ) ;
                            BR( MALE , T("most buttons use lower case alphabetics as their hotkeys") ) ;
                            BR( MALE , T("you have already seen buttons that can be activated by pressing a key") ) ;
                            BR( MALE , tNameShort+T(" applications use \"capital hotkeys\" to give you a virtual keyboard") ) ;
                            BR( MALE , T("conventional keyboards have no support for bigits (hexadecimal digits)") ) ;
                            BR( MALE , T("remember to turn CapsLock OFF after finishing with the game") ) ;
                            }
                                BR( MALE , tSay ) ;
                                                
                                ;
                                                
                                    S2(0,scOld_POPfRAME)
                                         S2((countT)vtToolStateCapsLockCBF,scOld_cANIMATEcBF)+
                                         paramP.vtToolStateCapsLock+
                                         S2(0,scOld_POPoFFfRAME)+
                                    S3(1.0,scOld_mmFRAMEtO,1.0)+
                                    S2(1,scOld_cPUSHoFFfRAME)+
                                    T("please verify that CapsLock is ON before continuing; it is now\r\n")+
                                                
                                TN( tSay , "" ) ; tSay =
                            {
                            BR( MALE , T("then climb down to play the game!") ) ;
                            BR( MALE , T("read these instructions")+S2((countT)readTheseInstructionsCBF,scOld_cANIMATEcBF) ) ;
                            
                        UPuP                
                                        
                        }
                            BR( MALE , tBranch ) ;
                                            
                            ;
                                            
                                S2(0,scOld_POPfRAME)
                                    S2(0,scOld_POPfRAME)+
                                        S2(0,scOld_POPfRAME)+
                                            S2(0,scOld_POPfRAME)+
                                                S2((countT)vt2bigitCBF,scOld_cANIMATEcBF)+
                                                paramP.vt2bigitName+
                                                T(" ")+
                                                paramP.vt2bigit+
                                            S3(3.0,scOld_mmFRAMEcELLS,1.0)+
                                            S2(0,scOld_POPfRAME)+
                                                paramP.vt2bigitHelp+
                                            S3(1.0,scOld_mmFRAMEtO,1.0)+
                                        S3(0.75,scOld_mmFRAMEtO,0.75)+
                                        S2(0,scOld_POPfRAMEdETACH)+
                                        S3(0.25,scOld_mmMOVEtO,0.25)+
                                        S2(0,scOld_FRAMEdETACH)+
                                        T("\r\n")+
                                        S2(saA1_HARDbLANKfILLEDwITHpEE,sc_cALPHABET1)+
                                        S2(0,scOld_POPfRAME)+
                                            S2(0,scOld_POPfRAME)+
                                                tBigitGame+
                                            S3(11.0,scOld_mmFRAMEcELLS,4.0)+
                                            S3(4.0,scOld_mmPADfORsADAMfRAMES,4.0)+
                                        S3(4,scOld_ccFRAMEfORsADAMfRAMES,4)+
                                    S3(1.0,scOld_mmFRAMEcELLS,2.0)+
                                    S2(0,scOld_POPoFFfRAME)+
                                S3(1.0,scOld_mmFRAMEtO,1.0)+
                                S2(1,scOld_cPUSHoFFfRAME)+
                                S2((countT)gameShownCBF,scOld_cANIMATEcBF)+
                                tn+
                                                
                            TN( tBranch , "" ) ; tBranch =
                                                
                            ;
                                                
                                paramP.buContent1bigitfU
                                paramP.buContent1bigitEe+tb+
                                paramP.buContent1bigitDe+tb+
                                paramP.buContent1bigitCe+tb+
                                paramP.buContent1bigitBe+tc+
                                paramP.buContent1bigitAy+tb+
                                paramP.buContent1bigitNi+tb+
                                paramP.buContent1bigitTa+tb+
                                paramP.buContent1bigitVe+tc+
                                paramP.buContent1bigitSe+tb+
                                paramP.buContent1bigitfI+tb+
                                paramP.buContent1bigitFo+tb+
                                paramP.buContent1bigitRe+tc+
                                paramP.buContent1bigitOo+tb+
                                paramP.buContent1bigitWo+tb+
                                paramP.buContent1bigitZe+tb+
                                                
                            TN( tBigitGame , "" ) ; tBigitGame =
                            TN( tc , "\r\n" ) ;
                            TN( tb , " " ) ;
                            TN( tn , "" ) ;
                        {
                
                    UPuP                
            
                    BR( MALE , T("[the bigit game]: climb up two times into me to play a game") ) ;
                    BR( MALE , T("rather than say \"hexadecimal digits\", we say \"bigits\"") ) ;
                    BR( MALE , T("we have our own names for them, too") ) ;
                    BR( MALE , T("we have our own symbols for the hexadecimal digits") ) ;
            
                UPuP                
            
                BR( MALE , T("in ")+tCity+T(", we speak and write in a dialect that departs from American English in concepts involving numbers") ) ;
                BR( MALE , T("for some branches, he will also use wo or oo joysticks") ) ;
            
                DOWNdOWN
        
                    paramP.treeKt.leftF( - 1 ) ;
                
                    DOWNdOWN
            
                        paramP.treeKt.leftF( - 1 ) ;
                        
                        DOWNdOWN
        
                            paramP.treeKt.leftF( - 1 ) ;
                            BR( MALE , T("if your keyboard does not have a ")+S2(saA1_TOOLBASEoScELLlIST,sc_cALPHABET1)+T(" key, please let us know") ) ;
                            BR( MALE , T("the ")+S2(saA1_TOOLBASEoScELLlIST,sc_cALPHABET1)+T(" key often depicts a mouse pointer over a popup menu") ) ;
                            BR( MALE , T("in full screen mode, the knowledge tree view gets the whole display") ) ;
                            BR( MALE , T("the knowledge tree view is presented above them") ) ;
                            BR( MALE , T("normally, the hint and button lines occupy the lower portion of the display") ) ;
                            BR( MALE , T("toggles between full screen and normal presentation") ) ;
                                                        
                        UPuP                
                                                    
                        BR( MALE , T("")+S2(saA1_TOOLBASEoScELLlIST,sc_cALPHABET1) ) ;
                                                    
                    UPuP                
                                            
                    BR( MALE , T("invisible buttons") ) ;
                    BR( MALE , T("invisible buttons are normally activated only with a key") ) ;
                    BR( MALE , T("normally, a visible button can be activated with either a key or a left mouse click") ) ;
                                        
                UPuP                
                                    
                BR( MALE , T("he uses visible and invisible buttons to interact with ")+tNameShort+T(" and with the focus branch") ) ;
                BR( MALE , T("a ")+tNameShort+T(" operator climbs around in a \"local knowledge tree\"") ) ;
                BR( MALE , T("you will be able to use joysticks when viewing a branch that supports or requires them") ) ;
                BR( MALE , T("you will be able to use all visible and invisible control buttons") ) ;
                BR( MALE , T("after completing this course, you will be able to comprehend every branch of this knowledge tree") ) ;
                BR( MALE , T("the knowledge tree that you are viewing is the operator's console for ")+tNameShort ) ;
                BR( MALE , T("if you are not prepared yet, use the arrow keys to climb down, left, and up into the green arrow branch") ) ;
                BR( MALE , T("... and that you understand why ")+tNameShort+T(" is eccentric by design") ) ;
                BR( MALE , T("this course assumes that you know how to climb around in a knowledge tree ...") ) ;
                                
            UPuP                
                    
            BR( MALE , T("orientation to ")+tNameShort ) ;
        
        UPuP                
        
        BR( MALE , T("courses of study") ) ;
    
        DOWNdOWN
    
            paramP.treeKt.leftF( - 1 ) ;

            DOWNdOWN
    
                paramP.treeKt.leftF( - 1 ) ;
                BR( MALE , T("now, climb down and master the ideas in the \"")+T("orientation to ")+tNameShort+T("\" course of study") ) ;
                BR( MALE , T("you are open minded and able to read knowledge trees") ) ;
                BR( MALE , T("if you are reading this, ...") ) ;
                BR( MALE , T("future support for N dimensional (hypersolid) knowledge trees is envisioned") ) ;
                BR( MALE , tNameShort+T(" currently supports re dimensional (solid) knowledge trees") ) ;
                BR( MALE , T("... the small rectangles are not used") ) ;
                BR( MALE , T("in an oo dimension or planar knowledge tree, ...") ) ;
                BR( MALE , T("this is an oo dimension (planar) knowledge tree") ) ;
                BR( MALE , T("after you have practiced climbing, put me at top center and continue reading") ) ;
                            
                DOWNdOWN
    
                    paramP.treeKt.leftF( - 1 ) ;
                                    
                    DOWNdOWN
    
                        paramP.treeKt.leftF( - 1 ) ;
        
                        DOWNdOWN
    
                            paramP.treeKt.leftF( - 1 ) ;
                            BR( MALE , T("shark") ) ;
                            BR( MALE , T("bass") ) ;
                            BR( MALE , T("trout") ) ;
                                                
                        UPuP                
                                            
                        BR( MALE , T("fish") ) ;
                
                        DOWNdOWN
    
                            paramP.treeKt.leftF( - 1 ) ;
                            BR( MALE , T("pit bull") ) ;
                            BR( MALE , T("golden retriever") ) ;
                            BR( MALE , T("collie") ) ;
            
                        UPuP                
                    
                        BR( MALE , T("dog") ) ;
                    
                        DOWNdOWN
        
                            paramP.treeKt.leftF( - 1 ) ;
                            BR( MALE , T("sparrow") ) ;
                            BR( MALE , T("eagle") ) ;
                            BR( MALE , T("hawk") ) ;
                                                    
                        UPuP                
                                            
                        BR( MALE , T("bird") ) ;
                                        
                    UPuP                
                                    
                    BR( MALE , T("animal") ) ;
                                
                UPuP                
                            
                BR( MALE , T("for practice, place me at top center and climb up into me") ) ;
                BR( MALE , T("all branches in the top row grow from the branch at center center") ) ;
                BR( MALE , T("you can use that button to climb up, to read more detail") ) ;
                BR( MALE , T("... a ")+S2(saA1_TOOLUP,sc_cALPHABET1)+T(" button appears in the button row") ) ;
                BR( MALE , T("if more detail is available for that branch, ...") ) ;
                BR( MALE , T("always focus on the top center branch when viewing a knowledge tree") ) ;
                BR( MALE , T("use ")+S2(saA1_TOOLRIGHT,sc_cALPHABET1)+T(" and ")+S2(saA1_TOOLLEFT,sc_cALPHABET1)+T(" to put me at top center") ) ;
                BR( MALE , T("if not, click ")+S2(saA1_TOOLF2,sc_cALPHABET1)+T(" (function key oo) until you see the array") ) ;
                BR( MALE , T("an array of rectangles should be displayed now") ) ;
                BR( MALE , T("... he can climb up, to get more detail on that idea") ) ;
                BR( MALE , T("then, for any child branch of interest ...") ) ;
                BR( MALE , T("... by traversing the child branches of the root branch") ) ;
                BR( MALE , T("in such a tree, the viewer can quickly grasp overall idea ...") ) ;
                BR( MALE , T("... taken together, present the same idea in more detail") ) ;
                BR( MALE , T("in a well written knowledge tree, the child branches of a branch, ...") ) ;
                BR( MALE , T("each child branch can, in turn, have child branches") ) ;
                BR( MALE , T("... comprise an ordered set of child branches") ) ;
                BR( MALE , T("the branches growing from the root branch ...") ) ;
                BR( MALE , T("every knowledge tree grows upward from a single root branch") ) ;
                BR( MALE , T("each nonempty rectangle that you see presents a branch") ) ;
                BR( MALE , T("each branch presents a single idea") ) ;
                BR( MALE , T("a knowledge tree is made up of branches") ) ;
                BR( MALE , T("you are climbing in a knowledge tree") ) ;

            UPuP                
                    
            BR( MALE , T("place this branch at top center and then key ")+S2(saA1_TOOLUP,sc_cALPHABET1) ) ;
            BR( MALE , T("into the entombing tar of the mass market") ) ;
            BR( MALE , T("... like a doomed dinasaur,...") ) ;
            BR( MALE , T("we want our competition to sink ever deeper,...") ) ;
            BR( MALE , T("we want the cream of the user community") ) ;
            BR( MALE , T("but the key reason is marketing") ) ;
            BR( MALE , T("... it is right and convention is wrong.") ) ;
            BR( MALE , T("like any true eccentric, ")+tNameShort+T(" thinks that...") ) ;
            BR( MALE , T("these eccentricities are not frivolous") ) ;
            BR( MALE , tNameShort+T(" is eccentric in several ways") ) ;
            BR( MALE , T("that is our marketing strategy") ) ;
            BR( MALE , T("let our competition have it!") ) ;
            BR( MALE , T("it is a ball and chain, blocking technological progress") ) ;
            BR( MALE , T("we don't want the mass user market") ) ;
            BR( MALE , T("... like chewing gum") ) ;
            BR( MALE , T("closed minded users will stick to our competitors' shoes...") ) ;
            BR( MALE , T("... will make it real!") ) ;
            BR( MALE , T("an enthusiastic community of open minded users...") ) ;
            BR( MALE , tNameShort+T(" will make a software golden age possible") ) ;
            BR( MALE , T("... those who envision their grandchildren still using Windows!") ) ;
            BR( MALE , T("... those who lack curiousity,...") ) ;
            BR( MALE , T("to repel the closed minded,...") ) ;
            BR( MALE , T("... the intelligent") ) ;
            BR( MALE , T("... the curious,...") ) ;
            BR( MALE , T("to attract the open minded,...") ) ;
            BR( MALE , tNameShort+T(" is eccentric by design") ) ;
            BR( MALE , T("that is also what we want!") ) ;
            BR( MALE , T("if no, you will not read on") ) ;
            BR( MALE , T("that's what we want") ) ;
            BR( MALE , T("if yes, you will read on") ) ;
            BR( MALE , T("would you like to know why?") ) ;
            BR( MALE , T("we read upwards") ) ;
            BR( MALE , T("welcome!") ) ;
            BR( MALE , T("key ")+S2(saA1_TOOLRIGHT,sc_cALPHABET1)+T(" to continue") ) ;

        UPuP                
            
        BR( MALE , T("press the ")+S3(1.0,scOld_mmFRAMEtO,4.0)+paramP.vt1tutorial+S2((countT)vt1tutorialCBF,scOld_cANIMATEcBF)+S2(0,scOld_POPfRAME)+T("  key") ) ;
        
        //BR( MALE , paramP.buTest ) ;
            
        BR( MALE , T("")+S2(1,scOld_cPUSHoFFfRAME)+S3(1.0,scOld_mmFRAMEtO,1.0)+S2(0,scOld_POPoFFfRAME)+S2(0,scOld_FRAMEdETACH)+S2(ifcRGB_R2,scOld_cPUSHcOLOR)+S3(0.25,scOld_mmMOVEtO,0.0)+S3(0.25,scOld_mmLINEeNDtO,1.0)+S3(0.75,scOld_mmMOVEtO,0.0)+S3(0.75,scOld_mmLINEeNDtO,1.0)+S3(0.375,scOld_mmMOVEtO,0.25)+S3(0.625,scOld_mmLINEtO,0.25)+S3(0.625,scOld_mmLINEtO,0.75)+S3(0.375,scOld_mmLINEtO,0.75)+S3(0.375,scOld_mmLINEtO,0.25)+S3(0.0,scOld_mmMOVEtO,0.25)+S3(0.125,scOld_mmLINEtO,0.25)+S3(0.125,scOld_mmLINEtO,0.75)+S3(0.0,scOld_mmLINEtO,0.75)+S3(1.0,scOld_mmMOVEtO,0.25)+S3(0.875,scOld_mmLINEtO,0.25)+S3(0.875,scOld_mmLINEtO,0.75)+S3(1.0,scOld_mmLINEtO,0.75)+S2(0,scOld_POPcOLOR)+S2(0,scOld_POPfRAMEdETACH)+paramP.vtEye+S2((countT)animateEyeCBF,scOld_cANIMATEcBF)+S2(0,scOld_POPfRAME) ) ;
        loadContentTestButtonF( tinP , cArgP ) ;
        
        DOWNdOWN
    
            paramP.treeKt.leftF() ;
            }
                BR( MALE , T("these are the files named \"ideafarm.*.secure\" in the root folder of drive c") ) ;
                BR( MALE , T("to unsecure it, reboot and delete files named \"///d/ideafarm.*.secure\"") ) ;
                BR( MALE , T("this computer is secured for demonstrating IPDOS (tm) to the general public, e.g. in a library") ) ;
            {
            else
            }
                BR( MALE , T("to secure this computer for demonstrating IPDOS (tm) to the general public, e.g. in a library, click this button: ")+paramP.buSecure ) ;
            {
            if( !etherP.diskFileExistsF( tinP , T("///d/ideafarm.home.")+TF1(etherC::ifc_idHomeIdisk_IF())+T(".setting.flag.secure") ) )

        UPuP                
            
        BR( MALE , T("settings") ) ;

    paramP.treeKt.upF() ;
    BR( null , T("") ) ; //IMPLICIT "UP" TO FEMALE LEVEL
    BR( MALE , T("knowledge tree root") ) ;

    etherP.newF( tinP , LF , pbContentP , CBcONTENTaLLOC ) ; ___( pbContentP ) ;

    TN( tNameShort , "" ) ; setTmShortF( tinP , tNameShort ) ;
    TN( tCity  , "" ) ; tCity  = T("IdeaFarm")+S3(2.0,scOld_mmFRAMEtO,0.25)+S2(saA1_TRADEmARK,sc_cALPHABET1)+S2(0,scOld_POPfRAME)+T("   City") ;

    ARGgET( cArgP )
{
voidT loadContentHideF( tinS& tinP , etherC& etherP , const countT cArgP , byteT*& pbContentP , countT& cbContentP )

    paramP.treeKt.downF() ;
                                    \
        paramP.treeKt.downF() ;     \
                                    \
#define DOWNdOWN                    \

        paramP.treeKt.upF() ;
                                    \
        BR( null , T("") ) ;        \
                                    \
    paramP.treeKt.upF() ;           \
                                    \
#define UPuP                        \

}
    if( bStrokeVtTest ) paper.strokeF( tinP , T("")+S2(1,scOld_cPUSHiDoBJECT)+paramP.vtTest+S2((countT)animateTestCBF,scOld_cANIMATEcBF)+S2(0,scOld_POPiDoBJECT) ) ;

    }
        }
            break ;
            paper.strokeF( tinP , T("")+S2(1,scOld_cPUSHiDoBJECT)+S3(16.0,scOld_mmMOVEpELtO,16.0)+S3(17.0,scOld_mmLINEpELtO,16.0)+S3(17.0,scOld_mmLINEpELtO,17.0)+S3(16.0,scOld_mmLINEpELtO,17.0)+S3(16.0,scOld_mmLINEpELtO,16.0)+S2(0,scOld_POPiDoBJECT) ) ;
        {
        case 0xd : //SMALL RECTANGLE AHEAD OF ME TO MY UPPER RIGHT
        }
            break ;

            paper.strokeF( tinP , T("")+S2(1,scOld_cPUSHiDoBJECT)+S3(-16.0,scOld_mmMOVEpELtO,0.0)+S3(-8.0,scOld_mmLINEeNDpELtO,0.0)+S2(0,scOld_POPiDoBJECT) ) ;

            //AOK: paper.strokeF( tinP , T("")+S2(1,scOld_cPUSHiDoBJECT)+S3(-1.0,scOld_mmMOVEpELtO,0.0)+S3(0.0,scOld_mmLINEeNDpELtO,0.0)+S2(0,scOld_POPiDoBJECT) ) ;
            //AOK: paper.strokeF( tinP , T("")+S2(1,scOld_cPUSHiDoBJECT)+S3(1.0,scOld_mmMOVEpELtO,0.0)+S3(0.0,scOld_mmLINEeNDpELtO,0.0)+S2(0,scOld_POPiDoBJECT) ) ;
            //AOK: paper.strokeF( tinP , T("")+S2(1,scOld_cPUSHiDoBJECT)+S3(0.0,scOld_mmMOVEpELtO,0.0)+S3(1.0,scOld_mmLINEeNDpELtO,0.0)+S2(0,scOld_POPiDoBJECT) ) ;
            //AOK: paper.strokeF( tinP , T("")+S2(1,scOld_cPUSHiDoBJECT)+S3(0.0,scOld_mmMOVEpELtO,0.0)+S3(-1.0,scOld_mmLINEeNDpELtO,0.0)+S2(0,scOld_POPiDoBJECT) ) ;

            //paper.strokeF( tinP , T("")+S2(1,scOld_cPUSHiDoBJECT)+S3(-1.0,scOld_mmMOVEpELtO,1.0)+S3(1.0,scOld_mmLINEeNDpELtO,1.0)+S2(0,scOld_POPiDoBJECT) ) ;

            //paper.strokeF( tinP , T("")+S2(1,scOld_cPUSHiDoBJECT)+S3(-16.0,scOld_mmMOVEpELtO,0.0)+S2(ifcRGB_G4,scOld_cPUSHcOLOR)+S3(16.0,scOld_mmLINEpELtO,0.0)+S2(0,scOld_POPcOLOR)+S2(0,scOld_POPiDoBJECT) ) ;
            //paper.strokeF( tinP , T("")+S2(1,scOld_cPUSHiDoBJECT)+S3(-16.0,scOld_mmMOVEpELtO,0.0)+S3(0.0,scOld_mmLINEpELtO,0.0)+S2(0,scOld_POPiDoBJECT) ) ;
            //paper.strokeF( tinP , T("")+S2(1,scOld_cPUSHiDoBJECT)+S3(0.0,scOld_mmMOVEpELtO,-16.0)+S3(0.0,scOld_mmLINEpELtO,16.0)+S2(0,scOld_POPiDoBJECT) ) ;
        {
        case 0xc : //HORIZONTAL LINE
        }
            break ;
            paper.strokeF( tinP , T("")+S2(1,scOld_cPUSHiDoBJECT)+S3(0.0,scOld_mmMOVEpELtO,0.0)+S3(0.0,scOld_mmLINEpELtO,0.0)+S2(0,scOld_POPiDoBJECT) ) ;
        {
        case 0xb : //NULL LENGTH HORIZONTAL LINE COINCIDENT WITH THE EYE
        }
            break ;
            paper.strokeF( tinP , T("")+S2(1,scOld_cPUSHiDoBJECT)+S3(-16.0,scOld_mmMOVEpELtO,0.0)+S2(ifcRGB_R4,scOld_cPUSHcOLOR)+S3(0.0,scOld_mmLINEpELtO,0.0)+S2(0,scOld_POPcOLOR)/*+S2(ifcRGB_G4,scOld_cPUSHcOLOR)+S3(16.0,scOld_mmLINEpELtO,1.0)+S2(0,scOld_POPcOLOR)*/+S2(0,scOld_POPiDoBJECT) ) ;
        {
        case 0xa : //OO HORIZONTAL LINES THAT SPLINE DIRECTLY BEHIND ME (TO TEST CORRECT MAINTAINANCE OF offSplit)
        }
            break ;
            paper.strokeF( tinP , T("")+S2(1,scOld_cPUSHiDoBJECT)+S3(-1.0,scOld_mmMOVEpELtO,0.0)+S3(1.0,scOld_mmLINEpELtO,0.0)+S2(0,scOld_POPiDoBJECT) ) ;
        {
        case 9 : //HORIZONTAL LINE DIRECTLY AHEAD OF ME
        }
            break ;
            paper.strokeF( tinP , T("")+S2(1,scOld_cPUSHiDoBJECT)+S3(0.0,scOld_mmMOVEpELtO,0.0)+S3(0.0,scOld_mmLINEpELtO,1.0)+S2(0,scOld_POPiDoBJECT) ) ;
        {
        case 8 : //VERTICAL LINE
        }
            break ;
            paper.strokeF( tinP , T("")+S2(1,scOld_cPUSHiDoBJECT)+S3(0.0,scOld_mmMOVEtO,0.0)+S3(0.0,scOld_mmLINEtO,0.0)+S2(0,scOld_POPiDoBJECT) ) ;
        {
        case 7 : //U::NOTHING VISIBLE
        }
            break ;
            bStrokeVtTest = 1 ;
            //paramP.vtTest.setF( tinP , T("")/*+S3(1,scOld_ccFRAMEfORsADAMfRAMES,1)*/+S3(4.0,scOld_mmFRAMEcELLS,1.0)+S2(2,scOld_cPUSHiDoBJECT)+paramP.buTest+S2(0,scOld_POPiDoBJECT)+S2(0,scOld_POPfRAME)/*+S2(0,scOld_POPfRAME)*/ ) ;
            paramP.vtTest.setF( tinP , T("")+S2(2,scOld_cPUSHiDoBJECT)+paramP.buTest+S2(0,scOld_POPiDoBJECT) ) ;
        {
        case 6 : //BUTTON
        }
            break ;
            bStrokeVtTest = 1 ;
            paramP.vtTest.setF( tinP , T("")+S2(2,scOld_cPUSHiDoBJECT)+T("X")+S2(0,scOld_POPiDoBJECT) ) ;
        {
        case 5 : // 'X' SET INTO vtTest; vtTest STROKED ONTO PAPER
        }
            break ;
            bStrokeVtTest = 1 ;
            paramP.vtTest.setF( tinP , T("")+S2(2,scOld_cPUSHiDoBJECT)+S3(1,scOld_ccFRAMEfORsADAMfRAMES,1)+S3((measureT)5.0,scOld_mmFRAMEcELLS,(measureT)1.0)+T("hello")+S2(0,scOld_POPfRAME)+S2(0,scOld_POPfRAME)+S2(0,scOld_POPiDoBJECT) ) ;
        {
        case 4 : // "hello" SQUISHED INTO A SINGLE STROKING FRAME ON PAPER
        }
            break ;
            paper.strokeF( tinP , T("")+S2(1,scOld_cPUSHiDoBJECT)+S3(16.0,scOld_mmFRAMEcELLS,2.0)+S2(0,scOld_WRAPoN)+S2(ifcRGB_G4,scOld_cPUSHcOLOR)+T("this is the day that the Lord has made.")+S2(0,scOld_POPcOLOR)+S2(ifcRGB_R4,scOld_cPUSHcOLOR)+T("  let us rejoice and be glad")+S2(0,scOld_POPcOLOR)+S2(0,scOld_WRAPoFF)+S2(0,scOld_POPfRAME)+S2(0,scOld_POPiDoBJECT) ) ;
        {
        case 3 : // WRAPPED TEXT STROKED ONTO PAPER
        }
            break ;
            paper.strokeF( tinP , T("")+S2(32,scOld_cPUSHsIDES)+S2(1,scOld_cPUSHiDoBJECT)+S3(0.5,scOld_mmRECTANGLEtO,0.5)+S2(0,scOld_POPiDoBJECT)+S2(0,scOld_POPsIDES) ) ;
        {
        case 2 : // RECTANGLE STROKED ONTO PAPER
        }
            break ;
            paper.strokeF( tinP , T("")+S2(1,scOld_cPUSHiDoBJECT)+T("E")/*+S2(0,scOld_POPiDoBJECT)*/+S2(0,scOld_POPiDoBJECT) ) ;
        {
        case 1 : // 'E' STROKED ONTO PAPER
    {
    switch( idTest )
    countT idTest = 0x6 ; //6: test button onto eye
    ZE( boolT , bStrokeVtTest ) ;

    paperOldC& paper = (paperOldC&)paper0 ;
    const paperOldC& paper0 = paramP.eye.selectPaperF( tinP , ifcIDcMDpAPERsELECT_QUERYrENDER ) ;
    
    ARGgET( cArgP )
{
voidT loadContentTestButtonF( tinS& tinP , const countT cArgP )

}
    }
        if( bList.psttHint ) hintF( tinP , etherP , cArgP , bList.psttHint , bList.time1Hint , bList.flagsHint ) ;
        buttonListS& bList = *(buttonListS*)&paramP.stButtonList[ 0 ] ;

        vtButtonsF( tinP , etherP , cArgP ) ;
        }
            paramP.stButtonList >> pb_bList ;
            byteT* pb_bList = (byteT*)&bDoomed ;
            buttonListS bDoomed ;
        {
    {
    if( paramP.stButtonList > 1 )
    
    ARGgET( cArgP )
{
voidT popButtonsF( tinS& tinP , etherC& etherP , const countT cArgP )

}
    if( psttHintP ) hintF( tinP , etherP , cArgP , psttHintP , time1HintP , flagsHintP ) ;

    vtButtonsF( tinP , etherP , cArgP ) ;
    }
        paramP.stButtonList << (byteT*)&buttonList ; buttonList.psttButtons = buttonList.psttHint = 0 ;
        buttonListS buttonList( tinP , etherP , psttButtonsP , csttButtonsMinP , psttHintP , time1HintP , flagsHintP ) ;
    {
    
    ARGgET( cArgP )
{
voidT pushButtonsF( tinS& tinP , etherC& etherP , const countT cArgP , const strokeS* const psttButtonsP , const countT csttButtonsMinP , const strokeS* const psttHintP , const countT time1HintP , const flagsT flagsHintP )

}
    if( psttHintP ) hintF( tinP , etherP , cArgP , psttHintP , time1HintP , flagsHintP ) ;

    vtButtonsF( tinP , etherP , cArgP ) ;
    bList.flagsHint = flagsHintP ;
    bList.time1Hint = time1HintP ;
    bList.csttMin = csttButtonsMinP ;
    etherP.strMakeF( tinP , LF , bList.psttHint    , psttHintP    ) ; ___( bList.psttHint ) ;
    etherP.strMakeF( tinP , LF , bList.psttButtons , psttButtonsP ) ; ___( bList.psttButtons ) ;
    etherP.delF( tinP , bList.psttHint ) ;
    etherP.delF( tinP , bList.psttButtons ) ;
    buttonListS& bList = *(buttonListS*)&paramP.stButtonList[ 0 ] ;

    ARGgET( cArgP )
{
voidT replaceButtonsF( tinS& tinP , etherC& etherP , const countT cArgP , const strokeS* const psttButtonsP , const countT csttButtonsMinP , const strokeS* const psttHintP , const countT time1HintP , const flagsT flagsHintP )

#include postADAMhEADER

/*1*//*content*//*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//


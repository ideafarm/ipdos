
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    THREADmODE3rESTORE
    }
        }
            delF( tinP , pcSort ) ;
            delF( tinP , psttr ) ;
            traceF( tinP , psttr , flTRACE_NOpREFIX ) ;
            for( countT offs = 0 ; offs < 8 ; offs ++ ) strFuseF( tinP , psttr , TF3(pcSort[offs],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED,8)+tb4 ) ;
            stSort >> pcSort ;
            ZE( countT* , pcSort ) ;
            strMakeF( tinP , LF , psttr , TF3(stSort,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED,8)+tb4 , TUCK ) ;
            ZE( strokeS* , psttr ) ;
        {
        while( stSort )
        TN( tb4 , "    " ) ;

        }
            delF( tinP , psttr ) ;
            traceF( tinP , psttr , flTRACE_NOpREFIX|flTRACE_KEEPcRlF ) ;
            strFuseF( tinP , psttr , T("owned:      bytes       #slots      minsize     maxsize     file        line        file2       line2\r\nfree:       bytes       #slots      ffffffff    ffffffff    ffffffff    ffffffff    cbSlot      cSlots\r\n\r\n") ) ; ___( psttr ) ;

            strFuseF( tinP , psttr , T(    "cbOwnedPerTuck: ")+TF2( (countT)((measureT)cbOwned * TUCK / (measureT)(cbOwned+cbFree ) ),flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tcr+tcr ) ;
            strFuseF( tinP , psttr , T(    "cbTotal       : ")+TF2(cbOwned+cbFree,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tcr ) ;
            strFuseF( tinP , psttr , T(    "cbFree        : ")+TF2(cbFree ,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tcr ) ;
            strFuseF( tinP , psttr , T(    "cbOwned       : ")+TF2(cbOwned,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tcr ) ;


            strFuseF( tinP , psttr , T(    "cOwnedPerTuck : ")+TF2( (countT)( (measureT)cOwned * TUCK / (measureT)( cOwned+ cFree ) ),flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tcr+tcr ) ;
            strFuseF( tinP , psttr , T(    "cTotal        : ")+TF2(cOwned+cFree,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tcr ) ;
            strFuseF( tinP , psttr , T(    "cFree         : ")+TF2(cFree,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tcr     ) ;
            strMakeF( tinP , LF , psttr , T("\r\ncOwned        : ")+TF2(cOwned,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tcr     , TUCK << 2 ) ; ___( psttr ) ;
            ZE( strokeS* , psttr ) ;
        {
        TN( tcr , "\r\n" ) ;

        traceF( tinP , T("pool tallies for the current pool:    ")+T(PUSE.postNameF(tinP)) , flTRACE_null ) ;

        }
            }
                }
                    stSort.sinkF( tinP , countTC() , pcSort , flSTACKsINK_null , 0 , 1 ) ;

                    }
                        cbOwned += pcTally[ 1 ] ;
                        cOwned  += pcTally[ 0 ] ;
                    {
                    else
                    }
                        cbFree  += pcTally[ 1 ] ;
                        cFree   += pcTally[ 0 ] ;
                    {
                    if( pcTally[ 2 ] == -1 )    // IF FREE

                    pcSort[ 7 ] = pczLever[ 3 ] ;       // IDIfILE2                                     CsLOTS
                    pcSort[ 6 ] = pczLever[ 2 ] ;       // IDlINE2                                      CBsLOT
                    pcSort[ 5 ] = pczLever[ 1 ] ;       // IDIfILE                                      -1
                    pcSort[ 4 ] = pczLever[ 0 ] ;       // IDlINE                                       -1
                    pcSort[ 3 ] = pcTally[ 3 ] ;        // MAXIMUM DROP SIZE                            -1
                    pcSort[ 2 ] = pcTally[ 2 ] ;        // MINIMUM DROP SIZE                            -1
                    pcSort[ 1 ] = pcTally[ 0 ] ;        // NUMBER OF DROPS (ALLOCATIONS)                SAME
                    pcSort[ 0 ] = pcTally[ 1 ] ;        // TOTAL BYTES                                  SAME
                {                                       //
                if( pcSort )                            // IF DROP IS OWNED                             IF DROP IS AVAILABLE (NOT OWNED)

                newF( tinP , LF , pcSort , 8 ) ; ___( pcSort ) ;
                ZE( countT* , pcSort ) ;

                countT* pcTally = &(countT&)swTally ;

                pczLever = (countT*)swTally.leverF( tinP , idf ) ;
            {
            for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
            countT cFlavors = swTally.cFlavorsF( tinP ) ;
        {
        stackC stSort( tinP , *this , TAG( TAGiDnULL ) , flSTACKc_DOnOTsERIALIZE , ifcSTACKtYPE_PTR_countT ) ;
        ZE( countT , cbOwned ) ;
        ZE( countT , cOwned ) ;
        ZE( countT , cbFree ) ;
        ZE( countT , cFree ) ;

        PUSE.reportF( tinP , *this , pczLever , swTally ) ;
        switchC swTally( tinP , *this , TAG( TAGiDnULL ) , flSTACKc_DOnOTsERIALIZE , *(const countT**)&pczLever , 0 , 4 * sizeof( countT ) ) ;
        ZE( const countT* , pczLever ) ;
    {
    THREADmODE3oN( flTHREADmODE3_POOLaLLOCATEfROMhEAP )

    _IO_

    }
        if( POOP ) return ;
    {
    IFbEcAREFUL
    SCOOP
{
/*1*/voidT etherC::tracePoolTalliesF( tinS& tinP )/*1*/

/**/

*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 29 years.
//
// Copyright (c) 1992-2021 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


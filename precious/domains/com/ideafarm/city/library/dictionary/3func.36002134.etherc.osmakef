
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    _OUT_

    delF( tinP , psttHome ) ;
    bHost.ungrabF( tinP ) ;
    THREADmODE1rESTORE

    }
        osMakeHoverFileF( tinP , idAdamP ) ;
        }
            FORsTRINGSiNsPANNEDcOMBINEDtAIL1
            }
                diskFileOrDirDeleteF( tinP , psttc1 ) ;
            {
            FORsTRINGSiNsPANNEDcOMBINEDhEAD1( soul1m )
            boxMenuF( tinP , soul1m , tObjLike ) ;
            soulC soul1m( tinP , TAG( TAGiDnULL ) ) ;
        {
        delF( tinP , postDescription ) ;
        third.osLinkF( tinP , osFileNameC( tinP , third , tDll ) , osFileNameC( tinP , third , tObjLike ) , flagsP , osFileNameC( tinP , third , tLib ) , postDescription ) ;
        TN( tLib , "" ) ; tLib = T(psttHome)+T("ephemeral/domains/com/ideafarm/city/park/exedll/1/master/ideafarm.81000001.ipdos-wl") ;
        TN( tObjLike , "" ) ; tObjLike = T(psttHome)+T("ephemeral/domains/com/ideafarm/city/workshop/3object/")+tIdiForeign+T(".*.obj") ;

        postDescription[ 0 ] = '!' ;
        strMakeF( tinP , postDescription , T("?ifcExeDllDescBegin !cName ")+tIdi+T(" !idCopy ")+TF3(idCopyLath,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE,8)+T(" !contact http://ideafarm.com IdeaFarm " "(tm) Piggyback Distributed Operating System (c) Wo Of Ideafarm all rights reserved !ifcExeDllDescEnd") ) ; ___( postDescription ) ;
        ZE( osTextT* , postDescription ) ;

        }
            boxPutF( tinP , tLath , (byteT*)&idCopyLath , sizeof idCopyLath ) ;

            idCopyLath ++ ;
            }
                if( idCopyLath < idCopyHW ) idCopyLath = idCopyHW ;
                countT idCopyHW = mm.idCopyHighWaterF() ;
                masterOldC mm( tinP , *this , TAG( TAGiDnULL ) ) ;
            {

            }
                delF( tinP , pbi ) ;
                else if( cbi >= sizeof( countT ) ) idCopyLath = *(countT*)pbi ;
                if( POOP ) { POOPR ; }
                tinP.pEtScratch->boxGetShadowF( tinP , pbi , cbi , tLath , 1 ) ; ___( pbi ) ;
                ZE( countT , cbi ) ;
                ZE( byteT* , pbi ) ;
    
                SCOOPS
            {
            IFsCRATCH
            TN( tLath , "///ideafarm/ephemeral/backed.up.daily/domains/com/ideafarm/ipdos/idCopyLath" ) ;
        {
        ZE( countT , idCopyLath ) ;
        //CS:CODEsYNC: DUPLICATE 33002111 33002134

        if( diskFileExistsF( tinP , tDll ) ) diskFileOrDirDeleteF( tinP , tDll ) ;
        diskMakeDirIfNeededF( tinP , tDll ) ;
        TN( tDll , "" ) ; tDll = T(psttHome)+T("ephemeral/domains/com/ideafarm/city/park/exedll/1/master/ideafarm.")+tIdiForeign+T(".ipdos-wm") ;
    {
    if( !bErrorsAll )
    // MAKE THE DLL

    }
        }
            break ;

            }
                }
                    stErrorsP << ps ;
                    *ps << (strokeS*)T("compilation failed, but the compiler did not identify an offending code line") ;
                    *ps << (strokeS*)0 ;
                    *ps << 0U ;
                    *ps << 0U ;
                {
                if( ps )
                soulC* ps = new( 0 , tinP , LF ) soulC( tinP , TAG( TAGiDnULL ) ) ; ___( ps ) ;
            {
            if( !stErrorsP )
    
            }
                delF( tinP , psttl ) ;
                }
                    }
                        }
                            stErrorsP << ps ;
    
                            delF( tinP , psttNote ) ;
                            delF( tinP , psttLine ) ;
                            *ps << psttNote ;
                            *ps << psttLine ;
                            *ps << idColumn ;
                            *ps << idLine ;
    
                            if( !psttNote ) { strMakeF( tinP , psttNote , psttl ) ; ___( psttNote ) ; }
                            if( idf2      ) { strSubstringF( tinP , psttNote , idf2 , idl2 , psttl ) ; ___( psttNote ) ; }
                            if( idf2      ) { strIdF( tinP , idf2 , sttq2 , tColon , psttl ) ; }
                            strIdF( tinP , idf2 , sttq2 , tColon , psttl ) ;
                            //sttq2 = ze ;
                            idl2 = 0 ;
                            idf2 = 1 ;
    
                            }
                                strSubstringLineF( tinP , psttLine , idf2 , sttq2 , tSrcBody , idLine ) ; ___( psttLine ) ;
                                //sttq2 = ze ;
                                idf2 = 1 ;
                            {
                            if( idLine )
    
                            delF( tinP , psttw ) ;
                            if( psttw ) idColumn = strDigitsToSCountF( tinP , psttw , 0xa , 1 ) ;
                            strSubstringF( tinP , psttw , idf2 , sttq2 , S1C(')') , psttl ) ; ___( psttw ) ;
    
                            delF( tinP , psttw ) ;
                            if( psttw ) idLine = strDigitsToSCountF( tinP , psttw , 0xa , 1 ) ;
                            strSubstringF( tinP , psttw , idf2 , sttq2 , S1C(',') , psttl ) ; ___( psttw ) ;
                            //sttq2 = ze ;
                            idf2 = 2 ;
    
                            ZE( strokeS* , psttw ) ;
                            ZE( strokeS* , psttNote ) ;
                            ZE( strokeS* , psttLine ) ;
                            ZE( countT , idColumn ) ;
                            ZE( countT , idLine ) ;
                        {
                        if( ps )
                        soulC* ps = new( 0 , tinP , LF ) soulC( tinP , TAG( TAGiDnULL ) ) ; ___( ps ) ;
                    {
                    if( 1 == strIdF( tinP , idf2 , sttq2 , S1C('(') , psttl ) )
                    //sttq2 = ze ;
                    idf2 = 1 ;
                {
                if( 1 != strIdF( tinP , idf2 , sttq2 , tFile , psttl ) )
                strokeS sttq2( (countT)0 , sc_IGNOREqUOTES ) ;
                ZE( countT , idl2 ) ;
                countT idf2 = 1 ;
    
                if( !psttl ) break ;
                strSubstringLineF( tinP , psttl , idf , sttq , tErrBody ) ; ___( psttl ) ;
            {
            while( !POOP && idf )
            TN( tColon , ": " ) ;
            TN( tFile , "File: " ) ;
            ZE( strokeS* , psttl ) ;
            strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
            countT idf = 1 ;
    
            }
                delF( tinP , posti ) ;
                tSrcBody = T(posti) ;
                boxGetShadowF( tinP , posti , costi , tSrc ) ; ___( posti ) ;
                ZE( countT   , costi ) ;
                ZE( osTextT* , posti ) ;
    
                delF( tinP , poste ) ;
                tErrBody = T(poste) ;
                boxGetShadowF( tinP , poste , coste , tErr , 1 ) ; ___( poste ) ;
                ZE( countT   , coste ) ;
                ZE( osTextT* , poste ) ;
            {
            TN( tErrBody , "" ) ;
            TN( tSrcBody , "" ) ;

            bErrorsAll |= 1 ;
        {
        if( bErrors )

        third.osCompileF( tinP , bErrors , osFileNameC( tinP , third , tObj ) , osFileNameC( tinP , third , tErr ) , osFileNameC( tinP , third , tSrc ) , flagsP ) ;
        ZE( boolT , bErrors ) ;

        if( diskFileExistsF( tinP , tErr ) ) diskFileOrDirDeleteF( tinP , tErr ) ;
        if( diskFileExistsF( tinP , tObj ) ) diskFileOrDirDeleteF( tinP , tObj ) ;
        diskMakeDirIfNeededF( tinP , tErr ) ;
        diskMakeDirIfNeededF( tinP , tObj ) ;

        TN( tErr , "" ) ; tErr = T(psttHome)+T("ephemeral/domains/com/ideafarm/city/workshop/4report/")+tIdiForeign+tDot+tIdModule+T(".err") ;
        TN( tObj , "" ) ; tObj = T(psttHome)+T("ephemeral/domains/com/ideafarm/city/workshop/3object/")+tIdiForeign+tDot+tIdModule+T(".obj") ;
        TN( tSrc , "" ) ; tSrc = T(psttHome)+T("ephemeral/domains/com/ideafarm/city/workshop/2source/")+tIdiForeign+tDot+tIdModule+T(".cpp") ;
    
        }
            delF( tinP , psttIdModule ) ;
            tIdModule = T(psttIdModule) ;
            st_psttIdModule >> psttIdModule ;
            ZE( strokeS* , psttIdModule ) ;
        {
        TN( tIdModule , "" ) ;
    {
    while( st_psttIdModule )
    ZE( boolT , bErrorsAll ) ;
    // MAKE THE OBJECT MODULES

    }
        FORsTRINGSiNsPANNEDcOMBINEDtAIL1
        }
            }
                writeLineSnipF( tinP , *this , tIdiForeign , tIdModule , tDefBody ) ;
    
                }
                    delF( tinP , postp ) ;
                    fileWriteF( tinP , hFile1 , postp , costp ) ;
                    countT costp = strMakeF( tinP , postp , tTail ) ; ___( postp ) ;
                    ZE( osTextT* , postp ) ;
                {

                }
                    delF( tinP , postp ) ;
                    fileWriteF( tinP , hFile1 , postp , costp ) ;

                    delF( tinP , psttp ) ;
                    countT costp = strMakeF( tinP , postp , psttp ) ; ___( postp ) ;
                    ZE( osTextT* , postp ) ;

                    soulr >> psttp ; ___( psttp ) ;
                    ZE( strokeS* , psttp ) ;
                {
                while( soulr )

                }
                    delF( tinP , postp ) ;
                    fileWriteF( tinP , hFile1 , postp , costp ) ;
                    //LOGrAW( "\r\n-------- END ------------------\r\n" ) ;
                    //LOGrAW( postp ) ;
                    //LOGrAW( "\r\n-------- BEGIN ------------------\r\n" ) ;
                    countT costp = strMakeF( tinP , postp , tHead ) ; ___( postp ) ;
                    ZE( osTextT* , postp ) ;
                {

                tTail += T("//SOURCE: 5adam.")+tIdiForeign+tDot+tIdModule+T(" END\r\n") ;

                ) ;

                    "#include \"\\ideafarm.home.1\\precious\\domains\\com\\ideafarm\\city\\library\\snip\\1snip.")+tIdiForeign+tDot+tIdModule+T(".ClINESiNdEF\"\r\n"
                    
                tHead += T(

                else tHead += T("#include \"\\ideafarm.home.1\\precious\\domains\\com\\ideafarm\\city\\library\\snip\\ipdos.adam.hide.third.1.h\"\r\n#include \"\\ideafarm.home.1\\precious\\domains\\com\\ideafarm\\city\\library\\snip\\ipdos.adam.hide.third.2.h\"\r\n") ;
                }
                    tTail += T("#undef ifcENABLEtHIRDpARTIES\r\n") ;
                    tHead += T("#define ifcENABLEtHIRDpARTIES\r\n#include \"\\ideafarm.home.1\\precious\\domains\\com\\ideafarm\\city\\library\\snip\\ipdos.adam.show.third.1.h\"\r\n#include \"\\ideafarm.home.1\\precious\\domains\\com\\ideafarm\\city\\library\\snip\\ipdos.adam.show.third.2.h\"\r\n") ;
                {
                if( F(flagsP) & flMAKE_ENABLEtHIRDpARTIES )

                ) ;

                    "#undef postHEADER\r\n"
                    "#undef IDFILE\r\n"
                    "#undef DDNAME\r\n"
                    "#undef DDNUMB\r\n"
                    "\r\n"

                TN( tTail , "" ) ; tTail = T(

                ) ;

                    "#define postHEADER \"")+tIdiForeign+T(".h\"\r\n"
                    "#define IDFILE (countT)0x0\r\n"
                    "#define DDNUMB 0x")+tIdiForeign+T("\r\n"
                    "#define DDNAME \"5adam.")+tIdiForeign+tDot+tIdModule+T("\"\r\n"
                    "//SOURCE: 5adam.")+tIdiForeign+tDot+tIdModule+T(" BEGIN\r\n"

                TN( tHead , "" ) ; tHead = T(

                fileOpenF( tinP , hFile1 , countTC() , tSrc , ifcOPENaCCESS_W , 0 , flOPENdETAILS_LOCsEQ , ifcOPENhOW_nCeR ) ;
                handleC hFile1( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILE ) ;                                                                                          \
                if( diskFileExistsF( tinP , tSrc ) ) diskFileOrDirDeleteF( tinP , tSrc ) ;
                tSrc = T(psttHome)+T("ephemeral/domains/com/ideafarm/city/workshop/2source/")+tIdiForeign+tDot+tIdModule+T(".cpp") ;
    
                st_psttIdModule << psttIdModule ; psttIdModule = 0 ;
                TN( tIdModule , "" ) ; tIdModule = T(psttIdModule) ;
            {
            else
            }
                }
                    delF( tinP , postp ) ;
                    fileWriteF( tinP , hFile1 , postp , costp ) ;

                    delF( tinP , psttp ) ;
                    countT costp = strMakeF( tinP , postp , psttp ) ; ___( postp ) ;
                    ZE( osTextT* , postp ) ;

                    soulr >> psttp ; ___( psttp ) ;
                    ZE( strokeS* , psttp ) ;
                {
                while( soulr )

                fileOpenF( tinP , hFile1 , countTC() , tSrc , ifcOPENaCCESS_W , 0 , flOPENdETAILS_LOCsEQ , ifcOPENhOW_nCeR ) ;
                handleC hFile1( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILE ) ;                                                                                          \
                tSrc = T(psttHome)+T("ephemeral/domains/com/ideafarm/city/workshop/2source/")+tIdiForeign+T(".h") ;

                delF( tinP , psttIdModule ) ;
            {
            if( !strCompareF( tinP , psttIdModule , tH ) )
            TN( tSrc , "" ) ;
    
            __NZ( psttRev ) ;
            strReverseF( tinP , psttRev , tDefBody , T("\r\n") , &soulr ) ; ___( psttRev ) ;
            soulC soulr( tinP , TAG( TAGiDnULL ) , flSOUL_LIFO ) ;
            ZE( strokeS* , psttRev ) ;

            strWordF( tinP , psttIdModule , psttc1 , sttq , strokeS('.') , - 1 ) ; ___( psttIdModule ) ;
            strokeS sttq( 0 , sc_IGNOREqUOTES ) ;
            ZE( strokeS* , psttIdModule ) ;
    
            }
                delF( tinP , postd ) ;
                tDefBody = T(postd) ;
                boxGetShadowF( tinP , postd , costd , psttc1 ) ; ___( postd ) ;
                ZE( countT   , costd ) ;
                ZE( osTextT* , postd ) ;
            {
            TN( tDefBody , "" ) ;
        {
        FORsTRINGSiNsPANNEDcOMBINEDhEAD1( soul1m )
        boxMenuF( tinP , soul1m , T(psttHome)+T("precious/domains/com/ideafarm/city/library/dictionary/5adam.")+tIdiForeign+T(".*") ) ;
        soulC soul1m( tinP , TAG( TAGiDnULL ) ) ;
    {
    stackC st_psttIdModule( tinP , *this , TAG( TAGiDnULL ) , flSTACKc_FIFO|flSTACKc_DOnOTsERIALIZE , ifcSTACKtYPE_PTR_strokeS ) ;
    // MAKE THE SOURCE FILES

    THREADmODE1oN( flTHREADmODE1_ALLOWsTOPwHILEgRABBING )
    batonC bHost( tinP , TAG( TAGiDnULL ) , T("masterOldC") , ifcIDgRABlAYER_7BASEmISC1 , flBATONc_GRABBED | flBATONc_NOTjEALOUS | flBATONc_SHARElAYER ) ; // A HOST BATON WITH THE SAME NAME IS ALSO USED BY masterOldC

    TN( tIdiForeign , "" ) ; tIdiForeign = TF3(idAdamP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE|flFORMAT_FOREIGN,8) ;
    TN( tIdi        , "" ) ; tIdi        = TF3(idAdamP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE                 ,8) ;
    TN( tCpp , "cpp" ) ;
    TN( tH   , "h"   ) ;
    TN( tDot , "."   ) ;

    diskMapFileNameF( tinP , psttHome , T("///ideafarm/") ) ; //THIS LINE "HARDCODES" psttHome SO THAT I CAN BE RUN ON ifc21 USING THE DEFINITION FILES ON ifc11
    ZE( strokeS* , psttHome ) ;

    _INoLD_

    }
        if( POOP ) return ;
        FV( flMAKE , flagsP ) ;
        __Z( idAdamP ) ;
        __NZ( stErrorsP ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL
    SCOOP
{
/*1*/voidT etherC::osMakeF( tinS& tinP , stackC& stErrorsP , const countT idAdamP , const flagsT flagsP )/*1*/

/**/
*/
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/1snip.001015f.flMAKE!||
 flagsP
    in this case, the caller must explicitly d elete all removed soulC objects
   alt: remove some or all plates
    in this case, the soulC objects will be d eleted when stErrorsP is destroyed
   alt: just inspect the number of plates without removing any plates from stErrorsP
  after i return, the caller can process stErrorsP in wo of these ways
    is guaranteed to be nonze
   strokeS* psttNote
    might be 0, but will usually be nonze
   strokeS* psttLine
    might be 0, but will usually be nonze
   countT idColumn
    might be 0, but will usually be nonze
   countT idLine
  after i return, each soulC object (if any) on stErrorsP contains the following elements
  must be empty
  must be of type ifcSTACKtYPE_PTR_soulC
 stErrorsP
 tinP
arguments
the caller can assume that compile and link completed aok if stErrorsP has no plates
impotence does not occur when i cannot compile or link
i prepare the final source code, compile and link it, and report errors, if any
\<A HREF=\"5.1030175.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$osMakeF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 25 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


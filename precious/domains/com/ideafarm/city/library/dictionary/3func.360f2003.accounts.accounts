
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    _OUT_

    }
        __1
        LOGrAW3( "accountS: could not completely query account description [idAcc]: " , idAccP , "\r\n" ) ;
    {
    if( !bOk )

    }
        }
            }
                else       bOk = 1 ;
                }
                    LOGrAW3( "accountS: could not query account description (soul pull) [idAcc]: " , idAccP , "\r\n" ) ;
                    POOPR ;
                {
                if( POOP )

                if( !bAll && !( F(flagsThis2) & flACCOUNT2_QUERYhELLOgREETING                 ) ) PUSE( tinP , *(byteT**)&psttHelloGreeting ) ;
                sIn >> psttHelloGreeting ; ___( psttHelloGreeting ) ;

                if( !bAll && !( F(flagsThis2) & flACCOUNT2_QUERYdIRECTORYgREETING             ) ) PUSE( tinP , *(byteT**)&psttDirectoryGreeting ) ;
                sIn >> psttDirectoryGreeting ; ___( psttDirectoryGreeting ) ;

                if( !bAll && !( F(flagsThis2) & flACCOUNT2_QUERYpAYPALpROTECTIONeLIGIBILITY   ) ) PUSE( tinP , *(byteT**)&psttPaypalProtectionEligibility ) ;
                sIn >> psttPaypalProtectionEligibility ; ___( psttPaypalProtectionEligibility ) ;

                if( !bAll && !( F(flagsThis2) & flACCOUNT2_QUERYpAYPALpAYERsTATUS             ) ) PUSE( tinP , *(byteT**)&psttPaypalPayerStatus ) ;
                sIn >> psttPaypalPayerStatus ; ___( psttPaypalPayerStatus ) ;

                if( !bAll && !( F(flagsThis2) & flACCOUNT2_QUERYpAYPALpAYERiD                 ) ) PUSE( tinP , *(byteT**)&psttPaypalPayerId ) ;
                sIn >> psttPaypalPayerId ; ___( psttPaypalPayerId ) ;

                if( !bAll && !( F(flagsThis2) & flACCOUNT2_QUERYpAYPALpAYEReMAIL              ) ) PUSE( tinP , *(byteT**)&psttPaypalPayerEmail ) ;
                sIn >> psttPaypalPayerEmail ; ___( psttPaypalPayerEmail ) ;

                if( !bAll && !( F(flagsThis2) & flACCOUNT2_QUERYcHARSET                       ) ) PUSE( tinP , *(byteT**)&psttCharset ) ;
                sIn >> psttCharset ; ___( psttCharset ) ;

                if( !bAll && !( F(flagsThis2) & flACCOUNT2_QUERYzIPaT                         ) ) PUSE( tinP , *(byteT**)&psttZipAt ) ;
                sIn >> psttZipAt ; ___( psttZipAt ) ;

                if( !bAll && !( F(flagsThis2) & flACCOUNT2_QUERYrESIDENCEcOUNTRY              ) ) PUSE( tinP , *(byteT**)&psttResidenceCountry ) ;
                sIn >> psttResidenceCountry ; ___( psttResidenceCountry ) ;

                if( !bAll && !( F(flagsThis2) & flACCOUNT2_QUERYlASTnAME                      ) ) PUSE( tinP , *(byteT**)&psttLastName ) ;
                sIn >> psttLastName ; ___( psttLastName ) ;

                if( !bAll && !( F(flagsThis2) & flACCOUNT2_QUERYfIRSTnAME                     ) ) PUSE( tinP , *(byteT**)&psttFirstName ) ;
                sIn >> psttFirstName ; ___( psttFirstName ) ;

                if( !bAll && !( F(flagsThis2) & flACCOUNT2_QUERYaDDRESSsTATUS                 ) ) PUSE( tinP , *(byteT**)&psttAddressStatus ) ;
                sIn >> psttAddressStatus ; ___( psttAddressStatus ) ;

                if( !bAll && !( F(flagsThis2) & flACCOUNT2_QUERYaDDRESScOUNTRY                ) ) PUSE( tinP , *(byteT**)&psttAddressCountry ) ;
                sIn >> psttAddressCountry ; ___( psttAddressCountry ) ;

                if( !bAll && !( F(flagsThis2) & flACCOUNT2_QUERYaDDRESSzIP                    ) ) PUSE( tinP , *(byteT**)&psttAddressZip ) ;
                sIn >> psttAddressZip ; ___( psttAddressZip ) ;

                if( !bAll && !( F(flagsThis2) & flACCOUNT2_QUERYaDDRESScOUNTRYcODE            ) ) PUSE( tinP , *(byteT**)&psttAddressCountryCode ) ;
                sIn >> psttAddressCountryCode ; ___( psttAddressCountryCode ) ;

                if( !bAll && !( F(flagsThis2) & flACCOUNT2_QUERYaDDRESSsTATE                  ) ) PUSE( tinP , *(byteT**)&psttAddressState ) ;
                sIn >> psttAddressState ; ___( psttAddressState ) ;

                if( !bAll && !( F(flagsThis2) & flACCOUNT2_QUERYaDDRESScITY                   ) ) PUSE( tinP , *(byteT**)&psttAddressCity ) ;
                sIn >> psttAddressCity ; ___( psttAddressCity ) ;

                if( !bAll && !( F(flagsThis2) & flACCOUNT2_QUERYaDDRESSsTREET                 ) ) PUSE( tinP , *(byteT**)&psttAddressStreet ) ;
                sIn >> psttAddressStreet ; ___( psttAddressStreet ) ;

                if( !bAll && !( F(flagsThis2) & flACCOUNT2_QUERYaDDRESSnAME                   ) ) PUSE( tinP , *(byteT**)&psttAddressName ) ;
                sIn >> psttAddressName ; ___( psttAddressName ) ;

                if( !bAll && !( F(flagsThis2) & flACCOUNT2_QUERYfLAGSmODE                     ) ) flagsMode = 0 ;
                sIn >> flagsMode ;
                flagsMode = 0 ;
            {
            else
            }
                bOk = 1 ;
                *(flagsT*)&flagsThis1 |= flACCOUNT1_FYIdOESnOTeXIST ;
            {
            else if( !bAccExists )
            }
                *(flagsT*)&flagsThis1 |= flACCOUNT1_FYIeRRORcOULDnOTqUERY ;
                POOPR ;
            {
            if( POOP )

            }
                __1 ;
                LOGrAW5( "accountS: could not query account description (bAccExists) [idAcc,bAccExists]: " , idAccP , " " , bAccExists , "\r\n" ) ;
            {
            if( bAccExists > 1 )
            sIn >> bAccExists ;
            ZE( boolT , bAccExists ) ;

            }
                __1 ;
                LOGrAW5( "accountS: could not query account description (idFormat) [idAcc,idFormat]: " , idAccP , " " , idFormat , "\r\n" ) ;
            {
            if( idFormat - 1 )
            sIn >> idFormat ;
            ZE( countT , idFormat ) ;
        
            }
                __1 ;
                LOGrAW5( "accountS: could not query account description (finger) [idAcc,finger]: " , idAccP , " " , finger , "\r\n" ) ;
            {
            if( finger - FINGERnEG_LISTsERVERrEPLY )
            sIn >> finger ;
            ZE( countT , finger ) ;
        {
        else
        }
            LOGrAW3( "accountS: could not query account description (socket write and read failed) [idAcc]: " , idAccP , "\r\n" ) ;
            POOPR ;
        {
        if( POOP )
    
        sock.readF( tinP , sIn ) ;
        soulC sIn( tinP , TAG( TAGiDnULL ) ) ;
    
        sock.writeF( tinP , sOut ) ;
        sOut << idAcc ;
        sOut << (countT)ifcIDcMDlISTsERVERiDaCCOUNTdESCRIPTION_QUERYaCCOUNTdESCRIPTION ;
        sOut << (countT)1 ;
        sOut << (countT)FINGERnEG_LISTsERVERcMD ;
        soulC sOut( tinP , TAG( TAGiDnULL ) ) ;
    
        sock.connectF( tinP , homeS::homeIF().idPortListServerIdAccountDescription ) ;
        socketC sock( tinP , *tinP.pEtScratch , TAG( TAGiDnULL ) ) ;

        const boolT bAll = ( flagsThis1 & ~( F(flACCOUNT1_SET) ) ) == flACCOUNT1_null ;

        if( POOP ) { POOPR ; }

        SCOOPS
    {
    IFsCRATCH
    ZE( boolT , bOk ) ;

    _INoLD_

    }
        if( POOP ) return ;
        FV(flACCOUNT2,flagsThis2P) ;
        FV(flACCOUNT1,flagsThis1P) ;
        __Z( idAccP ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL
{
psttHelloGreeting( 0 )
psttDirectoryGreeting( 0 ) ,
psttPaypalProtectionEligibility( 0 ) ,
psttPaypalPayerStatus( 0 ) ,
psttPaypalPayerId( 0 ) ,
psttPaypalPayerEmail( 0 ) ,
psttCharset( 0 ) ,
psttZipAt( 0 ) ,
psttResidenceCountry( 0 ) ,
psttLastName( 0 ) ,
psttFirstName( 0 ) ,
psttAddressStatus( 0 ) ,
psttAddressCountry( 0 ) ,
psttAddressZip( 0 ) ,
psttAddressCountryCode( 0 ) ,
psttAddressState( 0 ) ,
psttAddressCity( 0 ) ,
psttAddressStreet( 0 ) ,
psttAddressName( 0 ) ,
flagsMode( fliACCOUNTmODE_null ) ,
flagsThis2( flagsThis2P ) ,
flagsThis1( flagsThis1P ) ,
idAcc( idAccP ) ,
/*1*/accountS::accountS( tinS& tinP , etherC& etherP , const countT idAccP , flagsT flagsThis1P , flagsT flagsThis2P ) :/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 28 years.
//
// Copyright (c) 1992-2020 Wo Of Ideafarm.  All rights reserved.  See IDEAFARM.COM for permitted uses.
//


0x00000001 , "\0\0\0\0CnOTcPPhEADER" ,
0x00000002 , "\0\0\0\0HOMEdRIVEiS_i" ,
0x00000003 , "\0\0\0\0ENABLEdROPnOTES" ,
0x00000004 , "\0\0\0\0EMAIL(emailP)" ,
0x00000005 , "\0\0\0\0MAINF(rTypeP,cTypeP)" ,
0x00000006 , "\0\0\0\0PEEK(postDebugP,postDisplayP,postTitleP)" ,
0x00000007 , "\0\0\0\0WAKEsHOW(titleP)" ,
0x00000008 , "\0\0\0\0REST0" ,
0x00000009 , "\0\0\0\0TODO" ,
0x0000000a , "\0\0\0\0REST" ,
0x0000000b , "\0\0\0\0flSESSION" ,
0x0000000c , "\0\0\0\0flSOCKETc" ,
0x0000000d , "\0\0\0\0flFILEaTTR" ,
0x0000000e , "\0\0\0\0flOPENdETAILS" ,
0x0000000f , "\0\0\0\0ifcOPENrESULT" ,
0x00000010 , "\0\0\0\0ifcOPENhOW" ,
0x00000011 , "\0\0\0\0ifcOPENaCCESS" ,
0x00000012 , "\0\0\0\0ifcOPENsHARE" ,
0x00000013 , "\0\0\0\0ifcPORToLD1" ,
0x00000014 , "\0\0\0\0ifcPROCESSdEATH" ,
0x00000015 , "\0\0\0\0NEWdELtYPEeTHER(typeP)" ,
0x00000016 , "\0\0\0\0NEWdELtYPEtHIRD(typeP,idTypeP))" ,
0x00000017 , "\0\0\0\0CBlIMITfROMsTUPIDcLIENT" ,
0x00000018 , "\0\0\0\0SB" ,
0x00000019 , "\0\0\0\0SPACERsET(suffixP)" ,
0x0000001a , "\0\0\0\0SPACERtEST(suffixP)" ,
0x0000001b , "\0\0\0\0SPACERvALUE" ,
0x0000001c , "\0\0\0\0SC" ,
0x0000001d , "\0\0\0\0TO(oP,wP,lP)" ,
0x0000001e , "\0\0\0\0idr" ,
0x0000001f , "\0\0\0\0flDATUM1_" ,
0x00000020 , "\0\0\0\0flSLEEP" ,
0x00000021 , "\0\0\0\0flFORMAT" ,
0x00000022 , "\0\0\0\0DEL(pvP)" ,
0x00000023 , "\0\0\0\0___(pbP)" ,
0x00000024 , "\0\0\0\0NEWdELcLASSpROTOS" ,
0x00000025 , "\0\0\0\0TASK0(taskFP,flagsThirdModeP)" ,
0x00000026 , "\0\0\0\0DONE0" ,
0x00000027 , "\0\0\0\0TASK(taskFP)" ,
0x00000028 , "\0\0\0\0DONE" ,
0x00000029 , "\0\0\0\0OSF" ,
0x0000002a , "\0\0\0\0__(ecP,rcP)" ,
0x0000002b , "\0\0\0\0__1" ,
0x0000002c , "\0\0\0\0_" ,
0x0000002d , "\0\0\0\0FORsTRINGSiN(psttP,idP)" ,
0x0000002e , "\0\0\0\0FORsTRINGSiN1(psttP)" ,
0x0000002f , "\0\0\0\0FORsTRINGSiN2(psttP)" ,
0x00000030 , "\0\0\0\0FORsTRINGSiN3(psttP)" ,
0x00000031 , "\0\0\0\0FORsTRINGSiN4(psttP)" ,
0x00000032 , "\0\0\0\0FORsTRINGSiN5(psttP)" ,
0x00000033 , "\0\0\0\0FORsTRINGSiN6(psttP)" ,
0x00000034 , "\0\0\0\0FORsTRINGSiN7(psttP)" ,
0x00000035 , "\0\0\0\0FORsTRINGSiN8(psttP)" ,
0x00000036 , "\0\0\0\0CSpREFIX" ,
0x00000037 , "\0\0\0\0SETpREFIX(psttP,cLengthP,cExtraP)" ,
0x00000038 , "\0\0\0\0GETpREFIX(cLengthP,cExtraP,psttP)" ,
0x00000039 , "\0\0\0\0BLANK79" ,
0x0000003a , "\0\0\0\0USCORE79" ,
0x0000003b , "\0\0\0\0DUCK" ,
0x0000003c , "\0\0\0\0DOCK" ,
0x0000003d , "\0\0\0\0DICK" ,
0x0000003e , "\0\0\0\0MAXcOUNTT" ,
0x0000003f , "\0\0\0\0SPACER(suffixP)" ,
0x00000040 , "\0\0\0\0SPACERsIZE" ,
0x00000041 , "\0\0\0\0S1C(idAdamP)" ,
0x00000042 , "\0\0\0\0SS(nameP,valueP)" ,
0x00000043 , "\0\0\0\0TUCK" ,
0x00000044 , "\0\0\0\0TOCK" ,
0x00000045 , "\0\0\0\0TICK" ,
0x00000046 , "\0\0\0\0TN(nameP,valueP)" ,
0x00000047 , "\0\0\0\0TbLACK" ,
0x00000048 , "\0\0\0\0ZE(classP,iP)" ,
0x00000049 , "\0\0\0\0NICnAMEcITYcENTERlAN" ,
0x0000004a , "\0\0\0\0ifcTHREADpRIORITY" ,
0x0000004b , "\0\0\0\0offDICK(time2P)" ,
0x0000004c , "\0\0\0\0offDOCK(time2P)" ,
0x0000004d , "\0\0\0\0offDUCK(time2P)" ,
0x0000004e , "\0\0\0\0offDAY(time2P)" ,
0x0000004f , "\0\0\0\0offTICK(time1P)" ,
0x00000050 , "\0\0\0\0offTOCK(time1P)" ,
0x00000051 , "\0\0\0\0offTUCK(time1P)" ,
0x00000052 , "\0\0\0\0offTIME(time1P)" ,
0x00000053 , "\0\0\0\0offSTRONG(time21P)" ,
0x00000054 , "\0\0\0\0offQTR(time21P)" ,
0x00000055 , "\0\0\0\0offHOUR(time1P)" ,
0x00000056 , "\0\0\0\0flSTACKsINK_" ,
0x00000057 , "\0\0\0\0TF1(valueP)" ,
0x00000058 , "\0\0\0\0TPZ(valueP,csP)" ,
0x00000059 , "\0\0\0\0TPS(valueP,csP,sttP)" ,
0x0000005a , "\0\0\0\0flWATCH" ,
0x0000005b , "\0\0\0\0postDEFECTfORM" ,
0x0000005c , "\0\0\0\0ifcCMDsERVICEwINDOW_" ,
0x0000005d , "\0\0\0\0NEWdELdEFS(classP)" ,
0x0000005e , "\0\0\0\0TT(time1P,time2P)" ,
0x0000005f , "\0\0\0\0flJOB" ,
0x00000060 , "\0\0\0\0flTHIRDmODE_" ,
0x00000061 , "\0\0\0\0TCID" ,
0x00000062 , "\0\0\0\0TNCID" ,
0x00000063 , "\0\0\0\0CSeXTRAlOG" ,
0x00000064 , "\0\0\0\0CSeXTRAnEWSbODY" ,
0x00000065 , "\0\0\0\0T" ,
0x00000066 , "\0\0\0\0TINSL" ,
0x00000067 , "\0\0\0\0HOSTlOG(etherP,psttOrPostP)" ,
0x00000068 , "\0\0\0\0CBdROPmEANdEFAULT" ,
0x00000069 , "\0\0\0\0OFFsLOTtINsTEPmAX" ,
0x0000006a , "\0\0\0\0flSTACKc" ,
0x0000006b , "\0\0\0\0ifcSTACKtYPE" ,
0x0000006c , "\0\0\0\0idcOPERATOR" ,
0x0000006d , "\0\0\0\0ifcTABLEcOLtYPE1" ,
0x0000006e , "\0\0\0\0_CT1" ,
0x0000006f , "\0\0\0\0fliTABLEcOLtYPE2" ,
0x00000070 , "\0\0\0\0_CT2" ,
0x00000071 , "\0\0\0\0idTABLEpHASE" ,
0x00000072 , "\0\0\0\0ifbTABLEdUMP" ,
0x00000073 , "\0\0\0\0flTABLEnEWoBJECT" ,
0x00000074 , "\0\0\0\0psttOPERATOR" ,
0x00000075 , "\0\0\0\0idcNICKNAMEcMD" ,
0x00000076 , "\0\0\0\0postTRIALcLOSE" ,
0x00000077 , "\0\0\0\0TP(valueP,csP)" ,
0x00000078 , "\0\0\0\0TF2(valueP,a2P)" ,
0x00000079 , "\0\0\0\0TF3(valueP,a2P,a3P)" ,
0x0000007a , "\0\0\0\0TF4(valueP,a2P,a3P,a4P)" ,
0x0000007b , "\0\0\0\0TF5(valueP,a2P,a3P,a4P,a5P)" ,
0x0000007c , "\0\0\0\0idCMDbUS_" ,
0x0000007d , "\0\0\0\0tmHEAReNTER(tmFP)" ,
0x0000007e , "\0\0\0\0LAUNCHhEAReNTER(tmFP,idPortP)" ,
0x0000007f , "\0\0\0\0CSaVERAGEpARAMETERlENGTHmAX" ,
0x00000080 , "\0\0\0\0CSnODEnAMEmAX" ,
0x00000081 , "\0\0\0\0ifcFLAGiN" ,
0x00000082 , "\0\0\0\0_INoLD_" ,
0x00000083 , "\0\0\0\0postHTMLbODYpART1" ,
0x00000084 , "\0\0\0\0CbOXpOURmAX" ,
0x00000085 , "\0\0\0\0idCMDdATAaNUS" ,
0x00000086 , "\0\0\0\0idLEVERtYPE" ,
0x00000087 , "\0\0\0\0PART(argP)" ,
0x00000088 , "\0\0\0\0idCMDpRICER" ,
0x00000089 , "\0\0\0\0OFFsLOTtINnESTmAX" ,
0x0000008a , "\0\0\0\0ifcGATEeRROR(idStepP)" ,
0x0000008b , "\0\0\0\0PRO" ,
0x0000008c , "\0\0\0\0idCMDlAKEsERVER" ,
0x0000008d , "\0\0\0\0NICnAMElOCAL" ,
0x0000008e , "\0\0\0\0flTHREADmODE1_" ,
0x0000008f , "\0\0\0\0PRO(cProgressP)" ,
0x00000090 , "\0\0\0\0S2(idAdamP,idCasteP)" ,
0x00000091 , "\0\0\0\0sc" ,
0x00000092 , "\0\0\0\0MAINwINDOWcLASSnAME" ,
0x00000093 , "\0\0\0\0BODYwIN" ,
0x00000094 , "\0\0\0\0HEADwIN" ,
0x00000095 , "\0\0\0\0idcWINsHOW" ,
0x00000096 , "\0\0\0\0idcTEXTaLIGN" ,
0x00000097 , "\0\0\0\0idwmWIN" ,
0x00000098 , "\0\0\0\0idtWIN" ,
0x00000099 , "\0\0\0\0SECURITYaTTRIBUTES" ,
0x0000009a , "\0\0\0\0ifcCMDpORTaUTHORITY" ,
0x0000009b , "\0\0\0\0ifcREPLY" ,
0x0000009c , "\0\0\0\0fliEC" ,
0x0000009d , "\0\0\0\0flTHREADlAUNCH" ,
0x0000009e , "\0\0\0\0BREAKiF" ,
0x0000009f , "\0\0\0\0SINGdDNUMB(etherP)" ,
0x000000a0 , "\0\0\0\0flSOCKETcrEAD" ,
0x000000a1 , "\0\0\0\0CLICK(idP)" ,
0x000000a2 , "\0\0\0\0ifcBLOBtYPE" ,
0x000000a3 , "\0\0\0\0ifcCMDdIR" ,
0x000000a4 , "\0\0\0\0WS" ,
0x000000a5 , "\0\0\0\0SOULfROMsOCK(etherP,pbP,sockP)" ,
0x000000a6 , "\0\0\0\0flMASTERc" ,
0x000000a7 , "\0\0\0\0FILEnAMEsOUL_masterOldC" ,
0x000000a8 , "\0\0\0\0IFbEcAREFUL" ,
0x000000a9 , "\0\0\0\0CpOSTdLLuSED" ,
0x000000aa , "\0\0\0\0flMESSAGEbOXbUTTON" ,
0x000000ab , "\0\0\0\0ifcMESSAGEbOXrESULT" ,
0x000000ac , "\0\0\0\0ifcSOCKETtYPE" ,
0x000000ad , "\0\0\0\0ifcCrANDOMbUF" ,
0x000000ae , "\0\0\0\0ifcIDtYPEdATAGRAM" ,
0x000000af , "\0\0\0\0CrEGISTERbYTES(objOrClassP)" ,
0x000000b0 , "\0\0\0\0VaRGoPEN(lastArgP)" ,
0x000000b1 , "\0\0\0\0VaRG(classP)" ,
0x000000b2 , "\0\0\0\0VaRGcLOSE" ,
0x000000b3 , "\0\0\0\0flSOULsHIFTlEFT" ,
0x000000b4 , "\0\0\0\0ifcSIGNATUREtHIRD" ,
0x000000b5 , "\0\0\0\0ifcDRIVERsTATUS" ,
0x000000b6 , "\0\0\0\0flSOULiTEM" ,
0x000000b7 , "\0\0\0\0ifcCBdATAGRAMmAX" ,
0x000000b8 , "\0\0\0\0ifcIDtYPErINGtOKEN" ,
0x000000b9 , "\0\0\0\0ifcIDcMDsESSION" ,
0x000000ba , "\0\0\0\0ifcIDhOVERdIR" ,
0x000000bb , "\0\0\0\0flLAKEdELETE" ,
0x000000bc , "\0\0\0\0flSTACKsTATE" ,
0x000000bd , "\0\0\0\0ifcIDcMDcATCH" ,
0x000000be , "\0\0\0\0ifcIDtYPEsOULiTEM" ,
0x000000bf , "\0\0\0\0ifciDtYPEdROPnOTE" ,
0x000000c0 , "\0\0\0\0#define TT3(time1P,time2P,idFirstP)" ,
0x000000c1 , "\0\0\0\0#define TT4(time1P,time2P,idFirstP,idLastP) textC( tinP , TAG( TAGiDnULL ) , flTEXTc_null , time1P , time2P , idFirstP , idLastP )" ,
0x000000c2 , "\0\0\0\0ifcIDsIN" ,
0x000000c3 , "\0\0\0\0COSTmAXtHREADnAME" ,
0x000000c4 , "\0\0\0\0TASK2(taskFP,flagsThirdModeP)" ,
0x000000c5 , "\0\0\0\0ifcEXITcODEpROCESSaOK" ,
0x000000c6 , "\0\0\0\0ifcEXITcODEtHREADaOK" ,
0x000000c7 , "\0\0\0\0DEBUGpARM" ,
0x000000c8 , "\0\0\0\0ifcIDfILEtYPE" ,
0x000000c9 , "\0\0\0\0COSTmAXfILEnAME" ,
0x000000ca , "\0\0\0\0ifcIDwHAT , WHAT , BOS" ,
0x000000cb , "\0\0\0\0flMODEpROCESS1" ,
0x000000cc , "\0\0\0\0SECURITYaTTRIBUTE_saUNRESTRICTED(bInheritP)" ,
0x000000cd , "\0\0\0\0CSdRIVERnAMEmAX" ,
0x000000ce , "\0\0\0\0ifcIDfYLEnAME1mASTEReXEdLL" ,
0x000000cf , "\0\0\0\0flDRIVENyOUaREfIRED" ,
0x000000d0 , "\0\0\0\0TASKdRIVENsERVER" ,
0x000000d1 , "\0\0\0\0DONEdRIVENsERVER" ,
0x000000d2 , "\0\0\0\0TASKdRIVENsERVERnEWsOCKET" ,
0x000000d3 , "\0\0\0\0ifcIDeVENTmONITORED" ,
0x000000d4 , "\0\0\0\0ifcIDeVENTeXCEPTIONmONITORED" ,
0x000000d5 , "\0\0\0\0ifcIDcMDmoNITOR" ,
0x000000d6 , "\0\0\0\0flFORESTfIRE" ,
0x000000d7 , "\0\0\0\0TASK0PROTO(taskFP)" ,
0x000000d8 , "\0\0\0\0ifcOPENsHAREDmEMORYhOW" ,
0x000000d9 , "\0\0\0\0fliSTEP" ,
0x000000da , "\0\0\0\0flTINrPT1" ,
0x000000db , "\0\0\0\0flTINrPTfORMAT" ,
0x000000dc , "\0\0\0\0COSTsTATEmAX" ,
0x000000dd , "\0\0\0\0IDpHASEhANDOFFoLD" ,
0x000000de , "\0\0\0\0ifcEXITcODEpROCESSiMPOTENT" ,
0x000000df , "\0\0\0\0ifcEXITcODEtHREADiMPOTENT" ,
0x000000e0 , "\0\0\0\0flSTATE" ,
0x000000e1 , "\0\0\0\0ifcIDtYPEsTRrEPLACE" ,
0x000000e2 , "\0\0\0\0BEEP(cP)" ,
0x000000e3 , "\0\0\0\0POPUP(postP)" ,
0x000000e4 , "\0\0\0\0flMAKE" ,
0x000000e5 , "\0\0\0\0flHIRE" ,
0x000000e6 , "\0\0\0\0ifcIDtYPEcOMMENT/" ,
0x000000e7 , "\0\0\0\0FINGERnEG" ,
0x000000e8 , "\0\0\0\0flDATUM2" ,
0x000000e9 , "\0\0\0\0FL" ,
0x000000ea , "\0\0\0\0F" ,
0x000000eb , "\0\0\0\0flTINrPT2" ,
0x000000ec , "\0\0\0\0flRECdIRc" ,
0x000000ed , "\0\0\0\0FV(flPrefixP,flagsP)" ,
0x000000ee , "\0\0\0\0flSETfILEpTR" ,
0x000000ef , "\0\0\0\0flVM" ,
0x000000f0 , "\0\0\0\0ClINESaDJUST" ,
0x000000f1 , "\0\0\0\0flVMuSAGEtYPE" ,
0x000000f2 , "\0\0\0\0THREADmODE1oFF(flagsP)" ,
0x000000f3 , "\0\0\0\0THREADmODE1rESTORE" ,
0x000000f4 , "\0\0\0\0THREADmODE1oN(flagsP)" ,
0x000000f5 , "\0\0\0\0CONCAT(cP,postBeforeP,postAfterP)" ,
0x000000f6 , "\0\0\0\0CBnAPjOT" ,
0x000000f7 , "\0\0\0\0NAPjOT(ecP)" ,
0x000000f8 , "\0\0\0\0WWWiDEAFARMcOM" ,
0x000000f9 , "\0\0\0\0WINK" ,
0x000000fa , "\0\0\0\0STOP" ,
0x000000fb , "\0\0\0\0CsHAREDmEMiNFO" ,
0x000000fc , "\0\0\0\0COSTsHAREDmEMmAX" ,
0x000000fd , "\0\0\0\0ifcIDmETRIC" ,
0x000000fe , "\0\0\0\0postEMAILsECTIONhEAD_1_INTRODUCTION" ,
0x000000ff , "\0\0\0\0postEMAILsECTIONhEAD_2_MESSAGE" ,
0x00000100 , "\0\0\0\0postEMAILsECTIONhEAD_3_INSTRUCTIONS" ,
0x00000101 , "\0\0\0\0postEMAILsECTIONhEAD_4_EXPLANATION" ,
0x00000102 , "\0\0\0\0postEMAILsECTIONhEAD_5_DATApLEASEeDIT" ,
0x00000103 , "\0\0\0\0postEMAILsECTIONhEAD_6_DATAdOnOTmODIFY" ,
0x00000104 , "\0\0\0\0postEMAILsECTIONhEAD_7_VARIABLEcONTACTS" ,
0x00000105 , "\0\0\0\0postEMAILsECTIONhEAD_8_CONSTANTcONTACTS" ,
0x00000106 , "\0\0\0\0postEMAILsECTIONbODY_8_CONSTANTcONTACTS" ,
0x00000107 , "\0\0\0\0postEMAILsECTIONhEAD_9_VARIABLErEFERENCE" ,
0x00000108 , "\0\0\0\0postEMAILsECTIONhEAD_a_CONSTANTrEFERENCE" ,
0x00000109 , "\0\0\0\0postEMAILsECTIONhEAD_b_MAILcLIENTsETTINGS" ,
0x0000010a , "\0\0\0\0postEMAILsECTIONbODY_b_MAILcLIENTsETTINGS" ,
0x0000010b , "\0\0\0\0postEMAILsECTIONhEAD_c_END" ,
0x0000010c , "\0\0\0\0ifcIDcMDjOBoRDER" ,
0x0000010d , "\0\0\0\0flTHREADlEVELmODE_" ,
0x0000010e , "\0\0\0\0COSTnARRATIVE_PREFIX" ,
0x0000010f , "\0\0\0\0COSTnARRATIVE_TITLE" ,
0x00000110 , "\0\0\0\0COSTnARRATIVE_NOTE" ,
0x00000111 , "\0\0\0\0postIFCnAMEsERVER" ,
0x00000112 , "\0\0\0\0DONEdRIVENsERVERnEWsOCKET" ,
0x00000113 , "\0\0\0\0TT5(time1P,time2P,idFirstP,idLastP,sttRadixP)" ,
0x00000114 , "\0\0\0\0ifcIDtEXTgEN" ,
0x00000115 , "\0\0\0\0T" ,
0x00000116 , "\0\0\0\0BYTEaRRAYiMAGEgIF_1PEL" ,
0x00000117 , "\0\0\0\0ifcIDrEPLYjOBcOURSE" ,
0x00000118 , "\0\0\0\0ifcIDeRRORjOBcOURSE" ,
0x00000119 , "\0\0\0\0ifcIDtYPEjOBcOURSE" ,
0x0000011a , "\0\0\0\0ifcIDaDAM" ,
0x0000011b , "\0\0\0\0McOUNTmAXpLUSwO" ,
0x0000011c , "\0\0\0\0CsESSIONmAXdFLTiFCdRIVENsERVER" ,
0x0000011d , "\0\0\0\0flGRABc" ,
0x0000011e , "\0\0\0\0SWAB2(cP)" ,
0x0000011f , "\0\0\0\0SWAB4(cP)" ,
0x00000120 , "\0\0\0\0#define ifcIDtYPEdNSqUERY" ,
0x00000121 , "\0\0\0\0ifcIDtYPEdNSrEPLY" ,
0x00000122 , "\0\0\0\0SWABnET2(cP)" ,
0x00000123 , "\0\0\0\0SWABnET4(cP)" ,
0x00000124 , "\0\0\0\0COSToSfILEnAMEmAX" ,
0x00000125 , "\0\0\0\0flNEWS" ,
0x00000126 , "\0\0\0\0PLATE_byteT_PTR(pPlateP)" ,
0x00000127 , "\0\0\0\0flSOUL" ,
0x00000128 , "\0\0\0\0ifcIDcMDnEWS" ,
0x00000129 , "\0\0\0\0ifcIDtYPEnEWS" ,
0x0000012a , "\0\0\0\0ifcIDeRRORdNS" ,
0x0000012b , "\0\0\0\0FaLLsET(flagsP)" ,
0x0000012c , "\0\0\0\0TELL(postFromP)" ,
0x0000012d , "\0\0\0\0TELLcONCAT(postFromP)" ,
0x0000012e , "\0\0\0\0TELLcOUNTT(cP)" ,
0x0000012f , "\0\0\0\0COSTmAXtELL" ,
0x00000130 , "\0\0\0\0PLATE_countT_REF(pPlateP)" ,
0x00000131 , "\0\0\0\0flKT" ,
0x00000132 , "\0\0\0\0flKTsCRATCH" ,
0x00000133 , "\0\0\0\0ifcIDfACE" ,
0x00000134 , "\0\0\0\0ifcIDrEASONeVALUATINGfACEvARS" ,
0x00000135 , "\0\0\0\0sa" ,
0x00000136 , "\0\0\0\0CfROM2(c1P,c2P)" ,
0x00000137 , "\0\0\0\0PI" ,
0x00000138 , "\0\0\0\0OLDmOVEtO(cP,rP)" ,
0x00000139 , "\0\0\0\0OLDlINEtO(cP,rP)" ,
0x0000013a , "\0\0\0\0ifcPASSCODE" ,
0x0000013b , "\0\0\0\0ifcSTRING(argP)" ,
0x0000013c , "\0\0\0\0CONoUT(postP)" ,
0x0000013d , "\0\0\0\0TELL4INIT" ,
0x0000013e , "\0\0\0\0TELL4(post4P)" ,
0x0000013f , "\0\0\0\0WAKEhIDE(titleP)" ,
0x00000140 , "\0\0\0\0WAKEsHOWtEXT(titleP)" ,
0x00000141 , "\0\0\0\0flPROCESShIRE" ,
0x00000142 , "\0\0\0\0flMONITORqUERYoLD" ,
0x00000143 , "\0\0\0\0flGRUNT" ,
0x00000144 , "\0\0\0\0flPROCESSsTATE" ,
0x00000145 , "\0\0\0\0flTINs" ,
0x00000146 , "\0\0\0\0TELLwAIT(postFromP)" ,
0x00000147 , "\0\0\0\0flSTRgRAPH" ,
0x00000148 , "\0\0\0\0ifcIDsTYLEsTRgRAPH" ,
0x00000149 , "\0\0\0\0MAXmEASUREt" ,
0x0000014a , "\0\0\0\0OLDmOVE(cP,rP)" ,
0x0000014b , "\0\0\0\0OLDlINE(cP,rP)" ,
0x0000014c , "\0\0\0\0flSTROKEmODE" ,
0x0000014d , "\0\0\0\0flRENDERcONTROL" ,
0x0000014e , "\0\0\0\0flRENDERcYCLED" ,
0x0000014f , "\0\0\0\0flRENDERcYCLINGdETAIL1" ,
0x00000150 , "\0\0\0\0flRENDERcYCLINGdETAIL2" ,
0x00000151 , "\0\0\0\0flRENDERcYCLINGdETAIL3" ,
0x00000152 , "\0\0\0\0flRENDERcYCLINGdETAIL4" ,
0x00000153 , "\0\0\0\0flRENDERcYCLINGdETAIL5" ,
0x00000154 , "\0\0\0\0flRENDERcYCLINGdETAIL6" ,
0x00000155 , "\0\0\0\0flRENDERcYCLINGdETAIL7" ,
0x00000156 , "\0\0\0\0flRENDERcYCLINGdETAIL8" ,
0x00000157 , "\0\0\0\0COSTnAPKINnAMEmAX" ,
0x00000158 , "\0\0\0\0flBATONc" ,
0x00000159 , "\0\0\0\0flGRABnOTES" ,
0x0000015a , "\0\0\0\0ifcIDtELLmONITORwHAT" ,
0x0000015b , "\0\0\0\0GRABnOTEStIDsLOTS" ,
0x0000015c , "\0\0\0\0DELaRRAY(pvP)" ,
0x0000015d , "\0\0\0\0DELaRRAYzOMBIE(pvP)" ,
0x0000015e , "\0\0\0\0DELzOMBIE(pvP)" ,
0x0000015f , "\0\0\0\0POSTbATONsUFFIX" ,
0x00000160 , "\0\0\0\0flOPENsHAREDmEMORYrESULT" ,
0x00000161 , "\0\0\0\0POPUPcOUNT(postP,cP)" ,
0x00000162 , "\0\0\0\0flNAPKINc" ,
0x00000163 , "\0\0\0\0CBzOMBIEbATONc" ,
0x00000164 , "\0\0\0\0YELL(postFromP)" ,
0x00000165 , "\0\0\0\0ifcIDtYPEtELL" ,
0x00000166 , "\0\0\0\0CBtELLmAX" ,
0x00000167 , "\0\0\0\0BLAMMO" ,
0x00000168 , "\0\0\0\0TELLc1(idTypeP)" ,
0x00000169 , "\0\0\0\0TELLc3(idTypeP,pbP,cbP)" ,
0x0000016a , "\0\0\0\0postIFChANDOFFoLDmONITOR" ,
0x0000016b , "\0\0\0\0postIFChANDOFFoLDmONITOR" ,
0x0000016c , "\0\0\0\0QUITO(pcQuitP)" ,
0x0000016d , "\0\0\0\0QUITR" ,
0x0000016e , "\0\0\0\0CBhEADERdROP" ,
0x0000016f , "\0\0\0\0postIFChANDOFFoLDpREFIX" ,
0x00000170 , "\0\0\0\0ifcIDrESULThIRE" ,
0x00000171 , "\0\0\0\0LIFEpROTO" ,
0x00000172 , "\0\0\0\0LIFEdEFoUT(classP)" ,
0x00000173 , "\0\0\0\0LIFEdEFcT(classP)" ,
0x00000174 , "\0\0\0\0POPUPbLAMMO" ,
0x00000175 , "\0\0\0\0postNAPhOSTjOTsTATUSrEADY" ,
0x00000176 , "\0\0\0\0SLEEPwHILErEF" ,
0x00000177 , "\0\0\0\0SLEEPwHILE" ,
0x00000178 , "\0\0\0\0CONoUT2(postP,cP)" ,
0x00000179 , "\0\0\0\0MShEARTbEATnAP" ,
0x0000017a , "\0\0\0\0CONoUT3(postP,c1P,c2P)" ,
0x0000017b , "\0\0\0\0CONoUT4(postBeforeP,c1P,c2P,postAfterP)" ,
0x0000017c , "\0\0\0\0CgRABwANTmAX" ,
0x0000017d , "\0\0\0\0CONoUTnOtIN(postP)" ,
0x0000017e , "\0\0\0\0CONoUTnOtIN2(postP,cP)" ,
0x0000017f , "\0\0\0\0OStIDkISS" ,
0x00000180 , "\0\0\0\0flTELLc" ,
0x00000181 , "\0\0\0\0OFFgRABBEDmAX" ,
0x00000182 , "\0\0\0\0OFFmAXdEBUG" ,
0x00000183 , "\0\0\0\0CBmONqUERYrEPLYmAXsHORT" ,
0x00000184 , "\0\0\0\0flMONqUERYrEPLY" ,
0x00000185 , "\0\0\0\0ifcIDtYPEqUERY" ,
0x00000186 , "\0\0\0\0flCTdTg" ,
0x00000187 , "\0\0\0\0OFFmAXpgRABuNSERIALIZED" ,
0x00000188 , "\0\0\0\0CONCATfOREIGN(cP,postBeforeP,postAfterP)" ,
0x00000189 , "\0\0\0\0CONoUT5(postBeforeP,c1P,c2P,c3P,postAfterP)" ,
0x0000018a , "\0\0\0\0CONoUT6(postBeforeP,c1P,c2P,c3P,c4P,postAfterP)" ,
0x0000018b , "\0\0\0\0CONoUT7(postBeforeP,c1P,c2P,c3P,c4P,c5P,postAfterP)" ,
0x0000018c , "\0\0\0\0ifcIDaCTIONwHERE" ,
0x0000018d , "\0\0\0\0ifcIDtYPEtLS" ,
0x0000018e , "\0\0\0\0DONE1" ,
0x0000018f , "\0\0\0\0TASKpROTO(taskFP)" ,
0x00000190 , "\0\0\0\0flPLATE" ,
0x00000191 , "\0\0\0\0ifcIDtYPEhANDLE" ,
0x00000192 , "\0\0\0\0CONoUTrAW(postP)" ,
0x00000193 , "\0\0\0\0flTHUGc" ,
0x00000194 , "\0\0\0\0GRABiDtHUGrOOT" ,
0x00000195 , "\0\0\0\0UNGRABiDtHUGrOOT" ,
0x00000196 , "\0\0\0\0CCtHREADlOCAL" ,
0x00000197 , "\0\0\0\0CfIREaLLrANKS" ,
0x00000198 , "\0\0\0\0TELLc3S(idTypeP,pbP,cbP)" ,
0x00000199 , "\0\0\0\0POPUPcALLnEST(post1P,post2P)" ,
0x0000019a , "\0\0\0\0TINeXCEPTIONoFF" ,
0x0000019b , "\0\0\0\0flMODEpROCESS2" ,
0x0000019c , "\0\0\0\0TELLiF(postTestP,postFromP)" ,
0x0000019d , "\0\0\0\0TELLc3EBP(idTypeP,pbP,cbP,ebpP)" ,
0x0000019e , "\0\0\0\0flSIGNcWAIT" ,
0x0000019f , "\0\0\0\0RESTART" ,
0x000001a0 , "\0\0\0\0RESTARTsUFFIX" ,
0x000001a1 , "\0\0\0\0RESTARTiF(idTypeEventP)" ,
0x000001a2 , "\0\0\0\0RESTARTiFqUERY(pbAcceptEventF,pcArgP)" ,
0x000001a3 , "\0\0\0\0POSTpOPUPwANTmOREmEMORY" ,
0x000001a4 , "\0\0\0\0COSTmAXnAPKINnAME" ,
0x000001a5 , "\0\0\0\0HIRE(tCallerP,idAdamServerP,cbPoolServerP,idAdamDutP,cbPoolDutP)" ,
0x000001a6 , "\0\0\0\0HARDbLANK79" ,
0x000001a7 , "\0\0\0\0ifcIDtYPEsTROKEcALLbACK" ,
0x000001a8 , "\0\0\0\0ssc" ,
0x000001a9 , "\0\0\0\0SDBITS(cBitsP)" ,
0x000001aa , "\0\0\0\0R(mP)" ,
0x000001ab , "\0\0\0\0ifcIDtYPEtREEwALKcb" ,
0x000001ac , "\0\0\0\0LATHrEF" ,
0x000001ad , "\0\0\0\0CURSOR" ,
0x000001ae , "\0\0\0\0SET_psttLeverKids" ,
0x000001af , "\0\0\0\0PcURSOR" ,
0x000001b0 , "\0\0\0\0MAXcOUNT01T" ,
0x000001b1 , "\0\0\0\0MAXscOUNT01T" ,
0x000001b2 , "\0\0\0\0MINscOUNT01T" ,
0x000001b3 , "\0\0\0\0OLDcLIP(cP,rP)" ,
0x000001b4 , "\0\0\0\0OLDcLIPtO(cP,rP)" ,
0x000001b5 , "\0\0\0\0OLDcLIPtOpOP" ,
0x000001b6 , "\0\0\0\0ifcIDtYPEaCTION" ,
0x000001b7 , "\0\0\0\0ifcIDtYPEtOOL" ,
0x000001b8 , "\0\0\0\0SETwANTcASTE" ,
0x000001b9 , "\0\0\0\0flSTRcONCATENATE" ,
0x000001ba , "\0\0\0\0ifcIDtINnAMED" ,
0x000001bb , "\0\0\0\0POSTtHREADnAMEmAIN" ,
0x000001bc , "\0\0\0\0ifcIDtYPEdRAWINGtOOL" ,
0x000001bd , "\0\0\0\0CONoUTrAW3(post1P,cP,post2P)" ,
0x000001be , "\0\0\0\0RESTARTnOtIN(prTopP)" ,
0x000001bf , "\0\0\0\0flRESTARTc" ,
0x000001c0 , "\0\0\0\0PC" ,
0x000001c1 , "\0\0\0\0PC1(scDeltaP)" ,
0x000001c2 , "\0\0\0\0PC1R(scDeltaP)" ,
0x000001c3 , "\0\0\0\0KIDS" ,
0x000001c4 , "\0\0\0\0KIDSL" ,
0x000001c5 , "\0\0\0\0KIDS1(nameP)" ,
0x000001c6 , "\0\0\0\0KIDSL(nameP)" ,
0x000001c7 , "\0\0\0\0KIDSeQ(cKidsP)" ,
0x000001c8 , "\0\0\0\0CONoUTrAW5(post1P,c1P,post2P,c2P,post3P)" ,
0x000001c9 , "\0\0\0\0flCYRCLEoLD" ,
0x000001ca , "\0\0\0\0TELLlIFInAME(postP)" ,
0x000001cb , "\0\0\0\0SET_bStopOk" ,
0x000001cc , "\0\0\0\0YIELDlIMIT" ,
0x000001cd , "\0\0\0\0CONoUTrAW7(post1P,c1P,post2P,c2P,post3P,c3P,post4P)" ,
0x000001ce , "\0\0\0\0GETiDsERIAL" ,
0x000001cf , "\0\0\0\0CONoUTrAW9(post1P,c1P,post2P,c2P,post3P,c3P,post4P,c4P,post5P)" ,
0x000001d0 , "\0\0\0\0ifcIDaDAMcLASS" ,
0x000001d1 , "\0\0\0\0TLNA(postP)" ,
0x000001d2 , "\0\0\0\0IDpHASE(idP)" ,
0x000001d3 , "\0\0\0\0IDpHASErESTORE" ,
0x000001d4 , "\0\0\0\0TELLc3LIFI(idTypeP,pbP,cbP,idLineP,idiFileP)" ,
0x000001d5 , "\0\0\0\0TELLc3SlIFI(idTypeP,pbP,cbP,idLineP,idiFileP)" ,
0x000001d6 , "\0\0\0\0LOGrAW(postP)" ,
0x000001d7 , "\0\0\0\0LOGrAW5(post1P,c1P,post2P,c2P,post3P)" ,
0x000001d8 , "\0\0\0\0LOGrAW3(post1P,c1P,post2P)" ,
0x000001d9 , "\0\0\0\0ifcIDmEMORYsPACE" ,
0x000001da , "\0\0\0\0BLAMMOcT" ,
0x000001db , "\0\0\0\0flCYRCLEoLDwRITE" ,
0x000001dc , "\0\0\0\0CrETRYcYRCLEoLDrEAD" ,
0x000001dd , "\0\0\0\0USCORE127" ,
0x000001de , "\0\0\0\0ifcIDcMDmONITOR" ,
0x000001df , "\0\0\0\0ifcIDrEPLYmONITOR" ,
0x000001e0 , "\0\0\0\0flTHREADmODE2" ,
0x000001e1 , "\0\0\0\0___BITScT(pvP,idTagP)" ,
0x000001e2 , "\0\0\0\0ifcLINE" ,
0x000001e3 , "\0\0\0\0ifcIDtYPEpAINT" ,
0x000001e4 , "\0\0\0\0flFILEoRdIRdELETE" ,
0x000001e5 , "\0\0\0\0CALL" ,
0x000001e6 , "\0\0\0\0CALLpROTO" ,
0x000001e7 , "\0\0\0\0OPERATOR" ,
0x000001e8 , "\0\0\0\0ifcIDcMDbASE" ,
0x000001e9 , "\0\0\0\0VARIABLEfUNCTIONdEFS" ,
0x000001ea , "\0\0\0\0IDcMDwORD" ,
0x000001eb , "\0\0\0\0W" ,
0x000001ec , "\0\0\0\0O" ,
0x000001ed , "\0\0\0\0O2(idCmdP,objectP)" ,
0x000001ee , "\0\0\0\0DEF" ,
0x000001ef , "\0\0\0\0OR" ,
0x000001f0 , "\0\0\0\0WR" ,
0x000001f1 , "\0\0\0\0flWAITdIR" ,
0x000001f2 , "\0\0\0\0SOIXLoLDpEEK" ,
0x000001f3 , "\0\0\0\0IFbADpEEK" ,
0x000001f4 , "\0\0\0\0SOIXLoLDtESTeMPTY" ,
0x000001f5 , "\0\0\0\0SOIXLoLDtESTtYPE" ,
0x000001f6 , "\0\0\0\0POPUP2(postP,postTitleP)" ,
0x000001f7 , "\0\0\0\0POPUPsOIXLoLD(postP" ,
0x000001f8 , "\0\0\0\0POSTpROLOG" ,
0x000001f9 , "\0\0\0\0PoBJECT" ,
0x000001fa , "\0\0\0\0ifcIDpROTOCOL" ,
0x000001fb , "\0\0\0\0ifcIDtYPEwRAP" ,
0x000001fc , "\0\0\0\0flRELAYpOP" ,
0x000001fd , "\0\0\0\0ifcIDtYPEbAG" ,
0x000001fe , "\0\0\0\0IDtYPErELAYpOPcLIENTwORK" ,
0x000001ff , "\0\0\0\0RELAYiNFOaRGcOUNTS" ,
0x00000200 , "\0\0\0\0RELAYiNFOaRGS" ,
0x00000201 , "\0\0\0\0RELAYiNFOpARMS" ,
0x00000202 , "\0\0\0\0RELAYiNFOtm" ,
0x00000203 , "\0\0\0\0RELAYiNFOf" ,
0x00000204 , "\0\0\0\0VERIFYrELAY" ,
0x00000205 , "\0\0\0\0VERIFYrELAY2" ,
0x00000206 , "\0\0\0\0GOSSIPaBSENTrELAY" ,
0x00000207 , "\0\0\0\0POURaBSENTrELAY" ,
0x00000208 , "\0\0\0\0UNGRABrELAYlISTS" ,
0x00000209 , "\0\0\0\0GRABrELAYlISTS" ,
0x0000020a , "\0\0\0\0ifcIDfIELDbAG" ,
0x0000020b , "\0\0\0\0ifcIDfIELDbAG" ,
0x0000020c , "\0\0\0\0CBfRAMEsPOUSE" ,
0x0000020d , "\0\0\0\0CfRAMESsPOUSE" ,
0x0000020e , "\0\0\0\0ifcIDcMDsPOUSE" ,
0x0000020f , "\0\0\0\0C" ,
0x00000210 , "\0\0\0\0CBbITScT" ,
0x00000211 , "\0\0\0\0TAG" ,
0x00000212 , "\0\0\0\0TAGoR" ,
0x00000213 , "\0\0\0\0CbITSlIFI" ,
0x00000214 , "\0\0\0\0TAGnOtIN" ,
0x00000215 , "\0\0\0\0TAGoRnOtIN" ,
0x00000216 , "\0\0\0\0CBtLS" ,
0x00000217 , "\0\0\0\0flZAP" ,
0x00000218 , "\0\0\0\0flSET" ,
0x00000219 , "\0\0\0\0TLSeNTRYoFF" ,
0x0000021a , "\0\0\0\0TAGiDnULL" ,
0x0000021b , "\0\0\0\0_MILE" ,
0x0000021c , "\0\0\0\0_MOLE" ,
0x0000021d , "\0\0\0\0___BITS(pvP,idTagP,idLineP,idiFileP,pbBitsP)" ,
0x0000021e , "\0\0\0\0flDROPnOTE" ,
0x0000021f , "\0\0\0\0LR1(postP)" ,
0x00000220 , "\0\0\0\0LR2(postP)" ,
0x00000221 , "\0\0\0\0LR3(postP)" ,
0x00000222 , "\0\0\0\0LR4(postP)" ,
0x00000223 , "\0\0\0\0ifcIDcHANNEL1" ,
0x00000224 , "\0\0\0\0ifcIDcHANNELfUNCTION" ,
0x00000225 , "\0\0\0\0ifcIDtYPEgIFT" ,
0x00000226 , "\0\0\0\0_M" ,
0x00000227 , "\0\0\0\0ifcIDpHASEtHREAD" ,
0x00000228 , "\0\0\0\0ifcIDpHASEaDAM" ,
0x00000229 , "\0\0\0\0EBPiNVALIDvALUE" ,
0x0000022a , "\0\0\0\0MAXscOUNTT" ,
0x0000022b , "\0\0\0\0BEEPsTOP(hzP,msP)" ,
0x0000022c , "\0\0\0\0FOOT(classP,postNameP,costaP)" ,
0x0000022d , "\0\0\0\0COSTtEXT(postNameP)" ,
0x0000022e , "\0\0\0\0OStEXTcLEAR(postNameP)" ,
0x0000022f , "\0\0\0\0OStEXTA(postNameP,postP)" ,
0x00000230 , "\0\0\0\0OStEXTC(postNameP,cP,padP)" ,
0x00000231 , "\0\0\0\0FOOTV(classP,postNameP,postValueP)" ,
0x00000232 , "\0\0\0\0OStEXTAS(postNameP,ostP)" ,
0x00000233 , "\0\0\0\0FOOTM(classP,postNameP,costaP)" ,
0x00000234 , "\0\0\0\0FOOTMiNIT(postNameP)" ,
0x00000235 , "\0\0\0\0OStEXT(postNameP,costaP)" ,
0x00000236 , "\0\0\0\0OStEXTAK(postNameP,postP)" ,
0x00000237 , "\0\0\0\0ifcIDtYPEsTATICC" ,
0x00000238 , "\0\0\0\0OStEXTAL(postNameP,postP,costP)" ,
0x00000239 , "\0\0\0\0COSTArPTeXCEPTION" ,
0x0000023a , "\0\0\0\0OStEXTCF(postNameP,cP,padP)" ,
0x0000023b , "\0\0\0\0CBdROPcLEAR" ,
0x0000023c , "\0\0\0\0ifcIDtYPEtESTwATER" ,
0x0000023d , "\0\0\0\0fliIDhOME" ,
0x0000023e , "\0\0\0\0CCuTILITY" ,
0x0000023f , "\0\0\0\0ifcIDtHREADlOW" ,
0x00000240 , "\0\0\0\0ClOWtHREADS" ,
0x00000241 , "\0\0\0\0WAKEsHOW(titleP)" ,
0x00000242 , "\0\0\0\0WAKEsHOWtEXT(titleP)" ,
0x00000243 , "\0\0\0\0WAKEdEBUGhIDE(titleP)" ,
0x00000244 , "\0\0\0\0flHOMEsUPERrANDOM" ,
0x00000245 , "\0\0\0\0CCsUPERrANDOM" ,
0x00000246 , "\0\0\0\0flCIOpUT" ,
0x00000247 , "\0\0\0\0ifcIDcMDrEGISTERmEDIATOR" ,
0x00000248 , "\0\0\0\0idbKEYtYPE" ,
0x00000249 , "\0\0\0\0idbKEYpINtYPE" ,
0x0000024a , "\0\0\0\0BlATHsTRING" ,
0x0000024b , "\0\0\0\0BlATHsTRING1" ,
0x0000024c , "\0\0\0\0BlATHsTRING2" ,
0x0000024d , "\0\0\0\0BlATHsTRING3" ,
0x0000024e , "\0\0\0\0BlATHsTRING4" ,
0x0000024f , "\0\0\0\0POSTfOLDERsECURITYkEYdEPOSITORY" ,
0x00000250 , "\0\0\0\0ifcIDfIELDwRAP" ,
0x00000251 , "\0\0\0\0TaRG1(tmFP)" ,
0x00000252 , "\0\0\0\0LOGrAW7(post1P,c1P,post2P,c2P,post3P,c3P,post4P)" ,
0x00000253 , "\0\0\0\0LOGrAW9(post1P,c1P,post2P,c2P,post3P,c3P,post4P,c4P,post5P)" ,
0x00000254 , "\0\0\0\0ETrOCK" ,
0x00000255 , "\0\0\0\0flSOCKETcmODE" ,
0x00000256 , "\0\0\0\0flGRABwANT" ,
0x00000257 , "\0\0\0\0ifcIDtYPEpOOP" ,
0x00000258 , "\0\0\0\0flPOOP" ,
0x00000259 , "\0\0\0\0OStEXTCmIN(postNameP,cP,costMinP)" ,
0x0000025a , "\0\0\0\0SCOOP" ,
0x0000025b , "\0\0\0\0POOPIE" ,
0x0000025c , "\0\0\0\0POOP" ,
0x0000025d , "\0\0\0\0IP" ,
0x0000025e , "\0\0\0\0IPR" ,
0x0000025f , "\0\0\0\0POOPR" ,
0x00000260 , "\0\0\0\0flMAP" ,
0x00000261 , "\0\0\0\0ifcIDcMDsOCKETtOPsECRET" ,
0x00000262 , "\0\0\0\0ifcIDpHASEsOCKETtOPsECRET" ,
0x00000263 , "\0\0\0\0FIREmYSELF(idSubTypeP)" ,
0x00000264 , "\0\0\0\0BREAKtEXT" ,
0x00000265 , "\0\0\0\0SCOOPS" ,
0x00000266 , "\0\0\0\0ifScratch" ,
0x00000267 , "\0\0\0\0POOPIES" ,
0x00000268 , "\0\0\0\0SCOOPSnEW" ,
0x00000269 , "\0\0\0\0SCOOPSdEL" ,
0x0000026a , "\0\0\0\0SCOOPP" ,
0x0000026b , "\0\0\0\0flPAPERrESET" ,
0x0000026c , "\0\0\0\0SADAM(pSoulP)" ,
0x0000026d , "\0\0\0\0ifcIDtYPEfEATUREsADAM" ,
0x0000026e , "\0\0\0\0flFEATUREsADAMbODY" ,
0x0000026f , "\0\0\0\0flFEATUREsADAMaDAM" ,
0x00000270 , "\0\0\0\0flFEATUREsADAMfRAME" ,
0x00000271 , "\0\0\0\0flFEATUREsADAMkEYBOARD" ,
0x00000272 , "\0\0\0\0flFEATUREsADAMmOUSE" ,
0x00000273 , "\0\0\0\0flFEATUREsADAMcIO" ,
0x00000274 , "\0\0\0\0ifcIDtYPEsADAMcHANNEL" ,
0x00000275 , "\0\0\0\0BwOTHsTRING" ,
0x00000276 , "\0\0\0\0BlATHsTRING5" ,
0x00000277 , "\0\0\0\0BlATHsTRING6" ,
0x00000278 , "\0\0\0\0BlATHsTRING7" ,
0x00000279 , "\0\0\0\0BlATHsTRING8" ,
0x0000027a , "\0\0\0\0BwOTHsTRING1" ,
0x0000027b , "\0\0\0\0BwOTHsTRING2" ,
0x0000027c , "\0\0\0\0BwOTHsTRING3" ,
0x0000027d , "\0\0\0\0BwOTHsTRING4" ,
0x0000027e , "\0\0\0\0BwOTHsTRING5" ,
0x0000027f , "\0\0\0\0BwOTHsTRING6" ,
0x00000280 , "\0\0\0\0BwOTHsTRING7" ,
0x00000281 , "\0\0\0\0BwOTHsTRING8" ,
0x00000282 , "\0\0\0\0OLDlINEeND(cP,rP)" ,
0x00000283 , "\0\0\0\0flFEATUREsADAMcALLbACK" ,
0x00000284 , "\0\0\0\0ifcIDtYPEsADAMcALLbACK" ,
0x00000285 , "\0\0\0\0OLDmOVEtOpOP" ,
0x00000286 , "\0\0\0\0LOGrAWtID(post1P)" ,
0x00000287 , "\0\0\0\0S3(idAdamP,idCasteP,cNoteP)" ,
0x00000288 , "\0\0\0\0flSTROKINGfRAME" ,
0x00000289 , "\0\0\0\0flETHERwHERE" ,
0x0000028a , "\0\0\0\0saA1" ,
0x0000028b , "\0\0\0\0flFEATUREsADAMiNTERCOM" ,
0x0000028c , "\0\0\0\0flGRABcUNGRABf" ,
0x0000028d , "\0\0\0\0flFEATUREsADAMfLYOVER" ,
0x0000028e , "\0\0\0\0flTREEwALK" ,
0x0000028f , "\0\0\0\0ifcIDtYPEtREEbRANCHdEFINITIONoLDcb" ,
0x00000290 , "\0\0\0\0flFILEaTcLOSE" ,
0x00000291 , "\0\0\0\0flTREEwRITE" ,
0x00000292 , "\0\0\0\0flXRAY" ,
0x00000293 , "\0\0\0\0#define CxRAYeXTENTS 0x20" ,
0x00000294 , "\0\0\0\0LOGrAWtID2(post1P,c1P)" ,
0x00000295 , "\0\0\0\0LOGrAWtID4(post1P,c1P,post2P,c2P)" ,
0x00000296 , "\0\0\0\0LOGrAWtID6(post1P,c1P,post2P,c2P,post3P,c3P)" ,
0x00000297 , "\0\0\0\0ifcIDaCTIONsTACKaDJUSTrEFS" ,
0x00000298 , "\0\0\0\0_INbATON_" ,
0x00000299 , "\0\0\0\0_OUTbATON_" ,
0x0000029a , "\0\0\0\0QUITOZ" ,
0x0000029b , "\0\0\0\0flGRABcGRABf" ,
0x0000029c , "\0\0\0\0ifcIDtYPEdISPLAY" ,
0x0000029d , "\0\0\0\0IV(idPrefixP,idP)" ,
0x0000029e , "\0\0\0\0ifcIDmODEsIGNgIVE" ,
0x0000029f , "\0\0\0\0WHEREbLAMMO" ,
0x000002a0 , "\0\0\0\0IDIfILEcALLER(offP)" ,
0x000002a1 , "\0\0\0\0IFwHEREiSwATCHING" ,
0x000002a2 , "\0\0\0\0ifcIDtYPErECYCLE" ,
0x000002a3 , "\0\0\0\0OStEXTM(postNameP,costaP)" ,
0x000002a4 , "\0\0\0\0OStEXTMiNIT(postNameP)" ,
0x000002a5 , "\0\0\0\0OStEXTV(postNameP,postValueP)" ,
0x000002a6 , "\0\0\0\0GETfROMrECYCLER" ,
0x000002a7 , "\0\0\0\0GETfROMrECYCLER2" ,
0x000002a8 , "\0\0\0\0RETURNtOrECYCLER0" ,
0x000002a9 , "\0\0\0\0RETURNtOrECYCLER2" ,
0x000002aa , "\0\0\0\0_INbATONnOtAG_" ,
0x000002ab , "\0\0\0\0GETfROMrECYCLER4" ,
0x000002ac , "\0\0\0\0RETURNtOrECYCLER4" ,
0x000002ad , "\0\0\0\0GETfROMrECYCLER5" ,
0x000002ae , "\0\0\0\0RETURNtOrECYCLER5" ,
0x000002af , "\0\0\0\0LOGrAWtID8(post1P,c1P,post2P,c2P,post3P,c3P,post4P,c4P)" ,
0x000002b0 , "\0\0\0\0GETfROMrECYCLER6" ,
0x000002b1 , "\0\0\0\0RETURNtOrECYCLER6" ,
0x000002b2 , "\0\0\0\0LOGrAWtIDa(post1P,c1P,post2P,c2P,post3P,c3P,post4P,c4P,post5P,c5P)" ,
0x000002b3 , "\0\0\0\0LOGrAWtIDc(post1P,c1P,post2P,c2P,post3P,c3P,post4P,c4P,post5P,c5P,post6P,c6P)" ,
0x000002b4 , "\0\0\0\0flEARdROPc" ,
0x000002b5 , "\0\0\0\0CBtOaLIGN02(pbOrCbP)" ,
0x000002b6 , "\0\0\0\0flRENDERsTYLE" ,
0x000002b7 , "\0\0\0\0flFEATUREsADAMhOTkEY" ,
0x000002b8 , "\0\0\0\0flTOOL" ,
0x000002b9 , "\0\0\0\0SETpREFIXA(psttP)" ,
0x000002ba , "\0\0\0\0flFEATUREsADAMjOYsTICK" ,
0x000002bb , "\0\0\0\0LOGrAWb(post1P,c1P,post2P,c2P,post3P,c3P,post4P,c4P,post5P,c5P,post6P)" ,
0x000002bc , "\0\0\0\0ifcIDtYPEtABfRESH" ,
0x000002bd , "\0\0\0\0flSTRwORDS" ,
0x000002be , "\0\0\0\0flFEATUREsADAMfLYOVERhIGHLIGHT" ,
0x000002bf , "\0\0\0\0flFEATUREsADAMdRAGGABLE" ,
0x000002c0 , "\0\0\0\0flTEXTc" ,
0x000002c1 , "\0\0\0\0flTCsTATE" ,
0x000002c2 , "\0\0\0\0flTCfEATURE" ,
0x000002c3 , "\0\0\0\0SWITCHfLAVORpATCH" ,
0x000002c4 , "\0\0\0\0flRENDERsUPPRESS" ,
0x000002c5 , "\0\0\0\0flTRACEsOULc" ,
0x000002c6 , "\0\0\0\0flPAPERrENDER" ,
0x000002c7 , "\0\0\0\0TTtOCK(time1P,time2P)" ,
0x000002c8 , "\0\0\0\0ifcRGB" ,
0x000002c9 , "\0\0\0\0flSADAMhIGHLIGHT" ,
0x000002ca , "\0\0\0\0LOGcALLnEST" ,
0x000002cb , "\0\0\0\0LOGrAWd(post1P,c1P,post2P,c2P,post3P,c3P,post4P,c4P,post5P,c5P,post6P,c6P,post7P)" ,
0x000002cc , "\0\0\0\0flBRANCHs" ,
0x000002cd , "\0\0\0\0GETfROMrECYCLER1" ,
0x000002ce , "\0\0\0\0RETURNtOrECYCLER1" ,
0x000002cf , "\0\0\0\0ifcIDfORMATtIME" ,
0x000002d0 , "\0\0\0\0TTtEXT(time1P,time2P,idWothP,idLathP)" ,
0x000002d1 , "\0\0\0\0RELnIBBLE1" ,
0x000002d2 , "\0\0\0\0RELnIBBLE2" ,
0x000002d3 , "\0\0\0\0RELnIBBLE3" ,
0x000002d4 , "\0\0\0\0RELnIBBLE4" ,
0x000002d5 , "\0\0\0\0TIMEpARTSrEL(prefixP,time1P,time2P)" ,
0x000002d6 , "\0\0\0\0NIBBLE1" ,
0x000002d7 , "\0\0\0\0NIBBLE2" ,
0x000002d8 , "\0\0\0\0NIBBLE3" ,
0x000002d9 , "\0\0\0\0NIBBLE4" ,
0x000002da , "\0\0\0\0TIMEpARTSoFF(prefixP,time1P,time2P)" ,
0x000002db , "\0\0\0\0TIMEpARTSrELaRRAY(prefixP,time1P,time2P)" ,
0x000002dc , "\0\0\0\0flPAPERrENDERnOpUSH" ,
0x000002dd , "\0\0\0\0flVtEXTsET" ,
0x000002de , "\0\0\0\0flADAMrEFERENCES" ,
0x000002df , "\0\0\0\0TF6(valueP,a2P,a3P,a4P,a5P,a6P)" ,
0x000002e0 , "\0\0\0\0ifcIDtYPEsADAMpRIVILEGE" ,
0x000002e1 , "\0\0\0\0FUZZ2" ,
0x000002e2 , "\0\0\0\0TPpARAM" ,
0x000002e3 , "\0\0\0\0TPpARAMmAP" ,
0x000002e4 , "\0\0\0\0flPULPmODE" ,
0x000002e5 , "\0\0\0\0flDRAW" ,
0x000002e6 , "\0\0\0\0ifcIDtYPEpAPERbACK" ,
0x000002e7 , "\0\0\0\0CCwORD" ,
0x000002e8 , "\0\0\0\0WWiNIT(idAdamP)" ,
0x000002e9 , "\0\0\0\0WW(cP)" ,
0x000002ea , "\0\0\0\0flPAPERbACKmODE" ,
0x000002eb , "\0\0\0\0flPAPERmODEi" ,
0x000002ec , "\0\0\0\0flSTRIKEvOLATILE" ,
0x000002ed , "\0\0\0\0flEYEoLD" ,
0x000002ee , "\0\0\0\0flSADAMsTATE" ,
0x000002ef , "\0\0\0\0flGETsADAMsTATES" ,
0x000002f0 , "\0\0\0\0flCALLsADAMS" ,
0x000002f1 , "\0\0\0\0LOGrAWtIDe(post1P,c1P,post2P,c2P,post3P,c3P,post4P,c4P,post5P,c5P,post6P,c6P,post7P,c7P)" ,
0x000002f2 , "\0\0\0\0ifcIDwINDOW" ,
0x000002f3 , "\0\0\0\0flEYEoLDcAPTURE" ,
0x000002f4 , "\0\0\0\0flPAPERrENDERcALCnOpUSH" ,
0x000002f5 , "\0\0\0\0flBOUND" ,
0x000002f6 , "\0\0\0\0flEYEoLDaNGLEStOsPEC" ,
0x000002f7 , "\0\0\0\0CpOLYGONsIDESdEFAULT" ,
0x000002f8 , "\0\0\0\0flPUSHoRIGIN" ,
0x000002f9 , "\0\0\0\0HANDLEaPPnOTEScOUNTcLASS" ,
0x000002fa , "\0\0\0\0NEWdELcLASS(idP,classP)" ,
0x000002fb , "\0\0\0\0flSTRIKEs" ,
0x000002fc , "\0\0\0\0flVbODYs" ,
0x000002fd , "\0\0\0\0IDVB" ,
0x000002fe , "\0\0\0\0flSAY" ,
0x000002ff , "\0\0\0\0flEYEoLDrENDER" ,
0x00000300 , "\0\0\0\0ifcIDpAPER" ,
0x00000301 , "\0\0\0\0ifcIDcMDpAPERsELECT" ,
0x00000302 , "\0\0\0\0LOGrAWf(post1P,c1P,post2P,c2P,post3P,c3P,post4P,c4P,post5P,c5P,post6P,c6P,post7P,c7P,post8P)" ,
0x00000303 , "\0\0\0\0LOGrAW11(post1P,c1P,post2P,c2P,post3P,c3P,post4P,c4P,post5P,c5P,post6P,c6P,post7P,c7P,post8P,c8P,post9P)" ,
0x00000304 , "\0\0\0\0POSThTMLhEAD(postTitleP,postDescriptionP,postMetaDescriptionP,postSloganP,postKeywordsP,postUrlP,postIdPortP,postPortNameP)" ,
0x00000305 , "\0\0\0\0POSThTMLfOOT" ,
0x00000306 , "\0\0\0\0NEWdELcLASS0(classP,typeP,cbSizeP)" ,
0x00000307 , "\0\0\0\0NEWdELcLASSb(classP)" ,
0x00000308 , "\0\0\0\0flHOMEs" ,
0x00000309 , "\0\0\0\0HTTPsYSpARAMS(cArgP)" ,
0x0000030a , "\0\0\0\0POSTfOLDERsMTPiNBOX" ,
0x0000030b , "\0\0\0\0POSTfOLDERsMTPoUTBOX" ,
0x0000030c , "\0\0\0\0POSTfOLDERsMTPoUTBOXsENT" ,
0x0000030d , "\0\0\0\0POSTfOLDERsMTPoUTBOXnOTsENT" ,
0x0000030e , "\0\0\0\0STRiDrECURSE(expP)" ,
0x0000030f , "\0\0\0\0flSTRbISECT" ,
0x00000310 , "\0\0\0\0flSESSIONpRIVILEGE" ,
0x00000311 , "\0\0\0\0TnICnAME(nnP)" ,
0x00000312 , "\0\0\0\0flSTACKsORT_" ,
0x00000313 , "\0\0\0\0PLATEcsTANDARDdECLARATIONS(classP)" ,
0x00000314 , "\0\0\0\0FOOcLASS_plateC" ,
0x00000315 , "\0\0\0\0FOOcLASS2_plateC" ,
0x00000316 , "\0\0\0\0flSTRmAKE" ,
0x00000317 , "\0\0\0\0ifcIDsNIPpREDEFINED" ,
0x00000318 , "\0\0\0\0postSOIXLoLDfILESfOLDERS" ,
0x00000319 , "\0\0\0\0postFOLDERrEMOVALuTILITY" ,
0x0000031a , "\0\0\0\0ifcIDsNIPrESERVEDbANNER" ,
0x0000031b , "\0\0\0\0FRESHtIMEaTOMIC(etherP,timeStale1P,timeStale2P)" ,
0x0000031c , "\0\0\0\0FRIENDS_backOldC" ,
0x0000031d , "\0\0\0\0FRIENDS_bitsC" ,
0x0000031e , "\0\0\0\0FRIENDS_etherC" ,
0x0000031f , "\0\0\0\0FRIENDS_grabNotesS" ,
0x00000320 , "\0\0\0\0FRIENDS_grabC" ,
0x00000321 , "\0\0\0\0FRIENDS_handleC" ,
0x00000322 , "\0\0\0\0FRIENDS_lexC" ,
0x00000323 , "\0\0\0\0FRIENDS_masterOldC" ,
0x00000324 , "\0\0\0\0FRIENDS_neverUsedC" ,
0x00000325 , "\0\0\0\0FRIENDS_paperOldC" ,
0x00000326 , "\0\0\0\0FRIENDS_pulpOldC" ,
0x00000327 , "\0\0\0\0FRIENDS_relayC" ,
0x00000328 , "\0\0\0\0FRIENDS_rootWordC" ,
0x00000329 , "\0\0\0\0FRIENDS_socketC" ,
0x0000032a , "\0\0\0\0FRIENDS_soulC" ,
0x0000032b , "\0\0\0\0FRIENDS_soixlOldSpaceC" ,
0x0000032c , "\0\0\0\0FRIENDS_stackC" ,
0x0000032d , "\0\0\0\0FRIENDS_strokeS" ,
0x0000032e , "\0\0\0\0FRIENDS_switchC" ,
0x0000032f , "\0\0\0\0FRIENDS_tableC" ,
0x00000330 , "\0\0\0\0FRIENDS_taskS" ,
0x00000331 , "\0\0\0\0FRIENDS_thirdC" ,
0x00000332 , "\0\0\0\0FRIENDS_thugC" ,
0x00000333 , "\0\0\0\0FRIENDS_tinS" ,
0x00000334 , "\0\0\0\0FRIENDS_windowOldC" ,
0x00000335 , "\0\0\0\0flADAMmODE1" ,
0x00000336 , "\0\0\0\0flADAMmODE2" ,
0x00000337 , "\0\0\0\0ifcIDsUBtYPEpOOP_" ,
0x00000338 , "\0\0\0\0flHANDLEc" ,
0x00000339 , "\0\0\0\0SCOOPSnEWsPECIFIED(poopP)" ,
0x0000033a , "\0\0\0\0flHANDOFFoLDs_" ,
0x0000033b , "\0\0\0\0ifcIDpHASEpROCESS" ,
0x0000033c , "\0\0\0\0flADAM" ,
0x0000033d , "\0\0\0\0WAITuNTILaLMOSTaLONE" ,
0x0000033e , "\0\0\0\0flDOORoBEY" ,
0x0000033f , "\0\0\0\0FUZZ3" ,
0x00000340 , "\0\0\0\0FUZZ4" ,
0x00000341 , "\0\0\0\0FUZZ5" ,
0x00000342 , "\0\0\0\0FUZZ6" ,
0x00000343 , "\0\0\0\0FUZZ7" ,
0x00000344 , "\0\0\0\0FUZZ8" ,
0x00000345 , "\0\0\0\0TINY2(mP)" ,
0x00000346 , "\0\0\0\0TINY3(mP)" ,
0x00000347 , "\0\0\0\0TINY4(mP)" ,
0x00000348 , "\0\0\0\0TINY5(mP)" ,
0x00000349 , "\0\0\0\0TINY6(mP)" ,
0x0000034a , "\0\0\0\0TINY7(mP)" ,
0x0000034b , "\0\0\0\0TINY8(mP)" ,
0x0000034c , "\0\0\0\0PeTHER" ,
0x0000034d , "\0\0\0\0NEWdELcLASSbSIZED(classP)" ,
0x0000034e , "\0\0\0\0flMARKETsELL" ,
0x0000034f , "\0\0\0\0flMARKETbUY" ,
0x00000350 , "\0\0\0\0ifcIDfORMhTTPrEPLY" ,
0x00000351 , "\0\0\0\0FiSvALID(flPrefixP,flagsP)" ,
0x00000352 , "\0\0\0\0flBOXcpUTf" ,
0x00000353 , "\0\0\0\0ISsTRINGoFsTRINGS(psttP)" ,
0x00000354 , "\0\0\0\0flRANGEc" ,
0x00000355 , "\0\0\0\0flOStHREADaDAMf" ,
0x00000356 , "\0\0\0\0DOUBLEpARM(parmP)" ,
0x00000357 , "\0\0\0\0DASH79" ,
0x00000358 , "\0\0\0\0DASH127" ,
0x00000359 , "\0\0\0\0DASH256" ,
0x0000035a , "\0\0\0\0flOPENsHAREDmEMORY" ,
0x0000035b , "\0\0\0\0CiPmAPhOME" ,
0x0000035c , "\0\0\0\0flIPmAPhOMEs" ,
0x0000035d , "\0\0\0\0_OUT_" ,
0x0000035e , "\0\0\0\0ifcIDtYPEtHREAD" ,
0x0000035f , "\0\0\0\0CHATTERiF" ,
0x00000360 , "\0\0\0\0CsLOTeXTENTS" ,
0x00000361 , "\0\0\0\0CsLOTsIZESmAX" ,
0x00000362 , "\0\0\0\0NEWdELcLASSsUBCLASSb(classP,subclassP)" ,
0x00000363 , "\0\0\0\0NEWdELcLASSsUBCLASS0(classP,subclassP,typeP,cbSizeP)" ,
0x00000364 , "\0\0\0\0IDlINEcALLER(offP)" ,
0x00000365 , "\0\0\0\0flSEXc" ,
0x00000366 , "\0\0\0\0flSLOTSc" ,
0x00000367 , "\0\0\0\0flPOOLc" ,
0x00000368 , "\0\0\0\0FLAGScALLER(offP)" ,
0x00000369 , "\0\0\0\0FLAGScALLER(offP)" ,
0x0000036a , "\0\0\0\0DROPnOTEdOESnOTwANTmE" ,
0x0000036b , "\0\0\0\0ifcEMAIL" ,
0x0000036c , "\0\0\0\0flOLDlEAKmONITOR" ,
0x0000036d , "\0\0\0\0flBATONcT" ,
0x0000036e , "\0\0\0\0ifcIDtYPEsTROKEcLEAN" ,
0x0000036f , "\0\0\0\0ifcIDtYPEtICKET" ,
0x00000370 , "\0\0\0\0ifcTIMEtIMEOUTsESSION" ,
0x00000371 , "\0\0\0\0ifcIDpOOL" ,
0x00000372 , "\0\0\0\0PUSE" ,
0x00000373 , "\0\0\0\0flPOOLfORMAT" ,
0x00000374 , "\0\0\0\0flGRABITc" ,
0x00000375 , "\0\0\0\0__HIGHbIT(cP)" ,
0x00000376 , "\0\0\0\0APT(classP,aptP)" ,
0x00000377 , "\0\0\0\0G(aptP)" ,
0x00000378 , "\0\0\0\0U(aptP)" ,
0x00000379 , "\0\0\0\0ifcIDsTATEsPACE" ,
0x0000037a , "\0\0\0\0BOSpOOP" ,
0x0000037b , "\0\0\0\0LISTnAME" ,
0x0000037c , "\0\0\0\0ifcIDhOWlIST" ,
0x0000037d , "\0\0\0\0flAPTiNSPECT" ,
0x0000037e , "\0\0\0\0fliLISTINGc" ,
0x0000037f , "\0\0\0\0ifcIDtYPEmIXINdATUM" ,
0x00000380 , "\0\0\0\0BM" ,
0x00000381 , "\0\0\0\0flAPTdETACH" ,
0x00000382 , "\0\0\0\0flAPTaTTACH" ,
0x00000383 , "\0\0\0\0ifcIDtYPEaPTaTTACH" ,
0x00000384 , "\0\0\0\0ifcIDcMDsERIALnUMBERdISPENSER" ,
0x00000385 , "\0\0\0\0ifcIDcMDlISTsERVEReMAILiDaCCOUNT" ,
0x00000386 , "\0\0\0\0flLISTwALKoLD" ,
0x00000387 , "\0\0\0\0flADAMsTATE" ,
0x00000388 , "\0\0\0\0FRIENDS_baseGrabC" ,
0x00000389 , "\0\0\0\0ifcIDtYPEdERIVEDbASEgRABc" ,
0x0000038a , "\0\0\0\0flBASEgRABc" ,
0x0000038b , "\0\0\0\0CsEXeNTRIES" ,
0x0000038c , "\0\0\0\0postPOOLlEAKlOGGER" ,
0x0000038d , "\0\0\0\0flSEXcNEWf" ,
0x0000038e , "\0\0\0\0RESET(aptP)" ,
0x0000038f , "\0\0\0\0ifcIDcMDlISTsERVERiDaCCOUNTdESCRIPTION" ,
0x00000390 , "\0\0\0\0LISTnAME" ,
0x00000391 , "\0\0\0\0fliACCOUNTmODE" ,
0x00000392 , "\0\0\0\0fliACCOUNTmEMBERoF" ,
0x00000393 , "\0\0\0\0ifcIDmODEaCCOUNT" ,
0x00000394 , "\0\0\0\0fliSUBACCOUNTmODE" ,
0x00000395 , "\0\0\0\0fliSUBACCOUNTmEMBERoF" ,
0x00000396 , "\0\0\0\0ifcIDmODEsUBACCOUNT" ,
0x00000397 , "\0\0\0\0flSUBACCOUNT" ,
0x00000398 , "\0\0\0\0TTnOWtEXT(idWothP,idLathP)" ,
0x00000399 , "\0\0\0\0TnOWtICK" ,
0x0000039a , "\0\0\0\0TnOWtOCK" ,
0x0000039b , "\0\0\0\0THREADmODE1sAVE0(flagsSaveP)" ,
0x0000039c , "\0\0\0\0THREADmODE1oFF0(flagsP)" ,
0x0000039d , "\0\0\0\0THREADmODE1oN0(flagsP)" ,
0x0000039e , "\0\0\0\0THREADmODE1rESTORE0" ,
0x0000039f , "\0\0\0\0THREADmODE2oFF(flagsP)" ,
0x000003a0 , "\0\0\0\0THREADmODE2rESTORE" ,
0x000003a1 , "\0\0\0\0THREADmODE2oN(flagsP)" ,
0x000003a2 , "\0\0\0\0THREADmODE2sAVE0(flagsSaveP)" ,
0x000003a3 , "\0\0\0\0THREADmODE2oFF0(flagsP)" ,
0x000003a4 , "\0\0\0\0THREADmODE2oN0(flagsP)" ,
0x000003a5 , "\0\0\0\0THREADmODE2rESTORE0" ,
0x000003a6 , "\0\0\0\0ifcIDhEADfLAVOR" ,
0x000003a7 , "\0\0\0\0ifcCOLORhTML" ,
0x000003a8 , "\0\0\0\0ifcIDmODEtEST" ,
0x000003a9 , "\0\0\0\0flPOOLiNSTANCE" ,
0x000003aa , "\0\0\0\0CONoUTrAWb(post1P,c1P,post2P,c2P,post3P,c3P,post4P,c4P,post5P,c5P,post6P)" ,
0x000003ab , "\0\0\0\0flACCOUNT1" ,
0x000003ac , "\0\0\0\0post* CONTENT OStEXTt LITERALS" ,
0x000003ad , "\0\0\0\0TQ(idP)" ,
0x000003ae , "\0\0\0\0postFACEkEY" ,
0x000003af , "\0\0\0\0ifcIDcMDlISTsERVERmONEYbUCKETS" ,
0x000003b0 , "\0\0\0\0flDEPOSIT" ,
0x000003b1 , "\0\0\0\0flSAYfIELDeDIT" ,
0x000003b2 , "\0\0\0\0PROLOGeDIT(codeSuffixP)" ,
0x000003b3 , "\0\0\0\0EPILOGeDIT" ,
0x000003b4 , "\0\0\0\0ifcIDaCCbUCKEToWNER_IFO" ,
0x000003b5 , "\0\0\0\0ifcIDbUCKET_CENTRALbANK" ,
0x000003b6 , "\0\0\0\0ifcIDpRODUCTcENTRALbANK_EXCHANGEmEDIA" ,
0x000003b7 , "\0\0\0\0ifcIDtESTpASSCODE" ,
0x000003b8 , "\0\0\0\0ifcIDmODEaPTsINK" ,
0x000003b9 , "\0\0\0\0flACCOUNT2" ,
0x000003ba , "\0\0\0\0flSTRiNSERT" ,
0x000003bb , "\0\0\0\0STRfUSEsAFE" ,
0x000003bc , "\0\0\0\0flSESSIONuTILITY" ,
0x000003bd , "\0\0\0\0flBOOKhEADs" ,
0x000003be , "\0\0\0\0flBOOKc" ,
0x000003bf , "\0\0\0\0flBOOK0cwRITE" ,
0x000003c0 , "\0\0\0\0flBOOKSc" ,
0x000003c1 , "\0\0\0\0flFILEhANDLEnOTE" ,
0x000003c2 , "\0\0\0\0CONoUTcALLnEST" ,
0x000003c3 , "\0\0\0\0flBOOKScwRITE" ,
0x000003c4 , "\0\0\0\0CBtELEMETRYeNVELOPE" ,
0x000003c5 , "\0\0\0\0flBOOK0cwRITErESULT" ,
0x000003c6 , "\0\0\0\0CfIREgROUPS" ,
0x000003c7 , "\0\0\0\0ifcIDdO" ,
0x000003c8 , "\0\0\0\0CONoUTrAWd(post1P,c1P,post2P,c2P,post3P,c3P,post4P,c4P,post5P,c5P,post6P,c6P,post7P)" ,
0x000003c9 , "\0\0\0\0CONoUTrAWf(post1P,c1P,post2P,c2P,post3P,c3P,post4P,c4P,post5P,c5P,post6P,c6P,post7P,c7P,post8P)" ,
0x000003ca , "\0\0\0\0POSTS(postsP)" ,
0x000003cb , "\0\0\0\0CrEFS(postsP)" ,
0x000003cc , "\0\0\0\0COSTS(postsP)" ,
0x000003cd , "\0\0\0\0REF(classP,refP)" ,
0x000003ce , "\0\0\0\0DcON(postP)" ,
0x000003cf , "\0\0\0\0DcON3(post1P,cP,post2P)" ,
0x000003d0 , "\0\0\0\0DlOG(postP)" ,
0x000003d1 , "\0\0\0\0DlOG3(post1P,cP,post2P)" ,
0x000003d2 , "\0\0\0\0MINscOUNTT" ,
0x000003d3 , "\0\0\0\0CLEARtINaRGS" ,
0x000003d4 , "\0\0\0\0flLISTwALKcALLbACKrETURNcODE" ,
0x000003d5 , "\0\0\0\0flLISTwALK" ,
0x000003d6 , "\0\0\0\0SAVEtINaRGS" ,
0x000003d7 , "\0\0\0\0RESTOREtINaRGS" ,
0x000003d8 , "\0\0\0\0LNV(pczNameP)" ,
0x000003d9 , "\0\0\0\0SMARTpOINTERcLASSdEF(classSPP,classP,bitsCRefP)" ,
0x000003da , "\0\0\0\0flFIELDeDIT" ,
0x000003db , "\0\0\0\0flFIELDeDITtYPEmASK" ,
0x000003dc , "\0\0\0\0DELlIST(classP,pWothP)" ,
0x000003dd , "\0\0\0\0SAYfIELDoUT(postP)" ,
0x000003de , "\0\0\0\0flLISToPEN" ,
0x000003df , "\0\0\0\0flLISTwALKrETURNcODE" ,
0x000003e0 , "\0\0\0\0flLISToPENrETURNcODE" ,
0x000003e1 , "\0\0\0\0flLISTpOURrETURNcODE" ,
0x000003e2 , "\0\0\0\0FD_INDEXif(typeP,expCarefulP)" ,
0x000003e3 , "\0\0\0\0FD_UNiNDEXif(typeP,expCarefulP)" ,
0x000003e4 , "\0\0\0\0flLISTdELETE" ,
0x000003e5 , "\0\0\0\0FD_WALKiNDEXif(typeP)" ,
0x000003e6 , "\0\0\0\0PUSHtINaRGS" ,
0x000003e7 , "\0\0\0\0POPtINaRGS" ,
0x000003e8 , "\0\0\0\0CbITSeXPsLOTS" ,
0x000003e9 , "\0\0\0\0flSELECTwALKcALLbACKrc" ,
0x000003ea , "\0\0\0\0flGETlISTnAME" ,
0x000003eb , "\0\0\0\0_INsTACKc_" ,
0x000003ec , "\0\0\0\0_OUTsTACKc_" ,
0x000003ed , "\0\0\0\0_INbATONsTACKc_" ,
0x000003ee , "\0\0\0\0_OUTbATONsTACKc_" ,
0x000003ef , "\0\0\0\0flLISTwALKcHATTER" ,
0x000003f0 , "\0\0\0\0CmAXuNTAGGED" ,
0x000003f1 , "\0\0\0\0ALLtAGGED" ,
0x000003f2 , "\0\0\0\0OStEXTC9(postNameP,cP)" ,
0x000003f3 , "\0\0\0\0flTHREADmODE3" ,
0x000003f4 , "\0\0\0\0THREADmODE3oFF(flagsP)" ,
0x000003f5 , "\0\0\0\0THREADmODE3rESTORE" ,
0x000003f6 , "\0\0\0\0THREADmODE3oN(flagsP)" ,
0x000003f7 , "\0\0\0\0THREADmODE3sAVE0(flagsSaveP)" ,
0x000003f8 , "\0\0\0\0THREADmODE3oFF0(flagsP)" ,
0x000003f9 , "\0\0\0\0THREADmODE3oN0(flagsP)" ,
0x000003fa , "\0\0\0\0THREADmODE3rESTORE0" ,
0x000003fb , "\0\0\0\0ifcIDgRABlAYER" ,
0x000003fc , "\0\0\0\0flNAPKINcsTATE" ,
0x000003fd , "\0\0\0\0flBASEgRABcrEGISTERbEGUN" ,
0x000003fe , "\0\0\0\0fliSLABs" ,
0x000003ff , "\0\0\0\0flSCOOPc" ,
0x00000400 , "\0\0\0\0postIPDOSsHORT" ,
0x00000401 , "\0\0\0\0postIPDOSlONG" ,
0x00000402 , "\0\0\0\0postIPDOSsHORTlONG" ,
0x00000403 , "\0\0\0\0flEXCEPTIONrESULT" ,
0x00000404 , "\0\0\0\0NEWdELcLASSzOMBIEb(classP)" ,
0x00000405 , "\0\0\0\0NEWdELcLASSzOMBIE0(classP,typeP,cbSizeP)" ,
0x00000406 , "\0\0\0\0NEWdELcLASSpROTOSzOMBIE" ,
0x00000407 , "\0\0\0\0DELnOtIN(pvP)" ,
0x00000408 , "\0\0\0\0flTOPc" ,
0x00000409 , "\0\0\0\0RESTARTrEF(rP)" ,
0x0000040a , "\0\0\0\0BLOBpUSH(pP,cbP)" ,
0x0000040b , "\0\0\0\0BLOBpOP(pP)" ,
0x0000040c , "\0\0\0\0LOGrAW5F(post1P,c1P,post2P,c2P,post3P)" ,
0x0000040d , "\0\0\0\0POSTPONEtEST(pP)" ,
0x0000040e , "\0\0\0\0NEXTsTRING(psttcP)" ,
0x0000040f , "\0\0\0\0flZIP" ,
0x00000410 , "\0\0\0\0___CT(pbP)" ,
0x00000411 , "\0\0\0\0CtRIALS" ,
0x00000412 , "\0\0\0\0NEVERzE" ,
0x00000413 , "\0\0\0\0ASSIGNpcz(pczToP,pczFromP)" ,
0x00000414 , "\0\0\0\0ASSIGNpstt(psttToP,psttFromP)" ,
0x00000415 , "\0\0\0\0TaRG2(tmFP,sgnDoneP)" ,
0x00000416 , "\0\0\0\0APPENDcc(psttP,idCasteP,idAdamP,cNoteP)" ,
0x00000417 , "\0\0\0\0APPENDmm(psttP,idCasteP,idAdamP,cNoteP)" ,
0x00000418 , "\0\0\0\0sc" ,
0x00000419 , "\0\0\0\0flGRIDs" ,
0x0000041a , "\0\0\0\0flSURFcsPACE" ,
0x0000041b , "\0\0\0\0flDISPLAYpOSITION" ,
0x0000041c , "\0\0\0\0IDgROUP" ,
0x0000041d , "\0\0\0\0INITgRIDaRRAY" ,
0x0000041e , "\0\0\0\0ifcIDeVENTdEVICEc" ,
0x0000041f , "\0\0\0\0FUZZ1" ,
0x00000420 , "\0\0\0\0TFF(mP)" ,
0x00000421 , "\0\0\0\0flEYEdIRECTION" ,
0x00000422 , "\0\0\0\0TFFeXACT(mP)" ,
0x00000423 , "\0\0\0\0flTAIL" ,
0x00000424 , "\0\0\0\0flASSOCIATEcwALK" ,
0x00000425 , "\0\0\0\0LOGrAW31(post1P,c1P,post2P,c2P,post3P,c3P,post4P,c4P,post5P,c5P,post6P,c6P,post7P,c7P,post8P,c8P,post9P,c9P,postaP)" ,
0x00000426 , "\0\0\0\0LOGrAW51(post1P,c1P,post2P,c2P,post3P,c3P,post4P,c4P,post5P,c5P,post6P,c6P,post7P,c7P,post8P,c8P,post9P,c9P,postaP,caP,postbP)" ,
0x00000427 , "\0\0\0\0ifcIDtYPEgOSSIP" ,
0x00000428 , "\0\0\0\0ifcIDmSGgOSSIP" ,
0x00000429 , "\0\0\0\0flEYEc" ,
0x0000042a , "\0\0\0\0flPELc" ,
0x0000042b , "\0\0\0\0flDEVICEcbf" ,
0x0000042c , "\0\0\0\0flDEVICEchELPER" ,
0x0000042d , "\0\0\0\0CBtOaLIGN001(pbOrCbP)" ,
0x0000042e , "\0\0\0\0flCPUfEATURE" ,
0x0000042f , "\0\0\0\0TwHITEanu" ,
0x00000430 , "\0\0\0\0flSTRiD" ,
0x00000431 , "\0\0\0\0flSTRiDaNY" ,
0x00000432 , "\0\0\0\0TbLACKeXCLUDINGnEWlINE" ,
0x00000433 , "\0\0\0\0TbLACKnEWlINE" ,
0x00000434 , "\0\0\0\0ifcIDmODEeTHERsOIL" ,
0x00000435 , "\0\0\0\0fliDATUMc" ,
0x00000436 , "\0\0\0\0ORIGIN" ,
0x00000437 , "\0\0\0\0CnETmAX" ,
0x00000438 , "\0\0\0\0VERYsMARTpOINTERcLASSdEF(classSPP,classP,bitsCRefP)" ,
0x00000439 , "\0\0\0\0ifcIDeVENTvsp" ,
0x0000043a , "\0\0\0\0flVSP" ,
0x0000043b , "\0\0\0\0P(pvP)" ,
0x0000043c , "\0\0\0\0PV(pvP)" ,
0x0000043d , "\0\0\0\0H(pvP)" ,
0x0000043e , "\0\0\0\0SMARTpOINTERfUNCTIONdEFS(classSPP,classP,offCRefP,bitsCRefP,cbTestP)" ,
0x0000043f , "\0\0\0\0VERYsMARTpOINTERfUNCTIONdEFS(classSPP,classP,offCRefP,bitsCRefP,cbTestP,offCRefWriteP,bitsCRefWriteP)" ,
0x00000440 , "\0\0\0\0PsET(pvP)" ,
0x00000441 , "\0\0\0\0PrESET(pvP)" ,
0x00000442 , "\0\0\0\0PyES(pvP)" ,
0x00000443 , "\0\0\0\0PnO(pvP)" ,
0x00000444 , "\0\0\0\0CmAXgRABITrECURSEiNtINs" ,
0x00000445 , "\0\0\0\0flSTRrEPLACE" ,
0x00000446 , "\0\0\0\0RC(cP,bitsGoneP)" ,
0x00000447 , "\0\0\0\0flOStIMEfROMoLDtIME" ,
0x00000448 , "\0\0\0\0flOStIMEtOoLDtIME" ,
0x00000449 , "\0\0\0\0__Z(rcP)" ,
0x0000044a , "\0\0\0\0__NZ(rcP)" ,
0x0000044b , "\0\0\0\0CSTTmAXsOIL" ,
0x0000044c , "\0\0\0\0ifcIDtYPEbRANCHs" ,
0x0000044d , "\0\0\0\0SETpREFIXpARTIALbEGIN(psttP,cLengthP,cExtraP,csttP)" ,
0x0000044e , "\0\0\0\0SETpREFIXpARTIALeND(psttP,cLengthP,cExtraP,csttDoneP)" ,
0x0000044f , "\0\0\0\0SETpREFIXpARTIALmIDDLE" ,
0x00000450 , "\0\0\0\0CSTTsOULfUSEdEFAULT" ,
0x00000451 , "\0\0\0\0FORsTRINGSiNsPANNEDhEAD(soulP,idP)" ,
0x00000452 , "\0\0\0\0FORsTRINGSiNsPANNEDtAIL" ,
0x00000453 , "\0\0\0\0FORsTRINGSiNsPANNEDhEAD1(soulP)" ,
0x00000454 , "\0\0\0\0FORsTRINGSiNsPANNEDhEAD2(soulP)" ,
0x00000455 , "\0\0\0\0FORsTRINGSiNsPANNEDhEAD3(soulP)" ,
0x00000456 , "\0\0\0\0FORsTRINGSiNsPANNEDhEAD4(soulP)" ,
0x00000457 , "\0\0\0\0FORsTRINGSiNsPANNEDhEAD5(soulP)" ,
0x00000458 , "\0\0\0\0FORsTRINGSiNsPANNEDhEAD6(soulP)" ,
0x00000459 , "\0\0\0\0FORsTRINGSiNsPANNEDhEAD7(soulP)" ,
0x0000045a , "\0\0\0\0FORsTRINGSiNsPANNEDhEAD8(soulP)" ,
0x0000045b , "\0\0\0\0FORsTRINGSiNsPANNEDcOMBINEDhEAD(soulP,idP)" ,
0x0000045c , "\0\0\0\0FORsTRINGSiNsPANNEDcOMBINEDtAIL(idP)" ,
0x0000045d , "\0\0\0\0FORsTRINGSiNsPANNEDcOMBINEDtAIL1" ,
0x0000045e , "\0\0\0\0FORsTRINGSiNsPANNEDcOMBINEDtAIL2" ,
0x0000045f , "\0\0\0\0FORsTRINGSiNsPANNEDcOMBINEDtAIL3" ,
0x00000460 , "\0\0\0\0FORsTRINGSiNsPANNEDcOMBINEDtAIL4" ,
0x00000461 , "\0\0\0\0FORsTRINGSiNsPANNEDcOMBINEDtAIL5" ,
0x00000462 , "\0\0\0\0FORsTRINGSiNsPANNEDcOMBINEDtAIL6" ,
0x00000463 , "\0\0\0\0FORsTRINGSiNsPANNEDcOMBINEDtAIL7" ,
0x00000464 , "\0\0\0\0FORsTRINGSiNsPANNEDcOMBINEDtAIL8" ,
0x00000465 , "\0\0\0\0FORsTRINGSiNsPANNEDcOMBINEDhEAD1(soulP)" ,
0x00000466 , "\0\0\0\0FORsTRINGSiNsPANNEDcOMBINEDhEAD2(soulP)" ,
0x00000467 , "\0\0\0\0FORsTRINGSiNsPANNEDcOMBINEDhEAD3(soulP)" ,
0x00000468 , "\0\0\0\0FORsTRINGSiNsPANNEDcOMBINEDhEAD4(soulP)" ,
0x00000469 , "\0\0\0\0FORsTRINGSiNsPANNEDcOMBINEDhEAD5(soulP)" ,
0x0000046a , "\0\0\0\0FORsTRINGSiNsPANNEDcOMBINEDhEAD6(soulP)" ,
0x0000046b , "\0\0\0\0FORsTRINGSiNsPANNEDcOMBINEDhEAD7(soulP)" ,
0x0000046c , "\0\0\0\0FORsTRINGSiNsPANNEDcOMBINEDhEAD8(soulP)" ,
0x0000046d , "\0\0\0\0BlATHsTRING" ,
0x0000046e , "\0\0\0\0OPENfILErEAD(psttFileP,idP)" ,
0x0000046f , "\0\0\0\0OPENfILErEAD1(psttFileP)" ,
0x00000470 , "\0\0\0\0OPENfILErEAD2(psttFileP)" ,
0x00000471 , "\0\0\0\0OPENfILErEAD3(psttFileP)" ,
0x00000472 , "\0\0\0\0OPENfILErEAD4(psttFileP)" ,
0x00000473 , "\0\0\0\0OPENfILErEAD5(psttFileP)" ,
0x00000474 , "\0\0\0\0OPENfILErEAD6(psttFileP)" ,
0x00000475 , "\0\0\0\0OPENfILErEAD7(psttFileP)" ,
0x00000476 , "\0\0\0\0OPENfILErEAD8(psttFileP)" ,
0x00000477 , "\0\0\0\0OPENfILEwRITE(psttFileP,idP)" ,
0x00000478 , "\0\0\0\0OPENfILEwRITE1(psttFileP)" ,
0x00000479 , "\0\0\0\0OPENfILEwRITE2(psttFileP)" ,
0x0000047a , "\0\0\0\0OPENfILEwRITE3(psttFileP)" ,
0x0000047b , "\0\0\0\0OPENfILEwRITE4(psttFileP)" ,
0x0000047c , "\0\0\0\0OPENfILEwRITE5(psttFileP)" ,
0x0000047d , "\0\0\0\0OPENfILEwRITE6(psttFileP)" ,
0x0000047e , "\0\0\0\0OPENfILEwRITE7(psttFileP)" ,
0x0000047f , "\0\0\0\0OPENfILEwRITE8(psttFileP)" ,
0x00000480 , "\0\0\0\0OPENfILEaPPEND(psttFileP,idP)" ,
0x00000481 , "\0\0\0\0OPENfILEaPPEND1(psttFileP)" ,
0x00000482 , "\0\0\0\0OPENfILEaPPEND2(psttFileP)" ,
0x00000483 , "\0\0\0\0OPENfILEaPPEND3(psttFileP)" ,
0x00000484 , "\0\0\0\0OPENfILEaPPEND4(psttFileP)" ,
0x00000485 , "\0\0\0\0OPENfILEaPPEND5(psttFileP)" ,
0x00000486 , "\0\0\0\0OPENfILEaPPEND6(psttFileP)" ,
0x00000487 , "\0\0\0\0OPENfILEaPPEND7(psttFileP)" ,
0x00000488 , "\0\0\0\0OPENfILEaPPEND8(psttFileP)" ,
0x00000489 , "\0\0\0\0flSTRpOURf" ,
0x0000048a , "\0\0\0\0flBRANCHspUTfILEf" ,
0x0000048b , "\0\0\0\0flBRANCHslOADf" ,
0x0000048c , "\0\0\0\0flETHERsOILf" ,
0x0000048d , "\0\0\0\0COSTmAXcOMMANDlINE" ,
0x0000048e , "\0\0\0\0ISsTRING(psttP)" ,
0x0000048f , "\0\0\0\0flPUSEcmODE" ,
0x00000490 , "\0\0\0\0flDICTIONARYqUERYfROMtEXT" ,
0x00000491 , "\0\0\0\0flUNiNDEXf" ,
0x00000492 , "\0\0\0\0SNAPsHOT(postDirNameP)" ,
0x00000493 , "\0\0\0\0VARIABLEcLASSdEF" ,
0x00000494 , "\0\0\0\0FEG" ,
0x00000495 , "\0\0\0\0FEGeND" ,
0x00000496 , "\0\0\0\0FEP" ,
0x00000497 , "\0\0\0\0FEPeND" ,
0x00000498 , "\0\0\0\0LOGiN(postP)" ,
0x00000499 , "\0\0\0\0SETiNoUTfRAME" ,
0x0000049a , "\0\0\0\0flSURFc" ,
0x0000049b , "\0\0\0\0flDEVICEc" ,
0x0000049c , "\0\0\0\0FEPfAILbREAKiF" ,
0x0000049d , "\0\0\0\0flUNZIP" ,
0x0000049e , "\0\0\0\0flFILEc" ,
0x0000049f , "\0\0\0\0CCuTILITYhOMEs" ,
0x000004a0 , "\0\0\0\0flHOMEsuTILITY" ,
0x000004a1 , "\0\0\0\0CtALLYbUCKETS" ,
0x000004a2 , "\0\0\0\0CbOStALLYpERlOG" ,
0x000004a3 , "\0\0\0\0flINoUTfRAMEc" ,
0x000004a4 , "\0\0\0\0ifcIDfORMAT" ,
0x000004a5 , "\0\0\0\0FILLbYTE" ,
0x000004a6 , "\0\0\0\0sa_SSS" ,
0x000004a7 , "\0\0\0\0sp_SSSfLAG" ,
0x000004a8 , "\0\0\0\0TpUNCTUATION" ,
0x000004a9 , "\0\0\0\0TRACE(postP)" ,
0x000004aa , "\0\0\0\0sa_MARKsYSTEM" ,
0x000004ab , "\0\0\0\0flBOOK0pROVISION" ,
0x000004ac , "\0\0\0\0flTRACE" ,
0x000004ad , "\0\0\0\0flBOOK0c" ,
0x000004ae , "\0\0\0\0JpOINTER" ,
0x000004af , "\0\0\0\0J(idJotP)" ,
0x000004b0 , "\0\0\0\0flBOOKScsELECT" ,
0x000004b1 , "\0\0\0\0flBOOKScrEAD" ,
0x000004b2 , "\0\0\0\0flJOTcwRITE" ,
0x000004b3 , "\0\0\0\0CsLOTSjOTrEGISTRY" ,
0x000004b4 , "\0\0\0\0JaRG1-8" ,
0x000004b5 , "\0\0\0\0JkEY1-8" ,
0x000004b6 , "\0\0\0\0JrEF1-8" ,
0x000004b7 , "\0\0\0\0JrEQUEST" ,
0x000004b8 , "\0\0\0\0ZEJ(classP,iP)" ,
0x000004b9 , "\0\0\0\0ISiNITIALIZEDjpOINTER(pbP)" ,
0x000004ba , "\0\0\0\0ISiNITIALIZEDpOINTER(pbP)" ,
0x000004bb , "\0\0\0\0ISnULLjpOINTER(pbP)" ,
0x000004bc , "\0\0\0\0NPV(pbP)" ,
0x000004bd , "\0\0\0\0flJOTc" ,
0x000004be , "\0\0\0\0ifcIDsEXclATHnEWdEL" ,
0x000004bf , "\0\0\0\0flSLOTScnEW" ,
0x000004c0 , "\0\0\0\0flPOOLcnEW" ,
0x000004c1 , "\0\0\0\0flSEXcsTATE" ,
0x000004c2 , "\0\0\0\0ifcIDrECORDfIELD" ,
0x000004c3 , "\0\0\0\0ifcIDsEXaRRAY" ,
0x000004c4 , "\0\0\0\0COSTpOOLnAMEmAX" ,
0x000004c5 , "\0\0\0\0CpOOLrEGISTRATIONSmAX" ,
0x000004c6 , "\0\0\0\0flGRABITcaIMmASK" ,
0x000004c7 , "\0\0\0\0fliPOOLrEGISTRATIONs" ,
0x000004c8 , "\0\0\0\0flLISTINGc" ,
0x000004c9 , "\0\0\0\0IPDOScOMPILEoPTIONS" ,
0x000004ca , "\0\0\0\0IPDOSmAXpATH" ,
0x000004cb , "\0\0\0\0flPAGEc" ,
0x000004cc , "\0\0\0\0PSP(pageP,jP)" ,
0x000004cd , "\0\0\0\0BSP(bspP,jP)" ,
0x000004ce , "\0\0\0\0B(bspP)" ,
0x000004cf , "\0\0\0\0ISvALIDjpOINTER(pbP)" ,
0x000004d0 , "\0\0\0\0ISrAWpOINTER(pbP)" ,
0x000004d1 , "\0\0\0\0CBsEXdROPhEADER" ,
0x000004d2 , "\0\0\0\0ifcIDmODEpUTfILE" ,
0x000004d3 , "\0\0\0\0X(c1P,c2P)" ,
0x000004d4 , "\0\0\0\0flETHERfIXnAMES" ,
0x000004d5 , "\0\0\0\0flSTRtOuRL" ,
0x000004d6 , "\0\0\0\0flSTRdUMP" ,
0x000004d7 , "\0\0\0\0ifcIDcLOUD" ,
0x000004d8 , "\0\0\0\0flCLOUDoPENsCRATCH" ,
0x000004d9 , "\0\0\0\0CBeNCODINGrEF(pbEncodingP)" ,
0x000004da , "\0\0\0\0PBeNCODINGbODY(pbEncodingP)" ,
0x000004db , "\0\0\0\0BkEEP(maskP,cP)" ,
0x000004dc , "\0\0\0\0BhIDE(maskP,cP)" ,
0x000004dd , "\0\0\0\0flKEYvALUEpAIRSc" ,
0x000004de , "\0\0\0\0flBITtREEc" ,
0x000004df , "\0\0\0\0GETsETTING(etherP,psttP,psttKeyP)" ,
0x000004e0 , "\0\0\0\0CBjOTbOOKdEFAULT" ,
0x000004e1 , "\0\0\0\0CBjOTbOOKwRAPPER(cbWrappedP,idWrapperP)" ,
0x000004e2 , "\0\0\0\0CBsOULsHIFTlEFThEADER" ,
0x000004e3 , "\0\0\0\0flNAPKINSc" ,
0x000004e4 , "\0\0\0\0flCLOUDc" ,
0x000004e5 , "\0\0\0\0ifcIDdOcLOUDiFdIFFER" ,
0x000004e6 , "\0\0\0\0SCOOPO" ,
0x000004e7 , "\0\0\0\0COSTpOSThASHmD5" ,
0x000004e8 , "\0\0\0\0COSTiDhOMEgLOBALmAX" ,
0x000004e9 , "\0\0\0\0ifcIDmODEsOCKETS" ,
0x000004ea , "\0\0\0\0IDcOMPUTER" ,
0x000004eb , "\0\0\0\0COSTcLOUDfILEnAMEmAX" ,
0x000004ec , "\0\0\0\0IPDOScOMPILEoPTIONScnOTcPP" ,
0x000004ed , "\0\0\0\0flFILEwINDOW" ,
0x000004ee , "\0\0\0\0BADcASEScHARiNfILEnAME" ,
0x000004ef , "\0\0\0\0CBbOOKScnOpUSEbACK" ,
0x000004f0 , "\0\0\0\0BOOKnOW" ,
0x000004f1 , "\0\0\0\0PBbOOKbACKnOW" ,
0x000004f2 , "\0\0\0\0PCPiDbOOKnOW" ,
0x000004f3 , "\0\0\0\0PCPiDbOOKlAG" ,
0x000004f4 , "\0\0\0\0_WQ" ,
0x000004f5 , "\0\0\0\0IFsIMULATEoFFLINEpOOP" ,
0x000004f6 , "\0\0\0\0LF" ,
0x000004f7 , "\0\0\0\0flETHERrENAMEtOhASH" ,
0x000004f8 , "\0\0\0\0INtALLY" ,
0x000004f9 , "\0\0\0\0CbOOKsLOTS" ,
0x000004fa , "\0\0\0\0CCtALLYiN" ,
0x000004fb , "\0\0\0\0flCLOUDsTATE" ,
0x000004fc , "\0\0\0\0GRABITbYTEiNITIALvALUE" ,
0x000004fd , "\0\0\0\0postDOMAINnAMEaRCHIVEiDEAFARMcOM" ,
0x000004fe , "\0\0\0\0ifcIDgRABITbIT" ,
0x000004ff , "\0\0\0\0ifcIDeMAILrEGISTRATIONrEQUESTsTATUS" ,
0x00000500 , "\0\0\0\0OSsLEEPf" ,
0x00000501 , "\0\0\0\0CBrEADABILITYmAPdUMP" ,
0x00000502 , "\0\0\0\0BLAMMOiFcALLEDbY" ,
0x00000503 , "\0\0\0\0TRACEfIELDoUT(etherP,postP,costaP)" ,
0x00000504 , "\0\0\0\0HINTeXPcBsLOTeXPsLOTS(expCbSlotP,expSlotsP)" ,
0x00000505 , "\0\0\0\0HINTeXPcBsLOTeXPsLOTSaLL(expCbSlotP,expSlotsP)" ,
0x00000506 , "\0\0\0\0HINTeXPcBsLOTeXPsLOTSaLL(expCbSlotP,expSlotsP)" ,
0x00000507 , "\0\0\0\0flHTTPrEPLY" ,
0x00000508 , "\0\0\0\0flBOXcgETf" ,
0x00000509 , "\0\0\0\0SOCKETtIMEOUTdEFAULTwAN" ,
0x0000050a , "\0\0\0\0SOCKETtIMEOUTdEFAULTlAN" ,
0x0000050b , "\0\0\0\0flHOMEsaDAMS" ,
0x0000050c , "\0\0\0\0flDISKwALK" ,
0x0000050d , "\0\0\0\0ifcIDtRACEdIVERT" ,
0x0000050e , "\0\0\0\0flFILEiNFO" ,
0x0000050f , "\0\0\0\0ifcSTR(pP)" ,
0x00000510 , "\0\0\0\0POOPRqUIET" ,
0x00000511 , "\0\0\0\0ifcIDcMDcLOAK" ,
0x00000512 , "\0\0\0\0ifcIDrEPLYcLOAK" ,
0x00000513 , "\0\0\0\0flSTRiDoPTIMIZEDcLOSURE" ,
0x00000514 , "\0\0\0\0flSTRmATCH" ,
0x00000515 , "\0\0\0\0ifcIDtYPEpATTERN" ,
0x00000516 , "\0\0\0\0IFpATTERN(etherP,patternP,psttP)" ,
0x00000517 , "\0\0\0\0flPATTERNlITERALS" ,
0x00000518 , "\0\0\0\0flDISKfIND" ,
0x00000519 , "\0\0\0\0typedef count01T" ,
0x0000051a , "\0\0\0\0typedef sCount01T" ,
0x0000051b , "\0\0\0\0typedef count02T" ,
0x0000051c , "\0\0\0\0typedef measure02T" ,
0x0000051d , "\0\0\0\0typedef sCount02T" ,
0x0000051e , "\0\0\0\0typedef flags02T" ,
0x0000051f , "\0\0\0\0typedef bool02T" ,
0x00000520 , "\0\0\0\0typedef measure04T" ,
0x00000521 , "\0\0\0\0typedef count8T" ,
0x00000522 , "\0\0\0\0typedef sCount8T" ,
0x00000523 , "\0\0\0\0typedef count04T" ,
0x00000524 , "\0\0\0\0typedef voidT" ,
0x00000525 , "\0\0\0\0typedef byteT" ,
0x00000526 , "\0\0\0\0typedef sByteT" ,
0x00000527 , "\0\0\0\0typedef osTextT" ,
0x00000528 , "\0\0\0\0typedef unTextT" ,
0x00000529 , "\0\0\0\0typedef countT" ,
0x0000052a , "\0\0\0\0typedef sCountT" ,
0x0000052b , "\0\0\0\0typedef boolT" ,
0x0000052c , "\0\0\0\0typedef flagsT" ,
0x0000052d , "\0\0\0\0typedef measureT" ,
0x0000052e , "\0\0\0\0mainFT" ,
0x0000052f , "\0\0\0\0extern \"C\" typedef voidT (OSF *peekFT)( peekS* const pPeekParametersP )" ,
0x00000530 , "\0\0\0\0typedef countT (*ifcFT)( tinS& tinP , countT& )" ,
0x00000531 , "\0\0\0\0typedef countT (*ifc2FT)( tinS& tinP , countT& , countT& )" ,
0x00000532 , "\0\0\0\0typedef countT (*ifc3FT)( tinS& tinP , countT& , countT& , countT& )" ,
0x00000533 , "\0\0\0\0typedef countT (*ifc4FT)( tinS& tinP , countT& , countT& , countT& , countT& )" ,
0x00000534 , "\0\0\0\0typedef countT (*ifc5FT)( tinS& tinP , countT& , countT& , countT& , countT& , countT& )" ,
0x00000535 , "\0\0\0\0typedef countT (*ifc6FT)( tinS& tinP , countT& , countT& , countT& , countT& , countT& , countT& )" ,
0x00000536 , "\0\0\0\0typedef countT (*ifc7FT)( tinS& tinP , countT& , countT& , countT& , countT& , countT& , countT& , countT& )" ,
0x00000537 , "\0\0\0\0typedef countT (*ifc8FT)( tinS& tinP , countT& , countT& , countT& , countT& , countT& , countT& , countT& , countT& )" ,
0x00000538 , "\0\0\0\0partsFT" ,
0x00000539 , "\0\0\0\0priceFT" ,
0x0000053a , "\0\0\0\0shareFT" ,
0x0000053b , "\0\0\0\0ifcWindowMessageHandlerFT" ,
0x0000053c , "\0\0\0\0osWindowMessageHandlerFT" ,
0x0000053d , "\0\0\0\0voidT (*keyEventNoticeHandlerFT)( tinS& tinP , etherC& etThreadP , strokeS*& psttOneP , const countT infoP ) ;" ,
0x0000053e , "\0\0\0\0consoleHandlerFT" ,
0x0000053f , "\0\0\0\0translateStateFT" ,
0x00000540 , "\0\0\0\0chatHandlerFT" ,
0x00000541 , "\0\0\0\0jobFillCourseFT" ,
0x00000542 , "\0\0\0\0jobHearOrderFT" ,
0x00000543 , "\0\0\0\0varsHandlerFT" ,
0x00000544 , "\0\0\0\0typedef countT (*ifcImpotenceHandlerFT)( tinS& tinP , etherC& etp , thirdC& thirdP , countT cP )" ,
0x00000545 , "\0\0\0\0typedef boolT (*ifcRenderingHandlerFT)( tinS& tinP , etherC& ether , backOldC& backP , const countT cArgP )" ,
0x00000546 , "\0\0\0\0cbFT" ,
0x00000547 , "\0\0\0\0typedef voidT (*/*ff*/stateFT/*ff*/)( tinS& tinP , etherC& etherP , byteT* const pbdVaryingP , const countT cbdVaryingP , const countT cArgP ) ;" ,
0x00000548 , "\0\0\0\0kidFT" ,
0x00000549 , "\0\0\0\0cyrcleOldFT" ,
0x0000054a , "\0\0\0\0idGrabberFT" ,
0x0000054b , "\0\0\0\0bAcceptEventFT" ,
0x0000054c , "\0\0\0\0sadamCBFT" ,
0x0000054d , "\0\0\0\0treeOldCBFT" ,
0x0000054e , "\0\0\0\0typedef voidT (*/*ff*/tinWalkerFT/*ff*/)( tinS& tinP , tinS& tinFocusP , countT& cArgP ) ;" ,
0x0000054f , "\0\0\0\0typedef voidT (*/*ff*/ifcSoixlOldApiFT/*ff*/)( tinS& tinP , etherC& etherP , soulC& slP , const strokeS* const _psttNameP ) ;" ,
0x00000550 , "\0\0\0\0typedef voidT (*/*ff*/cioGetFT/*ff*/)( tinS& tinP , etherC& etherP , const boolT& bQuitP , const countT idGiftTypeP , soulC*& psGiftP , countT*& pczChannelP , countT& cArgP , const idPortTimeC& idptOriginP ) ;" ,
0x00000551 , "\0\0\0\0animateCBFT" ,
0x00000552 , "\0\0\0\0tcStateCBFT" ,
0x00000553 , "\0\0\0\0paperToBackCBFT" ,
0x00000554 , "\0\0\0\0httpDynamicReplyBodyCBFT" ,
0x00000555 , "\0\0\0\0httpEatKeyValueCBFT" ,
0x00000556 , "\0\0\0\0httpLoadContentDynamicFT" ,
0x00000557 , "\0\0\0\0httpLoadContentStaticFT" ,
0x00000558 , "\0\0\0\0httpEatKeyValuePairsCBFT" ,
0x00000559 , "\0\0\0\0httpFreshenCacheCBFT" ,
0x0000055a , "\0\0\0\0httpRawCommandServerCBFT" ,
0x0000055b , "\0\0\0\0slotsWalkCBFT" ,
0x0000055c , "\0\0\0\0listWalkCBFT" ,
0x0000055d , "\0\0\0\0selectWalkCBFT" ,
0x0000055e , "\0\0\0\0typedef voidT (*ifcNullNullFT)( voidT )" ,
0x0000055f , "\0\0\0\0typedef countT (*ifcCountNullFT)( voidT )" ,
0x00000560 , "\0\0\0\0typedef countT (*ifcCountCountFT)( countT cP )" ,
0x00000561 , "\0\0\0\0diskWalkCBFT" ,
0x00000562 , "\0\0\0\0diskWalkCopyCBFT" ,
0x00000563 , "\0\0\0\0typedef voidT (*spaceFromPaperEpilogCBFT)( tinS& tinP , countT& rgbOverrideP , const countT rgbP , const countT cArgP ) ;" ,
0x00000564 , "\0\0\0\0typedef voidT (*spaceFromPaperPrologCBFT)( tinS& tinP , const countT cArgP ) ;" ,
0x00000565 , "\0\0\0\0typedef voidT (*surfaceCBFT)( mPoint3S& toP , const cPoint2S& fromP , const countT cArgP ) ;" ,
0x00000566 , "\0\0\0\0typedef countT (*deviceCBFT)( tinS& tinP , const flagsT flagsP , deviceC& deviceP , const countT cDeviceArgP , const countT idEventP , const countT cEventArgP ) ;" ,
0x00000567 , "\0\0\0\0typedef boolT (*associateCBFT)( tinS& tinP , assViewC& assViewP , associateC& vieweeP , associateC& viewerP , const countT cArgP , staqC* const pStqWalkerP ) ;" ,
0x00000568 , "\0\0\0\0typedef voidT (*/*ff*/vspCBFT/*ff*/)( tinS& tinP , byteT* pbvspP , countT idEventP , countT cRefOldP , countT cRefNewLaterP , countT cArgP ) ;" ,
0x00000569 , "\0\0\0\0typedef boolT (*/*ff*/cloudUpdateCBFT/*ff*/)( tinS& tinP , etherC& etherP , cloudC& cloudP , const strokeS* const psttShortP , countT* pcArgP ) ;" ,
0x0000056a , "\0\0\0\0typedef boolT (*/*ff*/cloudNixCBFT/*ff*/)( tinS& tinP , etherC& etherP , cloudC& cloudP , const strokeS* const psttShortP , countT* pcArgP ) ;" ,
0x0000056b , "\0\0\0\0diskWalkSearchCBFT" ,
0x0000056c , "\0\0\0\0class _export batonC" ,
0x0000056d , "\0\0\0\0class _export signC : public batonC" ,
0x0000056e , "\0\0\0\0class _export thirdC" ,
0x0000056f , "\0\0\0\0class _export stackC : public baseSoilXxxxC" ,
0x00000570 , "\0\0\0\0struct _export strokeS" ,
0x00000571 , "\0\0\0\0class _export etherC : public baseSoilXxxxC" ,
0x00000572 , "\0\0\0\0class _export mapC" ,
0x00000573 , "\0\0\0\0class _export switchC : public baseSoilXxxxC" ,
0x00000574 , "\0\0\0\0class _export boxC" ,
0x00000575 , "\0\0\0\0class _export switchStackC" ,
0x00000576 , "\0\0\0\0class _export maxC" ,
0x00000577 , "\0\0\0\0class _export sCountC" ,
0x00000578 , "\0\0\0\0class _export socketC" ,
0x00000579 , "\0\0\0\0class _export textC" ,
0x0000057a , "\0\0\0\0struct _export timeS" ,
0x0000057b , "\0\0\0\0class _export batonBoxC" ,
0x0000057c , "\0\0\0\0class _export ifFileNameC" ,
0x0000057d , "\0\0\0\0struct _export mainS" ,
0x0000057e , "\0\0\0\0class _export osFileNameC" ,
0x0000057f , "\0\0\0\0define and include statements for base operating system" ,
0x00000580 , "\0\0\0\0struct _export peekS" ,
0x00000581 , "\0\0\0\0struct _export taskS" ,
0x00000582 , "\0\0\0\0struct _export plateS" ,
0x00000583 , "\0\0\0\0class _export textIdFileC : public textC" ,
0x00000584 , "\0\0\0\0struct _export count2S" ,
0x00000585 , "\0\0\0\0struct _export count3S" ,
0x00000586 , "\0\0\0\0struct _export count4S" ,
0x00000587 , "\0\0\0\0struct _export count5S" ,
0x00000588 , "\0\0\0\0struct _export count6S" ,
0x00000589 , "\0\0\0\0struct _export count7S" ,
0x0000058a , "\0\0\0\0struct _export count8S" ,
0x0000058b , "\0\0\0\0struct _export infoBoxGetPutS" ,
0x0000058c , "\0\0\0\0struct _export infoDisk1aS" ,
0x0000058d , "\0\0\0\0struct _export infoDisk1bS" ,
0x0000058e , "\0\0\0\0struct _export infoDisk1S" ,
0x0000058f , "\0\0\0\0struct _export infoDiskS" ,
0x00000590 , "\0\0\0\0struct _export infoFileS" ,
0x00000591 , "\0\0\0\0struct _export tinS" ,
0x00000592 , "\0\0\0\0class _export sqMatrixOldC" ,
0x00000593 , "\0\0\0\0class _export vectorOldC" ,
0x00000594 , "\0\0\0\0class _export tableC" ,
0x00000595 , "\0\0\0\0class _export busC" ,
0x00000596 , "\0\0\0\0class _export carC" ,
0x00000597 , "\0\0\0\0class _export pricerC" ,
0x00000598 , "\0\0\0\0class _export riverC" ,
0x00000599 , "\0\0\0\0class _export ap_artmentOldC" ,
0x0000059a , "\0\0\0\0class _export countTC" ,
0x0000059b , "\0\0\0\0struct _export mainRefsS" ,
0x0000059c , "\0\0\0\0class _export windowOldC : public backOldC" ,
0x0000059d , "\0\0\0\0class _export etherInitC" ,
0x0000059e , "\0\0\0\0class _export nicNameC" ,
0x0000059f , "\0\0\0\0class _export recDirC" ,
0x000005a0 , "\0\0\0\0class _export imageExeDllC" ,
0x000005a1 , "\0\0\0\0class _export masterOldC" ,
0x000005a2 , "\0\0\0\0class _export ranUniC" ,
0x000005a3 , "\0\0\0\0class _export pczC" ,
0x000005a4 , "\0\0\0\0class _export soulC : public baseSoilXxxxC" ,
0x000005a5 , "\0\0\0\0struct _export count9S" ,
0x000005a6 , "\0\0\0\0class _export netC" ,
0x000005a7 , "\0\0\0\0struct _export dropNoteS" ,
0x000005a8 , "\0\0\0\0class _export thirdInitC" ,
0x000005a9 , "\0\0\0\0class __export arrayC" ,
0x000005aa , "\0\0\0\0class __export postOldC" ,
0x000005ab , "\0\0\0\0class _export napkinC" ,
0x000005ac , "\0\0\0\0class __export psttOldC" ,
0x000005ad , "\0\0\0\0struct _export vmRegionS" ,
0x000005ae , "\0\0\0\0class _export processGlobalBeginC" ,
0x000005af , "\0\0\0\0struct _export dnsResourceMiddleS" ,
0x000005b0 , "\0\0\0\0struct _export dnsMsgHeaderS" ,
0x000005b1 , "\0\0\0\0class __export nicNamesC" ,
0x000005b2 , "\0\0\0\0struct _export newsKnowS" ,
0x000005b3 , "\0\0\0\0struct _export tinTallyS" ,
0x000005b4 , "\0\0\0\0struct _export monitorReplyOldS" ,
0x000005b5 , "\0\0\0\0struct _export strokeModeS" ,
0x000005b6 , "\0\0\0\0struct _export cryC" ,
0x000005b7 , "\0\0\0\0struct _export bufferC" ,
0x000005b8 , "\0\0\0\0struct _export grabNotesS" ,
0x000005b9 , "\0\0\0\0struct _export grabAnnotatedS : public grabC " ,
0x000005ba , "\0\0\0\0class _export upDnC " ,
0x000005bb , "\0\0\0\0class _export tellC " ,
0x000005bc , "\0\0\0\0struct sharedMemInfoS " ,
0x000005bd , "\0\0\0\0class _export sleepC" ,
0x000005be , "\0\0\0\0struct _export serverInfo1S " ,
0x000005bf , "\0\0\0\0struct _export serverInfo2S " ,
0x000005c0 , "\0\0\0\0struct _export tellS" ,
0x000005c1 , "\0\0\0\0struct _export tellInfoTinS" ,
0x000005c2 , "\0\0\0\0struct _export monQueryReplyS" ,
0x000005c3 , "\0\0\0\0struct _export tellInfo_grabC_S" ,
0x000005c4 , "\0\0\0\0class _export handleC : public baseSoilXxxxC" ,
0x000005c5 , "\0\0\0\0struct _export fileOpenS" ,
0x000005c6 , "\0\0\0\0class _export hoodC" ,
0x000005c7 , "\0\0\0\0class _export thugC" ,
0x000005c8 , "\0\0\0\0class _export backGrabUniverseC" ,
0x000005c9 , "\0\0\0\0class _export grabUniverseC" ,
0x000005ca , "\0\0\0\0struct _export tlsStackFrameS" ,
0x000005cb , "\0\0\0\0struct _export queryTimeRemainingS" ,
0x000005cc , "\0\0\0\0struct _export fireAllS" ,
0x000005cd , "\0\0\0\0struct _export cyrcleOldHeaderS" ,
0x000005ce , "\0\0\0\0struct _export homeS" ,
0x000005cf , "\0\0\0\0struct _export tellInfoExceptionS" ,
0x000005d0 , "\0\0\0\0struct _export tlsStackFrameLocationS" ,
0x000005d1 , "\0\0\0\0struct grabWantS" ,
0x000005d2 , "\0\0\0\0class _export grabC : public baseGrabC" ,
0x000005d3 , "\0\0\0\0struct grabStatS" ,
0x000005d4 , "\0\0\0\0class _export restartC" ,
0x000005d5 , "\0\0\0\0class _export gloSecurityGC" ,
0x000005d6 , "\0\0\0\0struct _export tellInfoNapkinS" ,
0x000005d7 , "\0\0\0\0struct _export tellInfoLifiS" ,
0x000005d8 , "\0\0\0\0class _export testWaterC" ,
0x000005d9 , "\0\0\0\0struct _export timeZoneSpecS" ,
0x000005da , "\0\0\0\0struct _export rCacheS" ,
0x000005db , "\0\0\0\0struct branchHeaderOldS" ,
0x000005dc , "\0\0\0\0struct branchDataOldS" ,
0x000005dd , "\0\0\0\0class _export treeOldC" ,
0x000005de , "\0\0\0\0struct _export branchesOldS" ,
0x000005df , "\0\0\0\0class _export zapC" ,
0x000005e0 , "\0\0\0\0class _export threadCheckC" ,
0x000005e1 , "\0\0\0\0struct argS" ,
0x000005e2 , "\0\0\0\0class _export earDropC" ,
0x000005e3 , "\0\0\0\0struct killSocketS" ,
0x000005e4 , "\0\0\0\0class _export baseSoilXxxxC : public baseC" ,
0x000005e5 , "\0\0\0\0class _export lexC: public baseSoilXxxxC" ,
0x000005e6 , "\0\0\0\0class _export rootWordC: public baseSoilXxxxC" ,
0x000005e7 , "\0\0\0\0class _export soixlOldSpaceC : public baseSoilXxxxC" ,
0x000005e8 , "\0\0\0\0class _export idPortC" ,
0x000005e9 , "\0\0\0\0class _export idPortTimeC : public idPortC" ,
0x000005ea , "\0\0\0\0class _export relayC" ,
0x000005eb , "\0\0\0\0class _export spouseC" ,
0x000005ec , "\0\0\0\0class _export momC : public spouseC" ,
0x000005ed , "\0\0\0\0class _export dadC : public spouseC" ,
0x000005ee , "\0\0\0\0class _export bitsC" ,
0x000005ef , "\0\0\0\0struct _export tlsStackFrameNoTlsS" ,
0x000005f0 , "\0\0\0\0class _export staticC" ,
0x000005f1 , "\0\0\0\0class _export processGlobalEndC" ,
0x000005f2 , "\0\0\0\0class _export parameterC" ,
0x000005f3 , "\0\0\0\0class _export sCountFromPostC" ,
0x000005f4 , "\0\0\0\0struct _export osTextBaseS" ,
0x000005f5 , "\0\0\0\0class _export osTextC : private footC" ,
0x000005f6 , "\0\0\0\0class _export footC" ,
0x000005f7 , "\0\0\0\0class _export neverUsedC " ,
0x000005f8 , "\0\0\0\0struct lowThreadS" ,
0x000005f9 , "\0\0\0\0class _export tallyC " ,
0x000005fa , "\0\0\0\0class _export poopC " ,
0x000005fb , "\0\0\0\0class _export scoopC " ,
0x000005fc , "\0\0\0\0struct mapCTS" ,
0x000005fd , "\0\0\0\0class _export mapCTC" ,
0x000005fe , "\0\0\0\0class _export pauseC " ,
0x000005ff , "\0\0\0\0struct _export strokingFrameS" ,
0x00000600 , "\0\0\0\0class _export xrayC" ,
0x00000601 , "\0\0\0\0class _export backOldC" ,
0x00000602 , "\0\0\0\0class _export staqC" ,
0x00000603 , "\0\0\0\0class _export tcButtonC : public vTextC" ,
0x00000604 , "\0\0\0\0class _export paperOldC" ,
0x00000605 , "\0\0\0\0class _export tcPromptC : public tcButtonC" ,
0x00000606 , "\0\0\0\0class _export tcSliderC : public tcButtonC" ,
0x00000607 , "\0\0\0\0class _export tcButtonQuitC : public tcButtonC" ,
0x00000608 , "\0\0\0\0class _export blobC" ,
0x00000609 , "\0\0\0\0struct _export branchS" ,
0x0000060a , "\0\0\0\0struct bNoteS" ,
0x0000060b , "\0\0\0\0struct _export eyeStateOldS" ,
0x0000060c , "\0\0\0\0class _export eyeOldC : public backOldC" ,
0x0000060d , "\0\0\0\0class _export pulpOldC" ,
0x0000060e , "\0\0\0\0class winPulpOldC : public pulpOldC" ,
0x0000060f , "\0\0\0\0class eyePulpOldC : public pulpOldC" ,
0x00000610 , "\0\0\0\0class _export frPaperC" ,
0x00000611 , "\0\0\0\0struct cmdFlashS" ,
0x00000612 , "\0\0\0\0struct mapPaperToBackS" ,
0x00000613 , "\0\0\0\0struct mapPaperToEyeOldS : public mapPaperToBackS" ,
0x00000614 , "\0\0\0\0class _export bitmapOldC" ,
0x00000615 , "\0\0\0\0class _export vTextC : public textC" ,
0x00000616 , "\0\0\0\0struct _export vBodyS" ,
0x00000617 , "\0\0\0\0struct mColRowMinMaxS" ,
0x00000618 , "\0\0\0\0class _export papersOldC" ,
0x00000619 , "\0\0\0\0class _export threadC" ,
0x0000061a , "\0\0\0\0class _export httpServerC" ,
0x0000061b , "\0\0\0\0struct _export httpServerC_arg1S" ,
0x0000061c , "\0\0\0\0struct _export httpServerC_arg2S" ,
0x0000061d , "\0\0\0\0class _export sessionsC" ,
0x0000061e , "\0\0\0\0class _export sessionC" ,
0x0000061f , "\0\0\0\0class _export plateC" ,
0x00000620 , "\0\0\0\0struct httpReplyS : public baseRefC" ,
0x00000621 , "\0\0\0\0struct sockOdometerS" ,
0x00000622 , "\0\0\0\0struct adamGlobal1S" ,
0x00000623 , "\0\0\0\0struct dictionaryFileTitleS" ,
0x00000624 , "\0\0\0\0class _export sourceC" ,
0x00000625 , "\0\0\0\0struct _export processGlobal1S" ,
0x00000626 , "\0\0\0\0struct _export processGlobal2S" ,
0x00000627 , "\0\0\0\0struct adamGlobal2S" ,
0x00000628 , "\0\0\0\0class ag1_backOldC_C" ,
0x00000629 , "\0\0\0\0class ag1_bitsC_C" ,
0x0000062a , "\0\0\0\0class ag1_etherC_C" ,
0x0000062b , "\0\0\0\0class ag1_grabNotesS_C" ,
0x0000062c , "\0\0\0\0class ag1_grabC_C" ,
0x0000062d , "\0\0\0\0class ag1_lexC_C" ,
0x0000062e , "\0\0\0\0class ag1_masterOldC_C" ,
0x0000062f , "\0\0\0\0class ag1_neverUsedC_C" ,
0x00000630 , "\0\0\0\0class ag1_paperOldC_C" ,
0x00000631 , "\0\0\0\0class ag1_pulpOldC_C" ,
0x00000632 , "\0\0\0\0class ag1_relayC_C" ,
0x00000633 , "\0\0\0\0class ag1_rootWordC_C" ,
0x00000634 , "\0\0\0\0class ag1_socketC_C" ,
0x00000635 , "\0\0\0\0class ag3_socketC_C" ,
0x00000636 , "\0\0\0\0class ag1_soulC_C" ,
0x00000637 , "\0\0\0\0class ag1_soixlOldSpaceC_C" ,
0x00000638 , "\0\0\0\0class ag1_stackC_C" ,
0x00000639 , "\0\0\0\0class ag1_strokeS_C" ,
0x0000063a , "\0\0\0\0class ag1_switchC_C" ,
0x0000063b , "\0\0\0\0class ag1_tableC_C" ,
0x0000063c , "\0\0\0\0class ag1_thirdC_C" ,
0x0000063d , "\0\0\0\0class ag1_thugC_C" ,
0x0000063e , "\0\0\0\0class ag1_windowOldC_C" ,
0x0000063f , "\0\0\0\0struct rowPaperBackS" ,
0x00000640 , "\0\0\0\0union rowPaperBackU" ,
0x00000641 , "\0\0\0\0struct adamGlobal3S" ,
0x00000642 , "\0\0\0\0struct adamGlobal4S" ,
0x00000643 , "\0\0\0\0struct adamGlobal5S" ,
0x00000644 , "\0\0\0\0struct _export processGlobal3S" ,
0x00000645 , "\0\0\0\0struct _export processGlobal4S" ,
0x00000646 , "\0\0\0\0struct _export processGlobal5S" ,
0x00000647 , "\0\0\0\0struct _export processGlobal6S" ,
0x00000648 , "\0\0\0\0struct _export processGlobal7S" ,
0x00000649 , "\0\0\0\0struct adamGlobal6S" ,
0x0000064a , "\0\0\0\0struct napkinHeaderS" ,
0x0000064b , "\0\0\0\0class marketC" ,
0x0000064c , "\0\0\0\0class _export adamC" ,
0x0000064d , "\0\0\0\0class _export x0SwitchStackC" ,
0x0000064e , "\0\0\0\0class _export xSwitchStackC" ,
0x0000064f , "\0\0\0\0class _export rangeC" ,
0x00000650 , "\0\0\0\0class _export puseC" ,
0x00000651 , "\0\0\0\0class _export aptC" ,
0x00000652 , "\0\0\0\0struct _export aptNameOldS" ,
0x00000653 , "\0\0\0\0struct _export ipMapPortS" ,
0x00000654 , "\0\0\0\0struct _export ipMapHomeS" ,
0x00000655 , "\0\0\0\0struct _export sexHeadS" ,
0x00000656 , "\0\0\0\0class _export sexC" ,
0x00000657 , "\0\0\0\0class _export slotsC" ,
0x00000658 , "\0\0\0\0class _export poolC" ,
0x00000659 , "\0\0\0\0class _export fileC" ,
0x0000065a , "\0\0\0\0class _export grabitC : public baseGrabC" ,
0x0000065b , "\0\0\0\0class _export listingC" ,
0x0000065c , "\0\0\0\0class _export listC : public listingC" ,
0x0000065d , "\0\0\0\0class _export datumC" ,
0x0000065e , "\0\0\0\0class _export datum_countT_C : public datumC" ,
0x0000065f , "\0\0\0\0class _export listing_countT_C : public listingC , public datum_countT_C" ,
0x00000660 , "\0\0\0\0class _export datum_blob_C : public datumC" ,
0x00000661 , "\0\0\0\0class _export listing_blob_C : public listingC , public datum_blob_C" ,
0x00000662 , "\0\0\0\0class _export list_countT_C : public listC , public datum_countT_C" ,
0x00000663 , "\0\0\0\0class _export list_blob_C : public listC , public datum_blob_C" ,
0x00000664 , "\0\0\0\0struct _export listWalkArgOldS" ,
0x00000665 , "\0\0\0\0class _export baseGrabC" ,
0x00000666 , "\0\0\0\0struct _export tellInfoAdamFiredS" ,
0x00000667 , "\0\0\0\0struct _export sexEntryS" ,
0x00000668 , "\0\0\0\0struct _export sexGlobalEntryS" ,
0x00000669 , "\0\0\0\0struct _export subaccountS" ,
0x0000066a , "\0\0\0\0class _export pbC" ,
0x0000066b , "\0\0\0\0class _export psttC : public pbC" ,
0x0000066c , "\0\0\0\0struct _export accountS" ,
0x0000066d , "\0\0\0\0struct _export depositS" ,
0x0000066e , "\0\0\0\0class _export stkIdSubC : public stackC" ,
0x0000066f , "\0\0\0\0struct _export bucketTotalC" ,
0x00000670 , "\0\0\0\0struct _export bucketDetailC" ,
0x00000671 , "\0\0\0\0struct _export depositDetailS" ,
0x00000672 , "\0\0\0\0struct _export bookHeadS" ,
0x00000673 , "\0\0\0\0class _export book0C" ,
0x00000674 , "\0\0\0\0class _export bookC : public book0C" ,
0x00000675 , "\0\0\0\0class _export booksC" ,
0x00000676 , "\0\0\0\0struct __export monitorS : public whereS" ,
0x00000677 , "\0\0\0\0struct fireGroupS" ,
0x00000678 , "\0\0\0\0class _export doC" ,
0x00000679 , "\0\0\0\0class _export cRefC" ,
0x0000067a , "\0\0\0\0class _export baseRefC" ,
0x0000067b , "\0\0\0\0class _export refC" ,
0x0000067c , "\0\0\0\0class _export httpReplySrefC : public refC" ,
0x0000067d , "\0\0\0\0class _export pbRefC : public refC" ,
0x0000067e , "\0\0\0\0struct _export storeReplyPrivateF_argS" ,
0x0000067f , "\0\0\0\0struct _export tinArgS" ,
0x00000680 , "\0\0\0\0struct _export fieldEditParamInC" ,
0x00000681 , "\0\0\0\0struct _export fieldEditParamOutC" ,
0x00000682 , "\0\0\0\0class _export boolC" ,
0x00000683 , "\0\0\0\0BOOLcLASSES(typeP)" ,
0x00000684 , "\0\0\0\0BOOLcLASSESpTR(typeP)" ,
0x00000685 , "\0\0\0\0class _export datum_countTstrz_C : public datumC" ,
0x00000686 , "\0\0\0\0class _export list_countTstrz_C : public listC , public datum_countTstrz_C" ,
0x00000687 , "\0\0\0\0class _export listing_countTstrz_C : public listingC , public datum_countTstrz_C" ,
0x00000688 , "\0\0\0\0class _export datum_listingVSP_C : public datumC" ,
0x00000689 , "\0\0\0\0class _export listing_listingVSP_C : public listingC , public datum_listingVSP_C" ,
0x0000068a , "\0\0\0\0class _export list_listingVSP_C : public listC , public datum_listingVSP_C" ,
0x0000068b , "\0\0\0\0struct _export datumS" ,
0x0000068c , "\0\0\0\0class _export recordC" ,
0x0000068d , "\0\0\0\0class _export selectC" ,
0x0000068e , "\0\0\0\0class _export grabotC : public grabitC" ,
0x0000068f , "\0\0\0\0class _export linkedC : public grabotC" ,
0x00000690 , "\0\0\0\0struct parm_tmAdamMainF_S" ,
0x00000691 , "\0\0\0\0struct _export slabS" ,
0x00000692 , "\0\0\0\0class _export cleanC" ,
0x00000693 , "\0\0\0\0class _export topC" ,
0x00000694 , "\0\0\0\0struct diskWalkCopyInfoS" ,
0x00000695 , "\0\0\0\0struct diskWalkSearchInfoS" ,
0x00000696 , "\0\0\0\0struct __export whereS" ,
0x00000697 , "\0\0\0\0struct _export featuresS" ,
0x00000698 , "\0\0\0\0struct _export strikeS" ,
0x00000699 , "\0\0\0\0struct _export sadamC" ,
0x0000069a , "\0\0\0\0class _export sadamsC" ,
0x0000069b , "\0\0\0\0struct _export cPoint2S" ,
0x0000069c , "\0\0\0\0struct _export displayArgS // I EXIST BECAUSE WINDOWS IS A PIECE OF SHIT (NO ABILITY TO PASS PARAMETER TO WINDOWS MESSAGE HANDLER)" ,
0x0000069d , "\0\0\0\0class _export displayC : public deviceC" ,
0x0000069e , "\0\0\0\0class _export eyeC : public associateC" ,
0x0000069f , "\0\0\0\0struct _export gridS //CORRESPONDS TO THE OLD strokingFrameS CLASS ; RENAMED FROM \"FRAME\" TO \"GRID\" TO RESERVE \"FRAME\" FOR THE FRAME THAT ADORNS A FRAMED SADAM" ,
0x000006a0 , "\0\0\0\0struct _export glyphTallyS" ,
0x000006a1 , "\0\0\0\0struct _export paperS" ,
0x000006a2 , "\0\0\0\0class _export surfC : public associateC" ,
0x000006a3 , "\0\0\0\0class _export paperC : public associateC" ,
0x000006a4 , "\0\0\0\0class _export pelC : public assViewC" ,
0x000006a5 , "\0\0\0\0struct _export pelS" ,
0x000006a6 , "\0\0\0\0struct _export mPoint3S" ,
0x000006a7 , "\0\0\0\0class _export spaceC : public assViewC" ,
0x000006a8 , "\0\0\0\0struct _export spaceS" ,
0x000006a9 , "\0\0\0\0class _export deviceC : public associateC" ,
0x000006aa , "\0\0\0\0class _export associateC" ,
0x000006ab , "\0\0\0\0class _export assViewC" ,
0x000006ac , "\0\0\0\0struct _export assViewStqS : public assViewC" ,
0x000006ad , "\0\0\0\0struct _export assViewEyeS : public assViewStqS" ,
0x000006ae , "\0\0\0\0struct _export drawJobS" ,
0x000006af , "\0\0\0\0class _export vector3C" ,
0x000006b0 , "\0\0\0\0class _export matrix3C" ,
0x000006b1 , "\0\0\0\0struct htmlS" ,
0x000006b2 , "\0\0\0\0VARIABLEcLASSdEFS (ALL VARIALE CLASSES ARE DEFINED HERE)" ,
0x000006b3 , "\0\0\0\0VERYsMARTpOINTERcLASSdEF (ALL SP AND VSP CLASSES ARE DEFINED HERE)" ,
0x000006b4 , "\0\0\0\0struct _export putFileS" ,
0x000006b5 , "\0\0\0\0struct _1S" ,
0x000006b6 , "\0\0\0\0struct link189S" ,
0x000006b7 , "\0\0\0\0struct directionS" ,
0x000006b8 , "\0\0\0\0struct iopS" ,
0x000006b9 , "\0\0\0\0class _export tallyHoC" ,
0x000006ba , "\0\0\0\0class _export inOutFrameC" ,
0x000006bb , "\0\0\0\0class _export handle1000C" ,
0x000006bc , "\0\0\0\0class _export handle0100C" ,
0x000006bd , "\0\0\0\0class _export handle1100C" ,
0x000006be , "\0\0\0\0class _export handle0010C" ,
0x000006bf , "\0\0\0\0class _export handle1010C" ,
0x000006c0 , "\0\0\0\0class _export handle0110C" ,
0x000006c1 , "\0\0\0\0class _export handle1110C" ,
0x000006c2 , "\0\0\0\0class _export handle0011C" ,
0x000006c3 , "\0\0\0\0class _export handle1011C" ,
0x000006c4 , "\0\0\0\0class _export handle0111C" ,
0x000006c5 , "\0\0\0\0class _export handle1111C" ,
0x000006c6 , "\0\0\0\0class _export jotC : public grabC" ,
0x000006c7 , "\0\0\0\0class _export barryC" ,
0x000006c8 , "\0\0\0\0struct _export poolRegistrationS" ,
0x000006c9 , "\0\0\0\0struct _export thisLifiS" ,
0x000006ca , "\0\0\0\0struct putFileJobS" ,
0x000006cb , "\0\0\0\0class _export pageC" ,
0x000006cc , "\0\0\0\0class branchPageC : public pageC" ,
0x000006cd , "\0\0\0\0struct sexLocalEntryS" ,
0x000006ce , "\0\0\0\0class _export pageReleaseC" ,
0x000006cf , "\0\0\0\0struct bookMarkS" ,
0x000006d0 , "\0\0\0\0class _export hasherC" ,
0x000006d1 , "\0\0\0\0struct _export cloudInfoS" ,
0x000006d2 , "\0\0\0\0class _export cloudC" ,
0x000006d3 , "\0\0\0\0class _export napkinsC" ,
0x000006d4 , "\0\0\0\0struct rParam_new_S             // THIS STRUCTURE IS USED WITHIN newF TO PASS PARAMETERS TO newStepF" ,
0x000006d5 , "\0\0\0\0struct bitNodeS" ,
0x000006d6 , "\0\0\0\0class _export bitTreeC" ,
0x000006d7 , "\0\0\0\0class _export keyValuePairsC" ,
0x000006d8 , "\0\0\0\0struct rParam_walk_S : public rParam_new_S            // THIS STRUCTURE IS USED WITHIN walkF TO PASS PARAMETERS TO walkStepF" ,
0x000006d9 , "\0\0\0\0struct metaS" ,
0x000006da , "\0\0\0\0class _export fileWindowC" ,
0x000006db , "\0\0\0\0class _export debug20150919C" ,
0x000006dc , "\0\0\0\0class _export baseC" ,
0x000006dd , "\0\0\0\0struct _export tellInfoSexS" ,
0x000006de , "\0\0\0\0struct _export tellInfoProcessGlobal1S" ,
0x000006df , "\0\0\0\0class _export heapC" ,
0x000006e0 , "\0\0\0\0struct _export processGlobal0S" ,
0x000006e1 , "\0\0\0\0class _export fileWindowsC" ,
0x000006e2 , "\0\0\0\0struct diskWalkHealInfoS" ,
0x000006e3 , "\0\0\0\0class _export hoverC" ,
0x000006e4 , "\0\0\0\0class _export patternC" ,
0x000006e5 , "\0\0\0\0class _export fileNameC" ,
0x000006e6 , "\0\0\0\0struct diskFindHandleS" ,
0x000006e7 , "\0\0\0\0extern \"C\" voidT __export __stdcall rTagF( voidT ) ;" ,
0x000006e8 , "\0\0\0\0extern \"C\" voidT __export __stdcall eipF( countT* pcP ) ;" ,
0x000006e9 , "\0\0\0\0extern \"C\" voidT _export OSF peekF(   peekS* const pPeekParametersP )" ,
0x000006ea , "\0\0\0\0mainF" ,
0x000006eb , "\0\0\0\0tmBoxGetPutDeadmanF" ,
0x000006ec , "\0\0\0\0extern \"C\" countT __export OSF winMessageHandlerF( const countT oshWindowP , const countT idCmdP , const countT p1P , const countT p2P ) ;" ,
0x000006ed , "\0\0\0\0const osTextT* __export wmPostF( tinS& tinP , const countT idP ) ;" ,
0x000006ee , "\0\0\0\0extern \"C\" countT __export OSF wmIdF( tinS& tinP , const osTextT* const postP ) ;" ,
0x000006ef , "\0\0\0\0measureT __export ifColF( const measureT osColP ) ;" ,
0x000006f0 , "\0\0\0\0measureT __export ifRowF( const measureT osRowP , const measureT cRowsP ) ;" ,
0x000006f1 , "\0\0\0\0voidT postUniqueTimeNowF( tinS& tinP , osTextC& ostoP ) ;" ,
0x000006f2 , "\0\0\0\0voidT postUniqueDatumNameF( tinS& tinP , osTextT*& postP , const osTextT* const postShortLikeP ) ;" ,
0x000006f3 , "\0\0\0\0tmWindowsF" ,
0x000006f4 , "\0\0\0\0extern \"C\" int matherr( struct _exception* pInfoP ) ;" ,
0x000006f5 , "\0\0\0\0sCountT _export subtractF( tinS& tinP , thirdC& thirdP , const byteT* const pb1P = 0 , const byteT* const pb2P = 0 , const countT cb1P = 0 , const countT cb2P = 0 , const boolT bNumericP = 0 , const boolT bSignificanceIncreasingP = 0 ) ;" ,
0x000006f6 , "\0\0\0\0voidT __export hoverF( tinS& tinP , thirdC& third , osTextT*& postHoverP , const countT idHoverDirP = 0 ) ;" ,
0x000006f7 , "\0\0\0\0boolT __export bFileOrDirExistsF( tinS& tinP , thirdC& third , const osTextT* const postP ) ;" ,
0x000006f8 , "\0\0\0\0voidT cdF( tinS& tinP , thirdC& third , const osTextT* const postP ) ;" ,
0x000006f9 , "\0\0\0\0boolT bLeapYearF( const sCountT yP ) ;" ,
0x000006fa , "\0\0\0\0voidT __export postFromTinGF( tinS& tinP , const countT idLineP , const countT idFileP , osTextT*& postP , const osTextT* postSinP , const osTextT* postPenanceP ) ;" ,
0x000006fb , "\0\0\0\0voidT __export postFromTinGF( tinS& tinP , const countT idLineP , const countT idFileP , osTextT*& postP , const countT idSinP ) ;" ,
0x000006fc , "\0\0\0\0tmWatchF" ,
0x000006fd , "\0\0\0\0voidT pTinCopyF( tinS& tinP , etherC& etThreadP , tinS*& pTinCopyP , const voidT* const pvFromP , const countT osPidP , const boolT bAcceptIfDirtyP = 0 ) ;" ,
0x000006fe , "\0\0\0\0voidT __export declareVmUsageTypeGF( tinS& tinP , const byteT* const pbP , const flagsT flUsageTypeP , const countT idP = 0 , const osTextT* const postNameP = 0 ) ;" ,
0x000006ff , "\0\0\0\0tmRelayChatRepliesF" ,
0x00000700 , "\0\0\0\0count02T __export hashF( register const byteT* pbP , register count02T cbP , register count02T seedP = 0 ) ;" ,
0x00000701 , "\0\0\0\0inline countT hashFastF( register countT* pcP , register countT* peP )" ,
0x00000702 , "\0\0\0\0const timeS& __export timeBaseBuiltF( voidT ) ;" ,
0x00000703 , "\0\0\0\0measureT __export osAngleF( const measureT ifAngleP )" ,
0x00000704 , "\0\0\0\0measureT __export ifAngleF( const measureT osAngleP )" ,
0x00000705 , "\0\0\0\0countT _export subtractWothCountInBlobsF( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P )" ,
0x00000706 , "\0\0\0\0countT __export threadLocalStorageF( const countT idTypeP , kidFT pThreadWorkF , countT cArgP , countT cHowP = 0 , const osTextT** ppostHowP = 0 , countT hWindowingClientIP = 0 , countT hPreviousWindowingClientP = 0 , osTextT* postP = 0 , countT idCmdShowP = 0 ) ;" ,
0x00000707 , "\0\0\0\0countT mainThreadWorkF( const countT idTypeP , countT cHowP , const osTextT** ppostHowP , countT hWindowingClientIP , countT hPreviousWindowingClientP , osTextT* postP , countT idCmdShowP ) ;" ,
0x00000708 , "\0\0\0\0handleC hProcessF( tinS& tinP , const countT osPidP , const countT osPidMeP ) ;" ,
0x00000709 , "\0\0\0\0countT __export threadLocalStorageLocationF( const countT oshWindowP , const countT idCmdP , const countT p1P , const countT p2P ) ;" ,
0x0000070a , "\0\0\0\0countT __export winMessageHandlerWorkF( const countT oshWindowP , const countT idCmdP , const countT p1P , const countT p2P ) ;" ,
0x0000070b , "\0\0\0\0tinS*& _export pTinF( voidT ) ;" ,
0x0000070c , "\0\0\0\0tinS*& _export pTinMainI_IF( voidT ) ;" ,
0x0000070d , "\0\0\0\0boolT& _export bTlsEarlyLateIF( voidT ) ;" ,
0x0000070e , "\0\0\0\0voidT ranYieldF( tinS& tinP , countT cMaxP ) ;" ,
0x0000070f , "\0\0\0\0countT __export cTimeZonesF( tinS& tinP ) ;" ,
0x00000710 , "\0\0\0\0const timeZoneSpecS& __export timeZoneSpecF( tinS& tinP , const countT idP = 0 ) ;" ,
0x00000711 , "\0\0\0\0measureT __export ifRowF( const measureT osRowP ) ;" ,
0x00000712 , "\0\0\0\0voidT _export treeBranchDefinitionDefaultOldCBF( tinS& tinP , etherC& etherP , const countT idTypeP , const flagsT flagsP , const handleC& handleP , byteT* pbP , countT cbP , countT& cArgP ) ;" ,
0x00000713 , "\0\0\0\0tmWatchFlagsF" ,
0x00000714 , "\0\0\0\0_tmCatchF" ,
0x00000715 , "\0\0\0\0tmRiverServeF" ,
0x00000716 , "\0\0\0\0tmRiverAcceptF" ,
0x00000717 , "\0\0\0\0tmQuitSubscribeF" ,
0x00000718 , "\0\0\0\0tmSubscribeF" ,
0x00000719 , "\0\0\0\0tmWhereF" ,
0x0000071a , "\0\0\0\0tmTimeoutF" ,
0x0000071b , "\0\0\0\0tmAskDnsF" ,
0x0000071c , "\0\0\0\0tmStackCoursesF" ,
0x0000071d , "\0\0\0\0tmMakeTraysF" ,
0x0000071e , "\0\0\0\0tmRegisterPortF" ,
0x0000071f , "\0\0\0\0tmChatF" ,
0x00000720 , "\0\0\0\0tmLoadSilentF" ,
0x00000721 , "\0\0\0\0tmPaperOpenCatchF" ,
0x00000722 , "\0\0\0\0tmServePortF" ,
0x00000723 , "\0\0\0\0tmPortAuthorityF" ,
0x00000724 , "\0\0\0\0tmNapF" ,
0x00000725 , "\0\0\0\0tmFtpServeF" ,
0x00000726 , "\0\0\0\0tmServeBoxClientsF" ,
0x00000727 , "\0\0\0\0tmOutF" ,
0x00000728 , "\0\0\0\0tmErrorF" ,
0x00000729 , "\0\0\0\0tmTimeNowF" ,
0x0000072a , "\0\0\0\0tmServiceMainF" ,
0x0000072b , "\0\0\0\0tmKillSocketF" ,
0x0000072c , "\0\0\0\0tmKillZombieF" ,
0x0000072d , "\0\0\0\0netC_subtract_soulC_F" ,
0x0000072e , "\0\0\0\0jobHandlerF" ,
0x0000072f , "\0\0\0\0jobFillCourseDfltF" ,
0x00000730 , "\0\0\0\0jobHearOrderDfltF" ,
0x00000731 , "\0\0\0\0tmcChatF" ,
0x00000732 , "\0\0\0\0validateF" ,
0x00000733 , "\0\0\0\0voidT cleanFileNameF( tinS& tinP , etherC& etThread , textC& tP ) ;" ,
0x00000734 , "\0\0\0\0pbcbF" ,
0x00000735 , "\0\0\0\0voidT ungrabF( tinS& tinP , boolT& bGrabbedP , countT& idDesireGrabberP ) ;" ,
0x00000736 , "\0\0\0\0countT _export costUnmangleMaxF( tinS& tinP ) ;" ,
0x00000737 , "\0\0\0\0const osTextT* _export postUnmangleF( tinS& tinP , const osTextT* postMangleP ) ;" ,
0x00000738 , "\0\0\0\0const osTextT* _export postMangleF( tinS& tinP , const osTextT* postOldClassNameIP ) ;" ,
0x00000739 , "\0\0\0\0tmRelayTeatAcceptorF" ,
0x0000073a , "\0\0\0\0tmRelayServerCatchBagF" ,
0x0000073b , "\0\0\0\0tmRelayServerWrapToAppF" ,
0x0000073c , "\0\0\0\0tmRelayInitiatorF" ,
0x0000073d , "\0\0\0\0tmRelayKillF" ,
0x0000073e , "\0\0\0\0tmRelayTickleF" ,
0x0000073f , "\0\0\0\0tmRelayTeatServerF" ,
0x00000740 , "\0\0\0\0tmRelayPopClientF" ,
0x00000741 , "\0\0\0\0countT subtractIdPortTimesF( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P ) ;" ,
0x00000742 , "\0\0\0\0countT subtractIdPortsF( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P ) ;" ,
0x00000743 , "\0\0\0\0countT __export threadLocalStorageNoTlsF( const countT idTypeP , kidFT pThreadWorkF , countT cArgP , countT cHowP = 0 , const osTextT** ppostHowP = 0 , countT hWindowingClientIP = 0 , countT hPreviousWindowingClientP = 0 , osTextT* postP = 0 , countT idCmdShowP = 0 ) ;" ,
0x00000744 , "\0\0\0\0countT _export cBitsSetF( tinS& tinP , const byteT* pbP , countT cbP ) ;" ,
0x00000745 , "\0\0\0\0voidT genSoixlOldWordLoadsF( tinS& tinP , strokeS*& _psttLeverSoixlOldApi , switchC*& _pSwSoixlOldApi ) ;" ,
0x00000746 , "\0\0\0\0countT cbFullSetF( tinS& tinP , const byteT* pbP , const countT cbP ) ;" ,
0x00000747 , "\0\0\0\0boolT bIsZeF( const byteT* pbP , countT cbP ) ;" ,
0x00000748 , "\0\0\0\0countT costIdWorkPopClientMaxF( tinS& tinP ) ;" ,
0x00000749 , "\0\0\0\0countT _export valueInF( const byteT* const pbP , countT& offbiP , const countT cBitsP = 1 ) ;" ,
0x0000074a , "\0\0\0\0count2S _export valueF( const countT offboP , countT& offboAfterP , const countT valueP , const countT cBitsP = 1 ) ;" ,
0x0000074b , "\0\0\0\0count2S& _export count2RefF( const byteT* const pbP , const countT offboP ) ;" ,
0x0000074c , "\0\0\0\0tmAnimateSadamsOnPaperF" ,
0x0000074d , "\0\0\0\0tm_httpServerC_F" ,
0x0000074e , "\0\0\0\0extern countT osvkF( const countT idToolP ) ;" ,
0x0000074f , "\0\0\0\0extern countT idToolShadowF( const countT idToolP ) ;" ,
0x00000750 , "\0\0\0\0countT _export usF( tinS& tinP , measureT& xP , measureT& yP , const measureT rP ) ;" ,
0x00000751 , "\0\0\0\0voidT _export paperToEyeDefaultOldCBF( mapPaperToBackS& mP ) ;" ,
0x00000752 , "\0\0\0\0tm_sessionsC_watchF" ,
0x00000753 , "\0\0\0\0countT subtractCountStringsF( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P ) ;" ,
0x00000754 , "\0\0\0\0countT subtractMeasuresF( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P ) ;" ,
0x00000755 , "\0\0\0\0countT subtract_timeS_F( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P ) ;" ,
0x00000756 , "\0\0\0\0countT subtractBlobsF( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P ) ;" ,
0x00000757 , "\0\0\0\0countT subtract_nicNameC_F( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P ) ;" ,
0x00000758 , "\0\0\0\0countT subtractCount7F( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P ) ;" ,
0x00000759 , "\0\0\0\0countT subtractCount5F( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P ) ;" ,
0x0000075a , "\0\0\0\0countT subtractCount8F( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P ) ;" ,
0x0000075b , "\0\0\0\0countT subtractCount3F( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P ) ;" ,
0x0000075c , "\0\0\0\0countT subtractStringsF( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P ) ;" ,
0x0000075d , "\0\0\0\0countT subtract_nicNameC_F( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P ) ; ;" ,
0x0000075e , "\0\0\0\0countT subtractCount4F( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P ) ;" ,
0x0000075f , "\0\0\0\0countT subtract_soulC_F( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P ) ;" ,
0x00000760 , "\0\0\0\0countT subtractCount2F( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P ) ;" ,
0x00000761 , "\0\0\0\0countT subtractCount6F( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P ) ;" ,
0x00000762 , "\0\0\0\0countT subtract_plateC_F( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P ) ;" ,
0x00000763 , "\0\0\0\0voidT _export httpEatKeyValuePairsDefaultCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , strokeS*& psttReportP , const strokeS* const psttFileLikeP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP ) ;" ,
0x00000764 , "\0\0\0\0countT _stdcall rootExceptionFilterF( voidT* pvOsInfoP ) ;" ,
0x00000765 , "\0\0\0\0countT adamMainF( tinS& tinP , const countT idTypeP , countT cHowP , const osTextT** ppostHowP , countT hWindowingClientIP , countT hPreviousWindowingClientP , const osTextT* postP , countT idCmdShowP ) ;" ,
0x00000766 , "\0\0\0\0tmAdamMainF" ,
0x00000767 , "\0\0\0\0voidT fileWriteGF( const osTextT* const postNameP , const byteT* const pbP , const countT cbP = 0 , const boolT bAppendP = 0 ) ;" ,
0x00000768 , "\0\0\0\0countT _export cBitsSetF( countT cP ) ;" ,
0x00000769 , "\0\0\0\0voidT pushFieldValuesF( tinS& tinP , stackC& stToP , stackC& stFromP ) ;" ,
0x0000076a , "\0\0\0\0voidT pushFieldValuesF( tinS& tinP , soulC& sP , stackC* const pStkP ) ;" ,
0x0000076b , "\0\0\0\0voidT _export debugF( voidT ) ;" ,
0x0000076c , "\0\0\0\0voidT _export addF( tinS& tinP , countT*& pcpP , countT* const pcp1P , const countT* const pcp2P , const boolT bSignedP = 0 ) ;" ,
0x0000076d , "\0\0\0\0sCountT _export subtractF( tinS& tinP , countT*& pcpP , countT* const pcp1P , const countT* const pcp2P , const boolT bSignedP = 0 ) ;" ,
0x0000076e , "\0\0\0\0tmcHttpServerF" ,
0x0000076f , "\0\0\0\0flagsT _export listWalkChatterCBF( tinS& tinP ) ;" ,
0x00000770 , "\0\0\0\0flagsT listWalkDeleteListCBF( tinS& tinP ) ;" ,
0x00000771 , "\0\0\0\0flagsT _export listWalkSelectCBF( tinS& tinP ) ;" ,
0x00000772 , "\0\0\0\0flagsT _export listWalkSelectAndCBF( tinS& tinP ) ;" ,
0x00000773 , "\0\0\0\0flagsT _export listWalkSelectWalkCBF( tinS& tinP ) ;" ,
0x00000774 , "\0\0\0\0flagsT _export listWalkSelectIsListedCBF( tinS& tinP ) ;" ,
0x00000775 , "\0\0\0\0voidT getListNameGF( tinS& tinP , osTextT*& postP , const countT cNameP , const flagsT flagsP = flGETlISTnAME_null ) ;" ,
0x00000776 , "\0\0\0\0voidT __export logGF( const osTextT* postP , const osTextT* postLogP = 0 ) ;" ,
0x00000777 , "\0\0\0\0voidT __export logGF( countT cP , const osTextT* postLogP = 0 ) ;" ,
0x00000778 , "\0\0\0\0countT& __export cUtilityIF( countT offP = 0 ) ;" ,
0x00000779 , "\0\0\0\0voidT __export conGF( const osTextT* postP ) ;" ,
0x0000077a , "\0\0\0\0voidT __export conGF( countT cP ) ;" ,
0x0000077b , "\0\0\0\0extern \"C\" countT OSF winMessageHandler_displayC_F( const countT oshWindowP , const countT idCmdP , const countT p1P , const countT p2P ) ;" ,
0x0000077c , "\0\0\0\0voidT surface_default_F( mPoint3S& toP , const cPoint2S& fromP , const surfC& surfP ) ;" ,
0x0000077d , "\0\0\0\0tmDrawF" ,
0x0000077e , "\0\0\0\0countT subtractAssBlobsF( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P ) ;" ,
0x0000077f , "\0\0\0\0flagsT listWalkUnIndexCBF( tinS& tinP ) ;" ,
0x00000780 , "\0\0\0\0flagsT listWalkIndexCBF( tinS& tinP ) ;" ,
0x00000781 , "\0\0\0\0voidT diskMakePathIfF( tinS& tinP , osTextT* const postP ) ;" ,
0x00000782 , "\0\0\0\0boolT diskWalkCopyCBF( tinS& tinP , countT& cDirsP , countT& cFilesP , const boolT& bQuitP , const osTextT* const postNameP , countT* const pcArgP , const countT* const pModuloFilesP , const countT* const pModuloDirsP ) ;" ,
0x00000783 , "\0\0\0\0boolT diskWalkGatherCBF( tinS& tinP , countT& cDirsP , countT& cFilesP , const boolT& bQuitP , const osTextT* const postNameP , countT* const pcArgP , const countT* const pModuloFilesP , const countT* const pModuloDirsP ) ;" ,
0x00000784 , "\0\0\0\0boolT diskWalkTimePrefixCBF( tinS& tinP , countT& cDirsP , countT& cFilesP , const boolT& bQuitP , const osTextT* const postNameP , countT* const pcArgP , const countT* const pModuloFilesP , const countT* const pModuloDirsP ) ;" ,
0x00000785 , "\0\0\0\0voidT branchDestructionCBF( tinS& tinP , etherC& etherP , const countT idTypeP , const flagsT flagsP , const handleC& handleP , byteT* pbP , countT cbP , countT& cArgP ) ;" ,
0x00000786 , "\0\0\0\0voidT _treeWriteCBF( tinS& tinP , etherC& etherP , const countT idTypeP , const flagsT flagsP , const handleC& handleP , byteT* pbP , countT cbP , countT& cArgP ) ;" ,
0x00000787 , "\0\0\0\0boolT _export _vtCBF( tinS& tinP , etherC& etherP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , sadamC& sadamP ) ;" ,
0x00000788 , "\0\0\0\0boolT _export _tcButtonCBF( tinS& tinP , etherC& etherP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , sadamC& sadamP ) ;" ,
0x00000789 , "\0\0\0\0boolT buPromptCBF( tinS& tinP , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamC& sadamP ) ;" ,
0x0000078a , "\0\0\0\0boolT tcSliderCBF( tinS& tinP , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamC& sadamP ) ;" ,
0x0000078b , "\0\0\0\0boolT tcButtonQuitCBF( tinS& tinP , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamC& sadamP ) ;" ,
0x0000078c , "\0\0\0\0voidT privilegesCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP ) ;" ,
0x0000078d , "\0\0\0\0voidT peanutCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP ) ;" ,
0x0000078e , "\0\0\0\0voidT logoutCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP ) ;" ,
0x0000078f , "\0\0\0\0voidT loginCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP ) ;" ,
0x00000790 , "\0\0\0\0voidT replaceOwnerEmailCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP ) ;" ,
0x00000791 , "\0\0\0\0voidT newRelayEmailCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP ) ;" ,
0x00000792 , "\0\0\0\0voidT newLoginCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP ) ;" ,
0x00000793 , "\0\0\0\0voidT downloadMenuCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP ) ;" ,
0x00000794 , "\0\0\0\0voidT woTimePasscodeCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP ) ;" ,
0x00000795 , "\0\0\0\0voidT obeyLoginViaEmailLinkCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP ) ;" ,
0x00000796 , "\0\0\0\0voidT obeyEarnMoneyLinkCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP ) ;" ,
0x00000797 , "\0\0\0\0voidT obeyEmailLinkReplaceOwnerEmailCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP ) ;" ,
0x00000798 , "\0\0\0\0voidT earnMoneyLinkCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP ) ;" ,
0x00000799 , "\0\0\0\0voidT loginViaEmailLinkCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP ) ;" ,
0x0000079a , "\0\0\0\0voidT slideShowTellinItCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP ) ;" ,
0x0000079b , "\0\0\0\0voidT slideShowRegretsCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP ) ;" ,
0x0000079c , "\0\0\0\0voidT helpCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP ) ;" ,
0x0000079d , "\0\0\0\0voidT freebiesCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP ) ;" ,
0x0000079e , "\0\0\0\0voidT emailZipCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP ) ;" ,
0x0000079f , "\0\0\0\0voidT menuOfReportsCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP ) ;" ,
0x000007a0 , "\0\0\0\0voidT doCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP ) ;" ,
0x000007a1 , "\0\0\0\0voidT calendarCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP ) ;" ,
0x000007a2 , "\0\0\0\0voidT obeyDirectoryClickCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP ) ;" ,
0x000007a3 , "\0\0\0\0voidT secretLoginCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP ) ;" ,
0x000007a4 , "\0\0\0\0voidT noteFromPaypalCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP ) ;" ,
0x000007a5 , "\0\0\0\0countT cMoneyF( tinS& tinP , etherC& etherP , const strokeS* const psttP ) ;" ,
0x000007a6 , "\0\0\0\0voidT homeOld20190809CBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP ) ;" ,
0x000007a7 , "\0\0\0\0voidT writeBookSurveyF( tinS& tinP , etherC& etThread , booksC& booksP , const strokeS* const psttkP , const strokeS* const psttvP , textC** const pptSurveyQ1KeyP , const countT cq1KeysP , textC** const pptSurveyQ1ValueP , const countT cq1ValuesP , textC** const pptSurveyQ2KeyP , const countT cq2KeysP , textC** const pptSurveyQ2ValueP , const countT cq2ValuesP ) ;" ,
0x000007a8 , "\0\0\0\0voidT obeyWorkerPictureClickCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP ) ;" ,
0x000007a9 , "\0\0\0\0countT queryIdAccountFromEmailF( tinS& tinP , const strokeS* const psttP ) ;" ,
0x000007aa , "\0\0\0\0voidT queryEmailFromIdAccountF( tinS& tinP , strokeS*& psttP , const countT cPassAccountP ) ;" ,
0x000007ab , "\0\0\0\0voidT myAccountSettingsCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP ) ;" ,
0x000007ac , "\0\0\0\0voidT myAccountMoneyCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP ) ;" ,
0x000007ad , "\0\0\0\0sCountT listingInspectListsCBF( tinS& tinP , aptC& aptP , listWalkArgOldS& argP , const countT* pczListNameP ) ;" ,
0x000007ae , "\0\0\0\0voidT listingAttachListCBF( tinS& tinP , aptC& aptP , countT& idNameDefaultLathP , listWalkArgOldS& argP , const countT* pczListNameP ) ;" ,
0x000007af , "\0\0\0\0flagsT listWalkDeleteAllCBF( tinS& tinP ) ;" ,
0x000007b0 , "\0\0\0\0flagsT listWalkAttachListIfCBF( tinS& tinP ) ;" ,
0x000007b1 , "\0\0\0\0flagsT listWalkQueryFromTextCBF( tinS& tinP ) ;" ,
0x000007b2 , "\0\0\0\0flagsT listWalkQueryFromIdCBF( tinS& tinP ) ;" ,
0x000007b3 , "\0\0\0\0flagsT listWalkForgetTextCBF( tinS& tinP ) ;" ,
0x000007b4 , "\0\0\0\0flagsT listWalkForgetIdCBF( tinS& tinP ) ;" ,
0x000007b5 , "\0\0\0\0flagsT listWalkLintCBF( tinS& tinP ) ;" ,
0x000007b6 , "\0\0\0\0flagsT listWalkEnumerateCBF( tinS& tinP ) ;" ,
0x000007b7 , "\0\0\0\0boolT gossipCBF( tinS& tinP , assViewC& assViewP , associateC& vieweeP , associateC& viewerP , const countT cArgP , staqC* const pStqWalkerP ) ;" ,
0x000007b8 , "\0\0\0\0voidT unregisterObsoleteDriversF( tinS& tinP , thirdC& thirdP , const osTextT* const postNameNewP ) ;" ,
0x000007b9 , "\0\0\0\0voidT tinWalkerF( tinS& tinP , tinS& tinFocusP , countT& cArgP ) ;" ,
0x000007ba , "\0\0\0\0voidT writeHtmlFilesF( tinS& tinP , etherC& ether , const boolT bOneFileP , const strokeS* const psttLikeLocalP , const strokeS* const psttLikeP , const strokeS* const psttTitleP , const strokeS* const psttOldCopyrightP , htmlS*& pHtmlRootP , const countT cSonsP , countT cOpenTriesP ) ;" ,
0x000007bb , "\0\0\0\0voidT newSonF( tinS& tinP , etherC& ether , const htmlS* const pHtmlP , const strokeS* const psttP , htmlS*& pHtmlRootP ) ;" ,
0x000007bc , "\0\0\0\0voidT rptTreeF( tinS& tinP , etherC& ether , htmlS* pHtmlP , countT& idLevelP ) ;" ,
0x000007bd , "\0\0\0\0voidT cellScanCalendarF( tinS& tinP , etherC& ether , strokeS*& psttP , const countT oScanP , const countT oDayP , const countT oTodayP , const countT cColP , countT time2P , strokeS** ppsttDayOfWeekP , strokeS** ppsttMonthP ) ;" ,
0x000007be , "\0\0\0\0voidT cellScanClockF( tinS& tinP , etherC& ether , strokeS*& psttP , const countT oScanP , const countT oTickP , const countT oTickNowP , const countT cColP ) ;" ,
0x000007bf , "\0\0\0\0voidT translateStateDrivenServerF( tinS& tinP , etherC& etherP , byteT* pbToP , countT cbToP , const byteT* pbFromP , countT cbFromP , byteT* pbToVaryingP , countT cbToVaryingP , const byteT* pbFromVaryingP , countT cbFromVaryingP , countT cArgP ) ;" ,
0x000007c0 , "\0\0\0\0voidT writeLineSnipF( tinS& tinP , etherC& etherP , strokeS* psttIdiP , strokeS* psttIdModuleP , const strokeS* const psttP ) ;" ,
0x000007c1 , "\0\0\0\0voidT pushLabelsF( tinS& tinP , etherC& ether , stackC& stP , countT& offoP , count01T& cbDataP , soulC& soulP , switchC& swOffP , strokeS*& psttlP ) ;" ,
0x000007c2 , "\0\0\0\0voidT endsF( tinS& tinP , etherC& ether , countT& idcInP , countT& idrInP , countT& idcOutP , countT& idrOutP , const countT cP , const countT idColP , const countT idRowP , const countT cColP , const countT cRowP , const countT cHandP , const countT idHandP ) ;" ,
0x000007c3 , "\0\0\0\0voidT _export getStrokeS( strokeS& sttP , const byteT* const pbP , countT& offbiP ) ;" ,
0x000007c4 , "\0\0\0\0voidT adjustOldPairF( countT& idP , plateS*& ppP , countT idSlotTargetP , const countT idActionP ) ;" ,
0x000007c5 , "\0\0\0\0voidT translateStateDefaultF( tinS& tinP , etherC& etherP , byteT* pbToP , countT cbToP , const byteT* pbFromP , countT cbFromP , byteT* pbToVaryingP , countT cbToVaryingP , const byteT* pbFromVaryingP , countT cbFromVaryingP , countT cArgP ) ;" ,
0x000007c6 , "\0\0\0\0voidT bodyF( tinS& tinP , etherC& etherP , strokeS*& psttP , const strokeS& sttP ) ;" ,
0x000007c7 , "\0\0\0\0voidT joyPosF( tinS& tinP , measureT* pmxP , const countT cmxP , const countT idJoyP ) ;" ,
0x000007c8 , "\0\0\0\0voidT homeOldCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP ) ;" ,
0x000007c9 , "\0\0\0\0voidT push_pstt_F( tinS& tinP , stackC* const pStkP , soulC& sInP ) ;" ,
0x000007ca , "\0\0\0\0countT highDigitF( tinS& tinP , etherC& ether , countT& digitP , countT& fractionP , const countT radixP , countT cBitsMaxP , const boolT bHighP = 0 ) ;" ,
0x000007cb , "\0\0\0\0countT cbpdF( const countT radixP ) ;" ,
0x000007cc , "\0\0\0\0countT strIdNewF( const countT* const pczP , const countT findThisP ) ;" ,
0x000007cd , "\0\0\0\0countT subtract_nicNameC_F( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P ) ;" ,
0x000007ce , "\0\0\0\0countT subtractByteStringsF( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P ) ;" ,
0x000007cf , "\0\0\0\0countT subtractBlobsF( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P ) ;" ,
0x000007d0 , "\0\0\0\0countT subtract_timeS_F( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P ) ;" ,
0x000007d1 , "\0\0\0\0countT subtractCountStringsF( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P ) ;" ,
0x000007d2 , "\0\0\0\0countT subtract_plateC_F( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P ) ;" ,
0x000007d3 , "\0\0\0\0countT subtractF( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P ) ;" ,
0x000007d4 , "\0\0\0\0countT subtractLB_countT_F( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P ) ;" ,
0x000007d5 , "\0\0\0\0countT subtractLB_nicNameC_ptr_F( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P ) ;" ,
0x000007d6 , "\0\0\0\0countT subtractLB_countT_ptr_F( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P ) ;" ,
0x000007d7 , "\0\0\0\0countT subtractLB_countT_ptr_lenPrefixed_F( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P ) ;" ,
0x000007d8 , "\0\0\0\0countT subtractLB_strokeS_ptr_F( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P ) ;" ,
0x000007d9 , "\0\0\0\0countT subtractLB_blob_ptr_F( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P ) ;" ,
0x000007da , "\0\0\0\0countT subtractLB_osTextT_ptr_F( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P ) ;" ,
0x000007db , "\0\0\0\0countT subtractLB_ptrStrokeS_ptr_F( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P ) ;" ,
0x000007dc , "\0\0\0\0countT subtractLB_ptrStrokeS_ptr_lenPrefixed_F( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P ) ;" ,
0x000007dd , "\0\0\0\0countT subtractLB_plateC_ptr_F( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P ) ;" ,
0x000007de , "\0\0\0\0countT subtract1220008F( tinS& tinP , countT& pEtherP , countT& c1P , countT& c2P , countT& c3P ) ;" ,
0x000007df , "\0\0\0\0countT dtTellCopyDoneF( countT c_thisP ) ;" ,
0x000007e0 , "\0\0\0\0countT ctTellCopyDoneF( countT c_thisP ) ;" ,
0x000007e1 , "\0\0\0\0countT ccF( tinS& tinP , etherC& ether , switchC& swP ) ;" ,
0x000007e2 , "\0\0\0\0countT subtractBlobs_sKeyF( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P ) ;" ,
0x000007e3 , "\0\0\0\0countT subtractLB_soulC_ptr_F( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P ) ;" ,
0x000007e4 , "\0\0\0\0boolT bHitF( const countT idP , const countT* const pcP ) ;" ,
0x000007e5 , "\0\0\0\0countT _export subtractStringsInJotF( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P ) ;" ,
0x000007e6 , "\0\0\0\0flagsT flagsUpF( const countT idrMeP , const countT idrToP , const countT idrMaxP ) ;" ,
0x000007e7 , "\0\0\0\0flagsT flagSelectedF( tinS& tinP , const flagsT flagsButtonsP , const flagsT flagButtonSelectedP ) ;" ,
0x000007e8 , "\0\0\0\0osTextT* postSwpSymbolF( tinS& tinP , const countT idP ) ;" ,
0x000007e9 , "\0\0\0\0osTextT* postVkSymbolF( tinS& tinP , const countT idP ) ;" ,
0x000007ea , "\0\0\0\0sCountT strComparePrivateF( const strokeS* const pstt1P , const strokeS* const pstt2P ) ;" ,
0x000007eb , "\0\0\0\0htmlS* pHtmlF( tinS& tinP , etherC& ether , const strokeS* const psttNameP , htmlS*& pHtmlRootP ) ;" ,
0x000007ec , "\0\0\0\0boolT renderHandlerIdeaFarmLogoF( tinS& tinP , etherC& ether , windowOldC& wP , const countT cArgP ) ;" ,
0x000007ed , "\0\0\0\0flagsT listWalkFieldEditCBF( tinS& tinP ) ;" ,
0x000007ee , "\0\0\0\0tmGrabTabF" ,
0x000007ef , "\0\0\0\0voidT _export vspDatumCountCBF( tinS& tinP , byteT* pbvspP , countT idEventP , countT cRefOldP , countT cRefNewLaterP , countT cArgP ) ;" ,
0x000007f0 , "\0\0\0\0voidT _export vspDatumCountStrzCBF( tinS& tinP , byteT* pbvspP , countT idEventP , countT cRefOldP , countT cRefNewLaterP , countT cArgP ) ;" ,
0x000007f1 , "\0\0\0\0voidT _export vspDatumBlobCBF( tinS& tinP , byteT* pbvspP , countT idEventP , countT cRefOldP , countT cRefNewLaterP , countT cArgP ) ;" ,
0x000007f2 , "\0\0\0\0voidT _export vspDatumListingCBF( tinS& tinP , byteT* pbvspP , countT idEventP , countT cRefOldP , countT cRefNewLaterP , countT cArgP ) ;" ,
0x000007f3 , "\0\0\0\0boolT diskWalkRenameForArchivalCBF( tinS& tinP , countT& cDirsP , countT& cFilesP , const boolT& bQuitP , const osTextT* const postNameP , countT* const pcArgP , const countT* const pModuloFilesP , const countT* const pModuloDirsP ) ;" ,
0x000007f4 , "\0\0\0\0tmPoolFlushF" ,
0x000007f5 , "\0\0\0\0tmPutEditionF" ,
0x000007f6 , "\0\0\0\0tmDrawHelperF" ,
0x000007f7 , "\0\0\0\0tmDisplayF" ,
0x000007f8 , "\0\0\0\0tmCioF" ,
0x000007f9 , "\0\0\0\0tmRelayBlowTeatF" ,
0x000007fa , "\0\0\0\0voidT _export logTallyIF( countT tallyP , countT idLineP , countT idiFileP , boolT bFailP , countT idTallyP , const osTextT* const postP ) ;" ,
0x000007fb , "\0\0\0\0countT _export dosGetInfoBlocksIdProcessIF( tinS& tinP ) ;" ,
0x000007fc , "\0\0\0\0countT _export dosGetInfoBlocksIdThreadIF( voidT ) ;" ,
0x000007fd , "\0\0\0\0voidT _export raiseWorkingSetSizeHintsIF( tinS& tinP , countT cbP = 0 ) ;" ,
0x000007fe , "\0\0\0\0inline byteT reverseBitsF( const byteT bP )" ,
0x000007ff , "\0\0\0\0inline byteT reverseBitsInFieldF( const byteT bP , const countT offBitP , const countT cBitsP )" ,
0x00000800 , "\0\0\0\0voidT _export emitWordIF( tinS& tinP , const countT idLineP , const countT idFileP ) ;" ,
0x00000801 , "\0\0\0\0voidT _export emitWordIF( const countT idLineP , const countT idFileP ) ;" ,
0x00000802 , "\0\0\0\0voidT _export unwrapCircleIF( tinS& tinP , byteT* const pbOutP , const countT cbOutP , const byteT* const pbInP , const countT cbInP , const countT offCursorP ) ;" ,
0x00000803 , "\0\0\0\0voidT _export emitWordsIF( tinS& tinP , const countT idLineP , const countT idFileP , const countT* const pcSuffixP , const countT ccSuffixP ) ;" ,
0x00000804 , "\0\0\0\0flagsT listWalkResetIndexBitsCBF( tinS& tinP ) ;" ,
0x00000805 , "\0\0\0\0boolT diskWalkSearchCBF( tinS& tinP , countT& cDirsP , countT& cFilesP , const boolT& bQuitP , const osTextT* const postNameP , countT* const pcArgP , const countT* const pModuloFilesP , const countT* const pModuloDirsP ) ;" ,
0x00000806 , "\0\0\0\0voidT emailZipConfirmationCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP ) ;" ,
0x00000807 , "\0\0\0\0voidT homeCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP ) ;" ,
0x00000808 , "\0\0\0\0voidT rebootCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP ) ;" ,
0x00000809 , "\0\0\0\0.586" ,
0x0000080a , "\0\0\0\0END" ,
0x0000080b , "\0\0\0\0code to get file information" ,
0x0000080c , "\0\0\0\0main" ,
0x0000080d , "\0\0\0\0code to build arguments for an orphan process" ,
0x0000080e , "\0\0\0\0common code for strReplaceF, strReplaceAnyF" ,
0x0000080f , "\0\0\0\0stub file ids" ,
0x00000810 , "\0\0\0\0stub file titles" ,
0x00000811 , "\0\0\0\0ClINESiNdEF" ,
0x00000812 , "\0\0\0\0idcWIN" ,
0x00000813 , "\0\0\0\0RUNgATE" ,
0x00000814 , "\0\0\0\0stub drop back id type titles" ,
0x00000815 , "\0\0\0\0stub" ,
0x00000816 , "\0\0\0\0stub" ,
0x00000817 , "\0\0\0\0stub" ,
0x00000818 , "\0\0\0\0stackC:: load from soulP" ,
0x00000819 , "\0\0\0\0stub" ,
0x0000081a , "\0\0\0\0strConcatenateF_woSnip" ,
0x0000081b , "\0\0\0\0preliminary declarations of class and struct identifiers ; class and struct symbolic constants" ,
0x0000081c , "\0\0\0\0this includes snip.0050025.genMake.h" ,
0x0000081d , "\0\0\0\0this includes the base hide flavor of ipdos.h" ,
0x0000081e , "\0\0\0\0ifcENABLEtHIRDpARTIES" ,
0x0000081f , "\0\0\0\0this includes the base show flavor of ipdos.h" ,
0x00000820 , "\0\0\0\0COMPILE_MULTIMON_STUBS" ,
0x00000821 , "\0\0\0\0this includes the adam hide flavor of ipdos.h" ,
0x00000822 , "\0\0\0\0this includes the adam show flavor of ipdos.h" ,
0x00000823 , "\0\0\0\0ifcENABLEtHIRDpARTIES" ,
0x00000824 , "\0\0\0\0COMPILE_MULTIMON_STUBS" ,
0x00000825 , "\0\0\0\0extern const countT idAdamRootI ;" ,
0x00000826 , "\0\0\0\0extern countT __export pcUtilityI[] ;" ,
0x00000827 , "\0\0\0\0extern tinS* __export pTinMainI ;" ,
0x00000828 , "\0\0\0\0extern tinS tinExceptionHandlerDfltG ;" ,
0x00000829 , "\0\0\0\0extern countT idPhaseExceptionHandlingG ;" ,
0x0000082a , "\0\0\0\0extern byteT pbOsInfoExceptionG[ 0x1000 ] ;" ,
0x0000082b , "\0\0\0\0extern tellInfoExceptionS tellInfoExceptionG ;" ,
0x0000082c , "\0\0\0\0extern adamGlobal1S rootAdamGlobal1I ;" ,
0x0000082d , "\0\0\0\0extern processGlobal1S processGlobal1I ;" ,
0x0000082e , "\0\0\0\0extern countT offFingerVerifyI ;" ,
0x0000082f , "\0\0\0\0extern boolT bTlsEarlyLateI ;" ,
0x00000830 , "\0\0\0\0extern processGlobal2S processGlobal2I ;" ,
0x00000831 , "\0\0\0\0extern adamGlobal2S rootAdamGlobal2I ;" ,
0x00000832 , "\0\0\0\0extern processGlobal3S processGlobal3I ;" ,
0x00000833 , "\0\0\0\0extern processGlobal4S processGlobal4I ;" ,
0x00000834 , "\0\0\0\0extern processGlobal5S processGlobal5I ;" ,
0x00000835 , "\0\0\0\0extern processGlobal6S processGlobal6I ;" ,
0x00000836 , "\0\0\0\0extern adamGlobal3S rootAdamGlobal3I ;" ,
0x00000837 , "\0\0\0\0extern adamGlobal4S rootAdamGlobal4I ;" ,
0x00000838 , "\0\0\0\0extern adamGlobal5S rootAdamGlobal5I ;" ,
0x00000839 , "\0\0\0\0extern processGlobal7S processGlobal7I ;" ,
0x0000083a , "\0\0\0\0extern adamGlobal6S rootAdamGlobal6I ;" ,
0x0000083b , "\0\0\0\0extern countT offFingerVerifyLocationI ;" ,
0x0000083c , "\0\0\0\0extern processGlobal0S processGlobal0I ;" ,
0x0000083d , "\0\0\0\0voidT __export inc02AM( count02T& cP ) ;" ,
0x0000083e , "\0\0\0\0voidT __export dec02AM( count02T& cP ) ;" ,
0x0000083f , "\0\0\0\0countT __export setIfZeAM( countT& cToP , const countT cFromP ) ;" ,
0x00000840 , "\0\0\0\0countT __export setIfEqualsAM( countT& cToP , countT cFromP , countT cEqualsP ) ;" ,
0x00000841 , "\0\0\0\0tinS*& __export pTinAM( voidT ) ;" ,
0x00000842 , "\0\0\0\0voidT __export idCpuAM( countT& cLowP , countT& cMidP , countT& cHighP ) ;" ,
0x00000843 , "\0\0\0\0voidT __export tellTaleAM( const countT cP ) ;" ,
0x00000844 , "\0\0\0\0count02T __export incv02AM( count02T& cP ) ;" ,
0x00000845 , "\0\0\0\0tinS*& __export pTin2AM( countT ebpP ) ;" ,
0x00000846 , "\0\0\0\0countT& __export ebpTlsAM( voidT ) ;" ,
0x00000847 , "\0\0\0\0countT __export ebpAM( voidT ) ;" ,
0x00000848 , "\0\0\0\0count02T __export decv02AM( count02T& cP ) ;" ,
0x00000849 , "\0\0\0\0void __export getRegsAM( unsigned* pcP ) ;" ,
0x0000084a , "\0\0\0\0void __export putRegsAM( unsigned* pcP ) ;" ,
0x0000084b , "\0\0\0\0countT __export espAM( voidT ) ;" ,
0x0000084c , "\0\0\0\0countT __export btsAM( byteT* pbP , countT offP ) ;" ,
0x0000084d , "\0\0\0\0countT __export btrAM( byteT* pbP , countT offP ) ;" ,
0x0000084e , "\0\0\0\0countT __export btcAM( byteT* pbP , countT offP ) ;" ,
0x0000084f , "\0\0\0\0countT __export btsLathAM( byteT* pbP , countT cBitsP ) ;" ,
0x00000850 , "\0\0\0\0countT __export btsWothAM( byteT* pbP , countT cBitsP ) ;" ,
0x00000851 , "\0\0\0\0boolT __export bitFoundAM( const byteT* pbP , countT cBitsP ) ;" ,
0x00000852 , "\0\0\0\0voidT __export putNegAM( countT& cToP , countT cFromP ) ;" ,
0x00000853 , "\0\0\0\0countT __export getNegAM( const countT& cFromP ) ;" ,
0x00000854 , "\0\0\0\0countT __export setIfZeNegAM( countT& cToP , countT cFromP ) ;" ,
0x00000855 , "\0\0\0\0countT __export setIfEqualsNegAM( countT& cToP , countT cFromP , countT cEqualsP ) ;" ,
0x00000856 , "\0\0\0\0voidT __export putNeg01AM( count01T& cToP , count01T cFromP ) ;" ,
0x00000857 , "\0\0\0\0count01T __export getNeg01AM( const count01T& cFromP ) ;" ,
0x00000858 , "\0\0\0\0voidT __export putNeg8AM( count8T& bToP , count8T bFromP ) ;" ,
0x00000859 , "\0\0\0\0count8T __export getNeg8AM( const count8T& bFromP ) ;" ,
0x0000085a , "\0\0\0\0countT __export idLowBitAM( const countT cP ) ;" ,
0x0000085b , "\0\0\0\0voidT __export vec3_mulAM( measureT& mCP , const measureT* pmAP , const measureT* pmBP ) ;" ,
0x0000085c , "\0\0\0\0voidT __export vec3_matVecMulAM( measureT* pmCP , const measureT* pmAP , const measureT* pmBP , countT rowsAP ) ;" ,
0x0000085d , "\0\0\0\0voidT __export vec3_matMatMulAM( measureT* pmCP , const measureT* pmAP , const measureT* pmBP , countT rowsAP , countT colsBP ) ;" ,
0x0000085e , "\0\0\0\0voidT __export vec3_matVecSubAM( measureT* pmCP , const measureT* pmAP , const measureT* pmBP , countT rowsAP ) ;" ,
0x0000085f , "\0\0\0\0voidT __export vec3_matVecSubInPlaceAM( measureT* pmAP , const measureT* pmBP , countT rowsAP ) ;" ,
0x00000860 , "\0\0\0\0voidT __export rotationAM( measureT* pmRP , const measureT* pmaHeadingP , const measureT* pmaElevationP , const measureT* pmaBankP ) ;" ,
0x00000861 , "\0\0\0\0voidT __export clean3AM( measureT* pmP , countT cEltP ) ;" ,
0x00000862 , "\0\0\0\0countT __export cbAlign02AM( const byteT* pbP ) ;" ,
0x00000863 , "\0\0\0\0countT __export cbAlign001AM( const byteT* pbP ) ;" ,
0x00000864 , "\0\0\0\0voidT __export crayLoadAndPackFromXYZAM( measureT* pmXYZP ) ;" ,
0x00000865 , "\0\0\0\0voidT __export crayUnloadAM( measureT* pmBP ) ;" ,
0x00000866 , "\0\0\0\0voidT __export crayUnpackToXYZAndUnloadAM( measureT* pmBP ) ;" ,
0x00000867 , "\0\0\0\0flagsT __export queryCpuFeaturesAM( voidT ) ;" ,
0x00000868 , "\0\0\0\0voidT __export vec3sse_mulAM( measureT& mCP , const measureT* pmAP , const measureT* pmBP ) ;" ,
0x00000869 , "\0\0\0\0voidT __export pushParmsAM( const countT* pcP , countT ccP ) ;" ,
0x0000086a , "\0\0\0\0voidT __export popParmsAM( countT ccP ) ;" ,
0x0000086b , "\0\0\0\0voidT __export inc01AM( count01T& cP ) ;" ,
0x0000086c , "\0\0\0\0count01T __export incv01AM( count01T& cP ) ;" ,
0x0000086d , "\0\0\0\0voidT __export dec01AM( count01T& cP ) ;" ,
0x0000086e , "\0\0\0\0count01T __export decv01AM( count01T& cP ) ;" ,
0x0000086f , "\0\0\0\0voidT __export inc8AM( count8T& cP ) ;" ,
0x00000870 , "\0\0\0\0count8T __export incv8AM( count8T& cP ) ;" ,
0x00000871 , "\0\0\0\0voidT __export dec8AM( count8T& cP ) ;" ,
0x00000872 , "\0\0\0\0count8T __export decv8AM( count8T& cP ) ;" ,
0x00000873 , "\0\0\0\0boolT __export insertBehindAboveBelowAM( countT cOutMaxP ) ;" ,
0x00000874 , "\0\0\0\0boolT __export insertX0PointAM( countT cOutMaxP ) ;" ,
0x00000875 , "\0\0\0\0boolT __export directionAM( measureT& aHeadingP , measureT& aElevationP , measureT* pmXYZP , const boolT bSnapP ) ;" ,
0x00000876 , "\0\0\0\0voidT __export cpuIdAM( countT idModeP , countT* pcNameP ) ;" ,
0x00000877 , "\0\0\0\0countT __export btsKeyedAM( byteT* pbP , countT& keyToP , countT offP , countT keyFromP ) ;" ,
0x00000878 , "\0\0\0\0countT __export btrKeyedAM( byteT* pbP , countT& keyToP , countT offP , countT keyFromP ) ;" ,
0x00000879 , "\0\0\0\0inline countT idrF( countT idaP , countT id1P , countT cP )" ,
0x0000087a , "\0\0\0\0inline countT idaF( countT idrP , countT id1P , countT cP )" ,
0x0000087b , "\0\0\0\0inline boolT setFlagIfZeGF( flagsT& flagsToP , flagsT flagWhichP )" ,
0x0000087c , "\0\0\0\0void _export c_debugF( void )" ,
0x0000087d , "\0\0\0\0void c_openSsl_setupIF( unsigned* pEcP , openSsl_pInitFT pInitFP )" ,
0x0000087e , "\0\0\0\0void c_openSsl_shutdownIF( unsigned* pEcP , openSsl_pShutdownFT pShutdownFP , SSL* pSslP )" ,
0x0000087f , "\0\0\0\0SSL_CTX* c_openSsl_getContextIF( unsigned* pEcP , openSsl_pContextFT pContextFP , openSsl_pMethodFT pMethodFP )" ,
0x00000880 , "\0\0\0\0SSL* c_openSsl_getWrapperIF( unsigned* pEcP , openSsl_pWrapperFT pWrapperFP , SSL_CTX* pContextP )" ,
0x00000881 , "\0\0\0\0void c_openSsl_wrapSocketIF( unsigned* pEcP , openSsl_pWrapFT pWrapFP , unsigned oshSocketP , SSL* pSslP )" ,
0x00000882 , "\0\0\0\0void c_openSsl_shakeHandsIF( unsigned* pEcP , openSsl_pShakeFT pShakeFP , SSL* pSslP )" ,
0x00000883 , "\0\0\0\0unsigned c_openSsl_writeIF( unsigned* pEcP , openSsl_pWriteFT pWriteFP , SSL* pSslP , const char* const pbP , const unsigned cbP )" ,
0x00000884 , "\0\0\0\0unsigned c_openSsl_readIF( unsigned* pEcP , openSsl_pReadFT pReadFP , char* pbP , unsigned cbP , SSL* pSslP )" ,
0x00000885 , "\0\0\0\0void _export c_traceHelperIF( unsigned pP )" ,
0x00000886 , "\0\0\0\0extern \"C\" voidT __export __stdcall testF( voidT )" ,
0x00000887 , "\0\0\0\0extern \"C\" voidT __export __stdcall rTagF( voidT )" ,
0x00000888 , "\0\0\0\0extern \"C\" voidT __export __stdcall eipF( countT* pcP )" ,
0x00000889 , "\0\0\0\0voidT _export debugF( voidT )" ,
0x0000088a , "\0\0\0\0TASK( tmServiceMainF ) // THIS THREAD WAS LAUNCHED BY THE O.S.; \"TASK\" AND \"DONE\" ARE BEING USED TO PROVIDE tinP, ether, etThread" ,
0x0000088b , "\0\0\0\0countT osvkF( const countT idToolP )" ,
0x0000088c , "\0\0\0\0voidT fileWriteGF( const osTextT* const postNameP , const byteT* const pbP , const countT cbP , const boolT bAppendP )" ,
0x0000088d , "\0\0\0\0voidT logGF( const osTextT* postP , const osTextT* postLogP )" ,
0x0000088e , "\0\0\0\0voidT logGF( countT cP , const osTextT* postLogP )" ,
0x0000088f , "\0\0\0\0voidT conGF( const osTextT* postP )" ,
0x00000890 , "\0\0\0\0voidT conGF( countT cP )" ,
0x00000891 , "\0\0\0\0extern \"C\" countT OSF winMessageHandler_displayC_F( const countT oshWindowP , const countT idCmdP , const countT p1P , const countT p2P )" ,
0x00000892 , "\0\0\0\0voidT diskMakePathIfF( tinS& tinP , osTextT* const postP )" ,
0x00000893 , "\0\0\0\0boolT diskWalkCopyCBF( tinS& tinP , countT& cDirsP , countT& cFilesP , const boolT& bQuitP , const osTextT* const postNameP , countT* const pcArgP , const countT* const pModuloFilesP , const countT* const pModuloDirsP )" ,
0x00000894 , "\0\0\0\0boolT diskWalkGatherCBF( tinS& tinP , countT& cDirsP , countT& cFilesP , const boolT& bQuitP , const osTextT* const postNameP , countT* const pcArgP , const countT* const pModuloFilesP , const countT* const pModuloDirsP )" ,
0x00000895 , "\0\0\0\0boolT diskWalkTimePrefixCBF( tinS& tinP , countT& cDirsP , countT& cFilesP , const boolT& bQuitP , const osTextT* const postNameP , countT* const pcArgP , const countT* const pModuloFilesP , const countT* const pModuloDirsP )" ,
0x00000896 , "\0\0\0\0flagsT flagSelectedF( tinS& tinP , const flagsT flagsButtonsP , const flagsT flagButtonSelectedP )" ,
0x00000897 , "\0\0\0\0osTextT* postSwpSymbolF( tinS& tinP , const countT idP )" ,
0x00000898 , "\0\0\0\0osTextT* postVkSymbolF( tinS& tinP , const countT idP )" ,
0x00000899 , "\0\0\0\0TASK( tmDrawHelperF )" ,
0x0000089a , "\0\0\0\0countT _export dosGetInfoBlocksIdProcessIF( tinS& tinP )" ,
0x0000089b , "\0\0\0\0countT _export dosGetInfoBlocksIdThreadIF( voidT )" ,
0x0000089c , "\0\0\0\0voidT _export raiseWorkingSetSizeHintsIF( tinS& tinP , countT cbP )" ,
0x0000089d , "\0\0\0\0boolT diskWalkSearchCBF( tinS& tinP , countT& cDirsP , countT& cFilesP , const boolT& bQuitP , const osTextT* const postNameP , countT* const pcArgP , const countT* const pModuloFilesP , const countT* const pModuloDirsP )" ,
0x0000089e , "\0\0\0\0TASK( tmBoxGetPutDeadmanF )" ,
0x0000089f , "\0\0\0\0extern \"C\" countT __export OSF winMessageHandlerF( const countT oshWindowP , const countT idCmdP , const countT p1P , const countT p2P )" ,
0x000008a0 , "\0\0\0\0wmIdF , wmPostF" ,
0x000008a1 , "\0\0\0\0voidT postUniqueTimeNowF( tinS& tinP , osTextC& ostoP )" ,
0x000008a2 , "\0\0\0\0voidT postUniqueDatumNameF( tinS& tinP , osTextC& ostoP , const osTextT* const postShortLikeP )" ,
0x000008a3 , "\0\0\0\0TASK( tmWindowsF )" ,
0x000008a4 , "\0\0\0\0TASK( tmWatchF )" ,
0x000008a5 , "\0\0\0\0voidT __export declareVmUsageTypeGF( tinS& tinP , const byteT* const pbP , const flagsT flUsageTypeP , const countT idP , const osTextT* const postNameP )" ,
0x000008a6 , "\0\0\0\0TASK( tmRelayChatRepliesF )" ,
0x000008a7 , "\0\0\0\0measureT __export osAngleF( const measureT ifAngleP )" ,
0x000008a8 , "\0\0\0\0measureT __export ifAngleF( const measureT osAngleP )" ,
0x000008a9 , "\0\0\0\0countT __export threadLocalStorageF( const countT idTypeP , kidFT pThreadWorkF , countT cArgP , countT cHowP , const osTextT** ppostHowP , countT hWindowingClientIP , countT hPreviousWindowingClientP , osTextT* postP , countT idCmdShowP )" ,
0x000008aa , "\0\0\0\0countT mainThreadWorkF( const countT idTypeP , countT cHowP , const osTextT** ppostHowP , countT hWindowingClientIP , countT hPreviousWindowingClientP , osTextT* postP , countT idCmdShowP )" ,
0x000008ab , "\0\0\0\0countT __export threadLocalStorageLocationF( const countT oshWindowP , const countT idCmdP , const countT p1P , const countT p2P )" ,
0x000008ac , "\0\0\0\0extern \"C\" int matherr( struct _exception* pInfoP )" ,
0x000008ad , "\0\0\0\0sCountT subtractF( tinS& tinP , thirdC& third , const byteT* const pb1P , const byteT* const pb2P , const countT cb1P , const countT cb2P , const boolT bNumericP , const boolT bSignificanceIncreasingP )" ,
0x000008ae , "\0\0\0\0voidT __export hoverF( tinS& tinP , thirdC& third , osTextT*& postHoverP , const countT idHoverDirP )" ,
0x000008af , "\0\0\0\0boolT __export bFileOrDirExistsF( tinS& tinP , thirdC& third , const osTextT* const postP )" ,
0x000008b0 , "\0\0\0\0voidT cdF( tinS& tinP , thirdC& third , const osTextT* const postP )" ,
0x000008b1 , "\0\0\0\0boolT bLeapYearF( const sCountT yP )" ,
0x000008b2 , "\0\0\0\0voidT* operator new[]( countT cbP )" ,
0x000008b3 , "\0\0\0\0voidT* operator new( countT cbP )" ,
0x000008b4 , "\0\0\0\0voidT __export postFromTinGF( tinS& tinP , const countT idLineP , const countT idFileP , osTextT*& postP , const countT idSinP )" ,
0x000008b5 , "\0\0\0\0voidT __export postFromTinGF( tinS& tinP , const countT idLineP , const countT idFileP , osTextT*& postP , const osTextT* postSinP , const osTextT* postPenanceP )" ,
0x000008b6 , "\0\0\0\0count02T __export hashF( register const byteT* pbP , register count02T cbP , register count02T seedP )" ,
0x000008b7 , "\0\0\0\0const timeS& __export timeBaseBuiltF( voidT )" ,
0x000008b8 , "\0\0\0\0countT _export subtractWothCountInBlobsF( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P )" ,
0x000008b9 , "\0\0\0\0handleC hProcessF( tinS& tinP , const countT osPidP , const countT osPidMeP )" ,
0x000008ba , "\0\0\0\0tinS*& _export pTinF( voidT )" ,
0x000008bb , "\0\0\0\0tinS*& _export pTinMainI_IF( voidT )" ,
0x000008bc , "\0\0\0\0boolT& _export bTlsEarlyLateIF( voidT )" ,
0x000008bd , "\0\0\0\0voidT ranYieldF( tinS& tinP , countT cMaxP )" ,
0x000008be , "\0\0\0\0countT __export cTimeZonesF( tinS& tinP )" ,
0x000008bf , "\0\0\0\0voidT _export treeBranchDefinitionDefaultOldCBF( tinS& tinP , etherC& etherP , const countT idTypeP , const flagsT flagsP , const handleC& handleP , byteT* pbP , countT cbP , countT& cArgP )" ,
0x000008c0 , "\0\0\0\0TASK( tmWatchFlagsF )" ,
0x000008c1 , "\0\0\0\0TASK( _tmCatchF )" ,
0x000008c2 , "\0\0\0\0TASK( tmRiverServeF )" ,
0x000008c3 , "\0\0\0\0TASK( tmRiverAcceptF )" ,
0x000008c4 , "\0\0\0\0TASK( tmQuitSubscribeF )" ,
0x000008c5 , "\0\0\0\0TASK( tmSubscribeF )" ,
0x000008c6 , "\0\0\0\0TASK( tmWhereF )" ,
0x000008c7 , "\0\0\0\0TASK( tmTimeoutF )" ,
0x000008c8 , "\0\0\0\0TASK( tmAskDnsF )" ,
0x000008c9 , "\0\0\0\0countT __export threadLocalStorageNoTlsF( const countT idTypeP , kidFT pThreadWorkF , countT cArgP , countT cHowP , const osTextT** ppostHowP , countT hWindowingClientIP , countT hPreviousWindowingClientP , osTextT* postP , countT idCmdShowP )" ,
0x000008ca , "\0\0\0\0TASK( tmStackCoursesF )" ,
0x000008cb , "\0\0\0\0TASK( tmMakeTraysF )" ,
0x000008cc , "\0\0\0\0TASK( tmRegisterPortF )" ,
0x000008cd , "\0\0\0\0TASK( tmChatF )" ,
0x000008ce , "\0\0\0\0TASK( tmLoadSilentF )" ,
0x000008cf , "\0\0\0\0TASK( tmPaperOpenCatchF )" ,
0x000008d0 , "\0\0\0\0TASK( tmServePortF )" ,
0x000008d1 , "\0\0\0\0TASK( tmPortAuthorityF )" ,
0x000008d2 , "\0\0\0\0TASK( tmNapF )" ,
0x000008d3 , "\0\0\0\0TASK( tmFtpServeF )" ,
0x000008d4 , "\0\0\0\0TASK( tmServeBoxClientsF )" ,
0x000008d5 , "\0\0\0\0TASK( tmOutF )" ,
0x000008d6 , "\0\0\0\0TASK( tmErrorF )" ,
0x000008d7 , "\0\0\0\0countT subtractIdPortsF( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P )" ,
0x000008d8 , "\0\0\0\0countT subtractIdPortTimesF( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P )" ,
0x000008d9 , "\0\0\0\0TASK( tmRelayPopClientF )" ,
0x000008da , "\0\0\0\0TASK( tmRelayServerCatchBagF )" ,
0x000008db , "\0\0\0\0TASK( tmRelayTickleF )" ,
0x000008dc , "\0\0\0\0TASK( tmRelayKillF )" ,
0x000008dd , "\0\0\0\0TASK( tmRelayInitiatorF )" ,
0x000008de , "\0\0\0\0TASK( tmRelayTeatServerF )" ,
0x000008df , "\0\0\0\0TASK( tmRelayServerWrapToAppF )" ,
0x000008e0 , "\0\0\0\0TASK( tmRelayTeatAcceptorF )" ,
0x000008e1 , "\0\0\0\0TASK( tmTimeNowF )" ,
0x000008e2 , "\0\0\0\0voidT genSoixlOldWordLoadsF( tinS& tinP , strokeS*& _psttLeverSoixlOldApi , switchC*& _pSwSoixlOldApi )" ,
0x000008e3 , "\0\0\0\0countT netC_subtract_soulC_F( tinS& tinP , countT& pEtherP , countT& c1P , countT& c2P , countT& c3P )" ,
0x000008e4 , "\0\0\0\0voidT jobHandlerF( tinS& tinP , etherC& ether , etherC& etThread , socketC*& pso , const countT idChatSessionP , countT cArgP , const countT idAdamHandlingP )" ,
0x000008e5 , "\0\0\0\0voidT jobFillCourseDfltF( tinS& tinP , etherC& ether , etherC& etThread , soulC& sDataP , soulC& sNotesTextP , soulC& sNotesDataP , const countT idCourseP , const countT idAdamP , const countT idChatSessionP , soulC& sOrderP , countT& cArgP , count8S& c8argP )" ,
0x000008e6 , "\0\0\0\0voidT jobHearOrderDfltF( tinS& tinP , etherC& ether , etherC& etThread , const countT idAdamP , const countT idChatSessionP , soulC& sOrderP , countT& cArgP , count8S& c8argP )" ,
0x000008e7 , "\0\0\0\0TASKdRIVENsERVER( tmcChatF )" ,
0x000008e8 , "\0\0\0\0voidT validateF( tinS& tinP , etherC& etThread , switchC& swc2P , countT& idProcessOldP )" ,
0x000008e9 , "\0\0\0\0voidT cleanFileNameF( tinS& tinP , etherC& etThread , textC& tP )" ,
0x000008ea , "\0\0\0\0voidT pbcbF( tinS& tinP , etherC& etThread , byteT*& pbP , countT& cbP , strokeS* psttNameP , strokeS*& psttLeverP , switchC& swImageP )" ,
0x000008eb , "\0\0\0\0voidT ungrabF( tinS& tinP , boolT& bGrabbedP , countT& idDesireGrabberP )" ,
0x000008ec , "\0\0\0\0const osTextT* _export postMangleF( tinS& tinP , const osTextT* postOldClassNameIP )" ,
0x000008ed , "\0\0\0\0countT _export cBitsSetF( tinS& tinP , const byteT* pbP , countT cbP )" ,
0x000008ee , "\0\0\0\0countT cbFullSetF( tinS& tinP , const byteT* pbP , const countT cbP )" ,
0x000008ef , "\0\0\0\0boolT bIsZeF( const byteT* pbP , countT cbP )" ,
0x000008f0 , "\0\0\0\0TASK( tmKillSocketF )" ,
0x000008f1 , "\0\0\0\0TASK( tmKillZombieF )" ,
0x000008f2 , "\0\0\0\0countT valueInF( const byteT* const pbP , countT& offbiP , const countT cBitsP )" ,
0x000008f3 , "\0\0\0\0count2S valueF( const countT offboP , countT& offboAfterP , const countT valueP , const countT cBitsP )" ,
0x000008f4 , "\0\0\0\0count2S& count2RefF( const byteT* const pbP , const countT offboP )" ,
0x000008f5 , "\0\0\0\0TASK( tmAnimateSadamsOnPaperF )" ,
0x000008f6 , "\0\0\0\0TASKdRIVENsERVER( tmcHttpServerF )" ,
0x000008f7 , "\0\0\0\0TASK( tmHttpCacheF )" ,
0x000008f8 , "\0\0\0\0countT idToolShadowF( const countT idToolP )" ,
0x000008f9 , "\0\0\0\0countT _export cBitsSetF( countT cP )" ,
0x000008fa , "\0\0\0\0countT usF( tinS& tinP , measureT& xP , measureT& yP , const measureT rP )" ,
0x000008fb , "\0\0\0\0voidT _export paperToEyeDefaultOldCBF( mapPaperToBackS& mP )" ,
0x000008fc , "\0\0\0\0TASK( tm_httpServerC_F )" ,
0x000008fd , "\0\0\0\0TASK( tm_sessionsC_watchF )" ,
0x000008fe , "\0\0\0\0voidT httpEatKeyValuePairsDefaultCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , strokeS*& psttReportP , const strokeS* const psttFileLikeP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP )" ,
0x000008ff , "\0\0\0\0countT adamMainF( tinS& tinP , const countT idTypeP , countT cHowP , const osTextT** ppostHowP , countT hWindowingClientIP , countT hPreviousWindowingClientP , const osTextT* postP , countT idCmdShowP )" ,
0x00000900 , "\0\0\0\0TASK0PROTO( tmAdamMainF )" ,
0x00000901 , "\0\0\0\0voidT pushFieldValuesF( tinS& tinP , stackC& stToP , stackC& stFromP )" ,
0x00000902 , "\0\0\0\0voidT pushFieldValuesF( tinS& tinP , soulC& sP , stackC* const pStkP )" ,
0x00000903 , "\0\0\0\0voidT addF( tinS& tinP , countT*& pcpP , countT* const pcp1P , const countT* const pcp2P , const boolT bSignedP )" ,
0x00000904 , "\0\0\0\0sCountT subtractF( tinS& tinP , countT*& pcpP , countT* const pcp1P , const countT* const pcp2P , const boolT bSignedP )" ,
0x00000905 , "\0\0\0\0flagsT listWalkChatterCBF( tinS& tinP )" ,
0x00000906 , "\0\0\0\0flagsT listWalkDeleteListCBF( tinS& tinP )" ,
0x00000907 , "\0\0\0\0flagsT _export listWalkSelectCBF( tinS& tinP )" ,
0x00000908 , "\0\0\0\0flagsT _export listWalkSelectAndCBF( tinS& tinP )" ,
0x00000909 , "\0\0\0\0flagsT _export listWalkSelectWalkCBF( tinS& tinP )" ,
0x0000090a , "\0\0\0\0flagsT _export listWalkSelectIsListedCBF( tinS& tinP )" ,
0x0000090b , "\0\0\0\0voidT getListNameGF( tinS& tinP , osTextT*& postP , const countT cNameP , const flagsT flagsP )" ,
0x0000090c , "\0\0\0\0countT& cUtilityIF( countT offP )" ,
0x0000090d , "\0\0\0\0TASK( tmDrawF )" ,
0x0000090e , "\0\0\0\0countT subtractAssBlobsF( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P )" ,
0x0000090f , "\0\0\0\0flagsT listWalkUnIndexCBF( tinS& tinP )" ,
0x00000910 , "\0\0\0\0flagsT listWalkIndexCBF( tinS& tinP )" ,
0x00000911 , "\0\0\0\0voidT branchDestructionCBF( tinS& tinP , etherC& etherP , const countT idTypeP , const flagsT flagsP , const handleC& handleP , byteT* pbP , countT cbP , countT& cArgP )" ,
0x00000912 , "\0\0\0\0voidT _treeWriteCBF( tinS& tinP , etherC& etherP , const countT idTypeP , const flagsT flagsP , const handleC& handleP , byteT* pbP , countT cbP , countT& cArgP )" ,
0x00000913 , "\0\0\0\0boolT _export _vtCBF( tinS& tinP , etherC& etherP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , sadamC& sadamP )" ,
0x00000914 , "\0\0\0\0boolT _export _tcButtonCBF( tinS& tinP , etherC& etherP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , sadamC& sadamP )" ,
0x00000915 , "\0\0\0\0boolT buPromptCBF( tinS& tinP , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamC& sadamP )" ,
0x00000916 , "\0\0\0\0boolT tcSliderCBF( tinS& tinP , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamC& sadamP )" ,
0x00000917 , "\0\0\0\0boolT tcButtonQuitCBF( tinS& tinP , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamC& sadamP )" ,
0x00000918 , "\0\0\0\0voidT privilegesCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP )" ,
0x00000919 , "\0\0\0\0voidT peanutCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP )" ,
0x0000091a , "\0\0\0\0voidT logoutCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP )" ,
0x0000091b , "\0\0\0\0voidT loginCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP )" ,
0x0000091c , "\0\0\0\0voidT replaceOwnerEmailCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP )" ,
0x0000091d , "\0\0\0\0voidT newRelayEmailCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP )" ,
0x0000091e , "\0\0\0\0voidT newLoginCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP )" ,
0x0000091f , "\0\0\0\0voidT downloadMenuCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP )" ,
0x00000920 , "\0\0\0\0voidT woTimePasscodeCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP )" ,
0x00000921 , "\0\0\0\0voidT obeyLoginViaEmailLinkCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP )" ,
0x00000922 , "\0\0\0\0voidT obeyEarnMoneyLinkCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP )" ,
0x00000923 , "\0\0\0\0voidT obeyEmailLinkReplaceOwnerEmailCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP )" ,
0x00000924 , "\0\0\0\0voidT earnMoneyLinkCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP )" ,
0x00000925 , "\0\0\0\0voidT loginViaEmailLinkCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP )" ,
0x00000926 , "\0\0\0\0voidT slideShowTellinItCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP )" ,
0x00000927 , "\0\0\0\0voidT slideShowRegretsCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP )" ,
0x00000928 , "\0\0\0\0voidT helpCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP )" ,
0x00000929 , "\0\0\0\0voidT freebiesCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP )" ,
0x0000092a , "\0\0\0\0voidT emailZipCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP )" ,
0x0000092b , "\0\0\0\0voidT menuOfReportsCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP )" ,
0x0000092c , "\0\0\0\0voidT doCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP )" ,
0x0000092d , "\0\0\0\0voidT calendarCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP )" ,
0x0000092e , "\0\0\0\0voidT obeyDirectoryClickCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP )" ,
0x0000092f , "\0\0\0\0voidT secretLoginCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP )" ,
0x00000930 , "\0\0\0\0voidT noteFromPaypalCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP )" ,
0x00000931 , "\0\0\0\0countT cMoneyF( tinS& tinP , etherC& etherP , const strokeS* const psttP )" ,
0x00000932 , "\0\0\0\0voidT homeOld20190809CBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP )" ,
0x00000933 , "\0\0\0\0voidT writeBookSurveyF( tinS& tinP , etherC& etThread , booksC& booksP , const strokeS* const psttkP , const strokeS* const psttvP , textC** const pptSurveyQ1KeyP , const countT cq1KeysP , textC** const pptSurveyQ1ValueP , const countT cq1ValuesP , textC** const pptSurveyQ2KeyP , const countT cq2KeysP , textC** const pptSurveyQ2ValueP , const countT cq2ValuesP )" ,
0x00000934 , "\0\0\0\0voidT obeyWorkerPictureClickCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP )" ,
0x00000935 , "\0\0\0\0countT queryIdAccountFromEmailF( tinS& tinP , const strokeS* const psttP )" ,
0x00000936 , "\0\0\0\0voidT queryEmailFromIdAccountF( tinS& tinP , strokeS*& psttP , const countT cPassAccountP )" ,
0x00000937 , "\0\0\0\0voidT myAccountSettingsCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP )" ,
0x00000938 , "\0\0\0\0voidT myAccountMoneyCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP )" ,
0x00000939 , "\0\0\0\0sCountT listingInspectListsCBF( tinS& tinP , aptC& aptP , listWalkArgOldS& argP , const countT* pczListNameP )" ,
0x0000093a , "\0\0\0\0voidT listingAttachListCBF( tinS& tinP , aptC& aptP , countT& idNameDefaultLathP , listWalkArgOldS& argP , const countT* pczListNameP )" ,
0x0000093b , "\0\0\0\0flagsT listWalkDeleteAllCBF( tinS& tinP )" ,
0x0000093c , "\0\0\0\0flagsT listWalkAttachListIfCBF( tinS& tinP )" ,
0x0000093d , "\0\0\0\0flagsT listWalkQueryFromTextCBF( tinS& tinP )" ,
0x0000093e , "\0\0\0\0flagsT listWalkQueryFromIdCBF( tinS& tinP )" ,
0x0000093f , "\0\0\0\0flagsT listWalkForgetTextCBF( tinS& tinP )" ,
0x00000940 , "\0\0\0\0flagsT listWalkForgetIdCBF( tinS& tinP )" ,
0x00000941 , "\0\0\0\0flagsT listWalkFieldEditCBF( tinS& tinP )" ,
0x00000942 , "\0\0\0\0flagsT listWalkLintCBF( tinS& tinP )" ,
0x00000943 , "\0\0\0\0flagsT listWalkEnumerateCBF( tinS& tinP )" ,
0x00000944 , "\0\0\0\0boolT gossipCBF( tinS& tinP , assViewC& assViewP , associateC& vieweeP , associateC& viewerP , const countT cArgP , staqC* const pStqWalkerP )" ,
0x00000945 , "\0\0\0\0voidT unregisterObsoleteDriversF( tinS& tinP , thirdC& thirdP , const osTextT* const postNameNewP )" ,
0x00000946 , "\0\0\0\0voidT tinWalkerF( tinS& tinP , tinS& tinFocusP , countT& cArgP )" ,
0x00000947 , "\0\0\0\0voidT writeHtmlFilesF( tinS& tinP , etherC& ether , const boolT bOneFileP , const strokeS* const psttLikeLocalP , const strokeS* const psttLikeP , const strokeS* const psttTitleP , const strokeS* const psttOldCopyrightP , htmlS*& pHtmlRootP , const countT cSonsP , countT cOpenTriesP )" ,
0x00000948 , "\0\0\0\0voidT newSonF( tinS& tinP , etherC& ether , const htmlS* const pHtmlP , const strokeS* const psttP , htmlS*& pHtmlRootP )" ,
0x00000949 , "\0\0\0\0voidT rptTreeF( tinS& tinP , etherC& ether , htmlS* pHtmlP , countT& idLevelP )" ,
0x0000094a , "\0\0\0\0voidT cellScanCalendarF( tinS& tinP , etherC& ether , strokeS*& psttP , const countT oScanP , const countT oDayP , const countT oTodayP , const countT cColP , countT time2P , strokeS** ppsttDayOfWeekP , strokeS** ppsttMonthP )" ,
0x0000094b , "\0\0\0\0voidT cellScanClockF( tinS& tinP , etherC& ether , strokeS*& psttP , const countT oScanP , const countT oTickP , const countT oTickNowP , const countT cColP )" ,
0x0000094c , "\0\0\0\0voidT translateStateDrivenServerF( tinS& tinP , etherC& etherP , byteT* pbToP , countT cbToP , const byteT* pbFromP , countT cbFromP , byteT* pbToVaryingP , countT cbToVaryingP , const byteT* pbFromVaryingP , countT cbFromVaryingP , countT cArgP )" ,
0x0000094d , "\0\0\0\0voidT writeLineSnipF( tinS& tinP , etherC& etherP , strokeS* psttIdiP , strokeS* psttIdModuleP , const strokeS* const psttP )" ,
0x0000094e , "\0\0\0\0voidT pushLabelsF( tinS& tinP , etherC& ether , stackC& stP , countT& offoP , count01T& cbDataP , soulC& soulP , switchC& swOffP , strokeS*& psttlP )" ,
0x0000094f , "\0\0\0\0voidT endsF( tinS& tinP , etherC& ether , countT& idcInP , countT& idrInP , countT& idcOutP , countT& idrOutP , const countT cP , const countT idColP , const countT idRowP , const countT cColP , const countT cRowP , const countT cHandP , const countT idHandP )" ,
0x00000950 , "\0\0\0\0voidT _export getStrokeS( strokeS& sttP , const byteT* const pbP , countT& offbiP )" ,
0x00000951 , "\0\0\0\0voidT adjustOldPairF( countT& idP , plateS*& ppP , countT idSlotTargetP , const countT idActionP )" ,
0x00000952 , "\0\0\0\0voidT translateStateDefaultF( tinS& tinP , etherC& etherP , byteT* pbToP , countT cbToP , const byteT* pbFromP , countT cbFromP , byteT* pbToVaryingP , countT cbToVaryingP , const byteT* pbFromVaryingP , countT cbFromVaryingP , countT cArgP )" ,
0x00000953 , "\0\0\0\0voidT bodyF( tinS& tinP , etherC& etherP , strokeS*& psttP , const strokeS& sttP )" ,
0x00000954 , "\0\0\0\0voidT joyPosF( tinS& tinP , measureT* pmxP , const countT cmxP , const countT idJoyP )" ,
0x00000955 , "\0\0\0\0voidT homeOldCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP )" ,
0x00000956 , "\0\0\0\0voidT push_pstt_F( tinS& tinP , stackC* const pStkP , soulC& sInP )" ,
0x00000957 , "\0\0\0\0countT highDigitF( tinS& tinP , etherC& ether , countT& digitP , countT& fractionP , const countT radixP , countT cBitsMaxP , const boolT bHighP )" ,
0x00000958 , "\0\0\0\0countT cbpdF( const countT radixP )" ,
0x00000959 , "\0\0\0\0countT strIdNewF( const countT* const pczP , const countT findThisP )" ,
0x0000095a , "\0\0\0\0countT subtract_nicNameC_F( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P )" ,
0x0000095b , "\0\0\0\0countT subtractByteStringsF( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P )" ,
0x0000095c , "\0\0\0\0countT subtractBlobsF( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P )" ,
0x0000095d , "\0\0\0\0countT subtract_timeS_F( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P )" ,
0x0000095e , "\0\0\0\0countT subtractCountStringsF( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P )" ,
0x0000095f , "\0\0\0\0countT subtract_plateC_F( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P )" ,
0x00000960 , "\0\0\0\0countT subtractF( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P )" ,
0x00000961 , "\0\0\0\0countT subtractLB_countT_F( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P )" ,
0x00000962 , "\0\0\0\0countT subtractLB_countT_ptr_F( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P )" ,
0x00000963 , "\0\0\0\0countT subtractLB_nicNameC_ptr_F( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P )" ,
0x00000964 , "\0\0\0\0countT subtractLB_countT_ptr_lenPrefixed_F( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P )" ,
0x00000965 , "\0\0\0\0countT subtractLB_strokeS_ptr_F( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P )" ,
0x00000966 , "\0\0\0\0countT subtractLB_blob_ptr_F( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P )" ,
0x00000967 , "\0\0\0\0countT subtractLB_osTextT_ptr_F( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P )" ,
0x00000968 , "\0\0\0\0countT subtractLB_ptrStrokeS_ptr_F( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P )" ,
0x00000969 , "\0\0\0\0countT subtractLB_ptrStrokeS_ptr_lenPrefixed_F( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P )" ,
0x0000096a , "\0\0\0\0countT subtractLB_plateC_ptr_F( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P )" ,
0x0000096b , "\0\0\0\0countT subtract1220008F( tinS& tinP , countT& pEtherP , countT& c1P , countT& c2P , countT& c3P )" ,
0x0000096c , "\0\0\0\0countT dtTellCopyDoneF( countT c_thisP )" ,
0x0000096d , "\0\0\0\0countT ctTellCopyDoneF( countT c_thisP )" ,
0x0000096e , "\0\0\0\0countT ccF( tinS& tinP , etherC& ether , switchC& swP )" ,
0x0000096f , "\0\0\0\0countT subtractBlobs_sKeyF( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P )" ,
0x00000970 , "\0\0\0\0countT subtractLB_soulC_ptr_F( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P )" ,
0x00000971 , "\0\0\0\0boolT bHitF( const countT idP , const countT* const pcP )" ,
0x00000972 , "\0\0\0\0countT _export subtractStringsInJotF( tinS& tinP , countT& pEther , countT& c1P , countT& c2P , countT& c3P )" ,
0x00000973 , "\0\0\0\0flagsT flagsUpF( const countT idrMeP , const countT idrToP , const countT idrMaxP )" ,
0x00000974 , "\0\0\0\0sCountT strComparePrivateF( const strokeS* const pstt1P , const strokeS* const pstt2P )" ,
0x00000975 , "\0\0\0\0htmlS* pHtmlF( tinS& tinP , etherC& ether , const strokeS* const psttNameP , htmlS*& pHtmlRootP )" ,
0x00000976 , "\0\0\0\0boolT renderHandlerIdeaFarmLogoF( tinS& tinP , etherC& ether , windowOldC& wP , const countT cArgP )" ,
0x00000977 , "\0\0\0\0TASK( tmGrabTabF )" ,
0x00000978 , "\0\0\0\0voidT vspDatumCountCBF( tinS& tinP , byteT* pbvspP , countT idEventP , countT cRefOldP , countT cRefNewLaterP , countT cArgP )" ,
0x00000979 , "\0\0\0\0voidT vspDatumCountStrzCBF( tinS& tinP , byteT* pbvspP , countT idEventP , countT cRefOldP , countT cRefNewLaterP , countT cArgP )" ,
0x0000097a , "\0\0\0\0voidT vspDatumBlobCBF( tinS& tinP , byteT* pbvspP , countT idEventP , countT cRefOldP , countT cRefNewLaterP , countT cArgP )" ,
0x0000097b , "\0\0\0\0voidT vspDatumListingCBF( tinS& tinP , byteT* pbvspP , countT idEventP , countT cRefOldP , countT cRefNewLaterP , countT cArgP )" ,
0x0000097c , "\0\0\0\0boolT diskWalkRenameForArchivalCBF( tinS& tinP , countT& cDirsP , countT& cFilesP , const boolT& bQuitP , const osTextT* const postNameP , countT* const pcArgP , const countT* const pModuloFilesP , const countT* const pModuloDirsP )" ,
0x0000097d , "\0\0\0\0TASK( tmPoolFlushF )" ,
0x0000097e , "\0\0\0\0TASK( tmPutEditionF )" ,
0x0000097f , "\0\0\0\0TASK( tmDisplayF )" ,
0x00000980 , "\0\0\0\0TASK( tmCioF )" ,
0x00000981 , "\0\0\0\0TASK( tmRelayBlowTeatF )" ,
0x00000982 , "\0\0\0\0voidT _export logTallyIF( countT tallyP , countT idLineP , countT idiFileP , boolT bFailP , countT idTallyP , const osTextT* const postP )" ,
0x00000983 , "\0\0\0\0voidT _export emitWordIF( tinS& tinP , const countT idLineP , const countT idFileP )" ,
0x00000984 , "\0\0\0\0voidT _export emitWordIF( const countT idLineP , const countT idFileP )" ,
0x00000985 , "\0\0\0\0voidT _export unwrapCircleIF( tinS& tinP , byteT* const pbOutP , const countT cbOutP , const byteT* const pbInP , const countT cbInP , const countT offCursorP )" ,
0x00000986 , "\0\0\0\0voidT _export emitWordsIF( tinS& tinP , const countT idLineP , const countT idFileP , const countT* const pcSuffixP , const countT ccSuffixP )" ,
0x00000987 , "\0\0\0\0flagsT listWalkResetIndexBitsCBF( tinS& tinP )" ,
0x00000988 , "\0\0\0\0voidT emailZipConfirmationCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP )" ,
0x00000989 , "\0\0\0\0voidT homeCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP )" ,
0x0000098a , "\0\0\0\0voidT rebootCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttUrlP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP )" ,
0x0000098b , "\0\0\0\0VERYsMARTpOINTERfUNCTIONdEFS, SMARTpOINTERfUNCTIONdEFS" ,
0x0000098c , "\0\0\0\0VARIABLEfUNCTIONdEFS" ,
0x0000098d , "\0\0\0\0NEWdELcLASS (all invocations)" ,
0x0000098e , "\0\0\0\0NEWdELcLASS (all invocations)" ,
0x0000098f , "\0\0\0\0NEWdELcLASS (all invocations)" ,
0x00000990 , "\0\0\0\0NEWdELcLASS (all invocations)" ,
0x00000991 , "\0\0\0\0NEWdELcLASS (all invocations)" ,
0x00000992 , "\0\0\0\0NEWdELcLASS (all invocations)" ,
0x00000993 , "\0\0\0\0NEWdELcLASS (all invocations)" ,
0x00000994 , "\0\0\0\0NEWdELcLASS (all invocations)" ,
0x00000995 , "\0\0\0\0countT thirdC::c_atoiIF( tinS& tinP , const osTextT* const postP )" ,
0x00000996 , "\0\0\0\0sCountT thirdC::c_memcmpIF( tinS& tinP , const byteT* const pb1P , const byteT* const pb2P , const countT cbP )" ,
0x00000997 , "\0\0\0\0voidT thirdC::c_memcpyIF( tinS& tinP , byteT* const pbToP , const byteT* const pbFromP , const countT cbP )" ,
0x00000998 , "\0\0\0\0voidT thirdC::c_memsetIF( tinS& tinP , byteT* const pbP , const countT cbP , const byteT valueP )" ,
0x00000999 , "\0\0\0\0osTextT* thirdC::c_strcatIF( tinS& tinP , osTextT* const post1P  , const osTextT* const post2P )" ,
0x0000099a , "\0\0\0\0osTextT* thirdC::c_strchrIF( tinS& tinP , const osTextT* const postP , const osTextT ostP )" ,
0x0000099b , "\0\0\0\0sCountT thirdC::c_strcmpIF( tinS& tinP , const byteT* const pb1P , const byteT* const pb2P , const countT cbP )" ,
0x0000099c , "\0\0\0\0osTextT* thirdC::c_strcpyIF( tinS& tinP , osTextT* const post1P  , const osTextT* const post2P )" ,
0x0000099d , "\0\0\0\0countT thirdC::c_strlenIF( tinS& tinP , const osTextT* const postP )" ,
0x0000099e , "\0\0\0\0voidT thirdC::c_strncpyIF( tinS& tinP , osTextT* const post1P , const osTextT* const post2P , countT costa1P )" ,
0x0000099f , "\0\0\0\0osTextT* thirdC::c_strrchrIF( tinS& tinP , const osTextT* const postP , const osTextT ostP )" ,
0x000009a0 , "\0\0\0\0osTextT* thirdC::c_strstrIF( tinS& tinP , const osTextT* const postBigP , const osTextT* const postSmallP )" ,
0x000009a1 , "\0\0\0\0voidT thirdC::c_strlwrIF( tinS& tinP , osTextT* postP )" ,
0x000009a2 , "\0\0\0\0voidT thirdC::c_struprIF( tinS& tinP , osTextT* const postP )" ,
0x000009a3 , "\0\0\0\0countT thirdC::msFromTimeIF( tinS& tinP , const countT time1P , const sCountT time2P )" ,
0x000009a4 , "\0\0\0\0voidT thirdC::c_zReplaceIF( tinS& tinP , osTextT* const postP , const osTextT ostOldP , const osTextT ostNewP )" ,
0x000009a5 , "\0\0\0\0voidT thirdC::dosCloseMutexSemIF( tinS& tinP , handleC& handleP )" ,
0x000009a6 , "\0\0\0\0voidT thirdC::dosCreateMutexSemIF( tinS& tinP , handleC& handleP , boolT& bCreatorP , const osTextT* const postP , const boolT bGrabbedP )" ,
0x000009a7 , "\0\0\0\0voidT thirdC::dosDeleteIF( tinS& tinP , const osTextT* const postP , countT cTriesP )" ,
0x000009a8 , "\0\0\0\0voidT thirdC::dosOpenIF( tinS& tinP , handleC& handleP , countT& idResultP , const osTextT* const postP , const countT idAccessP , const countT idShareP , const flagsT flagsDetailsP , const countT idHowP , const flagsT flagsAttributeP , const countT cbP , countT cTriesP )" ,
0x000009a9 , "\0\0\0\0voidT thirdC::dosQueryFileInfoIF( tinS& tinP , infoFileS*& pInfoFileP , const handleC& handleP )" ,
0x000009aa , "\0\0\0\0countT thirdC::dosQuerySysInfoMaxPathLengthIF( tinS& tinP )" ,
0x000009ab , "\0\0\0\0voidT thirdC::dosWriteIF( tinS& tinP , const handleC& handleP , const byteT* const pbP , const countT cbP )" ,
0x000009ac , "\0\0\0\0voidT thirdC::dosReleaseMutexSemIF( tinS& tinP , const handleC& handleP )" ,
0x000009ad , "\0\0\0\0voidT thirdC::dosRequestMutexSemIF( tinS& tinP , const handleC& handleP )" ,
0x000009ae , "\0\0\0\0voidT thirdC::dosSleepIF( tinS& tinP , const countT timeP , const countT timeNapP )" ,
0x000009af , "\0\0\0\0voidT thirdC::s_setupF( tinS& tinP )" ,
0x000009b0 , "\0\0\0\0voidT thirdC::s_shutdownIF( tinS& tinP )" ,
0x000009b1 , "\0\0\0\0voidT thirdC::dosAllocMemIF( tinS& tinP , voidT*& pvP , const countT cbP )" ,
0x000009b2 , "\0\0\0\0voidT thirdC::dosBeepIF( tinS& tinP , const countT hzP , const countT timeP )" ,
0x000009b3 , "\0\0\0\0voidT thirdC::dosFreeMemIF( tinS& tinP , voidT*& pvP )" ,
0x000009b4 , "\0\0\0\0countT thirdC::secondsFromTimeIF( tinS& tinP , const countT time1P , const sCountT time2P )" ,
0x000009b5 , "\0\0\0\0voidT thirdC::dosErrorMsgBox_offIF( tinS& tinP )" ,
0x000009b6 , "\0\0\0\0voidT thirdC::dosErrorMsgBox_onIF( tinS& tinP )" ,
0x000009b7 , "\0\0\0\0boolT thirdC::dosOpenEventSem2IF( tinS& tinP , handleC& handleP , const osTextT* const postP , const boolT fGivenP )" ,
0x000009b8 , "\0\0\0\0voidT thirdC::dosCloseEventSem2IF( tinS& tinP , handleC& handleP )" ,
0x000009b9 , "\0\0\0\0flagsT thirdC::fileAttrOsFromIfIF( tinS& tinP , flagsT iffP )" ,
0x000009ba , "\0\0\0\0flagsT thirdC::fileAttrIfFromOsIF( tinS& tinP , flagsT osfP )" ,
0x000009bb , "\0\0\0\0countT thirdC::openResultIfFromOsIF( tinS& tinP , countT osrP )" ,
0x000009bc , "\0\0\0\0countT thirdC::openHowOsFromIfIF( tinS& tinP , countT ifcP )" ,
0x000009bd , "\0\0\0\0countT thirdC::openAccessOsFromIfIF( tinS& tinP , countT ifcP )" ,
0x000009be , "\0\0\0\0countT thirdC::openShareOsFromIfIF( tinS& tinP , countT ifcP )" ,
0x000009bf , "\0\0\0\0countT thirdC::openDetailsOsFromIfIF( tinS& tinP , countT iffP )" ,
0x000009c0 , "\0\0\0\0voidT thirdC::c_beginthreadIF( tinS& tinP , countT& tidP , voidT* const tmFP , voidT* pvP , const countT cbStackP , const flagsT flagsP )" ,
0x000009c1 , "\0\0\0\0voidT thirdC::dosPostEventSem2IF( tinS& tinP , const handleC& handleP )" ,
0x000009c2 , "\0\0\0\0voidT thirdC::dosWaitEventSem2IF( tinS& tinP , const handleC& handleP )" ,
0x000009c3 , "\0\0\0\0voidT thirdC::dosResetEventSem2IF( tinS& tinP , const handleC& handleP )" ,
0x000009c4 , "\0\0\0\0voidT thirdC::dosAllocSharedMemIF( tinS& tinP , handleC& handleP , const osTextT* const postP , const handleC* phFileP , const countT cbP , const countT idMemorySpaceP , const flagsT flagsP )" ,
0x000009c5 , "\0\0\0\0voidT thirdC::dosGetSharedMemIF( tinS& tinP , handleC& handleP , const osTextT* const postP , const countT idMemorySpaceP , const flagsT flagsP )" ,
0x000009c6 , "\0\0\0\0voidT thirdC::osTimeAddIF( tinS& tinP , countT& timeA1P , sCountT& timeA2P , const countT timeB1P , const sCountT timeB2P )" ,
0x000009c7 , "\0\0\0\0voidT thirdC::osTimeFromOldTimeIF( tinS& tinP , countT& time1P , sCountT& time2P , sCountT yP , countT mP , countT dP , countT hhP , countT mmP , countT ssP , countT msP , const flagsT flagsP )" ,
0x000009c8 , "\0\0\0\0countT thirdC::c_systemIF( tinS& tinP , osTextT* postP )" ,
0x000009c9 , "\0\0\0\0voidT thirdC::timeFromMsIF( tinS& tinP , countT& time1P , sCountT& time2P , const countT msP )" ,
0x000009ca , "\0\0\0\0voidT thirdC::timeFromSecondsIF( tinS& tinP , countT& time1P , sCountT& time2P , const countT sP )" ,
0x000009cb , "\0\0\0\0countT thirdC::dosPriorityIF( tinS& tinP , const countT idP )" ,
0x000009cc , "\0\0\0\0voidT thirdC::dosWriteStdOutIF( tinS& tinP , const osTextT ostP )" ,
0x000009cd , "\0\0\0\0voidT thirdC::osDoNothingIF( tinS& tinP )" ,
0x000009ce , "\0\0\0\0osTextT thirdC::osIdIF( tinS& tinP , const boolT bFileP )" ,
0x000009cf , "\0\0\0\0countT thirdC::dosPriorityIF( tinS& tinP )" ,
0x000009d0 , "\0\0\0\0countT& thirdC::os_cAllKidThreadsI_IF( tinS& tinP )" ,
0x000009d1 , "\0\0\0\0voidT thirdC::dosSleepWinkIF( tinS& tinP )" ,
0x000009d2 , "\0\0\0\0countT thirdC::dosPriorityProcessIF( tinS& tinP , const countT idP )" ,
0x000009d3 , "\0\0\0\0voidT thirdC::c_itoaIF( tinS& tinP , osTextT* const postP , const countT costP , sCountT valueP , countT radixP )" ,
0x000009d4 , "\0\0\0\0voidT thirdC::dosSetFilePtrIF( tinS& tinP , const handleC& handleP , const flagsT flagsP , count2S& c2P )" ,
0x000009d5 , "\0\0\0\0voidT thirdC::dosSleepRawIF( tinS& tinP , countT cP )" ,
0x000009d6 , "\0\0\0\0voidT thirdC::c_itoaIF( osTextT* const postP , countT valueP , const osTextT ostPadP )" ,
0x000009d7 , "\0\0\0\0countT thirdC::winDispatchMessagesIF( tinS& tinP )" ,
0x000009d8 , "\0\0\0\0countT thirdC::winDefaultMessageHandlerIF( tinS& tinP , const countT oshWindowP , const countT idCmdP , const countT p1P , const countT p2P )" ,
0x000009d9 , "\0\0\0\0voidT thirdC::dosPushConsoleHandlerIF( tinS& tinP , handleC& handleP , voidT* pConsoleHandlerFP )" ,
0x000009da , "\0\0\0\0countT thirdC::dosPriorityProcessIF( tinS& tinP )" ,
0x000009db , "\0\0\0\0voidT thirdC::dosFileDeleteIfCorruptIF( tinS& tinP , const osTextT* const postP )" ,
0x000009dc , "\0\0\0\0voidT thirdC::dosBeepSingDigitsIF( tinS& tinP , const countT cP )" ,
0x000009dd , "\0\0\0\0countT thirdC::c_strlenIF( tinS& tinP , const countT* const pczP )" ,
0x000009de , "\0\0\0\0voidT thirdC::osFireIF( tinS& tinP , const boolT bDoNotComeBackP )" ,
0x000009df , "\0\0\0\0voidT thirdC::dosReadIF( tinS& tinP , byteT* const pbP , countT& cbP , const handleC& handleP , boolT fStillHungryIsOkP )" ,
0x000009e0 , "\0\0\0\0voidT thirdC::dosReadIF( tinS& tinP , byteT* const pbP , countT& cbP , const osTextT* const postP )" ,
0x000009e1 , "\0\0\0\0voidT thirdC::dosSleepRWinkIF( tinS& tinP )" ,
0x000009e2 , "\0\0\0\0voidT thirdC::thirdBreakIF( tinS& tinP )" ,
0x000009e3 , "\0\0\0\0countT thirdC::osMessageBoxIF( tinS& tinP , const osTextT* const postP , const osTextT* const postTitleP , const flagsT flagsButtonsP , const flagsT flagButtonSelectedP )" ,
0x000009e4 , "\0\0\0\0voidT thirdC::dosCloseThreadResourcesIF( tinS& tinP )" ,
0x000009e5 , "\0\0\0\0voidT thirdC::dosTellMonitorIF( tinS& tinP , const tellC& tellP )" ,
0x000009e6 , "\0\0\0\0countT thirdC::third_cThirdObjectsI_IF( tinS& tinP )" ,
0x000009e7 , "\0\0\0\0tinS& thirdC::third_tinS_ref_IF( voidT )" ,
0x000009e8 , "\0\0\0\0thirdC& thirdC::thPrimeIF( tinS& tinP )" ,
0x000009e9 , "\0\0\0\0boolT thirdC::thPrimeExistsIF( tinS& tinP )" ,
0x000009ea , "\0\0\0\0voidT thirdC::dosOpenSharedMemIF( tinS& tinP , handleC& handleP , flagsT& flagsResultP , const osTextT* const postP , const handleC* phFileP , const countT cbP , const countT idHowP , const countT idMemorySpaceP , const flagsT flagsP )" ,
0x000009eb , "\0\0\0\0flagsT& thirdC::third_flagsModeProcess1I_IF( tinS& tinP )" ,
0x000009ec , "\0\0\0\0countT& thirdC::os_cAllOrphanThreadsI_IF( tinS& tinP )" ,
0x000009ed , "\0\0\0\0voidT thirdC::dosReadProcessMemoryIF( tinS& tinP , byteT* const pbP , const countT cbP , boolT& bOkP , const voidT* const pvFromP , const countT osPidP )" ,
0x000009ee , "\0\0\0\0voidT thirdC::dosWriteProcessMemoryIF( tinS& tinP , boolT& bOkP , voidT* const pvToP , const countT osPidP , byteT* const pbP , const countT cbP )" ,
0x000009ef , "\0\0\0\0countT thirdC::strBodyLengthIF( tinS& tinP , const countT* pcP )" ,
0x000009f0 , "\0\0\0\0countT& thirdC::third_idProcessOldI_IF( tinS& tinP )" ,
0x000009f1 , "\0\0\0\0countT thirdC::osTimeTicksSinceBootIF( voidT )" ,
0x000009f2 , "\0\0\0\0const osTextT* thirdC::dosGetCommandLineIF( tinS& tinP )" ,
0x000009f3 , "\0\0\0\0voidT thirdC::dosSetCurrentDirIF( tinS& tinP , const osTextT* const postP )" ,
0x000009f4 , "\0\0\0\0voidT thirdC::dosGetCurrentDirIF( tinS& tinP , osTextT* const postP , countT& costaP )" ,
0x000009f5 , "\0\0\0\0voidT thirdC::thirdFireImpersonateMonitorIF( tinS& tinP )" ,
0x000009f6 , "\0\0\0\0voidT thirdC::osOpenProcessIF( tinS& tinP , handleC& hProcessP , const countT osPidP )" ,
0x000009f7 , "\0\0\0\0voidT thirdC::c_memcpyIF( const poopC& poopP , byteT* const pbToP , const byteT* const pbFromP , const countT cbP )" ,
0x000009f8 , "\0\0\0\0voidT thirdC::osDoNothingLoopIF( tinS& tinP , countT cToDoP , const countT msSleepP )" ,
0x000009f9 , "\0\0\0\0const timeS& thirdC::thirdTimeNowIF( tinS& tinP )" ,
0x000009fa , "\0\0\0\0voidT thirdC::dosWriteStdOutIF( tinS& tinP , const osTextT* const postP )" ,
0x000009fb , "\0\0\0\0boolT thirdC::win_bWindowCanBeCreatedIF( tinS& tinP )" ,
0x000009fc , "\0\0\0\0voidT thirdC::winDestroyWindowClassIF( tinS& tinP , const osTextT* const postOldClassP )" ,
0x000009fd , "\0\0\0\0voidT thirdC::thirdImpotenceHandlerIF( tinS& tinP , const ifcImpotenceHandlerFT pifcImpotenceHandlerFIP , const countT ifcImpotenceHandlerArgIP )" ,
0x000009fe , "\0\0\0\0voidT thirdC::osProcessIdPhaseAdamIF( tinS& tinP , const countT idPhaseP )" ,
0x000009ff , "\0\0\0\0countT thirdC::osProcessIdPhaseAdamIF( tinS& tinP )" ,
0x00000a00 , "\0\0\0\0flagsT thirdC::third_flagsProcessStateI_IF( tinS& tinP )" ,
0x00000a01 , "\0\0\0\0voidT thirdC::third_flagsProcessStateI_IF( tinS& tinP , const flagsT flagsP , const boolT bOnP )" ,
0x00000a02 , "\0\0\0\0voidT thirdC::winMoveIF( tinS& tinP , const handleC& hDrawP , const measureT mIdColP , const measureT mIdRowP )" ,
0x00000a03 , "\0\0\0\0voidT thirdC::winLineIF( tinS& tinP , const handleC& hDrawP , const measureT mIdColP , const measureT mIdRowP , const countT colorP , const flagsT flagsP )" ,
0x00000a04 , "\0\0\0\0osTextT* thirdC::c_strcatIF( osTextT* const post1P  , const osTextT* const post2P )" ,
0x00000a05 , "\0\0\0\0voidT thirdC::c_strncpyIF( osTextT* const post1P , const osTextT* const post2P , countT costa1P )" ,
0x00000a06 , "\0\0\0\0osTextT* thirdC::c_strcpyIF( osTextT* const post1P  , const osTextT* const post2P )" ,
0x00000a07 , "\0\0\0\0voidT thirdC::osMessageBoxIF( const osTextT* const postP , const osTextT* const postTitleP )" ,
0x00000a08 , "\0\0\0\0countT thirdC::c_strlenIF( const osTextT* const postP )" ,
0x00000a09 , "\0\0\0\0tinS& thirdC::tinVeryEarlyLateMain_IF( voidT )" ,
0x00000a0a , "\0\0\0\0voidT thirdC::dosWriteStdOutIF( const osTextT* const postP )" ,
0x00000a0b , "\0\0\0\0voidT thirdC::osBlammoIF( tinS& tinP )" ,
0x00000a0c , "\0\0\0\0countT* thirdC::third_pcDebugI_IF( tinS& tinP )" ,
0x00000a0d , "\0\0\0\0boolT thirdC::ifcCellIsAliveIF( tinS& tinP , const countT idAdamP , const osTextT* const postSuffixP )" ,
0x00000a0e , "\0\0\0\0voidT thirdC::c_itoaForeignIF( osTextT* const postP , countT valueP , const osTextT ostPadP )" ,
0x00000a0f , "\0\0\0\0voidT thirdC::handleCloseIF( handleC& handleP )" ,
0x00000a10 , "\0\0\0\0flagsT& thirdC::third_flCtI_IF( tinS& tinP )" ,
0x00000a11 , "\0\0\0\0flagsT& thirdC::third_flDtI_IF( tinS& tinP )" ,
0x00000a12 , "\0\0\0\0voidT thirdC::thirdWriteToCyrcleOldIF( tinS& tinP , napkinC& napkinP , const byteT* const pbP , countT cbP )" ,
0x00000a13 , "\0\0\0\0flagsT& thirdC::third_flagsModeProcess2I_IF( tinS& tinP )" ,
0x00000a14 , "\0\0\0\0voidT thirdC::dosRaiseExceptionIF( tinS& tinP , const countT idExceptionP , const countT* const pcArgsP , const countT ccArgsP )" ,
0x00000a15 , "\0\0\0\0byteT* thirdC::c_memmemIF( tinS& tinP , const byteT* const pbBigP , const countT cbBigP , const byteT* const pbSmallP , const countT cbSmallP )" ,
0x00000a16 , "\0\0\0\0voidT thirdC::osTimeOldUtcToOldLocalF( tinS& tinP , countT& msLP , countT& ssLP , countT& mmLP , countT& hhLP , countT& dLP , countT& mLP , sCountT& yLP , countT& dowLP , const countT msUP , const countT ssUP , const countT mmUP , const countT hhUP , const countT dUP , const countT mUP , const sCountT yUP , const countT dowUP , const countT idZoneP )" ,
0x00000a17 , "\0\0\0\0voidT thirdC::osTimeOldUtcFromOldLocalF( tinS& tinP , countT& msUP , countT& ssUP , countT& mmUP , countT& hhUP , countT& dUP , countT& mUP , sCountT& yUP , countT& dowUP , const countT msLP , const countT ssLP , const countT mmLP , const countT hhLP , const countT dLP , const countT mLP , const sCountT yLP , const countT dowLP , const countT idZoneP )" ,
0x00000a18 , "\0\0\0\0voidT thirdC::winRectangleDeskClientF( tinS& tinP , countT& idColLowP , countT& idRowLowP , countT& idColHighP , countT& idRowHighP )" ,
0x00000a19 , "\0\0\0\0countT thirdC::winMessageHandlerWorkF( const countT oshWindowP , const countT idCmdP , const countT p1P , const countT p2P )" ,
0x00000a1a , "\0\0\0\0voidT thirdC::osDisplaySizeF( tinS& tinP , countT& cColsP , countT& cRowsP )" ,
0x00000a1b , "\0\0\0\0voidT thirdC::winAdjustWindowPositionF( tinS& tinP , sCountT& idColP , sCountT& idRowP , countT& cColsP , countT& cRowsP )" ,
0x00000a1c , "\0\0\0\0countT thirdC::winIdMsgUserIF( tinS& tinP )" ,
0x00000a1d , "\0\0\0\0measureT thirdC::winOsRowIF( const measureT mIfRowP , const measureT mRowsP )" ,
0x00000a1e , "\0\0\0\0measureT thirdC::winIfRowIF( const measureT mOsRowP , const measureT mRowsP )" ,
0x00000a1f , "\0\0\0\0measureT thirdC::winOsRowIF( const measureT mIfRowP )" ,
0x00000a20 , "\0\0\0\0measureT thirdC::winIfRowIF( const measureT mOsRowP )" ,
0x00000a21 , "\0\0\0\0measureT thirdC::winOsColIF( const measureT mIfColP )" ,
0x00000a22 , "\0\0\0\0measureT thirdC::winIfColIF( const measureT osColP )" ,
0x00000a23 , "\0\0\0\0countT thirdC::osClockIF( tinS& tinP )" ,
0x00000a24 , "\0\0\0\0countT thirdC::osTimeIF( voidT )" ,
0x00000a25 , "\0\0\0\0measure04T thirdC::mathLogIF( tinS& tinP , measure04T mP )" ,
0x00000a26 , "\0\0\0\0countT thirdC::osOpenProcessIF( voidT )" ,
0x00000a27 , "\0\0\0\0countT thirdC::osOpenProcessIF( const countT osPidP )" ,
0x00000a28 , "\0\0\0\0voidT thirdC::osHandleCloseIF( countT& oshP )" ,
0x00000a29 , "\0\0\0\0countT thirdC::osOpenHandleCritSecIF( tinS& tinP )" ,
0x00000a2a , "\0\0\0\0voidT thirdC::winBitBltIF( tinS& tinP , const countT idTypePaintP , const handleC& hDrawToP , const handleC& hDrawFromP , const measureT mColsP , measureT mRowsP , const measureT mIdColToP , const measureT mIdRowToP , measureT mIdColFromP , measureT mIdRowFromP )" ,
0x00000a2b , "\0\0\0\0measure04T thirdC::mathCosIF( tinS& tinP , measure04T mRadP )" ,
0x00000a2c , "\0\0\0\0measure04T thirdC::mathSinIF( tinS& tinP , measure04T mRadP )" ,
0x00000a2d , "\0\0\0\0measure04T thirdC::mathSqrtIF( tinS& tinP , measure04T mP )" ,
0x00000a2e , "\0\0\0\0measure04T thirdC::mathAtanIF( tinS& tinP , measure04T mColP , measure04T mRowP )" ,
0x00000a2f , "\0\0\0\0count04T thirdC::fileReadIF( tinS& tinP , byteT* const pbP , countT& cbP , const osTextT* const postNameP )" ,
0x00000a30 , "\0\0\0\0TASK0PROTO( tmHeartF ) // NOTE THAT THIS S A RAW THREAD; IT HAS NO THREAD LOCAL STORAGE SO CANNOT CALL pTinF" ,
0x00000a31 , "\0\0\0\0voidT thirdC::osSetupExceptionHandlingIF( tinS& tinP )" ,
0x00000a32 , "\0\0\0\0countT thirdC::osInvalidHandleValueIF( tinS& tinP , const countT idTypeP )" ,
0x00000a33 , "\0\0\0\0countT thirdC::osHandleCloneIF( tinS& tinP , countT& noteP , const countT oshP , const countT idTypeP , const countT oshProcessToP , const countT oshProcessFromP )" ,
0x00000a34 , "\0\0\0\0voidT thirdC::dosResumeThreadIF( tinS& tinP , handleC& hP , const boolT bRetryP )" ,
0x00000a35 , "\0\0\0\0voidT thirdC::dosSuspendThreadIF( tinS& tinP )" ,
0x00000a36 , "\0\0\0\0voidT thirdC::osSetupSecurityIF( voidT )" ,
0x00000a37 , "\0\0\0\0boolT thirdC::osTestWaterIF( tinS& tinP , const countT idTypeP , countT* pOshP )" ,
0x00000a38 , "\0\0\0\0countT thirdC::osOpenThreadIF( voidT )" ,
0x00000a39 , "\0\0\0\0boolT thirdC::osExceptionHandlerWorkIF( const countT cArgP )" ,
0x00000a3a , "\0\0\0\0voidT thirdC::c_memsetIF( byteT* const pbP , const countT cbP , const byteT valueP )" ,
0x00000a3b , "\0\0\0\0voidT thirdC::dosExitProcessIF( const countT rcP )" ,
0x00000a3c , "\0\0\0\0voidT thirdC::dosSuspendThreadIF( tinS& tinP , const countT osTidP )" ,
0x00000a3d , "\0\0\0\0voidT thirdC::dosSuspendAllButMeIF( tinS& tinP )" ,
0x00000a3e , "\0\0\0\0voidT thirdC::osThreadYieldIF( tinS& tinP , const countT idLineNoteP , const countT idiFileNoteP , const byteT* const pbBitsNoteP , const countT msP )" ,
0x00000a3f , "\0\0\0\0const osTextT* thirdC::postBaseNameIF( tinS& tinP )" ,
0x00000a40 , "\0\0\0\0countT& thirdC::third_idPhaseAdam_IF( tinS& tinP )" ,
0x00000a41 , "\0\0\0\0countT thirdC::dosScanEnvIF( osTextT* const postValueP , const countT costaValueP , const osTextT* const postKeyP )" ,
0x00000a42 , "\0\0\0\0const osTextT* thirdC::postOldCmdLineIF( voidT )" ,
0x00000a43 , "\0\0\0\0osTextT* thirdC::c_strstrIF( const osTextT* const postBigP , const osTextT* const postSmallP )" ,
0x00000a44 , "\0\0\0\0sCountT thirdC::c_atoiIF( const osTextT* const postP )" ,
0x00000a45 , "\0\0\0\0voidT thirdC::c_zReplaceIF( osTextT* const postP , const osTextT ostOldP , const osTextT ostNewP )" ,
0x00000a46 , "\0\0\0\0voidT thirdC::blammoIF( const countT idLineP , const countT idiFileP , const countT idLineCtP , const countT idiFileCtP )" ,
0x00000a47 , "\0\0\0\0voidT thirdC::inOutChatterIfIF( tinS& tinP )" ,
0x00000a48 , "\0\0\0\0sCountT thirdC::c_strcmpIF( const osTextT* const post1P , const osTextT* const post2P )" ,
0x00000a49 , "\0\0\0\0voidT thirdC::winArcIF( tinS& tinP , const handleC& hDrawP , const measureT mIdColFromP , const measureT mIdRowFromP , const measureT mIdColToP , const measureT mIdRowToP , const flagsT flagsP )" ,
0x00000a4a , "\0\0\0\0voidT thirdC::dosSleepRawNoTinIF( countT cP )" ,
0x00000a4b , "\0\0\0\0voidT thirdC::winRectangleIF( tinS& tinP , const handleC& hDrawP , const measureT mIdColFromP , const measureT mIdRowFromP , const measureT mIdColToP , const measureT mIdRowToP , const flagsT flagsP )" ,
0x00000a4c , "\0\0\0\0osTextT& thirdC::ostLathLogIF( voidT )" ,
0x00000a4d , "\0\0\0\0voidT thirdC::winFloodIF( tinS& tinP , const handleC& hDrawP , const measureT mIdColAtP , const measureT mIdRowAtP , const countT rgbTestP , const countT rgbDrawP , const flagsT flagsP )" ,
0x00000a4e , "\0\0\0\0flagsT thirdC::winGetKeyStateIF( const countT idToolP )" ,
0x00000a4f , "\0\0\0\0countT thirdC::winGetKeyNameTextIF( osTextT* const postP , const countT costaP , const countT p2P )" ,
0x00000a50 , "\0\0\0\0measure04T thirdC::mathExpIF( tinS& tinP , measure04T mP )" ,
0x00000a51 , "\0\0\0\0countT thirdC::winGetPelIF( tinS& tinP , const handleC& hDrawP , const measureT mIdColP , const measureT mIdRowP )" ,
0x00000a52 , "\0\0\0\0countT& thirdC::third_idTrialI_IF( tinS& tinP )" ,
0x00000a53 , "\0\0\0\0const osTextT* thirdC::postUserNameIF( voidT )" ,
0x00000a54 , "\0\0\0\0countT& thirdC::ifc_idHomeOverrideI_IF( tinS& tinP )" ,
0x00000a55 , "\0\0\0\0countT thirdC::third_idAdamI_IF( tinS& tinP )" ,
0x00000a56 , "\0\0\0\0flagsT& thirdC::third_flagsModeAdam1I_IF( tinS& tinP )" ,
0x00000a57 , "\0\0\0\0flagsT& thirdC::third_flagsModeAdam2I_IF( tinS& tinP )" ,
0x00000a58 , "\0\0\0\0countT& thirdC::third_idPhaseProcess_IF( voidT )" ,
0x00000a59 , "\0\0\0\0voidT thirdC::winSelectObjectIF( tinS& tinP , const handleC& hDrawP , const handleC& hToolP , handleC& hToolOldP )" ,
0x00000a5a , "\0\0\0\0measure04T thirdC::mathLog2IF( tinS& tinP , measure04T mP )" ,
0x00000a5b , "\0\0\0\0voidT thirdC::osSelectProcessorsIF( tinS& tinP , const countT idTypeP , const handleC* const phThreadP )" ,
0x00000a5c , "\0\0\0\0countT thirdC::osMemoryReadabilityMapIF( tinS& tinP , byteT* const pbBitsP , const countT cbBitsP )" ,
0x00000a5d , "\0\0\0\0countT thirdC::os_expCbPage_IF( tinS& tinP )" ,
0x00000a5e , "\0\0\0\0countT thirdC::os_expCbAllocationGrain_IF( tinS& tinP )" ,
0x00000a5f , "\0\0\0\0const countT* thirdC::c_strstrIF( tinS& tinP , const countT* const pczBigP , const countT* const pczSmallP )" ,
0x00000a60 , "\0\0\0\0voidT thirdC::dosCreateDirIF( tinS& tinP , const osTextT* const postP )" ,
0x00000a61 , "\0\0\0\0voidT thirdC::dosFindFileOrDirSimpleIF( tinS& tinP , osTextT* const postP , const countT costaP , handleC& handleP , const osTextT* const postLikeP )" ,
0x00000a62 , "\0\0\0\0sCountT thirdC::c_atoiForeignIF( const osTextT* const postP , const boolT bSignedP )" ,
0x00000a63 , "\0\0\0\0countT thirdC::diskFindHomeIF( tinS& tinP , osTextT* const postP , const countT costaP , const osTextT* postKeyP )" ,
0x00000a64 , "\0\0\0\0voidT thirdC::flushViewOfFileIF( tinS& tinP , const byteT* const pbP , const countT cbP )" ,
0x00000a65 , "\0\0\0\0countT thirdC::os_cbPage_IF( tinS& tinP )" ,
0x00000a66 , "\0\0\0\0countT thirdC::os_cbAllocationGrain_IF( tinS& tinP )" ,
0x00000a67 , "\0\0\0\0sCountT thirdC::c_strcmpIF( tinS& tinP , const countT* const pc1P , const countT* const pc2P , const countT ccP )" ,
0x00000a68 , "\0\0\0\0boolT thirdC::bCanAccessMemoryIF( byteT* pbP , countT cbP )" ,
0x00000a69 , "\0\0\0\0voidT thirdC::ctrlCIF( tinS& tinP )" ,
0x00000a6a , "\0\0\0\0countT thirdC::c_memcpyWithCallBackIF( byteT* const pbToP , const byteT* const pbFromP , const countT cbP , ifcCountCountFT pFP , countT cArgP )" ,
0x00000a6b , "\0\0\0\0const osTextT* thirdC::postExeFileNameIF( voidT )" ,
0x00000a6c , "\0\0\0\0countT thirdC::osProcessorsIF( tinS& tinP )" ,
0x00000a6d , "\0\0\0\0voidT thirdC::diskWalkPrivateIF( tinS& tinP , countT& cDirsP , countT& cFilesP , osTextT* const postNameP , const boolT& bQuitP , const flagsT flagsP , diskWalkCBFT pCbfP , countT* const pcArgP , countT* pModuloDirsP , countT* pModuloFilesP )" ,
0x00000a6e , "\0\0\0\0voidT thirdC::diskWalkIF( tinS& tinP , countT& cDirsP , countT& cFilesP , const osTextT* const postNameP , const boolT& bQuitP , const flagsT flagsP , diskWalkCBFT pCbfP , countT* const pcArgP , countT* pModuloDirsP , countT* pModuloFilesP )" ,
0x00000a6f , "\0\0\0\0voidT thirdC::dosFlushFileBuffersIF( tinS& tinP , const handleC& handleP )" ,
0x00000a70 , "\0\0\0\0measure04T thirdC::mathExpIF( tinS& tinP , measure04T xP , measure04T yP )" ,
0x00000a71 , "\0\0\0\0voidT thirdC::os_addressMinMax_IF( tinS& tinP , const byteT*& pbMinP , const byteT*& pbMaxP )" ,
0x00000a72 , "\0\0\0\0voidT thirdC::memCommitIF( countT& ecP , const byteT* const pbP , const countT cbP )" ,
0x00000a73 , "\0\0\0\0voidT thirdC::exeFromFileExtensionIF( tinS& tinP , osTextT* const postExeP , countT& costaExeP , const osTextT* const postDotExtensionP )" ,
0x00000a74 , "\0\0\0\0voidT thirdC::openSsl_setupIF( voidT )" ,
0x00000a75 , "\0\0\0\0voidT thirdC::openSsl_shutdownIF( voidT )" ,
0x00000a76 , "\0\0\0\0voidT thirdC::openSsl_getContextIF( tinS& tinP , handleC& handleP )" ,
0x00000a77 , "\0\0\0\0voidT thirdC::openSsl_getWrapperIF( tinS& tinP , handleC& handleP , const handleC& hContextP )" ,
0x00000a78 , "\0\0\0\0voidT thirdC::openSsl_wrapSocketIF( tinS& tinP , const handleC& hWrapperP , const handleC& hSocketP )" ,
0x00000a79 , "\0\0\0\0voidT thirdC::openSsl_shakeHandsIF( tinS& tinP , const handleC& hWrapperP )" ,
0x00000a7a , "\0\0\0\0countT thirdC::openSsl_writeIF( tinS& tinP , const handleC& hWrapperP , const byteT* const pbP , const countT cbP )" ,
0x00000a7b , "\0\0\0\0countT thirdC::openSsl_readIF( tinS& tinP , byteT* const pbP , const countT cbP , const handleC& hWrapperP )" ,
0x00000a7c , "\0\0\0\0voidT thirdC::postPathStateSpaceIF( tinS& tinP , osTextT* postP , const countT costaP , const countT idStateSpaceP , const countT idMemorySpaceP )" ,
0x00000a7d , "\0\0\0\0voidT thirdC::openSsl_shutdownIF( tinS& tinP , const handleC& hWrapperP )" ,
0x00000a7e , "\0\0\0\0voidT thirdC::dosFileWindowIF( tinS& tinP , handleC& handleP , const handleC& hFileP , const countT offLoP , const countT offHiP , const countT cbP , const flagsT flagsP )" ,
0x00000a7f , "\0\0\0\0etherC& etherC::etThreadIF( tinS& tinP )" ,
0x00000a80 , "\0\0\0\0countT& etherC::os_cAllKidThreadsI_IF( tinS& tinP )" ,
0x00000a81 , "\0\0\0\0etherC& etherC::etPrimeIF( tinS& tinP )" ,
0x00000a82 , "\0\0\0\0voidT etherC::etherFireImpersonateMonitorIF( tinS& tinP )" ,
0x00000a83 , "\0\0\0\0voidT etherC::loafIF( tinS& tinP )" ,
0x00000a84 , "\0\0\0\0etherC& etherC::etTextIF( tinS& tinP )" ,
0x00000a85 , "\0\0\0\0etherC& etherC::etRockIF( tinS& tinP )" ,
0x00000a86 , "\0\0\0\0countT& etherC::os_cAllOrphanThreadsI_IF( tinS& tinP )" ,
0x00000a87 , "\0\0\0\0countT& etherC::ether_cUtility_IF( tinS& tinP , const countT offP )" ,
0x00000a88 , "\0\0\0\0etherC& etherC::etPaintIF( tinS& tinP )" ,
0x00000a89 , "\0\0\0\0etherC& etherC::etPrimeIF( voidT )" ,
0x00000a8a , "\0\0\0\0voidT etherC::strDumpIF( tinS& tinP , strokeS*& psttP , const byteT* pbP , const countT cbP , const flagsT flagsP , const countT bPerLineP , const countT bPerGroupP , const byteT bReadableP , const countT bPerGrouprP )" ,
0x00000a8b , "\0\0\0\0countT etherC::ifc_idHomeI_IF( voidT )" ,
0x00000a8c , "\0\0\0\0countT etherC::ifc_idHomeIdisk_IF( voidT )" ,
0x00000a8d , "\0\0\0\0countT& etherC::os_cEnabledWhereI_IF( tinS& tinP )" ,
0x00000a8e , "\0\0\0\0voidT etherC::strDumpStrokesIF( tinS& tinP , strokeS*& psttP , const strokeS* const psttInP , const strokeS* const psttDelimiterP )" ,
0x00000a8f , "\0\0\0\0napkinC** etherC::ifc_ppNapWordI_IF( voidT )" ,
0x00000a90 , "\0\0\0\0countT etherC::ifc_idMemorySpaceI_IF( tinS& tinP )" ,
0x00000a91 , "\0\0\0\0voidT etherC::ifcSayIF( const osTextT* const postBodyP , const flagsT flagsP , const osTextT* const postNameP )" ,
0x00000a92 , "\0\0\0\0measure04T etherC::ranUniI_IF( tinS& tinP )" ,
0x00000a93 , "\0\0\0\0countT etherC::ifc_idAdamI_IF( tinS& tinP )" ,
0x00000a94 , "\0\0\0\0countT etherC::ifcBitDumpIF( tinS& tinP , osTextT* postP , const byteT* pbBitsP , const countT cBitsP , const countT cBitsPerLineP , const countT cbGrainP )" ,
0x00000a95 , "\0\0\0\0voidT etherC::strStretchBitsIF( tinS& tinP , countT*& pczP , const byteT* const pbP , countT cBitsP )" ,
0x00000a96 , "\0\0\0\0voidT etherC::strStretchIF( tinS& tinP , countT*& pczP , const countT* pczPrefixP , const byteT* pbP     , const countT cNetP , const countT* pczSuffixP )" ,
0x00000a97 , "\0\0\0\0voidT etherC::strStretchIF( tinS& tinP , countT*& pczP , const countT* pczPrefixP , const countT valueP  , const countT cNetP , const countT* pczSuffixP )" ,
0x00000a98 , "\0\0\0\0voidT etherC::strSquishBitsIF( tinS& tinP , byteT*& pbP , const countT* pcP , countT ccP )" ,
0x00000a99 , "\0\0\0\0voidT etherC::strSquishIF( tinS& tinP , osTextT*& postP , const countT* pcP , const countT ccMaxP )" ,
0x00000a9a , "\0\0\0\0voidT etherC::strSquishIF( tinS& tinP , countT& valueP , const countT* pcP )" ,
0x00000a9b , "\0\0\0\0voidT etherC::strStretchIF( tinS& tinP , countT*& pczP , const countT* pczPrefixP , const countT* pczInP , const countT cNetP , const countT* pczSuffixP )" ,
0x00000a9c , "\0\0\0\0voidT etherC::strSquishOldIF( tinS& tinP , countT*& pczOutP , const countT* pcP , const countT ccMaxP )" ,
0x00000a9d , "\0\0\0\0voidT etherC::strSquishIF( tinS& tinP , countT*& pczP , const countT* pczInP )" ,
0x00000a9e , "\0\0\0\0nicNameC socketC::nicNameIF( tinS& tinP , etherC& ether , const strokeS* const psttP )" ,
0x00000a9f , "\0\0\0\0voidT socketC::nicNameIF( tinS& tinP , etherC& ether , nicNameC*& pNicNameP , countT& cNicNameP , const strokeS* const psttP )" ,
0x00000aa0 , "\0\0\0\0stackC* stackC::newRecyclableIF( tinS& tinP , const flagsT flagsP , const countT idTypeP )" ,
0x00000aa1 , "\0\0\0\0switchC* switchC::newRecyclableIF( tinS& tinP , const countT idTypeLeverP , const flagsT flagsP , const countT c_pLeverP , const countT c_pcpLeverLathRefP , const countT cbDataP )" ,
0x00000aa2 , "\0\0\0\0switchStackC* switchStackC::newRecyclableIF( tinS& tinP , const countT idTypeLeverP , const flagsT flagsSwitchP , const countT c_pLeverP , const flagsT flagsStackP , const countT idTypeP , const countT idGrabLayerP , const countT c_pcpLeverLathRefP )" ,
0x00000aa3 , "\0\0\0\0voidT carC::strIF( tinS& tinP , etherC& ether , strokeS*& psttP , const byteT* const pbSoulP , const countT csttEstimateP )" ,
0x00000aa4 , "\0\0\0\0windowOldC* windowOldC::pWindowIF( tinS& tinP , const handleC& hWindowP )" ,
0x00000aa5 , "\0\0\0\0countT windowOldC::idIF( tinS& tinP , windowOldC& wP )" ,
0x00000aa6 , "\0\0\0\0windowOldC* windowOldC::getRefIF( tinS& tinP , const countT idWindowP )" ,
0x00000aa7 , "\0\0\0\0countT& soulC::cFieldIF( tinS& tinP , countT idFieldP , const byteT* const pbsP )" ,
0x00000aa8 , "\0\0\0\0countT soulC::cFieldsIF( tinS& tinP , const byteT* const pbsP )" ,
0x00000aa9 , "\0\0\0\0soulC* soulC::newRecyclableIF( tinS& tinP )" ,
0x00000aaa , "\0\0\0\0voidT soulC::traceIF( tinS& tinP , boolT bOnP )" ,
0x00000aab , "\0\0\0\0voidT soulC::dumpIF( tinS& tinP , strokeS*& psttP , const byteT* const pbSoulImageP )" ,
0x00000aac , "\0\0\0\0voidT sleepC::blammoIfIF( tinS& tinP )" ,
0x00000aad , "\0\0\0\0countT handleC::cInstancesIF( voidT )" ,
0x00000aae , "\0\0\0\0voidT grabC::_lookIF( tinS& tinP , grabWantS*& pGrabWantP , countT& cGrabWantP )" ,
0x00000aaf , "\0\0\0\0boolT relayC::handleUnregisterIF( tinS& tinP , idPortTimeC idptMeP , const countT* const pczChannelP )" ,
0x00000ab0 , "\0\0\0\0boolT relayC::handleRegisterMeIfIF( tinS& tinP , idPortTimeC idptMeP , const countT* const pczChannelP )" ,
0x00000ab1 , "\0\0\0\0boolT relayC::handleRefreshTimeStampF( tinS& tinP , idPortTimeC idptMeP , const countT* const pczChannelP )" ,
0x00000ab2 , "\0\0\0\0idPortTimeC relayC::handleQueryIF( tinS& tinP , const countT* const pczChannelP )" ,
0x00000ab3 , "\0\0\0\0voidT relayC::hdrBagIF( tinS& tinP , soulC& sBagP , idPortTimeC& idptP , countT& idSerialLathHeaderP , const flagsT flagsP , const countT idTypeP )" ,
0x00000ab4 , "\0\0\0\0voidT relayC::sortOpenIF( tinS& tinP , stackC& stIdptOpenP , stackC& stIdptGossipP , stackC& stIdptTempP )" ,
0x00000ab5 , "\0\0\0\0voidT relayC::myListIF( tinS& tinP , soulC& soulP , stackC& stRelayP )" ,
0x00000ab6 , "\0\0\0\0countT relayC::hisListIF( tinS& tinP , stackC& stP , soulC& soulP , stackC& stIdptGossipP , countT& idFieldP )" ,
0x00000ab7 , "\0\0\0\0voidT relayC::popIF( tinS& tinP , stackC* pStPop0P , stackC* pStPop1P , stackC* pStPop2P , stackC* pStPop3P , stackC* pStPop4P , soulC& sBagP , stackC& stIdptOpenP , stackC& stIdptGossipP , idPortTimeC& idptP , const boolT bDudP )" ,
0x00000ab8 , "\0\0\0\0voidT relayC::idWorkInvertIF( tinS& tinP , countT& idWorkInvert1P , countT& idWorkInvert2P , const countT idWorkP )" ,
0x00000ab9 , "\0\0\0\0boolT relayC::bListedIF( tinS& tinP , stackC& stIdptOpenP , stackC& stIdptGossipP , const idPortTimeC& idptP )" ,
0x00000aba , "\0\0\0\0voidT relayC::idptServerIF( tinS& tinP , idPortTimeC& idptPeerP , stackC& stIdptOpenP , idPortTimeC& idptP , stackC& stIdptGossipP , const countT idMyWorkP , const boolT bDuplicateIsOkP )" ,
0x00000abb , "\0\0\0\0voidT relayC::idPortTimeClientIF( tinS& tinP , idPortTimeC& idptPeer1P , idPortTimeC& idptPeer2P , stackC& stIdptOpenP , idPortTimeC& idptP , stackC& stIdptGossipP , const countT idHisWorkP )" ,
0x00000abc , "\0\0\0\0voidT relayC::idPortTimeClientsExpectedIF( tinS& tinP , stackC& stRelayExpectedP , stackC& stIdptOpenP , stackC& stIdptGossipP , idPortTimeC& idptP , const countT idWorkP )" ,
0x00000abd , "\0\0\0\0idPortTimeC relayC::gossipIfIF( tinS& tinP , countT& idSerialLathHeaderP , stackC* const pStPop0P , stackC* const pStPop1P , stackC* const pStPop2P , stackC* const pStPop3P , stackC* const pStPop4P , stackC& stIdptOpenP , stackC& stIdptGossipP , stackC& stIdptTempP , stackC& stRelayAbsentP , idPortTimeC& idptGossipP , idPortTimeC& idptP , const countT idWorkP )" ,
0x00000abe , "\0\0\0\0boolT relayC::testIF( tinS& tinP , idPortTimeC& idptP , countT& idSerialLathHeaderP , idPortTimeC& idptTestP )" ,
0x00000abf , "\0\0\0\0voidT relayC::helloToHandleIF( tinS& tinP , idPortTimeC& idptP , countT& idSerialLathHeaderP )" ,
0x00000ac0 , "\0\0\0\0voidT relayC::doWrapLocallyIfIF( tinS& tinP , etherC& etThread , RELAYiNFOpARMS , const byteT* const pbsWrapP , const idPortTimeC& idptOriginP , const countT idPhaseP )" ,
0x00000ac1 , "\0\0\0\0strokeS strokeS::strokeIF( tinS& tinP , const countT idToolP )" ,
0x00000ac2 , "\0\0\0\0strokeS strokeS::strokeIF( tinS& tinP , stackC& stP )" ,
0x00000ac3 , "\0\0\0\0voidT strokeS::renderSizeIF( tinS& tinP , etherC& etherP , const strokeS* const psttP , measureT& mColsP , measureT& mPadsP , measureT& mFrames1P )" ,
0x00000ac4 , "\0\0\0\0voidT paperOldC::strokeF( tinS& tinP , const strokeS* psttP )" ,
0x00000ac5 , "\0\0\0\0voidT paperOldC::varsHandlerIF( tinS& tinP , varsHandlerFT pVarsHandlerFIFP , countT cArgP )" ,
0x00000ac6 , "\0\0\0\0voidT paperOldC::obeyAnimateCbfStrokesIF( tinS& tinP , etherC& etherP , const countT idCycleP , const boolT& bQuitP )" ,
0x00000ac7 , "\0\0\0\0voidT paperOldC::beforeAnimatingIF( tinS& tinP , etherC& etherP , const countT idCycleP )" ,
0x00000ac8 , "\0\0\0\0voidT paperOldC::setBeforeAnimatingIF( tinS& tinP , animateCBFT pAnimateCBFP , const countT cArgP )" ,
0x00000ac9 , "\0\0\0\0voidT paperOldC::freshVolatileTextIF( tinS& tinP , etherC& etherP , const countT* const pcNotesP , const countT idCycleP )" ,
0x00000aca , "\0\0\0\0voidT paperOldC::fireAnimatorIfIF( tinS& tinP )" ,
0x00000acb , "\0\0\0\0countT paperOldC::callSadamsIF( tinS& tinP , etherC& etherP , const countT idTypeP , const countT* const pcNotesP , const handleC* const phCloneP , const flagsT flagsP , const vTextC* const pOwnerP , const paperOldC* const pPaperP , const backOldC* const pPaperBackP , const countT* const pczIdIntercomP )" ,
0x00000acc , "\0\0\0\0voidT paperOldC::setFlashIF( tinS& tinP , sadamC& sadamP , const countT countdownP , const countT periodP , const flagsT flagsP )" ,
0x00000acd , "\0\0\0\0voidT paperOldC::setFlashIF( tinS& tinP , const osTextT* const postOldCommentP , const countT flashCountdownP , const countT flashPeriodP , const flagsT flagsFlashP )" ,
0x00000ace , "\0\0\0\0flagsT paperOldC::flagsModeIF( tinS& tinP )" ,
0x00000acf , "\0\0\0\0countT paperOldC::queryResetTabFreshIF( tinS& tinP )" ,
0x00000ad0 , "\0\0\0\0voidT paperOldC::requestTabFreshIF( tinS& tinP )" ,
0x00000ad1 , "\0\0\0\0voidT paperOldC::grabIF( tinS& tinP , const countT idLineP , const countT idiFileP , const byteT* const pbBitsP )" ,
0x00000ad2 , "\0\0\0\0voidT paperOldC::ungrabIF( tinS& tinP )" ,
0x00000ad3 , "\0\0\0\0voidT backOldC::freshJoyIfIF( tinS& tinP , etherC& etherP )" ,
0x00000ad4 , "\0\0\0\0voidT backOldC::setModeFlagsIF( tinS& tinP , const flagsT flagsOnP , const flagsT flagsOffP )" ,
0x00000ad5 , "\0\0\0\0processGlobal1S& processGlobal1S::_processGlobal1I_IF( voidT )" ,
0x00000ad6 , "\0\0\0\0processGlobal2S& processGlobal2S::_processGlobal2I_IF( voidT )" ,
0x00000ad7 , "\0\0\0\0processGlobal3S& processGlobal3S::_processGlobal3I_IF( voidT )" ,
0x00000ad8 , "\0\0\0\0processGlobal4S& processGlobal4S::_processGlobal4I_IF( voidT )" ,
0x00000ad9 , "\0\0\0\0processGlobal5S& processGlobal5S::_processGlobal5I_IF( voidT )" ,
0x00000ada , "\0\0\0\0processGlobal6S& processGlobal6S::_processGlobal6I_IF( voidT )" ,
0x00000adb , "\0\0\0\0processGlobal7S& processGlobal7S::_processGlobal7I_IF( voidT )" ,
0x00000adc , "\0\0\0\0boolT sexC::bStateExistsIF( tinS& tinP , const osTextT* const postNameP , const countT expCbSlotP , const countT expSlotsP , const countT idStateSpaceP )" ,
0x00000add , "\0\0\0\0voidT sexC::ctFileNamesIF( tinS& tinP , textC& tMetaP , textC& tDataP , const osTextT* const postNameP , const countT expCbSlotP , const countT expSlotsP , const countT idStateSpaceP )" ,
0x00000ade , "\0\0\0\0voidT sexC::ctFileNameLikeIF( tinS& tinP , textC& tLikeP , const osTextT* const postNameP , const countT idStateSpaceP )" ,
0x00000adf , "\0\0\0\0boolT slotsC::bStateExistsIF( tinS& tinP , const osTextT* const postNameP , const countT expCbSlotP , const countT idStateSpaceP )" ,
0x00000ae0 , "\0\0\0\0voidT slotsC::ctFileNameLikeIF( tinS& tinP , textC& tLikeP , const osTextT* const postNameP , const countT idStateSpaceP )" ,
0x00000ae1 , "\0\0\0\0dropNoteS* poolC::pDropNoteIF( tinS& tinP , const byteT* const pbP )" ,
0x00000ae2 , "\0\0\0\0poolC* poolC::pPoolIF( tinS& tinP , const byteT* const pbP )" ,
0x00000ae3 , "\0\0\0\0poolC* poolC::pPoolFromNameIF( tinS& tinP , const osTextT* const postP )" ,
0x00000ae4 , "\0\0\0\0voidT poolC::reportIF( tinS& tinP , const countT*& pczLeverP , switchC& swTallyP )" ,
0x00000ae5 , "\0\0\0\0voidT poolC::reportIF( tinS& tinP )" ,
0x00000ae6 , "\0\0\0\0voidT poolC::deleteEmptiesIfIF( tinS& tinP )" ,
0x00000ae7 , "\0\0\0\0voidT grabitC::grabIF( tinS& tinP , const countT idLineP , const countT idiFileP , const byteT* const pbBitsP , byteT* const pbP , const countT ifcIdBitP , countT* const pcGrabberOsTidP , countT* const pcGrabberRecurseP , const countT msNapP )" ,
0x00000ae8 , "\0\0\0\0voidT grabitC::ungrabIF( tinS& tinP , byteT* const pbP , const countT ifcIdBitP , countT* const pcGrabberOsTidP , countT* const pcGrabberRecurseP )" ,
0x00000ae9 , "\0\0\0\0voidT grabitC::resetIF( tinS& tinP , byteT* const pbP , const countT ifcIdBitP , countT* const pcGrabberOsTidP , countT* const pcGrabberRecurseP )" ,
0x00000aea , "\0\0\0\0boolT listingC::bIsListingIF( tinS& tinP , const aptC& aptP , const byteT bitsP , const byteT idTypeDatumP )" ,
0x00000aeb , "\0\0\0\0boolT listingC::bIsListingIF( tinS& tinP , const listingC* pdListingP , const byteT bitsP , const byteT idTypeDatumP )" ,
0x00000aec , "\0\0\0\0flagsT listC::openIF( tinS& tinP , handleC& hListP , const countT* const pczNameP , const flagsT flagsP , const countT idGrabLayerP )" ,
0x00000aed , "\0\0\0\0flagsT listC::openIF( tinS& tinP , handleC& hListP , handleC& hListDadP , const countT* const pczKidP , const flagsT flagsP , const countT idGrabLayerP , listC** const ppPreallocatedListsP )" ,
0x00000aee , "\0\0\0\0flagsT listC::walkIF( tinS& tinP , countT* const pczNameP , const flagsT flagsP , const countT idGrabLayerP )" ,
0x00000aef , "\0\0\0\0flagsT listC::walkIF( tinS& tinP , handleC& hListFromP , countT* const pczNameP , const flagsT flagsP , const countT idGrabLayerP )" ,
0x00000af0 , "\0\0\0\0countT listC::dictionaryQueryFromTextIF( tinS& tinP , const osTextT* const postP , const flagsT flagsP , const countT idGrabLayerP )" ,
0x00000af1 , "\0\0\0\0blobVSP listC::dictionaryQueryFromIdIF( tinS& tinP , const countT idP , const countT idGrabLayerP )" ,
0x00000af2 , "\0\0\0\0voidT listC::dictionaryForgetTextIF( tinS& tinP , const osTextT* const postP , const countT idGrabLayerP )" ,
0x00000af3 , "\0\0\0\0voidT listC::dictionaryForgetIdIF( tinS& tinP , const countT idP , const countT idGrabLayerP )" ,
0x00000af4 , "\0\0\0\0voidT listC::dictionaryReplaceOsTextIF( tinS& tinP , countT* const pczNameP )" ,
0x00000af5 , "\0\0\0\0flagsT listC::fieldIF( tinS& tinP , fieldEditParamOutC*& pOutP , handleC& hRecordP , const countT* pczFieldP , const fieldEditParamInC& inP , const countT idLineNewP , const countT idiFileNewP , const flagsT flagsP , const countT idGrabLayerP )" ,
0x00000af6 , "\0\0\0\0flagsT listC::deleteIF( tinS& tinP , const countT* const pczNameP , const flagsT flagsP , const countT idGrabLayerP )" ,
0x00000af7 , "\0\0\0\0voidT listC::lintIF( tinS& tinP , const countT idGrabLayerP )" ,
0x00000af8 , "\0\0\0\0flagsT listC::pourIF( tinS& tinP , countT* const pczNameToP , countT* const pczNameFromP , const countT idGrabLayerP )" ,
0x00000af9 , "\0\0\0\0flagsT listC::chatterIF( tinS& tinP , countT* const pczNameP , flagsT flagsP , countT cArgP , const countT idGrabLayerP )" ,
0x00000afa , "\0\0\0\0countVSP listC::countIF( tinS& tinP , handleC& hRecordP , const countT* pczFieldP , const flagsT flagsP )" ,
0x00000afb , "\0\0\0\0FD_INDEXif( countT , - 1 )" ,
0x00000afc , "\0\0\0\0FD_INDEXif( osTextT* const , !valueP )" ,
0x00000afd , "\0\0\0\0FD_INDEXif( countT* const , !valueP )" ,
0x00000afe , "\0\0\0\0FD_UNiNDEXif( countT , - 1 )" ,
0x00000aff , "\0\0\0\0FD_UNiNDEXif( osTextT* const , !valueP )" ,
0x00000b00 , "\0\0\0\0FD_UNiNDEXif( countT* const , !valueP )" ,
0x00000b01 , "\0\0\0\0FD_WALKiNDEXif( countT )" ,
0x00000b02 , "\0\0\0\0FD_WALKiNDEXif( osTextT* const )" ,
0x00000b03 , "\0\0\0\0FD_WALKiNDEXif( countT* const )" ,
0x00000b04 , "\0\0\0\0flagsT listC::walkEnumerateIF( tinS& tinP , datumS*& pDatumP , const countT cNameP , const countT idGrabLayerP )" ,
0x00000b05 , "\0\0\0\0flagsT listC::deleteIF( tinS& tinP , handleC& hListDadP , const countT* const pczKidP , const flagsT flagsP , const countT idGrabLayerP )" ,
0x00000b06 , "\0\0\0\0boolT listC::isIndexedIF( tinS& tinP , const countT idGrabLayerP )" ,
0x00000b07 , "\0\0\0\0flagsT listC::indexIF( tinS& tinP , handleC& hListP , const flagsT flagsP , const countT idGrabLayerP )" ,
0x00000b08 , "\0\0\0\0flagsT listC::unIndexIF( tinS& tinP , handleC& hListP , const flagsT flagsP , const countT idGrabLayerP )" ,
0x00000b09 , "\0\0\0\0voidT listC::dictionaryRestoreOsTextIF( tinS& tinP , countT* const pczNameP )" ,
0x00000b0a , "\0\0\0\0voidT bookC::ctFileNameIF( tinS& tinP , textC& tP , const osTextT* const postNameP , const countT idStateSpaceP , countT idMemorySpaceP )" ,
0x00000b0b , "\0\0\0\0boolT bookC::bFileExistsIF( tinS& tinP , etherC& etherP , const osTextT* const postNameP , const countT idStateSpaceP , countT idMemorySpaceP )" ,
0x00000b0c , "\0\0\0\0flagsT selectC::enumerateIF( tinS& tinP , datumS*& pDatumP , const countT cNameP )" ,
0x00000b0d , "\0\0\0\0voidT linkedC::checkIF( tinS& tinP )" ,
0x00000b0e , "\0\0\0\0sadamsC* sadamsC::pSadamsIF( tinS& tinP )" ,
0x00000b0f , "\0\0\0\0countT branchS::unJumpIfIF( tinS& tinP , countT& jbrP , stackC& stJumpP )" ,
0x00000b10 , "\0\0\0\0countT branchS::jumpIfIF( tinS& tinP , countT& jbrP , stackC& stJumpP , textC& tRefHtmlIdP )" ,
0x00000b11 , "\0\0\0\0processGlobal0S& processGlobal0S::_processGlobal0I_IF( voidT )" ,
0x00000b12 , "\0\0\0\0voidT pageC::validateIF( tinS& tinP , booksC& booksValidP , booksC& booksP , const byteT* const pbzP )" ,
0x00000b13 , "\0\0\0\0thirdC::thirdC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const flagsT flagsModeP , const flagsT flagsWatchP )" ,
0x00000b14 , "\0\0\0\0thirdC::~thirdC( voidT )" ,
0x00000b15 , "\0\0\0\0thirdC::operator const countT&( voidT )" ,
0x00000b16 , "\0\0\0\0thirdC& thirdC::operator =( const countT rcP )" ,
0x00000b17 , "\0\0\0\0voidT thirdC::c_itoaF( tinS& tinP , osTextT*& postP , sCountT valueP , countT radixP )" ,
0x00000b18 , "\0\0\0\0voidT thirdC::osTimeSubtractF( tinS& tinP , countT& timeA1P , sCountT& timeA2P , const countT timeB1P , const sCountT timeB2P )" ,
0x00000b19 , "\0\0\0\0boolT thirdC::c_zDiskFLongFileNamesOKF( tinS& tinP , const osTextT* const postDiskP )" ,
0x00000b1a , "\0\0\0\0voidT thirdC::dosCloseEventSemF( tinS& tinP , handleC& handleP )" ,
0x00000b1b , "\0\0\0\0boolT thirdC::dosCreateDirF( tinS& tinP , const osTextT* const postP )" ,
0x00000b1c , "\0\0\0\0voidT thirdC::dosFindFileOrDirPrivateF( tinS& tinP , infoFileS*& pInfoFileP , handleC& handleP , const osTextT* const postLikeP )" ,
0x00000b1d , "\0\0\0\0voidT thirdC::dosLoadModuleF( tinS& tinP , handleC& handleP , osTextT*& postAnticipatedErrorP , const osTextT* const postP , etherC* const pEtherP )" ,
0x00000b1e , "\0\0\0\0voidT thirdC::dosMoveF( tinS& tinP , const osTextT* const postNewP , const osTextT* const postOldP , countT cTriesP )" ,
0x00000b1f , "\0\0\0\0boolT thirdC::dosOpenEventSemF( tinS& tinP , handleC& handleP , const osTextT* const postP , const boolT fGivenP )" ,
0x00000b20 , "\0\0\0\0voidT thirdC::dosPostEventSemF( tinS& tinP , const handleC& handleP )" ,
0x00000b21 , "\0\0\0\0voidT thirdC::dosQueryFSInfoF( tinS& tinP , infoDisk1S*& pInfoDisk1P , const osTextT* const postDriveNameP , countT cTriesP )" ,
0x00000b22 , "\0\0\0\0voidT thirdC::dosQueryModuleNameF( tinS& tinP , osTextT*& postP , const handleC& handleP )" ,
0x00000b23 , "\0\0\0\0voidT thirdC::dosQueryProcAddrF( tinS& tinP , voidT*& pvP , const handleC& handleP , const osTextT* const postP )" ,
0x00000b24 , "\0\0\0\0voidT thirdC::dosReadF( tinS& tinP , byteT* const pbP , countT& cbP , const handleC& handleP , boolT fStillHungryIsOkP )" ,
0x00000b25 , "\0\0\0\0voidT thirdC::dosResetEventSemF( tinS& tinP , const handleC& handleP )" ,
0x00000b26 , "\0\0\0\0voidT thirdC::dosScanEnvF( tinS& tinP , osTextT*& postValueP , const osTextT* const postKeyP )" ,
0x00000b27 , "\0\0\0\0voidT thirdC::dosWaitEventSemF( tinS& tinP , const handleC& handleP )" ,
0x00000b28 , "\0\0\0\0voidT thirdC::poolDelF( tinS& tinP , voidT* const pvP )" ,
0x00000b29 , "\0\0\0\0voidT thirdC::poolNewF( tinS& tinP , const countT idLineNewP , const countT idiFileNewP , byteT*& pbP , const countT cbP )" ,
0x00000b2a , "\0\0\0\0countT thirdC::s_bindF( tinS& tinP , const handleC& handleP , const countT idPortP , const nicNameC nicNameP , countT cTriesP )" ,
0x00000b2b , "\0\0\0\0voidT thirdC::s_cancelF( tinS& tinP , const handleC& handleP )" ,
0x00000b2c , "\0\0\0\0voidT thirdC::s_connectF( tinS& tinP , handleC& handleP , const countT idPortP , const nicNameC nicNameP , countT cTriesP , countT time1P , const sCountT time2P )" ,
0x00000b2d , "\0\0\0\0nicNameC thirdC::s_nicNameF( tinS& tinP , const osTextT* const postP )" ,
0x00000b2e , "\0\0\0\0voidT thirdC::s_listenF( tinS& tinP , const handleC& handleP )" ,
0x00000b2f , "\0\0\0\0voidT thirdC::s_optionLingerF( tinS& tinP , const handleC& handleP , const countT cSecondsP )" ,
0x00000b30 , "\0\0\0\0countT thirdC::s_peekF( tinS& tinP , handleC& handleP , byteT* const pbP , const countT cbP , const flagsT flagsP , const countT time1P , const sCountT time2P )" ,
0x00000b31 , "\0\0\0\0countT thirdC::s_readF( tinS& tinP , byteT* const pbP , const countT cbP , handleC& handleP , const flagsT flagsP , const countT time1P , const sCountT time2P , const countT idModeP )" ,
0x00000b32 , "\0\0\0\0countT thirdC::s_readPrivateF( tinS& tinP , byteT* const pbP , const countT cbP , handleC& handleP , const flagsT flagsTcpP , const flagsT flagsP , const countT time1P , const sCountT time2P , const countT idModeP )" ,
0x00000b33 , "\0\0\0\0voidT thirdC::s_socketF( tinS& tinP , handleC& handleP , const boolT idTypeP , const handleC* const phContextP )" ,
0x00000b34 , "\0\0\0\0voidT thirdC::s_writeF( tinS& tinP , handleC& handleP , const byteT* const pbP , const countT cbP , const countT idModeP )" ,
0x00000b35 , "\0\0\0\0voidT thirdC::c_zReplaceF( tinS& tinP , osTextT*& postP , const osTextT* const postOldP , const osTextT* const postNewP )" ,
0x00000b36 , "\0\0\0\0voidT thirdC::dosSetDefaultDiskF( tinS& tinP , const osTextT* const postDriveNameP )" ,
0x00000b37 , "\0\0\0\0voidT thirdC::dosSetCurrentDirF( tinS& tinP , const osTextT* const postP )" ,
0x00000b38 , "\0\0\0\0voidT thirdC::dosStartSessionF( tinS& tinP , countT& tidP , countT& pidP , const osTextT* const postExeP , const osTextT* const postArgsP , const sCountT idColP , const sCountT idRowP , const countT cColP , const countT cRowP , const flagsT flagsP )" ,
0x00000b39 , "\0\0\0\0voidT thirdC::dosCreateNPipeF( tinS& tinP , handleC& handleP , const osTextT* const postP )" ,
0x00000b3a , "\0\0\0\0voidT thirdC::dosConnectNPipeF( tinS& tinP , const handleC& handleP )" ,
0x00000b3b , "\0\0\0\0voidT thirdC::dosDisconnectNPipeF( tinS& tinP , const handleC& handleP )" ,
0x00000b3c , "\0\0\0\0voidT thirdC::s_myNameF( tinS& tinP , countT& idPortP , nicNameC& nicNameP , const handleC& handleP )" ,
0x00000b3d , "\0\0\0\0voidT thirdC::s_peerNameF( tinS& tinP , countT& idPortP , nicNameC& nicNameP , const handleC& handleP )" ,
0x00000b3e , "\0\0\0\0voidT thirdC::dosEnterCritSecF( tinS& tinP )" ,
0x00000b3f , "\0\0\0\0voidT thirdC::dosExitCritSecF( tinS& tinP )" ,
0x00000b40 , "\0\0\0\0voidT thirdC::c_zReverseByteOrderF( tinS& tinP , byteT* const pbP , const countT cbP )" ,
0x00000b41 , "\0\0\0\0voidT thirdC::dosExecPgmF( tinS& tinP , countT& tidP , countT& pidP , const osTextT* const postExeP , const osTextT* const postArgsP , const flagsT flagsP , const handleC* phOutP , const handleC* phErrorP , const handleC* phInP , const osTextT* const postUserP , const osTextT* const postPasswordP , const flagsT flagsLogonP , const osTextT* const postDomainP )" ,
0x00000b42 , "\0\0\0\0voidT thirdC::osTimeNowF( tinS& tinP , countT& time1P , sCountT& time2P , const boolT fDoNotUseTimeAtBootP )" ,
0x00000b43 , "\0\0\0\0voidT thirdC::dosQuerySysInfoTimeSinceBootF( tinS& tinP , countT& time1P , sCountT& time2P )" ,
0x00000b44 , "\0\0\0\0voidT thirdC::dosQuerySysInfoTimeSince1960sDecadeF( tinS& tinP , countT& time1P , sCountT& time2P )" ,
0x00000b45 , "\0\0\0\0voidT thirdC::dosExecPgmF( tinS& tinP , countT& osTidP , countT& osPidP , countT& valueP , countT& idDeathTypeP , const osTextT* const postExeP , const osTextT* const postArgsP , const flagsT flagsP , const handleC* phOutP , const handleC* phErrorP , const handleC* phInP , const osTextT* const postUserP , const osTextT* const postPasswordP , const flagsT flagsLogonP , const osTextT* const postDomainP )" ,
0x00000b46 , "\0\0\0\0voidT thirdC::dosSetSignalExceptionFocus_offF( tinS& tinP )" ,
0x00000b47 , "\0\0\0\0voidT thirdC::dosSetSignalExceptionFocus_onF( tinS& tinP )" ,
0x00000b48 , "\0\0\0\0voidT thirdC::dosSendSignalExceptionF( tinS& tinP , const countT pidP )" ,
0x00000b49 , "\0\0\0\0voidT thirdC::dosKillProcessF( tinS& tinP , const countT pidP )" ,
0x00000b4a , "\0\0\0\0voidT thirdC::dosWaitChildF( tinS& tinP , countT& valueP , countT& idDeathTypeP , countT& pidP )" ,
0x00000b4b , "\0\0\0\0voidT thirdC::spacerSetF( tinS& tinP )" ,
0x00000b4c , "\0\0\0\0voidT thirdC::thirdTestF( tinS& tinP )" ,
0x00000b4d , "\0\0\0\0NEWdELtYPEtHIRD( byteT , ifciDtYPEdROPnOTE_byteT )" ,
0x00000b4e , "\0\0\0\0NEWdELtYPEtHIRD( countT , ifciDtYPEdROPnOTE_countT )" ,
0x00000b4f , "\0\0\0\0NEWdELtYPEtHIRD( strokeS , ifciDtYPEdROPnOTE_strokeS )" ,
0x00000b50 , "\0\0\0\0voidT thirdC::dosReadStdInF( tinS& tinP , byteT*& pbP , countT& cbP )" ,
0x00000b51 , "\0\0\0\0NEWdELtYPEtHIRD( count2S , ifciDtYPEdROPnOTE_count2S )" ,
0x00000b52 , "\0\0\0\0NEWdELtYPEtHIRD( sCountT , ifciDtYPEdROPnOTE_sCountT )" ,
0x00000b53 , "\0\0\0\0voidT thirdC::osCompileF( tinS& tinP , boolT& bErrorsP , const osTextT* const postOutP , const osTextT* const postErrorP , const osTextT* const postInP , const flagsT flagsP )" ,
0x00000b54 , "\0\0\0\0voidT thirdC::dosWriteStdOutBadCodeStyleF( tinS& tinP )" ,
0x00000b55 , "\0\0\0\0voidT thirdC::dosStartSessionF( tinS& tinP , countT& osTidP , countT& osPidP , countT& valueP , countT& idDeathTypeP , const osTextT* const postExeP , const osTextT* const postArgsP , const sCountT idColP , const sCountT idRowP , const countT cColP , const countT cRowP , const flagsT flagsP )" ,
0x00000b56 , "\0\0\0\0voidT thirdC::dosDeleteDirF( tinS& tinP , const osTextT* const postP , countT cTriesP )" ,
0x00000b57 , "\0\0\0\0voidT thirdC::dosSetSystemTimeF( tinS& tinP , const sCountT yP , const countT mP , const countT dP , const countT hhP , const countT mmP , const countT ssP , const countT msP )" ,
0x00000b58 , "\0\0\0\0voidT thirdC::s_putHostLogEntryF( tinS& tinP , const osTextT* const postP )" ,
0x00000b59 , "\0\0\0\0NEWdELtYPEtHIRD( measureT , ifciDtYPEdROPnOTE_measureT )" ,
0x00000b5a , "\0\0\0\0countT thirdC::s_postHostF( tinS& tinP , osTextT*& postP , const nicNameC nicNameP )" ,
0x00000b5b , "\0\0\0\0boolT thirdC::s_bCanWriteF( tinS& tinP , const handleC& handleP , const countT time1P , const sCountT time2P )" ,
0x00000b5c , "\0\0\0\0NEWdELtYPEtHIRD( count01T , ifciDtYPEdROPnOTE_count01T )" ,
0x00000b5d , "\0\0\0\0voidT thirdC::osBeImpotentF( tinS& tinP , const countT codeP )" ,
0x00000b5e , "\0\0\0\0boolT thirdC::winSetTitleF( tinS& tinP , const osTextT* const postP , const handleC& hWindowP )" ,
0x00000b5f , "\0\0\0\0voidT thirdC::osTimeToOldTimeF( tinS& tinP , countT& msP , countT& ssP , countT& mmP , countT& hhP , countT& dP , countT& mP , sCountT& yP , countT& dowP , const countT time1P , const sCountT time2P , const flagsT flagsP )" ,
0x00000b60 , "\0\0\0\0boolT thirdC::winShowWindowF( tinS& tinP , const handleC& handleP , const countT idCmdP )" ,
0x00000b61 , "\0\0\0\0voidT thirdC::winInvalidateRectF( tinS& tinP , windowOldC& wP , measureT mIdColMinP , measureT mIdRowMinP , measureT mIdColMaxP , measureT mIdRowMaxP )" ,
0x00000b62 , "\0\0\0\0voidT thirdC::winOpenDrawingHandleF( tinS& tinP , handleC& hDrawP , const handleC& hWindowP )" ,
0x00000b63 , "\0\0\0\0voidT thirdC::winSetTextAlignF( tinS& tinP , const handleC& hDrawP , const countT idCmdP )" ,
0x00000b64 , "\0\0\0\0voidT thirdC::winDrawTextF( tinS& tinP , const handleC& hDrawP , countT& cColP , countT& cRowP , const measureT mIdColP , const measureT mIdRowP , const osTextT* const postP , countT costP , const flagsT flagsP )" ,
0x00000b65 , "\0\0\0\0voidT thirdC::winTextSizeF( tinS& tinP , countT& cColP , countT& cRowP , const handleC& hDrawP , const osTextT* const postP , countT costP )" ,
0x00000b66 , "\0\0\0\0countT thirdC::winSendMessageF( tinS& tinP , const handleC& hWindowP , const countT idCmdP , const countT arg1P , const countT arg2P )" ,
0x00000b67 , "\0\0\0\0voidT  thirdC::winPostMessageF( tinS& tinP , const handleC& hWindowP , const countT idCmdP , const countT arg1P , const countT arg2P )" ,
0x00000b68 , "\0\0\0\0voidT thirdC::winPaintNowF( tinS& tinP , const handleC& hWindowP )" ,
0x00000b69 , "\0\0\0\0voidT thirdC::winClientSizeF( tinS& tinP , countT& cColP , countT& cRowP , const handleC& hWindowP )" ,
0x00000b6a , "\0\0\0\0voidT thirdC::winCreateWindowF( tinS& tinP , const handleC& hWindowParentOrOwnerP , handleC& hWindowP , const osTextT* const postTitleP , const osTextT* const postOldClassP , const countT idTypeP , sCountT idColP , sCountT idRowP , countT cColP , countT cRowP , const countT cColClientP , const countT cRowClientP , const handleC& hWindowingClientIP , const boolT bNotVisibleP , countT cTriesP )" ,
0x00000b6b , "\0\0\0\0voidT thirdC::winCreateWindowClassF( tinS& tinP , const osTextT* const postOldClassP , ifcWindowMessageHandlerFT winMsgHandlerFP )" ,
0x00000b6c , "\0\0\0\0voidT thirdC::winBeginPaintF( tinS& tinP , handleC& hDrawP , const handleC& hWindowP , sCountT& idColMinP , sCountT& idRowMinP , sCountT& idColMaxP , sCountT& idRowMaxP )" ,
0x00000b6d , "\0\0\0\0voidT thirdC::winEndPaintF( tinS& tinP , handleC& hDrawP )" ,
0x00000b6e , "\0\0\0\0voidT thirdC::dosOpenF( tinS& tinP , handleC& handleP , countT& idResultP , const osTextT* const postP , const countT idAccessP , const countT idShareP , const flagsT flagsDetailsP , const countT idHowP , const flagsT flagsAttributeP , const countT cbP , countT cTriesP )" ,
0x00000b6f , "\0\0\0\0voidT thirdC::dosWriteF( tinS& tinP , const handleC& handleP , const byteT* const pbP , const countT cbP )" ,
0x00000b70 , "\0\0\0\0voidT thirdC::winHWindowDeskF( tinS& tinP , handleC& handleP )" ,
0x00000b71 , "\0\0\0\0voidT thirdC::dosSetFilePtrF( tinS& tinP , const handleC& handleP , const flagsT flagsP , count2S& c2P )" ,
0x00000b72 , "\0\0\0\0voidT thirdC::winSizeF( tinS& tinP , countT& cColP , countT& cRowP , const handleC& hWindowP )" ,
0x00000b73 , "\0\0\0\0voidT thirdC::dosWriteConsoleInputCRF( tinS& tinP )" ,
0x00000b74 , "\0\0\0\0NEWdELtYPEtHIRD( nicNameC , ifciDtYPEdROPnOTE_nicNameC )" ,
0x00000b75 , "\0\0\0\0voidT thirdC::imageExeDllF( tinS& tinP , imageExeDllC*& pInfoP , const byteT* const pbP )" ,
0x00000b76 , "\0\0\0\0countT thirdC::osMessageBoxF( tinS& tinP , const osTextT* const postP , const osTextT* const postTitleP , const flagsT flagsButtonsP , const flagsT flagButtonSelectedP )" ,
0x00000b77 , "\0\0\0\0voidT thirdC::s_optionBroadcastF( tinS& tinP , const handleC& handleP , const boolT bAllowP )" ,
0x00000b78 , "\0\0\0\0voidT thirdC::s_optionReuseAddressF( tinS& tinP , const handleC& handleP , const boolT bAllowP )" ,
0x00000b79 , "\0\0\0\0voidT thirdC::s_optionSendNowF( tinS& tinP , const handleC& handleP , const boolT bEnableP )" ,
0x00000b7a , "\0\0\0\0voidT thirdC::s_writeF( tinS& tinP , handleC& handleP , const countT idPortP , const nicNameC nicNameP , const byteT* const pbP , const countT cbP , const countT idModeP )" ,
0x00000b7b , "\0\0\0\0voidT thirdC::s_readF( tinS& tinP , byteT*& pbP , countT& cbP , countT& idPortP , nicNameC& nicNameP , handleC& handleP , const countT time1P , const sCountT time2P , const countT idModeP )" ,
0x00000b7c , "\0\0\0\0voidT thirdC::s_acceptF( tinS& tinP , handleC& hClientP , countT& idPortP , nicNameC& nicNameP , const handleC& handleP , boolT& bRefuseP )" ,
0x00000b7d , "\0\0\0\0voidT thirdC::s_nicNameF( tinS& tinP , nicNameC*& pNicNameP , countT& cNicNameP , const osTextT* const postP )" ,
0x00000b7e , "\0\0\0\0voidT thirdC::osDriverF( tinS& tinP , const osTextT* postNameP )" ,
0x00000b7f , "\0\0\0\0voidT thirdC::osDriverUnregisterF( tinS& tinP , const osTextT* const postNameP )" ,
0x00000b80 , "\0\0\0\0voidT thirdC::osDriverRegisterF( tinS& tinP , const osTextT* const postNameP , const osTextT* const postDisplayNameP , const osTextT* const postDescriptionP , const osTextT* const postFileP )" ,
0x00000b81 , "\0\0\0\0countT thirdC::osDriverStatusF( tinS& tinP , const osTextT* const postNameP )" ,
0x00000b82 , "\0\0\0\0voidT thirdC::osDriverHireF( tinS& tinP , const osTextT* const postNameP , const countT cHowP , const osTextT** ppostHowP )" ,
0x00000b83 , "\0\0\0\0voidT thirdC::osDriverFireF( tinS& tinP , const osTextT* const postNameP )" ,
0x00000b84 , "\0\0\0\0voidT thirdC::dosWriteF( tinS& tinP , const osTextT* const postP , const byteT* const pbP , const countT cbP )" ,
0x00000b85 , "\0\0\0\0measure04T thirdC::c_sqrtIF( const measure04T mP )" ,
0x00000b86 , "\0\0\0\0voidT thirdC::s_readF( tinS& tinP , soulC& soulP , handleC& handleP , const countT time1P , const sCountT time2P , const countT idModeP )" ,
0x00000b87 , "\0\0\0\0voidT thirdC::s_readF( tinS& tinP , soulC& soulP , countT& idPortP , nicNameC& nicNameP , handleC& handleP , const countT time1P , const sCountT time2P , const countT idModeP )" ,
0x00000b88 , "\0\0\0\0voidT thirdC::s_writeF( tinS& tinP , handleC& handleP , soulC& soulP , const countT idModeP )" ,
0x00000b89 , "\0\0\0\0voidT thirdC::dosWriteF( tinS& tinP , const handleC& handleP , soulC& soulP )" ,
0x00000b8a , "\0\0\0\0voidT thirdC::dosReadF( tinS& tinP , soulC& soulP , const handleC& handleP )" ,
0x00000b8b , "\0\0\0\0countT thirdC::osClipboardReadF( tinS& tinP , osTextT*& postP )" ,
0x00000b8c , "\0\0\0\0voidT thirdC::osClipboardWriteF( tinS& tinP , const osTextT* const postP )" ,
0x00000b8d , "\0\0\0\0countT thirdC::osClipboardFlavorsF( tinS& tinP )" ,
0x00000b8e , "\0\0\0\0voidT thirdC::osClipboardGrabF( tinS& tinP )" ,
0x00000b8f , "\0\0\0\0voidT thirdC::osClipboardLetGoF( tinS& tinP )" ,
0x00000b90 , "\0\0\0\0voidT thirdC::dosFindFileOrDirF( tinS& tinP , infoFileS*& pInfoFileP , handleC& handleP , const osTextT* const postLikeP )" ,
0x00000b91 , "\0\0\0\0voidT thirdC::s_writeF( tinS& tinP , handleC& handleP , const countT idPortP , const nicNameC nicNameP , soulC& soulP , const countT idModeP )" ,
0x00000b92 , "\0\0\0\0voidT thirdC::dosCopyF( tinS& tinP , const osTextT* const postNewP , const osTextT* const postOldP , countT cTriesP )" ,
0x00000b93 , "\0\0\0\0voidT thirdC::s_getHostByNameF( tinS& tinP , stackC& stP , const osTextT* const postP )" ,
0x00000b94 , "\0\0\0\0voidT thirdC::thirdWaitTillQuittingF( tinS& tinP )" ,
0x00000b95 , "\0\0\0\0voidT thirdC::thirdLaunchLateThreadsF( tinS& tinP )" ,
0x00000b96 , "\0\0\0\0countT thirdC::thirdSignatureF( tinS& tinP , const byteT* const pbP , const countT cbP )" ,
0x00000b97 , "\0\0\0\0countT thirdC::thirdInspectEcValuesF( tinS& tinP )" ,
0x00000b98 , "\0\0\0\0voidT thirdC::thirdInspectEcValuesSuspendF( tinS& tinP )" ,
0x00000b99 , "\0\0\0\0voidT thirdC::thirdInspectEcValuesResumeF( tinS& tinP )" ,
0x00000b9a , "\0\0\0\0countT& thirdC::third_bWatchfulI_F( tinS& tinP )" ,
0x00000b9b , "\0\0\0\0countT& thirdC::third_bCarefulI_F( tinS& tinP )" ,
0x00000b9c , "\0\0\0\0voidT thirdC::osThreadF( tinS& tinP , countT& tidP , voidT* const tmFP , signC* const pSgnDoneP , const flagsT flagsP , const countT cbStackP , const countT c1P , const countT c2P , const countT c3P , const countT c4P , const countT c5P , const countT c6P , const countT c7P , const countT c8P )" ,
0x00000b9d , "\0\0\0\0voidT thirdC::dosResumeThreadF( tinS& tinP , const countT tidP )" ,
0x00000b9e , "\0\0\0\0voidT thirdC::dosGetThreadContextF( tinS& tinP , byteT*& pbP , countT& cbP , const countT tidP )" ,
0x00000b9f , "\0\0\0\0voidT thirdC::dosSetThreadContextF( tinS& tinP , const byteT* const pbP , const countT cbP , const countT tidP )" ,
0x00000ba0 , "\0\0\0\0voidT thirdC::dosSetThreadContextField_singleStep_F( tinS& tinP , byteT* const pbP , const countT cbP , const boolT bOnP )" ,
0x00000ba1 , "\0\0\0\0voidT thirdC::thirdDiscardTinF( voidT )" ,
0x00000ba2 , "\0\0\0\0etherC* thirdC::third_pEtherContainsMe_F( voidT )" ,
0x00000ba3 , "\0\0\0\0countT thirdC::strBodyLengthF( tinS& tinP , const countT* pcP )" ,
0x00000ba4 , "\0\0\0\0boolT thirdC::strFEndF( tinS& tinP , const countT* const pcP , const countT cnP )" ,
0x00000ba5 , "\0\0\0\0sCountT thirdC::strCompareF( tinS& tinP , const countT* const pc1P , const countT* const pc2P , const countT ccP , const countT ccMaxP , const countT* const pcFilterP , const countT ccFilterP , const boolT bReverseP )" ,
0x00000ba6 , "\0\0\0\0countT thirdC::osThreadOsTidF( tinS& tinP )" ,
0x00000ba7 , "\0\0\0\0voidT thirdC::dosContinueMonitoringF( tinS& tinP , const countT osTidP , const countT osPidP , const countT idCmdP )" ,
0x00000ba8 , "\0\0\0\0voidT thirdC::dosGetCurrentDirF( tinS& tinP , osTextT*& postP )" ,
0x00000ba9 , "\0\0\0\0countT thirdC::c_strConcatenateF( tinS& tinP , osTextT*& postToP , const osTextT** const ppostFromP )" ,
0x00000baa , "\0\0\0\0voidT thirdC::dosReadThreadContextF( tinS& tinP , countT*& pcLathP , countT*& pcWothP , const countT osHandleP )" ,
0x00000bab , "\0\0\0\0voidT thirdC::osRegionInfoF( tinS& tinP , countT& cBitsGrainP , byteT*& pbIdRegionP , byteT*& pbIdAllocP , vmRegionS*& pVmRegionP , vmRegionS*& pVmRegionAllocP , countT hProcessP )" ,
0x00000bac , "\0\0\0\0flagsT thirdC::dosQueryFileAttrF( tinS& tinP , const osTextT* const postP )" ,
0x00000bad , "\0\0\0\0voidT thirdC::dosSetFileAttrF( tinS& tinP , const osTextT* const postP , const flagsT flagsP )" ,
0x00000bae , "\0\0\0\0voidT thirdC::osLinkF( tinS& tinP , const osTextT* const postOutP , const osTextT* const postInP , const flagsT flagsP , const osTextT* const postLibraryP , const osTextT* const postDescriptionP )" ,
0x00000baf , "\0\0\0\0voidT thirdC::winRectangleF( tinS& tinP , const handleC& hDrawP , measureT mIdColMinP , measureT mIdRowMinP , measureT mIdColMaxP , measureT mIdRowMaxP )" ,
0x00000bb0 , "\0\0\0\0const handleC& thirdC::third_hWindowingClientIF( tinS& tinP )" ,
0x00000bb1 , "\0\0\0\0voidT thirdC::winResetF( tinS& tinP , const handleC& hDrawP , windowOldC& wP )" ,
0x00000bb2 , "\0\0\0\0countT& thirdC::third_idThreadWindowsIF( tinS& tinP )" ,
0x00000bb3 , "\0\0\0\0voidT thirdC::winMoveF( tinS& tinP , const handleC& hDrawP , const measureT mIdColP , const measureT mIdRowP )" ,
0x00000bb4 , "\0\0\0\0voidT thirdC::winLineF( tinS& tinP , const handleC& hDrawP , const countT colorP , const measureT mIdColP , const measureT mIdRowP , const flagsT flagsP )" ,
0x00000bb5 , "\0\0\0\0stackC& thirdC::third_stThird_F( tinS& tinP )" ,
0x00000bb6 , "\0\0\0\0voidT thirdC::osDriversF( tinS& tinP , stackC& stDriverP , const osTextT* const postPrefixP )" ,
0x00000bb7 , "\0\0\0\0voidT thirdC::winOpenDrawingToolF( tinS& tinP , handleC& hP , const countT idTypeP , const handleC& hDrawP , const countT* const pcP )" ,
0x00000bb8 , "\0\0\0\0voidT thirdC::winSelectDrawingToolF( tinS& tinP , handleC& hDrawP , handleC& hToolP , handleC& hOldToolP )" ,
0x00000bb9 , "\0\0\0\0voidT thirdC::winOpenBitmapPseudodeviceF( tinS& tinP , handleC& hP , const handleC& hDrawP )" ,
0x00000bba , "\0\0\0\0voidT thirdC::winSetPaintTypeF( tinS& tinP , const handleC& hP , countT idTypeP )" ,
0x00000bbb , "\0\0\0\0killSocketS* thirdC::s_registerTimeoutF( tinS& tinP , const handleC& handleP , const countT time1P , const sCountT time2P )" ,
0x00000bbc , "\0\0\0\0boolT thirdC::s_unregisterTimeoutF( tinS& tinP , const handleC& handleP )" ,
0x00000bbd , "\0\0\0\0countT thirdC::third_idMemorySpaceI_F( tinS& tinP )" ,
0x00000bbe , "\0\0\0\0countT thirdC::winSendMessageCloseF( tinS& tinP , const handleC& hWindowP )" ,
0x00000bbf , "\0\0\0\0boolT thirdC::dosWaitDirF( tinS& tinP , handleC& handleP , const boolT& bQuitP , const osTextT* const postDirP , const flagsT flagsP )" ,
0x00000bc0 , "\0\0\0\0thirdC::operator const poopC&( voidT )" ,
0x00000bc1 , "\0\0\0\0voidT thirdC::winArcF( tinS& tinP , const handleC& hDrawP , const measureT mIdColFromP , const measureT mIdRowFromP , const measureT mIdColToP , const measureT mIdRowToP , const flagsT flagsP )" ,
0x00000bc2 , "\0\0\0\0voidT thirdC::winOpenDrawingToolF( tinS& tinP , handleC& hP , const countT idTypeP , const countT* const pcP )" ,
0x00000bc3 , "\0\0\0\0voidT thirdC::dosQueryModuleHandleF( tinS& tinP , handleC& handleP , const osTextT* const postP )" ,
0x00000bc4 , "\0\0\0\0voidT thirdC::diskWalkCopyF( tinS& tinP , countT& cDirsP , countT& cFilesP , const boolT& bQuitP , const osTextT* const postToP , const osTextT* const postFromP , diskWalkCopyCBFT pCbfP , countT* pcArgP )" ,
0x00000bc5 , "\0\0\0\0voidT thirdC::diskZipF( tinS& tinP , const osTextT* const postToP , const osTextT* const postFromP , const flagsT flagsP )" ,
0x00000bc6 , "\0\0\0\0voidT thirdC::diskWalkGatherF( tinS& tinP , countT& cDirsP , countT& cFilesP , const boolT& bQuitP , const osTextT* const postToP , const osTextT* const postFromP , diskWalkCopyCBFT pCbfP , countT* pcArgP )" ,
0x00000bc7 , "\0\0\0\0voidT thirdC::diskWalkTimePrefixF( tinS& tinP , countT& cDirsP , countT& cFilesP , const boolT& bQuitP , const osTextT* const postFromP , diskWalkCopyCBFT pCbfP , countT* pcArgP )" ,
0x00000bc8 , "\0\0\0\0voidT thirdC::diskWalkRenameForArchivalF( tinS& tinP , countT& cDirsP , countT& cFilesP , const boolT& bQuitP , const osTextT* const postToP , const osTextT* const postFromP , diskWalkCopyCBFT pCbfP )" ,
0x00000bc9 , "\0\0\0\0voidT thirdC::diskUnzipF( tinS& tinP , const osTextT* const postFileP , const osTextT* const postZipfileP , const flagsT flagsP )" ,
0x00000bca , "\0\0\0\0sCountT thirdC::c_atoiForeignDecimalIF( const osTextT* const postP , const boolT bSignedP )" ,
0x00000bcb , "\0\0\0\0countT thirdC::osOffNumaNodeValidChosenIF( countT idNodeWantedP )" ,
0x00000bcc , "\0\0\0\0voidT thirdC::osLogWrongNodeIF( tinS& tinP )" ,
0x00000bcd , "\0\0\0\0voidT thirdC::osTraceWrongNodeIF( tinS& tinP , byteT* pbP , const osTextT* const postComment1P , const osTextT* const postComment2P )" ,
0x00000bce , "\0\0\0\0voidT thirdC::diskWalkSearchF( tinS& tinP , countT& cDirsP , countT& cFilesP , const boolT& bQuitP , const osTextT* const postP , const osTextT* const postFindP , const flagsT flagsP , diskWalkSearchCBFT pCbfP , countT* pcArgP )" ,
0x00000bcf , "\0\0\0\0etherC::etherC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const flagsT flagsModeP , const flagsT flagsWatchP , const osTextT* const postNameP )" ,
0x00000bd0 , "\0\0\0\0etherC::~etherC( voidT )" ,
0x00000bd1 , "\0\0\0\0etherC::operator const countT&( voidT )" ,
0x00000bd2 , "\0\0\0\0etherC::operator thirdC&( voidT )" ,
0x00000bd3 , "\0\0\0\0voidT etherC::operator =( const countT rcP )" ,
0x00000bd4 , "\0\0\0\0voidT etherC::beeClickF( tinS& tinP , const countT hzP , const countT timeP )" ,
0x00000bd5 , "\0\0\0\0voidT etherC::beeHonkF( tinS& tinP , const countT hzP , const countT timeP )" ,
0x00000bd6 , "\0\0\0\0voidT etherC::beeSong1F( tinS& tinP )" ,
0x00000bd7 , "\0\0\0\0voidT etherC::batonCloseF( tinS& tinP , handleC& handleP )" ,
0x00000bd8 , "\0\0\0\0voidT etherC::batonGrabF( tinS& tinP , const handleC& handleP )" ,
0x00000bd9 , "\0\0\0\0voidT etherC::batonLetGoF( tinS& tinP , const handleC& handleP )" ,
0x00000bda , "\0\0\0\0voidT etherC::batonOpenF( tinS& tinP , handleC& handleP , boolT& fCreatorP , const strokeS* const psttP )" ,
0x00000bdb , "\0\0\0\0voidT etherC::strokeF( tinS& tinP , const strokeS* psttP )" ,
0x00000bdc , "\0\0\0\0voidT etherC::diskFileOrDirDeleteF( tinS& tinP , const strokeS* const psttP , flagsT flagsP , countT cTriesP )" ,
0x00000bdd , "\0\0\0\0voidT etherC::diskMoveFileOrDirF( tinS& tinP , const strokeS* const psttNewP , const strokeS* const psttOldP , const countT cTriesP )" ,
0x00000bde , "\0\0\0\0voidT etherC::fileOpenF( tinS& tinP , handleC& handleP , countT& idResultP , const strokeS* const psttP , const countT idAccessP , const countT idShareP , const flagsT flagsDetailsP , const countT idHowP , const flagsT flagsAttributeP , const countT cbP , countT cTriesP )" ,
0x00000bdf , "\0\0\0\0voidT etherC::diskFileQueryF( tinS& tinP , infoFileS*& pInfoFileP , const handleC& handleP )" ,
0x00000be0 , "\0\0\0\0voidT etherC::fileReadF( tinS& tinP , byteT* const pbP , countT& cbP , const handleC& handleP , boolT fStillHungryIsOkP )" ,
0x00000be1 , "\0\0\0\0voidT etherC::diskFileRefreshF( tinS& tinP , strokeS*& pstt1NotRefreshedP , const strokeS* const pstt1LocalP , const strokeS* const pstt1RemoteP , const strokeS* const psttRemotePrefixP )" ,
0x00000be2 , "\0\0\0\0voidT etherC::fileWriteF( tinS& tinP , const handleC& handleP , const byteT* const pbP , const countT cbP )" ,
0x00000be3 , "\0\0\0\0voidT etherC::paperZitsOffF( tinS& tinP )" ,
0x00000be4 , "\0\0\0\0voidT etherC::paperZitsOnF( tinS& tinP )" ,
0x00000be5 , "\0\0\0\0countT etherC::diskFindFileOrDirOldF( tinS& tinP , strokeS*& pstt1FoundP , const strokeS* const psttLikeP , soulC* pSoulP , grabC* pGrabP , const countT csttExtraP , const countT cMaxP )" ,
0x00000be6 , "\0\0\0\0voidT etherC::diskFindFileOrDirOldF( tinS& tinP , strokeS*& psttNameP , handleC& handleP , const strokeS* const psttLikeP )" ,
0x00000be7 , "\0\0\0\0voidT etherC::diskFindFileOrDirOldF( tinS& tinP , infoFileS*& pInfoFileP , handleC& handleP , const strokeS* const psttLikeP )" ,
0x00000be8 , "\0\0\0\0countT etherC::diskChooseSiteF( tinS& tinP , strokeS*& psttP , const strokeS* const psttKeyP , const strokeS* const psttPathP )" ,
0x00000be9 , "\0\0\0\0voidT etherC::diskFindMostFreeSpaceF( tinS& tinP , strokeS*& psttDiskP )" ,
0x00000bea , "\0\0\0\0boolT etherC::diskMakeDirF( tinS& tinP , const strokeS* const psttP )" ,
0x00000beb , "\0\0\0\0boolT etherC::diskMakeDirIfNeededF( tinS& tinP , const strokeS* const psttFileOrDirP )" ,
0x00000bec , "\0\0\0\0boolT etherC::diskMakeDirStupidlyF( tinS& tinP , const strokeS* const psttP )" ,
0x00000bed , "\0\0\0\0voidT etherC::diskMapFileNameF( tinS& tinP , strokeS*& psttP , const strokeS* const psttRawP )" ,
0x00000bee , "\0\0\0\0countT etherC::diskIdF( tinS& tinP , const strokeS* const psttDriveNameP )" ,
0x00000bef , "\0\0\0\0voidT etherC::diskInfoF( tinS& tinP , infoDiskS*& pInfoDiskP , const strokeS* const psttDriveNameP , const countT cTriesP )" ,
0x00000bf0 , "\0\0\0\0voidT etherC::dllEntryF( tinS& tinP , voidT*& pvP , const handleC& handleP , const strokeS* psttP )" ,
0x00000bf1 , "\0\0\0\0voidT etherC::dllEntryF( tinS& tinP , mainFT& pMainFP , const handleC& handleP , const strokeS* psttP )" ,
0x00000bf2 , "\0\0\0\0voidT etherC::dllNameF( tinS& tinP , strokeS*& psttP , const handleC& handleP )" ,
0x00000bf3 , "\0\0\0\0voidT etherC::dllOpenF( tinS& tinP , handleC& hDllP , const strokeS* psttP )" ,
0x00000bf4 , "\0\0\0\0voidT etherC::osTimeAddF( tinS& tinP , countT& time11P , sCountT& time12P , const countT time21P , const sCountT time22P )" ,
0x00000bf5 , "\0\0\0\0voidT etherC::strFromProcessF( tinS& tinP , strokeS*& psttOutP , strokeS*& psttErrorP , const strokeS* const psttExeP , const strokeS* const psttArgsP , const strokeS* const psttInP )" ,
0x00000bf6 , "\0\0\0\0voidT etherC::ifcDatumF( tinS& tinP , const flagsT flags1P , const flagsT flags2P , countT amountP , const countT* const pcResourceIdP , const countT idLineP , const voidT* const pbFileP , const byteT* const pbP , const countT cbP )" ,
0x00000bf7 , "\0\0\0\0boolT etherC::strEvaluateF( tinS& tinP , strokeS*& psttP , const countT csttExtraP , const strokeS* const psttOldP )" ,
0x00000bf8 , "\0\0\0\0voidT etherC::poolDelF( tinS& tinP , voidT* const pvP )" ,
0x00000bf9 , "\0\0\0\0sCountT etherC::memCompareF( tinS& tinP , const byteT* const pb1P , const byteT* const pb2P , const countT cbP )" ,
0x00000bfa , "\0\0\0\0voidT etherC::memCopyF( tinS& tinP , byteT* const pbToP , const byteT* const pbFromP , const countT cbP )" ,
0x00000bfb , "\0\0\0\0voidT etherC::memOpenF( tinS& tinP , voidT*& pvP , const countT cbP )" ,
0x00000bfc , "\0\0\0\0voidT etherC::memCloseF( tinS& tinP , voidT*& pvP )" ,
0x00000bfd , "\0\0\0\0voidT etherC::memSetF( tinS& tinP , byteT* const pbP , const countT cbP , const byteT valueP )" ,
0x00000bfe , "\0\0\0\0voidT etherC::reportProcessNamePidF( tinS& tinP , strokeS*& psttP , strokeS*& psttPrefixP , strokeS*& psttSuffixP , strokeS*& psttUniqueP )" ,
0x00000bff , "\0\0\0\0voidT etherC::osEnvironmentVariableF( tinS& tinP , strokeS*& psttValueP , const strokeS* const psttKeyP )" ,
0x00000c00 , "\0\0\0\0countT etherC::osProcessIdF( tinS& tinP )" ,
0x00000c01 , "\0\0\0\0countT etherC::osThreadIdF( tinS& tinP )" ,
0x00000c02 , "\0\0\0\0voidT etherC::strAbridgeF( tinS& tinP , strokeS*& psttP , const strokeS* const psttOldP , const strokeS* const psttDelimiterP )" ,
0x00000c03 , "\0\0\0\0voidT etherC::strResizeF( tinS& tinP , strokeS*& psttP , const countT csP , strokeS sttP , const boolT fLeadingP , const countT csttExtraP )" ,
0x00000c04 , "\0\0\0\0voidT etherC::strFromTimeF( tinS& tinP , strokeS*& psttP , countT time1P , sCountT time2P , const countT idWothP , const countT idLathP , const strokeS sttRadixP , const strokeS* const psttDelimiterP , const countT idFormatP , const flagsT flagsFormatP )" ,
0x00000c05 , "\0\0\0\0voidT etherC::sockF( tinS& tinP , handleC& handleP , const boolT idTypeP , const handleC* const phContextP )" ,
0x00000c06 , "\0\0\0\0countT etherC::sockBindF( tinS& tinP , const handleC& handleP , const countT idPortP , const nicNameC nicNameP , const countT cTriesP )" ,
0x00000c07 , "\0\0\0\0voidT etherC::sockCancelF( tinS& tinP , const handleC& handleP )" ,
0x00000c08 , "\0\0\0\0voidT etherC::sockConnectF( tinS& tinP , handleC& handleP , const countT idPortP , const nicNameC nicNameP , countT cTriesP , const countT time1P , const sCountT time2P )" ,
0x00000c09 , "\0\0\0\0nicNameC etherC::sockNicNameF( tinS& tinP , const strokeS* psttP )" ,
0x00000c0a , "\0\0\0\0voidT etherC::sockListenF( tinS& tinP , const handleC& handleP )" ,
0x00000c0b , "\0\0\0\0voidT etherC::sockOptionLingerF( tinS& tinP , const handleC& handleP , const countT cSecondsP )" ,
0x00000c0c , "\0\0\0\0countT etherC::sockPeekF( tinS& tinP , handleC& handleP , byteT* pbP , const countT cbP , const flagsT flagsP , const countT time1P , const sCountT time2P )" ,
0x00000c0d , "\0\0\0\0countT etherC::sockReadF( tinS& tinP , handleC& handleP , byteT* const pbP , const countT cbP , const flagsT flagsP , const countT time1P , const sCountT time2P , const countT idModeP )" ,
0x00000c0e , "\0\0\0\0voidT etherC::socksShutdownF( tinS& tinP )" ,
0x00000c0f , "\0\0\0\0voidT etherC::socksSetupF( tinS& tinP )" ,
0x00000c10 , "\0\0\0\0voidT etherC::sockWriteF( tinS& tinP , handleC& handleP , const byteT* pbP , const countT cbP , const countT idModeP )" ,
0x00000c11 , "\0\0\0\0boolT etherC::strFEndF( tinS& tinP , const strokeS* const psttP , const countT cnP )" ,
0x00000c12 , "\0\0\0\0boolT etherC::strFEndF( tinS& tinP , const osTextT* const postP , const countT cnP )" ,
0x00000c13 , "\0\0\0\0sCountT etherC::strCompareF( tinS& tinP , const strokeS* const pstt1P , const strokeS* const pstt2P , const countT csMaxP )" ,
0x00000c14 , "\0\0\0\0voidT etherC::strConvertToLowerCaseF( tinS& tinP , strokeS* psttP )" ,
0x00000c15 , "\0\0\0\0voidT etherC::strConvertToLowerCaseF( tinS& tinP , strokeS& sttOutP , const strokeS& sttInP )" ,
0x00000c16 , "\0\0\0\0sCountT etherC::strDigitsToSCountF( tinS& tinP , const strokeS* const psttP , const countT defaultRadixP , const boolT bForeignP )" ,
0x00000c17 , "\0\0\0\0voidT etherC::strFromF( tinS& tinP , strokeS*& psttP , const sCountT valueP , const flagsT flagsFormatP , const countT csP , const countT radixP , const countT csttExtraP )" ,
0x00000c18 , "\0\0\0\0voidT etherC::strFuseF( tinS& tinP , strokeS*& psttOutP , const strokeS* const psttInP , soulC* pSoulP , grabC* pGrabP , const strokeS sttEscapeP , const strokeS* psttDelimiterPairsP , const countT csttMaxDelimiterP , const countT csttExtraP )" ,
0x00000c19 , "\0\0\0\0voidT etherC::strFuseF( tinS& tinP , strokeS*& psttOutP , const strokeS sttInP , const countT csttExtraP , const boolT fLeadingP )" ,
0x00000c1a , "\0\0\0\0countT etherC::strIdF( tinS& tinP , const strokeS& sttSmallP , const strokeS* psttBigP , sCountT idP )" ,
0x00000c1b , "\0\0\0\0countT etherC::strIdF( tinS& tinP , countT& idFirstP , strokeS& sttQuoteP , const strokeS& sttSmallP , const strokeS* psttBigP , const countT idLastP , sCountT idP )" ,
0x00000c1c , "\0\0\0\0countT etherC::strIdF( tinS& tinP , stackC* const pstMatchP , const flagsT flagsMatchP , countT& idFirstP , strokeS& sttQuoteP , const strokeS* psttSmallP , const strokeS* psttBigP , const countT idLastP , sCountT idP )" ,
0x00000c1d , "\0\0\0\0countT etherC::strIdAnyF( tinS& tinP , stackC* const pstMatchP , const flagsT flagsMatchP , countT& idFirstP , strokeS& sttQuoteP , const strokeS* psttSmallP , const strokeS* psttBigP , const countT idLastP , sCountT idP , const flagsT flagsP )" ,
0x00000c1e , "\0\0\0\0boolT etherC::strIsInQuoteF( tinS& tinP , strokeS& sttQuoteP , const countT idP , const strokeS* const psttP )" ,
0x00000c1f , "\0\0\0\0countT etherC::strBodyLengthF( tinS& tinP , const osTextT* postP )" ,
0x00000c20 , "\0\0\0\0voidT etherC::ifcRaceIdF( tinS& tinP , const countT* const pcRaceIdP )" ,
0x00000c21 , "\0\0\0\0voidT etherC::strMakeFromOsTextF( tinS& tinP , strokeS*& psttP , const osTextT* const postP , const countT costP , const countT csttExtraP )" ,
0x00000c22 , "\0\0\0\0countT etherC::strMakeF( tinS& tinP , osTextT*& postP , const strokeS* const psttP , const countT costExtraP , const flagsT flagsP , const countT cbPrefixExtraP )" ,
0x00000c23 , "\0\0\0\0voidT etherC::strMakeF( tinS& tinP , strokeS*& psttOutP , const strokeS* const psttInP , const countT csttExtraP )" ,
0x00000c24 , "\0\0\0\0voidT etherC::strSubstringF( tinS& tinP , strokeS*& psttP , countT& idFirstP , countT& idLastP , const strokeS* psttBigP , const countT csttExtraP )" ,
0x00000c25 , "\0\0\0\0boolT etherC::strSubstringF( tinS& tinP , strokeS*& psttP , countT& idFirstP , strokeS& sttQuoteP , const strokeS& sttSmallP , const strokeS* psttBigP , const countT csttExtraP )" ,
0x00000c26 , "\0\0\0\0boolT etherC::strSubstringF( tinS& tinP , strokeS*& psttP , countT& idFirstP , strokeS& sttQuoteP , const strokeS* psttSmallP , const strokeS* psttBigP , const boolT bAnyP , const countT csttExtraP )" ,
0x00000c27 , "\0\0\0\0voidT etherC::strUniqueF( tinS& tinP , strokeS*& psttP )" ,
0x00000c28 , "\0\0\0\0voidT etherC::strUrlDecodeF( tinS& tinP , strokeS*& psttOutP , strokeS* psttInP )" ,
0x00000c29 , "\0\0\0\0voidT etherC::strUrlDecodeF( tinS& tinP , strokeS*& psttP )" ,
0x00000c2a , "\0\0\0\0voidT etherC::strUrlNameF( tinS& tinP , strokeS*& psttNameP , const strokeS* psttUrlP )" ,
0x00000c2b , "\0\0\0\0voidT etherC::strUrlSchemeF( tinS& tinP , strokeS*& psttSchemeP , const strokeS* psttUrlP )" ,
0x00000c2c , "\0\0\0\0voidT etherC::poolNewF( tinS& tinP , const countT idLineNewP , const countT idiFileNewP , byteT*& pbP , const countT cbP )" ,
0x00000c2d , "\0\0\0\0voidT etherC::osSleepF( tinS& tinP , const countT timeP , const countT timeGrainP , const flagsT flagsP )" ,
0x00000c2e , "\0\0\0\0voidT etherC::osThreadF( tinS& tinP , countT& tidP , voidT* const tmFP , signC* const pSgnDoneP , const flagsT flagsP , const countT cbStackP , const countT c1P , const countT c2P , const countT c3P , const countT c4P , const countT c5P , const countT c6P , const countT c7P , const countT c8P )" ,
0x00000c2f , "\0\0\0\0voidT etherC::osTimeSubtractF( tinS& tinP , countT& time11P , sCountT& time12P , const countT time21P , const sCountT time22P )" ,
0x00000c30 , "\0\0\0\0voidT etherC::diskSelectF( tinS& tinP , const strokeS* const psttDriveNameP )" ,
0x00000c31 , "\0\0\0\0voidT etherC::diskHoverF( tinS& tinP , const strokeS* const psttP )" ,
0x00000c32 , "\0\0\0\0voidT etherC::boxPutF( tinS& tinP , const strokeS* const psttP , const byteT* const pbP , const countT cbP , countT cOpenTriesP , countT time1P , const sCountT time2P , const flagsT flagsOpenDetailsP , const flagsT flagsPutP )" ,
0x00000c33 , "\0\0\0\0voidT etherC::boxGetF( tinS& tinP , byteT*& pbP , countT& cbP , const strokeS* const psttP , countT cOpenTriesP , const countT cZapTriesP , countT time1P , const sCountT time2P , const flagsT flagsOpenDetailsP )" ,
0x00000c34 , "\0\0\0\0voidT etherC::boxGetShadowF( tinS& tinP , byteT*& pbP , countT& cbP , const strokeS* const psttP , countT cOpenTriesP , countT time1P , const sCountT time2P , const flagsT flagsOpenDetailsP , const flagsT flagsP , const osTextT* const postBodyP , countT costBodyP )" ,
0x00000c35 , "\0\0\0\0voidT etherC::boxPutUniqueF( tinS& tinP , strokeS*& psttP , const strokeS* const psttLikeP , const byteT* const pbP , const countT cbP , countT cOpenTriesP , const flagsT flagsOpenDetailsP )" ,
0x00000c36 , "\0\0\0\0voidT etherC::boxTimeF( tinS& tinP , countT& time1P , sCountT& time2P , const strokeS* const psttP )" ,
0x00000c37 , "\0\0\0\0countT etherC::boxMenuF( tinS& tinP , soulC& soulP , const strokeS* const psttLikeP , grabC* pGrabP  , const countT cMaxP )" ,
0x00000c38 , "\0\0\0\0voidT etherC::boxGetF( tinS& tinP , const strokeS* const psttP , countT cOpenTriesP , const countT cZapTriesP , countT time1P , const sCountT time2P , const flagsT flagsOpenDetailsP )" ,
0x00000c39 , "\0\0\0\0voidT etherC::osSessionF( tinS& tinP , countT& tidP , countT& pidP , const strokeS* const psttExeP , const strokeS* const psttArgsP , const countT idColP , const countT idRowP , const countT cColP , const countT cRowP , const flagsT flagsP )" ,
0x00000c3a , "\0\0\0\0voidT etherC::osSessionF( tinS& tinP , countT& tidP , countT& pidP , const countT idAdamP , const strokeS* const psttArgsP , const countT idColP , const countT idRowP , const countT cColP , const countT cRowP , const flagsT flagsP )" ,
0x00000c3b , "\0\0\0\0voidT etherC::dllEntryF( tinS& tinP , peekFT& pPeekFP , const handleC& handleP , const strokeS* psttP )" ,
0x00000c3c , "\0\0\0\0voidT etherC::fileHoseCreateF( tinS& tinP , handleC& handleP , const strokeS* const psttP )" ,
0x00000c3d , "\0\0\0\0voidT etherC::fileHoseConnectF( tinS& tinP , const handleC& handleP )" ,
0x00000c3e , "\0\0\0\0voidT etherC::fileHoseDisconnectF( tinS& tinP , const handleC& handleP )" ,
0x00000c3f , "\0\0\0\0countT etherC::strReplaceF( tinS& tinP , strokeS*& psttNewBigP , const strokeS* psttOldBigP , const strokeS* const psttOldSmallP , const strokeS* const psttNewSmallP , const countT csttExtraP , const flagsT flagsP )" ,
0x00000c40 , "\0\0\0\0voidT etherC::strFromIdPortNicNameF( tinS& tinP , strokeS*& psttP , const countT idPortP , const nicNameC nicNameP )" ,
0x00000c41 , "\0\0\0\0voidT etherC::strReverseF( tinS& tinP , strokeS*& psttP , const strokeS* psttOldP , const strokeS* const psttDelimiterP , soulC* pSoulP , grabC* pGrabP , const countT csttExtraP )" ,
0x00000c42 , "\0\0\0\0countT etherC::strReplaceAnyF( tinS& tinP , strokeS*& psttNewBigP , const strokeS* psttOldBigP , const strokeS* const psttOldSmallP , const strokeS* const psttNewSmallP , const countT csttExtraP , const flagsT flagsP )" ,
0x00000c43 , "\0\0\0\0countT etherC::boxMailGetF( tinS& tinP , const strokeS* const psttLikeP , const strokeS* const psttBoxIP , const countT csttEstimateP )" ,
0x00000c44 , "\0\0\0\0voidT etherC::osTimeNowF( tinS& tinP , countT& time1P , sCountT& time2P , boolT fRawP )" ,
0x00000c45 , "\0\0\0\0voidT etherC::boxZapF( tinS& tinP , const strokeS* const psttP , const countT cTriesP )" ,
0x00000c46 , "\0\0\0\0voidT etherC::paperTalkProgressF( tinS& tinP , batonC& bConsoleP , countT& goalP , countT& atP , countT msSleepP , strokeS* psttPrefixP , strokeS* psttSuffixP )" ,
0x00000c47 , "\0\0\0\0voidT etherC::boxMenuIdRangeF( tinS& tinP , countT& idMinP , countT& idMaxP , const strokeS* psttLikeP , const countT csttEstimateP , strokeS sttDelimiterP )" ,
0x00000c48 , "\0\0\0\0voidT etherC::ifcDatumF( tinS& tinP , const flagsT flags1P , const flagsT flags2P , countT amountP , const countT* const pcResourceIdP , const byteT* const pbP , const countT cbP )" ,
0x00000c49 , "\0\0\0\0countT etherC::strBodyLengthF( tinS& tinP , const countT* pcP )" ,
0x00000c4a , "\0\0\0\0boolT etherC::strFEndF( tinS& tinP , const countT* const pcP , const countT cnP )" ,
0x00000c4b , "\0\0\0\0countT etherC::boxPourF( tinS& tinP , const strokeS* const psttHostP , const strokeS* const psttLikeToP , const strokeS* const psttLikeFromP , const countT csttEstimateP , const countT cMaxP )" ,
0x00000c4c , "\0\0\0\0voidT etherC::ifcDatumF( tinS& tinP , const flagsT flags1P , const flagsT flags2P , countT amountP , const countT* const pcResourceIdP , const strokeS* const psttP )" ,
0x00000c4d , "\0\0\0\0voidT etherC::osProcessF( tinS& tinP , countT& tidP , countT& pidP , const strokeS* const psttExeP , const strokeS* const psttArgsP , const flagsT flagsP , const handleC* phOutP , const handleC* phErrorP , const handleC* phInP )" ,
0x00000c4e , "\0\0\0\0voidT etherC::etherGetLogF( tinS& tinP , strokeS*& psttP )" ,
0x00000c4f , "\0\0\0\0voidT etherC::etherPutLogF( tinS& tinP , const strokeS* const psttP )" ,
0x00000c50 , "\0\0\0\0voidT etherC::boxGetGenerationF( tinS& tinP , byteT*& pbP , countT& cbP , strokeS*& psttP , const strokeS* const psttLikeP , const countT csttEstimateP , const countT ageP , countT cOpenTriesP , const countT cZapTriesP , const flagsT flagsOpenDetailsP )" ,
0x00000c51 , "\0\0\0\0voidT etherC::boxPutGenerationF( tinS& tinP , strokeS*& psttP , const strokeS* const psttLikeP , const countT csttEstimateP , const byteT* const pbP , const countT cbP , countT cOpenTriesP , const flagsT flagsOpenDetailsP )" ,
0x00000c52 , "\0\0\0\0voidT etherC::sockMyNameF( tinS& tinP , countT& idPortP , nicNameC& nicNameP , const handleC& handleP )" ,
0x00000c53 , "\0\0\0\0voidT etherC::sockPeerNameF( tinS& tinP , countT& idPortP , nicNameC& nicNameP , const handleC& handleP )" ,
0x00000c54 , "\0\0\0\0voidT etherC::osThreadSwitchingOffF( tinS& tinP )" ,
0x00000c55 , "\0\0\0\0voidT etherC::osThreadSwitchingOnF( tinS& tinP )" ,
0x00000c56 , "\0\0\0\0voidT etherC::diskFilePourF( tinS& tinP , const strokeS* const psttHostP , const strokeS* const pstt1RemoteP , const strokeS* const pstt1LocalP )" ,
0x00000c57 , "\0\0\0\0voidT etherC::osTimeFromOldTimeF( tinS& tinP , countT& time1P , sCountT& time2P , sCountT yP , countT mP , countT dP , countT hhP , countT mmP , countT ssP , countT msP , const flagsT flagsP )" ,
0x00000c58 , "\0\0\0\0voidT etherC::sleepStartF( tinS& tinP )" ,
0x00000c59 , "\0\0\0\0voidT etherC::sleepEndF( tinS& tinP )" ,
0x00000c5a , "\0\0\0\0voidT etherC::osTimeWatchF( tinS& tinP , countT& time1P , sCountT& time2P , signC& sgnP , boolT& fFireP , countT timeGrainP )" ,
0x00000c5b , "\0\0\0\0voidT etherC::osProcessF( tinS& tinP , countT& osTidP , countT& osPidP , countT& valueP , countT& idDeathTypeP , const strokeS* const psttExeP , const strokeS* const psttArgsP , const flagsT flagsP , const handleC* phOutP , const handleC* phErrorP , const handleC* phInP )" ,
0x00000c5c , "\0\0\0\0voidT etherC::osProcessForwardSignalsToMe_offF( tinS& tinP )" ,
0x00000c5d , "\0\0\0\0voidT etherC::osProcessForwardSignalsToMe_onF( tinS& tinP )" ,
0x00000c5e , "\0\0\0\0countT etherC::strTrimF( tinS& tinP , strokeS*& psttP , const strokeS* const psttOldP , const strokeS* const psttItemDelimiterP , const strokeS* const psttDoomedListP , const strokeS sttNewP )" ,
0x00000c5f , "\0\0\0\0voidT etherC::osProcessInterruptF( tinS& tinP , const countT pidP )" ,
0x00000c60 , "\0\0\0\0voidT etherC::osProcessKillF( tinS& tinP , const countT pidP )" ,
0x00000c61 , "\0\0\0\0voidT etherC::osProcessWaitF( tinS& tinP , countT& valueP , countT& idDeathTypeP , countT& pidP )" ,
0x00000c62 , "\0\0\0\0voidT etherC::spacerSetF( tinS& tinP )" ,
0x00000c63 , "\0\0\0\0voidT etherC::etherTestF( tinS& tinP )" ,
0x00000c64 , "\0\0\0\0NEWdELtYPEeTHER( byteT )" ,
0x00000c65 , "\0\0\0\0NEWdELtYPEeTHER( countT )" ,
0x00000c66 , "\0\0\0\0NEWdELtYPEeTHER( strokeS )" ,
0x00000c67 , "\0\0\0\0voidT etherC::box GetShadow::20141115@1937::MIGRATE:TO:USE:SETTINGS.BIT.TREE::SettingF( tinS& tinP , strokeS*& psttP , const strokeS* const psttBoxIP , const strokeS* const psttDefaultP , const strokeS* const psttOkListP , const strokeS* const psttDelimiterP , countT cOpenTriesP , const flagsT flagsOpenDetailsP )" ,
0x00000c68 , "\0\0\0\0voidT etherC::memOpenSharedF( tinS& tinP , handleC& handleP , flagsT& flagsResultP , const strokeS* const psttP , handleC* phFileP , const countT cbP , const countT idHowP )" ,
0x00000c69 , "\0\0\0\0voidT etherC::strIndentOldF( tinS& tinP , strokeS*& psttP , const countT csttP , const strokeS sttP , const strokeS* const psttOldP , const strokeS* const psttDelimiterP )" ,
0x00000c6a , "\0\0\0\0boolT etherC::strEvaluateFormat01F( tinS& tinP , strokeS*& psttP , const countT csttExtraP , const strokeS* const psttOldP )" ,
0x00000c6b , "\0\0\0\0voidT etherC::boxPutHtmlF( tinS& tinP , const boolT bOneFileP , const strokeS* const psttLikeLocalP , const strokeS* const psttLikeP , const strokeS* const psttTitleP , const strokeS* const psttOldCopyrightP , const strokeS* const psttKnowledgeTreeP , countT cOpenTriesP )" ,
0x00000c6c , "\0\0\0\0voidT etherC::boxPutHtmlFromKnowledgeTreeBaseF( tinS& tinP , const boolT bOneFileP , const strokeS* const psttLikeLocalP , const strokeS* const psttLikeP , const strokeS* const psttTitleP , const strokeS* const psttOldCopyrightP , const strokeS* const psttFileP , const countT csttExtraP , countT cOpenTriesP )" ,
0x00000c6d , "\0\0\0\0voidT etherC::strToHtmlF( tinS& tinP , strokeS*& psttP , const strokeS* const psttOldP )" ,
0x00000c6e , "\0\0\0\0countT etherC::osThreadSwitchingDesireF( tinS& tinP , const countT idP )" ,
0x00000c6f , "\0\0\0\0voidT etherC::boxServerF( tinS& tinP , const countT idPortP , const boolT bTalkP )" ,
0x00000c70 , "\0\0\0\0voidT etherC::strFuseSeparateF( tinS& tinP , strokeS*& psttOutP , const strokeS* const psttInP , countT csttPrefixNullsP , countT csttSuffixNullsP , soulC* pSoulP , grabC* pGrabP , const countT csttExtraP )" ,
0x00000c71 , "\0\0\0\0voidT etherC::strSubstringDelimitedF( tinS& tinP , strokeS*& psttP , countT& idClassP , countT& idFirstP , strokeS& sttQuoteP , const strokeS* const psttBigP , const countT csttExtraP )" ,
0x00000c72 , "\0\0\0\0NEWdELtYPEeTHER( count2S )" ,
0x00000c73 , "\0\0\0\0NEWdELtYPEeTHER( sCountT )" ,
0x00000c74 , "\0\0\0\0countT etherC::etherEmployersF( tinS& tinP , countT*& pcP )" ,
0x00000c75 , "\0\0\0\0voidT etherC::strWordF( tinS& tinP , strokeS*& psttP , const strokeS* const psttBigP , strokeS& sttQuoteP , const strokeS sttDelimiterP , const sCountT idP , const countT csttExtraP )" ,
0x00000c76 , "\0\0\0\0countT etherC::strIdAnyF( tinS& tinP , countT& idFirstP , strokeS& sttQuoteP , const strokeS sttSmallP , const strokeS* psttBigP , sCountT idP )" ,
0x00000c77 , "\0\0\0\0textC etherC::osIdF( tinS& tinP , const boolT bFileP )" ,
0x00000c78 , "\0\0\0\0voidT etherC::osEditorF( tinS& tinP , strokeS*& psttP )" ,
0x00000c79 , "\0\0\0\0voidT etherC::osEditF( tinS& tinP , const strokeS* const psttP , const boolT bAsynchP )" ,
0x00000c7a , "\0\0\0\0countT etherC::diskFileExistsF( tinS& tinP , const strokeS* const psttLikeP )" ,
0x00000c7b , "\0\0\0\0voidT etherC::strRemoveBlankLinesF( tinS& tinP , strokeS*& psttP , const strokeS* const psttOldP , const strokeS* const psttEndP , const strokeS* const psttBlankListP )" ,
0x00000c7c , "\0\0\0\0voidT etherC::strReplaceAutomaticallyF( tinS& tinP , strokeS*& psttP , const strokeS* const psttOldP , const countT idClassP , const countT csttExtraP )" ,
0x00000c7d , "\0\0\0\0voidT etherC::etherUidF( tinS& tinP , const strokeS* const psttUidP )" ,
0x00000c7e , "\0\0\0\0voidT etherC::osSleepF( tinS& tinP , const countT time1P , const sCountT time2P , const countT timeGrain1P , const sCountT timeGrain2P , const flagsT flagsP )" ,
0x00000c7f , "\0\0\0\0countT etherC::boxPourF( tinS& tinP , const strokeS* const psttLikeToP , const strokeS* const psttLikeFromP , const countT csttEstimateP , const countT cMaxP )" ,
0x00000c80 , "\0\0\0\0countT etherC::strIdMatchingF( tinS& tinP , countT& idFirstP , strokeS& sttQuoteP , const strokeS* const psttBigP , sCountT idP )" ,
0x00000c81 , "\0\0\0\0voidT etherC::strSubstringExampleF( tinS& tinP , strokeS*& psttP , countT& idFirstP , strokeS& sttQuoteP , const strokeS* const psttBigP , const strokeS* const psttTokenP , const strokeS sttOpenP , const strokeS* const psttWhiteP )" ,
0x00000c82 , "\0\0\0\0voidT etherC::strFromUrlF( tinS& tinP , strokeS*& psttP , const strokeS* const psttOldP )" ,
0x00000c83 , "\0\0\0\0voidT etherC::osProcessF( tinS& tinP , countT& tidP , countT& pidP , const countT idAdamP , const strokeS* const psttArgsP , const flagsT flagsP , const handleC* phOutP , const handleC* phErrorP , const handleC* phInP )" ,
0x00000c84 , "\0\0\0\0voidT etherC::osProcessF( tinS& tinP , countT& osTidP , countT& osPidP , countT& valueP , countT& idDeathTypeP , const countT idAdamP , const strokeS* const psttArgsP , const flagsT flagsP , const handleC* phOutP , const handleC* phErrorP , const handleC* phInP )" ,
0x00000c85 , "\0\0\0\0voidT etherC::osSessionF( tinS& tinP , countT& osTidP , countT& osPidP , countT& valueP , countT& idDeathTypeP , const strokeS* const psttExeP , const strokeS* const psttArgsP , const countT idColP , const countT idRowP , const countT cColP , const countT cRowP , const flagsT flagsP )" ,
0x00000c86 , "\0\0\0\0voidT etherC::osSessionF( tinS& tinP , countT& osTidP , countT& osPidP , countT& valueP , countT& idDeathTypeP , const countT idAdamP , const strokeS* const psttArgsP , const countT idColP , const countT idRowP , const countT cColP , const countT cRowP , const flagsT flagsP )" ,
0x00000c87 , "\0\0\0\0countT etherC::strCLinesF( tinS& tinP , const strokeS* const psttP , const strokeS* const psttEndP , const boolT bAnyP )" ,
0x00000c88 , "\0\0\0\0voidT etherC::strSubstringLineF( tinS& tinP , strokeS*& psttP , countT& idFirstP , strokeS& sttQuoteP , const strokeS* const psttAllP , const sCountT idLineP , const strokeS* const psttEndP , const boolT bAnyP , const countT csttExtraP )" ,
0x00000c89 , "\0\0\0\0voidT etherC::strBadCodeLineF( tinS& tinP , strokeS*& psttP , const strokeS* const psttIdAdamP )" ,
0x00000c8a , "\0\0\0\0countT etherC::osThreadSwitchingDesireF( tinS& tinP )" ,
0x00000c8b , "\0\0\0\0voidT etherC::ifcDatumF( tinS& tinP , const osTextT* const postFileP , const countT idLineP , const countT cLinesInDefP )" ,
0x00000c8c , "\0\0\0\0voidT etherC::osTimeSetF( tinS& tinP )" ,
0x00000c8d , "\0\0\0\0voidT etherC::fileTimestampsF( tinS& tinP , const strokeS* const psttLikeP )" ,
0x00000c8e , "\0\0\0\0voidT etherC::sockWriteQuitF( tinS& tinP , const countT idPortP , const nicNameC nicNameP )" ,
0x00000c8f , "\0\0\0\0voidT etherC::sockWriteQuitF( tinS& tinP , const countT idPortP , const strokeS* const psttHostP )" ,
0x00000c90 , "\0\0\0\0countT etherC::strEncode_01F( tinS& tinP , byteT*& pboP , const byteT* const pbiP , const countT cbiP )" ,
0x00000c91 , "\0\0\0\0voidT etherC::boxGetShadowGenerationF( tinS& tinP , byteT*& pbP , countT& cbP , strokeS*& psttP , const strokeS* const psttLikeP , const countT csttEstimateP , const countT ageP , countT cOpenTriesP , const flagsT flagsOpenDetailsP )" ,
0x00000c92 , "\0\0\0\0voidT etherC::strRulerF( tinS& tinP , strokeS*& psttP , const countT csP )" ,
0x00000c93 , "\0\0\0\0sCountT etherC::strCompareF( tinS& tinP , const countT* const pc1P , const countT* const pc2P , const countT ccP , const countT ccMaxP , const countT* const pcFilterP , const countT ccFilterP , const boolT bReverseP )" ,
0x00000c94 , "\0\0\0\0voidT etherC::strInsertF( tinS& tinP , strokeS*& psttP , countT& idFirstP , const strokeS* psttSmallP , const countT csttExtraP )" ,
0x00000c95 , "\0\0\0\0voidT etherC::strDeleteF( tinS& tinP , strokeS* const psttP , const countT idFirstP , const countT idLastP )" ,
0x00000c96 , "\0\0\0\0voidT etherC::strToUrlF( tinS& tinP , strokeS*& psttP , const strokeS* const psttOldP , const flagsT flagsP )" ,
0x00000c97 , "\0\0\0\0voidT etherC::ifcPutHostLogEntryF( tinS& tinP , strokeS*& psttReplyP , const strokeS* const psttP )" ,
0x00000c98 , "\0\0\0\0voidT etherC::ifcPutHostLogEntryF( tinS& tinP , const strokeS* const psttP )" ,
0x00000c99 , "\0\0\0\0voidT etherC::strDigitsToSCountF( tinS& tinP , sCountC& valueP , const strokeS* const psttP , const countT defaultRadixP , const boolT bForeignP )" ,
0x00000c9a , "\0\0\0\0voidT etherC::strFromF( tinS& tinP , strokeS*& psttP , const sCountC& valueP , const flagsT flagsFormatP , const countT csP , const countT radixP , const countT csttExtraP )" ,
0x00000c9b , "\0\0\0\0NEWdELtYPEeTHER( measureT )" ,
0x00000c9c , "\0\0\0\0voidT etherC::ifcNicknameFromIdCitizenF( tinS& tinP , strokeS*& psttP , const countT idP )" ,
0x00000c9d , "\0\0\0\0voidT etherC::ifcExternalEmailFromIdCitizenF( tinS& tinP , strokeS*& psttP , const countT idP )" ,
0x00000c9e , "\0\0\0\0voidT etherC::sockPsttHostF( tinS& tinP , strokeS*& psttP , const nicNameC nicNameP )" ,
0x00000c9f , "\0\0\0\0voidT etherC::strAsciiCodeTableF( tinS& tinP , strokeS*& psttP )" ,
0x00000ca0 , "\0\0\0\0voidT etherC::strFromF( tinS& tinP , strokeS*& psttP , const measureT valueP , const flagsT flagsFormatP , const countT csP , const countT idcPointP , const countT cPrecisionP , const countT radixP , const countT csttExtraP )" ,
0x00000ca1 , "\0\0\0\0voidT etherC::strFromF( tinS& tinP , strokeS*& psttP , const countT valueP , const flagsT flagsFormatP , const countT csP , const countT radixP , const countT csttExtraP )" ,
0x00000ca2 , "\0\0\0\0voidT etherC::strClockOldF( tinS& tinP , strokeS*& psttP )" ,
0x00000ca3 , "\0\0\0\0voidT etherC::osDoNothingF( tinS& tinP )" ,
0x00000ca4 , "\0\0\0\0voidT etherC::etherRptOverheadCostsF( tinS& tinP , countT*& pcP )" ,
0x00000ca5 , "\0\0\0\0strokeS*& etherC::ether_pstt1_processParametersI_F( tinS& tinP )" ,
0x00000ca6 , "\0\0\0\0countT& etherC::ether_idCitizenHirerI_F( tinS& tinP )" ,
0x00000ca7 , "\0\0\0\0voidT etherC::strConvertToUpperCaseF( tinS& tinP , strokeS* psttP )" ,
0x00000ca8 , "\0\0\0\0voidT etherC::strConvertToUpperCaseF( tinS& tinP , strokeS& sttOutP , const strokeS& sttInP )" ,
0x00000ca9 , "\0\0\0\0voidT etherC::strSubstringMimeHeaderF( tinS& tinP , strokeS*& psttP , const strokeS* const psttAllP , const strokeS* const psttKeyP , const countT csttExtraP )" ,
0x00000caa , "\0\0\0\0voidT etherC::strConvertToLowerCaseF( tinS& tinP , strokeS*& psttP , const strokeS* const psttFromP )" ,
0x00000cab , "\0\0\0\0voidT etherC::strConvertToUpperCaseF( tinS& tinP , strokeS*& psttP , const strokeS* const psttFromP )" ,
0x00000cac , "\0\0\0\0voidT etherC::sockRelayF( tinS& tinP , socketC& sOutP , socketC& sInP , batonC* const pBatonOutP , const countT cbEstimateP )" ,
0x00000cad , "\0\0\0\0voidT etherC::strCleanF( tinS& tinP , strokeS* const psttP , strokeS sttP , const countT idTypeKeepP )" ,
0x00000cae , "\0\0\0\0voidT etherC::strFromF( tinS& tinP , strokeS*& psttP , const countT* const pcValueP , const flagsT flagsFormatP , const countT csP , const countT radixP , const strokeS* const psttSeparatorP , const countT csttExtraP )" ,
0x00000caf , "\0\0\0\0voidT etherC::beeSingDigitsF( tinS& tinP , const countT cP )" ,
0x00000cb0 , "\0\0\0\0NEWdELtYPEeTHER( count01T )" ,
0x00000cb1 , "\0\0\0\0countT etherC::strMakeF( tinS& tinP , unTextT*& puntP , const strokeS* const psttP )" ,
0x00000cb2 , "\0\0\0\0voidT etherC::etherBeImpotentF( tinS& tinP , const countT codeP )" ,
0x00000cb3 , "\0\0\0\0voidT etherC::paperTitleF( tinS& tinP , const strokeS* const psttP )" ,
0x00000cb4 , "\0\0\0\0countT etherC::ifcIdCitizenFromExternalEmailF( tinS& tinP , const strokeS* const psttP )" ,
0x00000cb5 , "\0\0\0\0voidT etherC::strCalendarF( tinS& tinP , strokeS*& psttP , const sCountT time2P , const countT cColP , const countT cRowP , const countT csttIndentP , const countT csttExtraP )" ,
0x00000cb6 , "\0\0\0\0voidT etherC::strClockOldF( tinS& tinP , strokeS*& psttP , const countT time1P , const countT cColP , const countT cRowP , const countT csttExtraP )" ,
0x00000cb7 , "\0\0\0\0voidT etherC::osTimeToOldTimeF( tinS& tinP , countT& msP , countT& ssP , countT& mmP , countT& hhP , countT& dP , countT& mP , sCountT& yP , countT& dowP , const countT time1P , const sCountT time2P , const flagsT flagsP )" ,
0x00000cb8 , "\0\0\0\0countT etherC::strWordsOldF( tinS& tinP , strokeS*& pstt1P , const strokeS* const psttP , strokeS& sttQuoteP , const strokeS* psttDelimitersP , const flagsT flagsP , const countT csttExtraP , const countT csttPrefixNullsP , const countT csttSuffixNullsP )" ,
0x00000cb9 , "\0\0\0\0voidT etherC::strByCasteF( tinS& tinP , strokeS*& pstt1P , const strokeS* const psttP , const countT* const pczIdCasteIncludeP , const countT* const pczIdCasteExcludeP , const countT csttExtraP )" ,
0x00000cba , "\0\0\0\0voidT etherC::strByCasteF( tinS& tinP , strokeS*& pstt1P , stackC& st_psttP , const flagsT flConcatenateP , const countT* const pczIdCasteIncludeP , const countT* const pczIdCasteExcludeP , const countT csttExtraP )" ,
0x00000cbb , "\0\0\0\0voidT etherC::sockFtpServerF( tinS& tinP )" ,
0x00000cbc , "\0\0\0\0voidT etherC::fileSetPtrF( tinS& tinP , const handleC& handleP , const flagsT flagsP , count2S& c2P )" ,
0x00000cbd , "\0\0\0\0voidT etherC::winPostMessageAfterNapF( tinS& tinP , const countT time1P , const handleC& hWindowP , const countT idCmdP , const countT arg1P , const countT arg2P )" ,
0x00000cbe , "\0\0\0\0countT etherC::strConcatenateF( tinS& tinP , strokeS*& psttP , stackC& st_psttP , const strokeS* const psttDelimiterP , const flagsT flagsP , const countT* const pczIdCasteIncludeP , const countT* const pczIdCasteExcludeP , const countT csttExtraP )" ,
0x00000cbf , "\0\0\0\0voidT etherC::ifcPortAuthorityF( tinS& tinP )" ,
0x00000cc0 , "\0\0\0\0countT etherC::ifcPortNewF( tinS& tinP , const countT idPortP , const countT idiClassP )" ,
0x00000cc1 , "\0\0\0\0voidT etherC::ifcPortDelF( tinS& tinP )" ,
0x00000cc2 , "\0\0\0\0voidT etherC::ifcPortQueryF( tinS& tinP , stackC& stIdPortP , const nicNameC nicNameP , const countT idiClassP )" ,
0x00000cc3 , "\0\0\0\0voidT etherC::ifcPortQueryF( tinS& tinP , switchStackC& swsIdPortP , countT& leverP , const nicNameC nicNameP )" ,
0x00000cc4 , "\0\0\0\0stackC& etherC::sockStkAcceptorsF( tinS& tinP )" ,
0x00000cc5 , "\0\0\0\0boolT etherC::winSetTitleF( tinS& tinP , const strokeS* const psttP , const handleC& hWindowP )" ,
0x00000cc6 , "\0\0\0\0voidT etherC::winAppendTitleF( tinS& tinP , const strokeS* const psttP , const handleC& hWindowP )" ,
0x00000cc7 , "\0\0\0\0voidT etherC::ifcPortNewProcessF( tinS& tinP )" ,
0x00000cc8 , "\0\0\0\0voidT etherC::etherScanProcessParametersF( tinS& tinP )" ,
0x00000cc9 , "\0\0\0\0countT etherC::ifcPortNewIdMiscF( tinS& tinP )" ,
0x00000cca , "\0\0\0\0countT etherC::etherIdPortPaperF( tinS& tinP )" ,
0x00000ccb , "\0\0\0\0nicNameC etherC::etherNicNamePaperF( tinS& tinP )" ,
0x00000ccc , "\0\0\0\0NEWdELtYPEeTHER( nicNameC )" ,
0x00000ccd , "\0\0\0\0voidT etherC::strFromF( tinS& tinP , strokeS*& psttP , const nicNameC& nicNameP , const flagsT flFormatP , const countT csP , const countT radixP , const strokeS* const psttSeparatorP , const countT csttExtraP )" ,
0x00000cce , "\0\0\0\0nicNameC etherC::strDigitsToNicNameF( tinS& tinP , const strokeS* const psttP , const countT defaultRadixP , const boolT bForeignP )" ,
0x00000ccf , "\0\0\0\0voidT etherC::strFromF( tinS& tinP , strokeS*& psttP , const byteT* const pbBlobP , const countT cbBlobP , const countT csttExtraP )" ,
0x00000cd0 , "\0\0\0\0boolT etherC::strIsDigitsF( tinS& tinP , const strokeS* const psttP , const countT radixP )" ,
0x00000cd1 , "\0\0\0\0countT etherC::memReplaceF( tinS& tinP , byteT* const pbBigP , const countT cbBigP , const byteT* const pbSmallOldP , const byteT* const pbSmallNewP , const countT cbSmallP )" ,
0x00000cd2 , "\0\0\0\0voidT etherC::osMakeHoverFileF( tinS& tinP , const countT cNameP , const boolT bRawNameP )" ,
0x00000cd3 , "\0\0\0\0voidT etherC::diskMapFileNameHoverF( tinS& tinP , strokeS*& psttP , const strokeS* const psttRawP )" ,
0x00000cd4 , "\0\0\0\0voidT etherC::sockOptionBroadcastF( tinS& tinP , const handleC& handleP , const boolT bAllowP )" ,
0x00000cd5 , "\0\0\0\0voidT etherC::sockOptionReuseAddressF( tinS& tinP , const handleC& handleP , const boolT bAllowP )" ,
0x00000cd6 , "\0\0\0\0voidT etherC::sockOptionSendNowF( tinS& tinP , const handleC& handleP , const boolT bEnableP )" ,
0x00000cd7 , "\0\0\0\0voidT etherC::sockWriteF( tinS& tinP , handleC& handleP , const countT idPortP , const nicNameC nicNameP , const byteT* pbP , const countT cbP , const countT idModeP )" ,
0x00000cd8 , "\0\0\0\0voidT etherC::sockReadF( tinS& tinP , byteT*& pbP , countT& cbP , countT& idPortP , nicNameC& nicNameP , handleC& handleP , const countT time1P , const sCountT time2P , const countT idModeP )" ,
0x00000cd9 , "\0\0\0\0stackC& etherC::sockStkCatchersF( tinS& tinP )" ,
0x00000cda , "\0\0\0\0voidT etherC::sockAcceptF( tinS& tinP , handleC& hClientP , countT& idPortP , nicNameC& nicNameP , const handleC& handleP , boolT& bRefuseP )" ,
0x00000cdb , "\0\0\0\0voidT etherC::sockNicNameF( tinS& tinP , nicNameC*& pNicNameP , countT& cNicNameP , const strokeS* psttP )" ,
0x00000cdc , "\0\0\0\0voidT etherC::fileReadF( tinS& tinP , soulC& soulP , const handleC& handleP )" ,
0x00000cdd , "\0\0\0\0voidT etherC::fileWriteF( tinS& tinP , const handleC& handleP , soulC& soulP )" ,
0x00000cde , "\0\0\0\0voidT etherC::sockReadF( tinS& tinP , soulC& soulP , handleC& handleP , const countT time1P , const sCountT time2P , const countT idModeP )" ,
0x00000cdf , "\0\0\0\0voidT etherC::sockWriteF( tinS& tinP , handleC& handleP , soulC& soulP , const countT idModeP )" ,
0x00000ce0 , "\0\0\0\0voidT etherC::sockReadF( tinS& tinP , soulC& soulP , countT& idPortP , nicNameC& nicNameP , handleC& handleP , const countT time1P , const sCountT time2P , const countT idModeP )" ,
0x00000ce1 , "\0\0\0\0voidT etherC::boxGetF( tinS& tinP , soulC& soulP , const strokeS* const psttP , countT cOpenTriesP , const countT cZapTriesP , countT time1P , const sCountT time2P , const flagsT flagsOpenDetailsP )" ,
0x00000ce2 , "\0\0\0\0voidT etherC::boxGetShadowF( tinS& tinP , soulC& soulP , const strokeS* const psttP , countT cOpenTriesP , countT time1P , const sCountT time2P , const flagsT flagsOpenDetailsP )" ,
0x00000ce3 , "\0\0\0\0voidT etherC::boxPutF( tinS& tinP , const strokeS* const psttP , soulC& soulP , countT cOpenTriesP , countT time1P , const sCountT time2P , const flagsT flagsOpenDetailsP )" ,
0x00000ce4 , "\0\0\0\0voidT etherC::osClipboardReadF( tinS& tinP , strokeS*& psttP )" ,
0x00000ce5 , "\0\0\0\0voidT etherC::osClipboardWriteF( tinS& tinP , const strokeS* const psttP )" ,
0x00000ce6 , "\0\0\0\0countT etherC::osClipboardFlavorsF( tinS& tinP )" ,
0x00000ce7 , "\0\0\0\0voidT etherC::osClipboardGrabF( tinS& tinP )" ,
0x00000ce8 , "\0\0\0\0voidT etherC::osClipboardLetGoF( tinS& tinP )" ,
0x00000ce9 , "\0\0\0\0etherC::operator tinS&( voidT )" ,
0x00000cea , "\0\0\0\0voidT etherC::osDriverF( tinS& tinP , const countT idAdamP )" ,
0x00000ceb , "\0\0\0\0boolT etherC::osDriverRemoveOldF( tinS& tinP , const countT idAdamP )" ,
0x00000cec , "\0\0\0\0countT etherC::strToF( tinS& tinP , countT*& pcNameP , const strokeS* const psttNameP )" ,
0x00000ced , "\0\0\0\0voidT etherC::ifcDrivenServerF( tinS& tinP , serverInfo1S& info1P , serverInfo2S& info2P )" ,
0x00000cee , "\0\0\0\0voidT etherC::osFireF( tinS& tinP , const boolT bDoNotComeBackP , const nicNameC nicNameP )" ,
0x00000cef , "\0\0\0\0countT etherC::osMessageBoxF( tinS& tinP , const strokeS* const psttP , const strokeS* const psttTitleP , const flagsT flagsButtonsP , const flagsT flagButtonSelectedP )" ,
0x00000cf0 , "\0\0\0\0voidT etherC::osDriverNameFromMasterF( tinS& tinP , strokeS*& psttP , const countT idAdamP )" ,
0x00000cf1 , "\0\0\0\0countT etherC::ifcHireF( tinS& tinP , const strokeS* const psttOldCommentP , const countT idAdamP , const strokeS* const psttArgsP , flagsT flagsP , const countT time1LimitP , const sCountT time2LimitP , const countT cTriesP , nicNameC nicNameP )" ,
0x00000cf2 , "\0\0\0\0voidT etherC::diskGetHoverF( tinS& tinP , strokeS*& psttP )" ,
0x00000cf3 , "\0\0\0\0countT etherC::strReplaceF( tinS& tinP , strokeS*& psttNewBigP , const strokeS* const psttOldBigP , const countT idTypeP , const countT csttExtraP , const flagsT flagsP )" ,
0x00000cf4 , "\0\0\0\0voidT etherC::osMakeF( tinS& tinP , stackC& stErrorsP , const countT idAdamP , const flagsT flagsP )" ,
0x00000cf5 , "\0\0\0\0countT etherC::strIdF( tinS& tinP , countT& idFirstP , strokeS& sttQuoteP , stackC& st_psttSmallP , countT& idSlotP , const strokeS* psttBigP , const flagsT flagsP , sCountT idP )" ,
0x00000cf6 , "\0\0\0\0voidT etherC::strSubstringF( tinS& tinP , strokeS*& psttP , countT& idFirstP , strokeS& sttQuoteP , stackC& st_psttSmallP , countT& idSlotP , const strokeS* psttBigP , const boolT bAnyP , const countT csttExtraP )" ,
0x00000cf7 , "\0\0\0\0voidT etherC::sockWriteF( tinS& tinP , handleC& handleP , const countT idPortP , const nicNameC nicNameP , soulC& soulP , const countT idModeP )" ,
0x00000cf8 , "\0\0\0\0boolT etherC::osTimeTestF( tinS& tinP , countT& timeA1P , sCountT& timeA2P , const countT timeD1P , const sCountT timeD2P )" ,
0x00000cf9 , "\0\0\0\0voidT etherC::ifcChatF( tinS& tinP , const countT cArgP , const countT idAdamHandlingP , chatHandlerFT chatHandlerFP , const countT idPortHintP , jobFillCourseFT jobFillCourseFP , jobHearOrderFT jobHearOrderFP )" ,
0x00000cfa , "\0\0\0\0voidT etherC::ifcChatRelayPackageF( tinS& tinP , soulC& sBigOutP , soulC& sSmallOutP , const countT idAdamP , const strokeS* const psttOldCommentP , const countT cTriesP , const countT idPortP , const nicNameC& nicNameP , const boolT bDirectP )" ,
0x00000cfb , "\0\0\0\0voidT etherC::ifcCellHostsF( tinS& tinP , switchStackC& swsNicNameP , countT& idaLeverP , batonC& b_idaLeverP , switchStackC& swsIdAdamP , nicNameC& idhLeverP , batonC& b_idhLeverP , tableC& tblCellsP , tableC& tblHostsP , stackC& stDelete_strokeS_ptrP , stackC& stDelete_nicNameC_ptrP , stackC& stDelete_stackC_ptrP , countT cTriesP )" ,
0x00000cfc , "\0\0\0\0voidT etherC::ifcCellHostsF( tinS& tinP , nicNameC*& pNicNameP , countT& cNicNameP , const countT idAdamP , countT cTriesP )" ,
0x00000cfd , "\0\0\0\0nicNameC etherC::ifcCellHostsF( tinS& tinP , const countT idAdamP , countT cTriesP )" ,
0x00000cfe , "\0\0\0\0voidT etherC::ifcJobF( stackC& stCoursesP , tinS& tinP , const countT idAdamP , soulC& sOrderPrimaryP , stackC& stOrdersP , const strokeS* const psttOldCommentP , const nicNameC nicNameP )" ,
0x00000cff , "\0\0\0\0voidT etherC::ifcChatF( tinS& tinP , const countT cArgP , const countT idAdamHandlingP , jobFillCourseFT jobFillCourseFP , jobHearOrderFT jobHearOrderFP )" ,
0x00000d00 , "\0\0\0\0countT etherC::strIdF( tinS& tinP , const strokeS* const psttSmallP , const strokeS* psttBigP , sCountT idP )" ,
0x00000d01 , "\0\0\0\0voidT etherC::ifcJobF( tinS& tinP , stackC& stCoursesP , const countT idAdamP , soulC& sOrderPrimaryP , stackC& stOrdersP , const strokeS* const psttOldCommentP , countT cTriesP , const nicNameC nicNameP )" ,
0x00000d02 , "\0\0\0\0boolT etherC::strConcatenateF( tinS& tinP , strokeS*& psttP , const strokeS* pstt1P , const strokeS* const psttDelimiterP , const flagsT flagsP , const countT* const pczIdCasteIncludeP , const countT* const pczIdCasteExcludeP , const countT csttExtraP )" ,
0x00000d03 , "\0\0\0\0voidT etherC::dnsFormatQueryF( tinS& tinP , byteT*& pbP , countT& cbP , const strokeS* const psttDomainP , const countT idTypeP )" ,
0x00000d04 , "\0\0\0\0voidT etherC::dnsSkipLabelsF( tinS& tinP , const byteT*& pbP )" ,
0x00000d05 , "\0\0\0\0voidT etherC::dnsNicNamesF( tinS& tinP , stackC& st_psttServerP , const strokeS* const psttDomainP , const countT idTypeP )" ,
0x00000d06 , "\0\0\0\0voidT etherC::dnsNicNamesF( tinS& tinP , strokeS*& psttServerP , const strokeS* const psttDomainP , const countT idTypeP )" ,
0x00000d07 , "\0\0\0\0voidT etherC::dnsQueryF( tinS& tinP , stackC& stsRepliesP , const strokeS* const psttDomainP , const countT idTypeP , const countT time1P , const sCountT time2P )" ,
0x00000d08 , "\0\0\0\0voidT etherC::dnsReplyF( tinS& tinP , byteT*& pbP , countT& cbP , const byteT* const pbQueryP , stackC& stsRepliesP , const boolT bAuthoritativeP , const countT idErrorP )" ,
0x00000d09 , "\0\0\0\0voidT etherC::dnsLabelsF( tinS& tinP , byteT*& pbP , countT& cbP , const strokeS* const psttP , switchC& swOffP , strokeS*& psttLeverP )" ,
0x00000d0a , "\0\0\0\0voidT etherC::dnsParseF( tinS& tinP , byteT*& pbHeaderAndQueriesP , countT& cbHeaderAndQueriesP , stackC& stsQueriesP , stackC& stsRepliesP , const byteT* const pbReplyP , const countT cbReplyP )" ,
0x00000d0b , "\0\0\0\0voidT etherC::dnsQueryF( tinS& tinP , byteT*& pbP , countT& cbP , const strokeS* const psttDomainP , const countT idTypeP , const countT time1P , const sCountT time2P )" ,
0x00000d0c , "\0\0\0\0voidT etherC::dnsLabelsF( tinS& tinP , strokeS*& psttP , const byteT*& pbP , dnsMsgHeaderS* const pHeaderP )" ,
0x00000d0d , "\0\0\0\0boolT etherC::ifcIsSpammerF( tinS& tinP , strokeS*& psttP , const nicNameC& nicNameP )" ,
0x00000d0e , "\0\0\0\0boolT etherC::ifcIsSpammerF( tinS& tinP , const nicNameC& nicNameP )" ,
0x00000d0f , "\0\0\0\0stackC& etherC::sockStkQuittersF( tinS& tinP )" ,
0x00000d10 , "\0\0\0\0flagsT etherC::diskFileQueryAttrF( tinS& tinP , const strokeS* const psttP )" ,
0x00000d11 , "\0\0\0\0voidT etherC::diskFileSetAttrF( tinS& tinP , const strokeS* const psttP , const flagsT flagsP )" ,
0x00000d12 , "\0\0\0\0boolT etherC::etherParameterF( tinS& tinP , const strokeS* const psttP )" ,
0x00000d13 , "\0\0\0\0voidT etherC::osDoNothingLoopF( tinS& tinP , countT cToDoP , const countT msSleepP )" ,
0x00000d14 , "\0\0\0\0mainRefsS*& etherC::ether_pMainRefsIF( tinS& tinP )" ,
0x00000d15 , "\0\0\0\0batonC*& etherC::ether_pBatWindowDeletionI_F( tinS& tinP )" ,
0x00000d16 , "\0\0\0\0voidT etherC::strClockF( tinS& tinP , strokeS*& psttP , countT cP , const countT idColP , const countT idRowP , const countT cColP , const countT cRowP , const countT idStyleP , const countT idFirstP , const countT idLastP , const strokeS* const psttNoteP )" ,
0x00000d17 , "\0\0\0\0countT etherC::strKTTrimF( tinS& tinP , strokeS*& psttNewP , const strokeS* const psttOldP , const countT cKeepP , const countT csttExtraP )" ,
0x00000d18 , "\0\0\0\0voidT etherC::homeOsDriverNameF( tinS& tinP , strokeS*& psttP )" ,
0x00000d19 , "\0\0\0\0voidT etherC::ifcMonitorQueryOldF( tinS& tinP , byteT*& pbP , countT& cbP , const countT idP )" ,
0x00000d1a , "\0\0\0\0voidT etherC::strKtHereAddressF( tinS& tinP , countT*& pczP , const strokeS* const psttP )" ,
0x00000d1b , "\0\0\0\0voidT etherC::strKtHereAddressF( tinS& tinP , strokeS* const psttP , const countT* const pczP )" ,
0x00000d1c , "\0\0\0\0voidT etherC::strGraphF( tinS& tinP , strokeS*& psttP , countT& leverP , batonC& bLeverP , switchStackC& swsXP , switchStackC& swsYP , switchC& swColorP , switchC& swMarkerP , const countT cColP , const countT cRowP , const countT idStyleP , const flagsT flagsP , const strokeS* const psttNoteP , const countT* pczLeverIncludeP , const countT* pczLeverExcludeP )" ,
0x00000d1d , "\0\0\0\0voidT etherC::statisticsF( tinS& tinP , measureT& minP , measureT& maxP , measureT& meanP , measureT& medianP , measureT& stdDeviationP , stackC& stXP )" ,
0x00000d1e , "\0\0\0\0voidT etherC::ifcRenderingHandlerF( tinS& tinP , const ifcRenderingHandlerFT pIfcRenderingHandlerFIP , const countT infoP )" ,
0x00000d1f , "\0\0\0\0voidT etherC::strIfcLogoF( tinS& tinP , strokeS*& psttP , const measureT mScaleP , const countT csttExtraP )" ,
0x00000d20 , "\0\0\0\0countT etherC::ifcQueryHandlesF( tinS& tinP , const strokeS* const psttOldCommentP , const countT cTriesP , nicNameC nicNameP )" ,
0x00000d21 , "\0\0\0\0voidT etherC::etherBlammoF( tinS& tinP )" ,
0x00000d22 , "\0\0\0\0voidT etherC::etherWhereF( tinS& tinP , const countT idActionP , const flagsT flagsP , const countT cThreadsMaxP )" ,
0x00000d23 , "\0\0\0\0voidT etherC::osHttpViewerF( tinS& tinP , strokeS*& psttP )" ,
0x00000d24 , "\0\0\0\0voidT etherC::osHttpViewF( tinS& tinP , const strokeS* const psttP , const boolT bAsynchP )" ,
0x00000d25 , "\0\0\0\0voidT etherC::etherReadFromCyrcleOldF( tinS& tinP , napkinC*& pNapkinP , bitsC& bits_pNapkinP_P , cyrcleOldFT pCyrcleOldFP , countT& cParmP , boolT& bQuitP , const strokeS* const psttNapkinP , const countT cbCyrcleOldP , countT& cIgnoredP , byteT*& pbSnapP , countT& cbSnapP , countT& offBeginSnapP , boolT& bSnapP , const countT idMemorySpaceP , signC* const pSgnReadyP )" ,
0x00000d26 , "\0\0\0\0voidT etherC::etherSnapCyrcleOldF( tinS& tinP , byteT*& pbP , countT& cbP , countT& offBeginP , napkinC& napkinP )" ,
0x00000d27 , "\0\0\0\0voidT etherC::etherWaitCyrcleOldF( tinS& tinP , napkinC& napkinP )" ,
0x00000d28 , "\0\0\0\0voidT etherC::ifcCallWhenFiredF( tinS& tinP , ifcFT pFP , countT* const pcArgP )" ,
0x00000d29 , "\0\0\0\0voidT etherC::strToFileNameF( tinS& tinP , strokeS*& psttP , const strokeS* const psttOldP )" ,
0x00000d2a , "\0\0\0\0countT etherC::strTallyF( tinS& tinP , const strokeS* const psttSmallP , const strokeS* psttBigP , strokeS& sttQuoteP )" ,
0x00000d2b , "\0\0\0\0boolT etherC::diskWaitDirF( tinS& tinP , handleC& handleP , const boolT& bQuitP , const strokeS* const psttDirP , const flagsT flagsP )" ,
0x00000d2c , "\0\0\0\0voidT etherC::operator ()( tinS& tinP , soulC& slP )" ,
0x00000d2d , "\0\0\0\0baseSoilXxxxC& etherC::operator <<( soulC& slP )" ,
0x00000d2e , "\0\0\0\0baseSoilXxxxC& etherC::operator >>( soulC& slP )" ,
0x00000d2f , "\0\0\0\0voidT etherC::genSoixlOldWordLoadsF( tinS& tinP )" ,
0x00000d30 , "\0\0\0\0voidT etherC::genSoixlOldWordHelpsF( tinS& tinP )" ,
0x00000d31 , "\0\0\0\0voidT etherC::relayF( tinS& tinP , const boolT& bQuitP , stackC& stRelayOutP , countT*& pcArgP , cioGetFT& pCioGetFP , batonC& b_pCioGetFP )" ,
0x00000d32 , "\0\0\0\0countT etherC::tallyF( tinS& tinP , const count01T* const pcP , const countT ccP , const countT minP , const countT maxP )" ,
0x00000d33 , "\0\0\0\0boolT etherC::rangerF( tinS& tinP , const byteT*& pbMinP , const byteT*& pbMaxP , const byteT* const pbAtP )" ,
0x00000d34 , "\0\0\0\0boolT etherC::rangerF( tinS& tinP , const byteT* const pbAtP )" ,
0x00000d35 , "\0\0\0\0voidT etherC::rangerF( tinS& tinP , stackC& stP , boolT& bQuitP , countT cbGrainP )" ,
0x00000d36 , "\0\0\0\0GETfROMrECYCLER0( soulC )" ,
0x00000d37 , "\0\0\0\0RETURNtOrECYCLER0( soulC )" ,
0x00000d38 , "\0\0\0\0voidT etherC::osDriverParseNameF( tinS& tinP , countT& idHomeP , countT& idAdamP , countT& idVersionP , const strokeS* const psttP )" ,
0x00000d39 , "\0\0\0\0voidT etherC::cioSetQuitF( tinS& tinP , countT& bQuitP )" ,
0x00000d3a , "\0\0\0\0voidT etherC::cioSetupF( tinS& tinP )" ,
0x00000d3b , "\0\0\0\0voidT etherC::cioSetGetF( tinS& tinP , cioGetFT pCioGetFP )" ,
0x00000d3c , "\0\0\0\0voidT etherC::cioSetArgF( tinS& tinP , countT& cArgP )" ,
0x00000d3d , "\0\0\0\0voidT etherC::cioPutF( tinS& tinP , const boolT& bQuitP , const countT* const pczChannelP , soulC& sGiftP , soulC* const psToP , soulC* const psToMediatorP , const flagsT flagsP )" ,
0x00000d3e , "\0\0\0\0voidT etherC::strFromF( tinS& tinP , strokeS*& psttP , const idPortTimeC& idptP , const flagsT flFormatP , const countT csP , const countT radixP , const strokeS* const psttSeparatorP , const countT csttExtraP )" ,
0x00000d3f , "\0\0\0\0voidT etherC::cioKeyF( tinS& tinP , countT*& pczNameP , const countT idTypeP , const countT idSubTypeP )" ,
0x00000d40 , "\0\0\0\0voidT etherC::cioPutSecretF( tinS& tinP , const boolT& bQuitP , soulC& sSecretP , soulC& sToP , const countT* pczChannelSuffixP , const countT* pczPinP )" ,
0x00000d41 , "\0\0\0\0voidT etherC::cioGetSecretF( tinS& tinP , soulC*& psSecretP , soulC& sGiftP )" ,
0x00000d42 , "\0\0\0\0voidT etherC::cioMakeKeyF( tinS& tinP , countT*& pczNameP , const countT idTypeP , const countT idSubTypeP )" ,
0x00000d43 , "\0\0\0\0voidT etherC::cioStrokeConsoleF( tinS& tinP , const boolT& bQuitP , const strokeS* const psttP , const countT* pczChannelSuffixP , soulC* const psToP )" ,
0x00000d44 , "\0\0\0\0etherC::operator const poopC&( voidT )" ,
0x00000d45 , "\0\0\0\0voidT etherC::dllEntryF( tinS& tinP , sadamCBFT& pSadamCBFP , const handleC& handleP , const strokeS* psttP )" ,
0x00000d46 , "\0\0\0\0GETfROMrECYCLER2( stackC )" ,
0x00000d47 , "\0\0\0\0RETURNtOrECYCLER2( stackC )" ,
0x00000d48 , "\0\0\0\0voidT etherC::strMakeF( tinS& tinP , strokeS*& psttOutP , const strokeS sttInP , const countT csttExtraP )" ,
0x00000d49 , "\0\0\0\0countT etherC::strIdF( tinS& tinP , countT& idFirstP , const countT cSmallP , const countT* pcBigP , const countT ccBigP , sCountT idP )" ,
0x00000d4a , "\0\0\0\0countT etherC::strDecodeF( tinS& tinP , strokeS*& psttP , const byteT* const pbP )" ,
0x00000d4b , "\0\0\0\0countT etherC::strEncodeF( tinS& tinP , byteT*& pbP , const strokeS* const psttP , const byteT* const pbeP , const countT cbHeadP , const byteT* pbHeadP )" ,
0x00000d4c , "\0\0\0\0GETfROMrECYCLER5( switchC )" ,
0x00000d4d , "\0\0\0\0RETURNtOrECYCLER5( switchC )" ,
0x00000d4e , "\0\0\0\0voidT etherC::operator ()( tinS& tinP , switchC*& pObjectP , const countT idLineP , const countT idiFileP , const byteT* const pbBitsP , const flagsT flagsP , countT& cLeverP , countT* const pcLeverLathRefP , const countT cbDataP )" ,
0x00000d4f , "\0\0\0\0voidT etherC::operator ()( tinS& tinP , switchC*& pObjectP , const countT idLineP , const countT idiFileP , const byteT* const pbBitsP , const flagsT flagsP , strokeS*& psttLeverP , countT* const pcLeverLathRefP , const countT cbDataP )" ,
0x00000d50 , "\0\0\0\0GETfROMrECYCLER6( switchStackC )" ,
0x00000d51 , "\0\0\0\0RETURNtOrECYCLER6( switchStackC )" ,
0x00000d52 , "\0\0\0\0voidT etherC::operator ()( tinS& tinP , switchStackC*& pObjectP , const countT idLineP , const countT idiFileP , const byteT* const pbBitsP , const flagsT flagsSwitchP , countT& cLeverP , const flagsT flagsStackP , const countT idTypeP , countT* const pcLeverLathRefP )" ,
0x00000d53 , "\0\0\0\0voidT etherC::operator ()( tinS& tinP , switchStackC*& pObjectP , const countT idLineP , const countT idiFileP , const byteT* const pbBitsP , const flagsT flagsSwitchP , strokeS*& psttLeverP , const flagsT flagsStackP , const countT idTypeP , countT* const pcLeverLathRefP )" ,
0x00000d54 , "\0\0\0\0voidT etherC::strConvertToOtherCaseF( tinS& tinP , strokeS* psttP )" ,
0x00000d55 , "\0\0\0\0voidT etherC::strConvertToOtherCaseF( tinS& tinP , strokeS& sttOutP , const strokeS& sttInP )" ,
0x00000d56 , "\0\0\0\0voidT etherC::strConvertToOtherCaseF( tinS& tinP , strokeS*& psttP , const strokeS* const psttFromP )" ,
0x00000d57 , "\0\0\0\0sCountT etherC::strCompareF( tinS& tinP , const strokeS** const ppstt1P , const strokeS** const ppstt2P , const countT cpsMaxP , const countT csMaxP )" ,
0x00000d58 , "\0\0\0\0measureT etherC::strDigitsToMeasureF( tinS& tinP , const strokeS* const psttP , const countT defaultRadixP , const boolT bForeignP )" ,
0x00000d59 , "\0\0\0\0stackC& etherC::sockStkIdleTimeoutersF( tinS& tinP )" ,
0x00000d5a , "\0\0\0\0voidT etherC::diskMoveFileOrDirUniqueF( tinS& tinP , strokeS*& psttNewP , const strokeS* const psttOldP , const countT cTriesP )" ,
0x00000d5b , "\0\0\0\0countT etherC::strBisectF( tinS& tinP , strokeS*& psttPart1P , strokeS*& psttPart2P , const strokeS* const psttBigP , const strokeS* const psttDelimiterP , const countT idP , const flagsT flagsP , const countT csttExtraP )" ,
0x00000d5c , "\0\0\0\0voidT etherC::chokeAttackerF( tinS& tinP , handleC& handleP , const countT cbRequestReadP , const countT cbRequestWriteP )" ,
0x00000d5d , "\0\0\0\0voidT etherC::osThreadAdamF( tinS& tinP , countT idAdamP , const strokeS* const psttArgsP , const flagsT flagsP , signC* const pSgnDoneP )" ,
0x00000d5e , "\0\0\0\0countT etherC::ifcGetNextSerialNumberF( tinS& tinP , const osTextT* const postP )" ,
0x00000d5f , "\0\0\0\0countT etherC::ifcGetNextSerialNumberF( tinS& tinP , const countT* const pczP )" ,
0x00000d60 , "\0\0\0\0voidT etherC::osTimeNowUniqueF( tinS& tinP , countT& timeU1P , sCountT& timeU2P )" ,
0x00000d61 , "\0\0\0\0voidT etherC::strInsertF( tinS& tinP , strokeS*& psttP , const strokeS* const psttMarkP , const strokeS* const psttWhatP , const flagsT flagsP , const countT csttExtraP )" ,
0x00000d62 , "\0\0\0\0countT etherC::strMakeF( tinS& tinP , pbRefC*& prP , const strokeS* const psttP , const countT costExtraP , const flagsT flagsP )" ,
0x00000d63 , "\0\0\0\0const baseSoilXxxxC& etherC::operator >>( soulC& slP ) const" ,
0x00000d64 , "\0\0\0\0voidT etherC::diskWalkF( tinS& tinP , countT& cDirsP , countT& cFilesP , const strokeS* const psttNameP , const boolT& bQuitP , const flagsT flagsP , diskWalkCBFT pCbfP , countT* const pcArgP , countT* pModuloDirsP , countT* pModuloFilesP )" ,
0x00000d65 , "\0\0\0\0voidT etherC::diskWalkCopyF( tinS& tinP , countT& cDirsP , countT& cFilesP , const boolT& bQuitP , const strokeS* const psttToP , const strokeS* const psttFromP , diskWalkCopyCBFT pCbfP , countT* pcArgP )" ,
0x00000d66 , "\0\0\0\0voidT etherC::diskZipF( tinS& tinP , const strokeS* const psttToP , const strokeS* const psttFromP , const flagsT flagsP )" ,
0x00000d67 , "\0\0\0\0countT etherC::strWordsF( tinS& tinP , strokeS*& pstt1P , const strokeS* const psttP , strokeS& sttQuoteP , const strokeS* psttDelimitersP , const flagsT flagsP , const countT csttExtraP , const countT csttPrefixNullsP , const countT csttSuffixNullsP , soulC* pSoulP , grabC* pGrabP )" ,
0x00000d68 , "\0\0\0\0voidT etherC::diskWalkGatherF( tinS& tinP , countT& cDirsP , countT& cFilesP , const boolT& bQuitP , const strokeS* const psttToP , const strokeS* const psttFromP , diskWalkCopyCBFT pCbfP , countT* pcArgP )" ,
0x00000d69 , "\0\0\0\0voidT etherC::diskWalkTimePrefixF( tinS& tinP , countT& cDirsP , countT& cFilesP , const boolT& bQuitP , const strokeS* const psttFromP , diskWalkCopyCBFT pCbfP , countT* pcArgP )" ,
0x00000d6a , "\0\0\0\0voidT etherC::diskWalkRenameForArchivalF( tinS& tinP , countT& cDirsP , countT& cFilesP , const boolT& bQuitP , const strokeS* const psttToP , const strokeS* const psttFromP , diskWalkCopyCBFT pCbfP )" ,
0x00000d6b , "\0\0\0\0countT etherC::etherSoilF( tinS& tinP , const boolT& bQuitP , soulC& soulOutP , soulC& soulInP , const countT idModeP , const strokeS* const psttKeyP , const flagsT flagsP , const osTextT* const postSourceP , const countT costSourceP )" ,
0x00000d6c , "\0\0\0\0voidT etherC::strIndentF( tinS& tinP , strokeS*& psttP , const strokeS* psttOldP , const countT csttP )" ,
0x00000d6d , "\0\0\0\0 voidT etherC::strFuseSeparateF( tinS& tinP , soulC& soulP , const strokeS* const psttInP , countT csttPrefixNullsP , countT csttSuffixNullsP , grabC* pGrabP , const countT csttExtraP )" ,
0x00000d6e , "\0\0\0\0 voidT etherC::strFuseF( tinS& tinP , soulC& soulP , const strokeS* const psttInP , grabC* pGrabP , const strokeS sttEscapeP , const strokeS* psttDelimiterPairsP , const countT csttMaxDelimiterP )" ,
0x00000d6f , "\0\0\0\0voidT etherC::strPourF( tinS& tinP , soulC& soulToP , soulC& soulFromP , const flagsT flagsP )" ,
0x00000d70 , "\0\0\0\0countT etherC::strWordsF( tinS& tinP , soulC& soulOutP , soulC& soulInP , strokeS& sttQuoteP , const strokeS* psttDelimitersP , const flagsT flagsP )" ,
0x00000d71 , "\0\0\0\0 voidT etherC::strFuseF( tinS& tinP , soulC& soulOutP , soulC& soulInP , grabC* pGrabP , const strokeS sttEscapeP , const strokeS* psttDelimiterPairsP , const countT csttMaxDelimiterP )" ,
0x00000d72 , "\0\0\0\0countT etherC::strReplaceF( tinS& tinP , soulC& soulP , const strokeS* const psttOldSmallP , const strokeS* const psttNewSmallP , const flagsT flagsP )" ,
0x00000d73 , "\0\0\0\0voidT etherC::diskWalkCopyFileF( tinS& tinP , const strokeS* const psttNewP , const strokeS* const psttOldP , const countT cTriesP )" ,
0x00000d74 , "\0\0\0\0voidT etherC::diskUnzipF( tinS& tinP , const strokeS* const psttToP , const strokeS* const psttFromFileP , const strokeS* const psttFromZipP , const flagsT flagsP )" ,
0x00000d75 , "\0\0\0\0voidT etherC::strGetMimeHeaderF( tinS& tinP , strokeS*& psttToP , const strokeS* const psttFromP )" ,
0x00000d76 , "\0\0\0\0voidT etherC::strGetMimeBodyF( tinS& tinP , strokeS*& psttToP , const strokeS* const psttFromP )" ,
0x00000d77 , "\0\0\0\0boolT etherC::sssTestF( tinS& tinP , boolT& bDoNotAdvanceBigP , const strokeS* const psttSmallP , const strokeS* const psttBigP , const countT idsDoP , countT& idbDoP , const strokeS* const psttBlackP , const strokeS* const psttPunctuationP )" ,
0x00000d78 , "\0\0\0\0boolT etherC::sssAndF( tinS& tinP , stackC* const pstMatchP , const flagsT flagsMatchP , const strokeS* const psttSmallP , const strokeS* const psttBigP ,  countT& idsDoP ,  countT& idbDoP )" ,
0x00000d79 , "\0\0\0\0boolT etherC::sssOrF( tinS& tinP , stackC* const pstMatchP , const flagsT flagsMatchP , const strokeS* const psttSmallP , const strokeS* const psttBigP ,  countT& idsDoP ,  countT& idbDoP )" ,
0x00000d7a , "\0\0\0\0voidT etherC::traceF( tinS& tinP , const strokeS* const psttP , const flagsT flagsP , const countT idDivertP )" ,
0x00000d7b , "\0\0\0\0voidT etherC::openSsl_setupF( tinS& tinP )" ,
0x00000d7c , "\0\0\0\0voidT etherC::openSsl_shutdownF( tinS& tinP )" ,
0x00000d7d , "\0\0\0\0voidT etherC::openSsl_getContextF( tinS& tinP , handleC& handleP )" ,
0x00000d7e , "\0\0\0\0voidT etherC::openSsl_getWrapperF( tinS& tinP , handleC& handleP , const handleC& hContextP )" ,
0x00000d7f , "\0\0\0\0voidT etherC::openSsl_wrapSocketF( tinS& tinP , const handleC& hWrapperP , const handleC& hSocketP )" ,
0x00000d80 , "\0\0\0\0voidT etherC::openSsl_shakeHandsF( tinS& tinP , const handleC& hWrapperP )" ,
0x00000d81 , "\0\0\0\0countT etherC::openSsl_writeF( tinS& tinP , const handleC& hWrapperP , const byteT* const pbP , const countT cbP )" ,
0x00000d82 , "\0\0\0\0countT etherC::openSsl_readF( tinS& tinP , byteT* const pbP , const countT cbP , const handleC& hWrapperP )" ,
0x00000d83 , "\0\0\0\0countT etherC::disk FixBadFileNamesF( tinS& tinP , const strokeS* const psttFolderP , const flagsT flagsP )" ,
0x00000d84 , "\0\0\0\0voidT etherC::strFromJsonF( tinS& tinP , strokeS*& psttP , const strokeS* const psttFromP )" ,
0x00000d85 , "\0\0\0\0sCountT etherC::strCompareEncodedF( tinS& tinP , const byteT* const pb1P , const byteT* const pb2P )" ,
0x00000d86 , "\0\0\0\0voidT etherC::querySettingF( tinS& tinP , strokeS*& psttP , const strokeS* const psttKeyP )" ,
0x00000d87 , "\0\0\0\0voidT etherC::walkSettingsF( tinS& tinP , byteT* pbBufferP , countT cbBufferP , countT& cNestP , ifc2FT pCBFP , countT* pcArgP )" ,
0x00000d88 , "\0\0\0\0voidT etherC::openSsl_shutdownF( tinS& tinP , const handleC& hWrapperP )" ,
0x00000d89 , "\0\0\0\0boolT etherC::strFileMatchF( tinS& tinP , const strokeS* const psttLikeP , const strokeS* const psttP )" ,
0x00000d8a , "\0\0\0\0countT etherC::snapWordF( tinS& tinP , countT*& pcWordP )" ,
0x00000d8b , "\0\0\0\0countT etherC::snapWordsF( tinS& tinP , countT*& pcWordsP )" ,
0x00000d8c , "\0\0\0\0countT etherC::diskRenameToHashF( tinS& tinP , const strokeS* const psttFolderP , const flagsT flagsP )" ,
0x00000d8d , "\0\0\0\0voidT etherC::tracePoolTalliesF( tinS& tinP )" ,
0x00000d8e , "\0\0\0\0voidT etherC::strFromIdJotF( tinS& tinP , strokeS*& psttP , const countT idJotP , const countT cbJotStringDecodePrefixP )" ,
0x00000d8f , "\0\0\0\0voidT etherC::diskWalkSearchF( tinS& tinP , countT& cDirsP , countT& cFilesP , const boolT& bQuitP , const strokeS* const psttP , const osTextT* const postFindP , const flagsT flagsP , diskWalkSearchCBFT pCbfP , countT* pcArgP )" ,
0x00000d90 , "\0\0\0\0strokeS*& etherC::ether_psttEarlyFolder_F( tinS& tinP )" ,
0x00000d91 , "\0\0\0\0voidT etherC::emailFactoryReportF( tinS& tinP , const strokeS* const psttSubjectP , const strokeS* const psttBodyP )" ,
0x00000d92 , "\0\0\0\0voidT etherC::boxPutUniqueF( tinS& tinP , strokeS*& psttP , const strokeS* const psttLikeP , soulC& soulP , countT cOpenTriesP , const flagsT flagsOpenDetailsP )" ,
0x00000d93 , "\0\0\0\0countT etherC::ifcIdCopyF( tinS& tinP , countT cNameP )" ,
0x00000d94 , "\0\0\0\0countT etherC::strIdOptimizedClosureF( tinS& tinP , stackC* const pstMatchP , const flagsT flagsMatchP , countT& idFirstP , strokeS& sttQuoteP , const strokeS* psttSmallP , const strokeS* psttBigP , const flagsT flagsP , const flagsT* pFlagsOverrideP , const countT* pcMinOverrideP , const countT* pcMaxOverrideP , const countT idLastP , sCountT idP )" ,
0x00000d95 , "\0\0\0\0voidT etherC::strRegExpFromWildcardsF( tinS& tinP , strokeS*& psttRegExpP , flagsT& flagsOptimizeP , flagsT*& pFlagsOverrideP , countT*& pcMinOverrideP , countT*& pcMaxOverrideP , const strokeS* const psttWildP )" ,
0x00000d96 , "\0\0\0\0countT etherC::strIdLathExpressionF( tinS& tinP , const strokeS* const psttSmallP , countT idsWothP )" ,
0x00000d97 , "\0\0\0\0voidT etherC::strExpressionLengthMinMaxF( tinS& tinP , countT& csttMinP , countT& csttMaxP , stackC& stFixedSmallP , countT& idsP , const strokeS* const psttRegExpP , const flagsT flagsOptimizeP , const flagsT* pFlagsOverrideP , const countT* pcMinOverrideP , const countT* pcMaxOverrideP )" ,
0x00000d98 , "\0\0\0\0countT etherC::strIdOptimizedClosureF( tinS& tinP , stackC* const pstMatchP , const flagsT flagsMatchP , countT& idFirstP , strokeS& sttQuoteP , const patternC& patP , const strokeS* psttBigP , const countT idLastP , sCountT idP )" ,
0x00000d99 , "\0\0\0\0voidT etherC::diskFindFileOrDirF( tinS& tinP , infoFileS*& pInfoP , handleC& handleP , const strokeS* const psttPathP , const patternC* pPatternP , const flagsT flagsP )" ,
0x00000d9a , "\0\0\0\0voidT etherC::diskFindFileOrDirF( tinS& tinP , strokeS*& psttNameP , handleC& handleP , const strokeS* const psttPathP , const patternC* pPatternP )" ,
0x00000d9b , "\0\0\0\0countT etherC::diskFindFileOrDirF( tinS& tinP , strokeS*& pstt1FoundP , const strokeS* const psttPathP , const patternC* pPatternP , soulC* pSoulP , grabC* pGrabP , const countT csttExtraP , const countT cMaxP )" ,
0x00000d9c , "\0\0\0\0infoDiskS::infoDiskS( tinS& tinP , thirdC& thirdP )" ,
0x00000d9d , "\0\0\0\0infoDiskS::~infoDiskS( voidT )" ,
0x00000d9e , "\0\0\0\0infoDiskS& infoDiskS::operator<<( infoDisk1S& infoDisk1P )" ,
0x00000d9f , "\0\0\0\0textC::textC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const flagsT flagsP , const osTextT* const postP , const countT csP , const strokeS sttPadP , const boolT fLeadingP )" ,
0x00000da0 , "\0\0\0\0textC::textC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const flagsT flagsP , const strokeS* const psttP , const countT csP , const strokeS sttPadP , const boolT fLeadingP )" ,
0x00000da1 , "\0\0\0\0textC::~textC( voidT )" ,
0x00000da2 , "\0\0\0\0textC::operator strokeS*( voidT ) " ,
0x00000da3 , "\0\0\0\0textC textC::operator +( TPpARAM )" ,
0x00000da4 , "\0\0\0\0textC::textC( TPpARAM , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const flagsT flagsP , const countT csP , const strokeS sttPadP , const boolT fLeadingP )" ,
0x00000da5 , "\0\0\0\0countT textC::csF( tinS& tinP )" ,
0x00000da6 , "\0\0\0\0textC::textC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const flagsT flagsP , const strokeS sttP , const countT csP , const strokeS sttPadP , const boolT fLeadingP )" ,
0x00000da7 , "\0\0\0\0textC::textC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const flagsT flagsP , const sCountT valueP , const flagsT flagsFormatP , const countT csP , const countT radixP )" ,
0x00000da8 , "\0\0\0\0textC::textC( countT time1P , sCountT time2P , tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const flagsT flagsP , const countT idFirstP , const countT idLastP , const strokeS sttRadixP , const strokeS* const psttDelimiterP , const countT idFormatP , const flagsT flagsFormatP )" ,
0x00000da9 , "\0\0\0\0textC textC::operator +( const strokeS& sP )" ,
0x00000daa , "\0\0\0\0textC::textC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const flagsT flagsP , const sCountC& valueP , const flagsT flagsFormatP , const countT csP , const countT radixP )" ,
0x00000dab , "\0\0\0\0textC::textC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const flagsT flagsP , const countT valueP , const flagsT flagsFormatP , const countT csP , const countT radixP )" ,
0x00000dac , "\0\0\0\0textC::textC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const flagsT flagsP , const measureT valueP , const flagsT flagsFormatP , const countT csP , const countT radixP , const countT idcPointP , const countT cPrecisionP )" ,
0x00000dad , "\0\0\0\0textC::textC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const flagsT flagsP , const countT* const pcValueP , const flagsT flagsFormatP , const countT csP , const countT radixP , const strokeS* const psttSeparatorP )" ,
0x00000dae , "\0\0\0\0textC::operator osTextT*( voidT )" ,
0x00000daf , "\0\0\0\0textC::operator unTextT*( voidT )" ,
0x00000db0 , "\0\0\0\0textC& textC::operator =( TPpARAM )" ,
0x00000db1 , "\0\0\0\0textC& textC::operator +=( TPpARAM )" ,
0x00000db2 , "\0\0\0\0textC::textC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const flagsT flagsP , const nicNameC& valueP , const flagsT flagsFormatP , const countT csP , const countT radixP )" ,
0x00000db3 , "\0\0\0\0textC::textC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const flagsT flagsP , const countT cbBlobP , const byteT* const pbBlobP )" ,
0x00000db4 , "\0\0\0\0textC::textC( const countT idP , tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const flagsT flagsP )" ,
0x00000db5 , "\0\0\0\0textC::textC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const flagsT flagsP , const idPortTimeC& valueP , const flagsT flagsFormatP , const countT csP , const countT radixP )" ,
0x00000db6 , "\0\0\0\0boolT textC::operator ==( TPpARAM )" ,
0x00000db7 , "\0\0\0\0boolT textC::operator !=( TPpARAM )" ,
0x00000db8 , "\0\0\0\0voidT textC::loadVTextValueIfF( tinS& tinP )" ,
0x00000db9 , "\0\0\0\0strokeS* textC::psttLowerF( tinS& tinP ) " ,
0x00000dba , "\0\0\0\0textC& textC::operator =( const strokeS* const psttP )" ,
0x00000dbb , "\0\0\0\0socketC::socketC( tinS& tinP , etherC& etherP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const boolT idTypeP , const flagsT flagsP , const countT* const pIdleTimeAllowedReadP , const countT* const pIdleTimeAllowedWriteP , const countT* const pTimeAllowedConnectedP )" ,
0x00000dbc , "\0\0\0\0socketC::socketC( etherC& etherP , tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , handleC& handleP , const boolT idTypeP , const flagsT flagsP , const countT* const pIdleTimeAllowedReadP , const countT* const pIdleTimeAllowedWriteP , const countT* const pTimeAllowedConnectedP , nicNameC& nnPeerP )" ,
0x00000dbd , "\0\0\0\0socketC::~socketC( voidT )" ,
0x00000dbe , "\0\0\0\0countT socketC::bindF( tinS& tinP , const countT idPortP , const nicNameC nicNameP , const countT cTriesP , const boolT bInUseOkP )" ,
0x00000dbf , "\0\0\0\0voidT socketC::stopWaitingF( tinS& tinP )" ,
0x00000dc0 , "\0\0\0\0voidT socketC::connectF( tinS& tinP , countT idPortP , const nicNameC nicNameP , countT cTriesP , const countT time1P , const sCountT time2P )" ,
0x00000dc1 , "\0\0\0\0voidT socketC::listenF( tinS& tinP )" ,
0x00000dc2 , "\0\0\0\0countT socketC::peekF( tinS& tinP , byteT* const pbP , const countT cbP , const flagsT flagsP , const countT time1P , const sCountT time2P )" ,
0x00000dc3 , "\0\0\0\0countT socketC::readF( tinS& tinP , byteT* const pbP , const countT cbP , const flagsT flagsP , const countT time1P , const sCountT time2P )" ,
0x00000dc4 , "\0\0\0\0voidT socketC::writeF( tinS& tinP , const byteT* const pbP , const countT cbP )" ,
0x00000dc5 , "\0\0\0\0countT socketC::readWoReplyF( tinS& tinP , strokeS*& psttP , countT csttEstimateP )" ,
0x00000dc6 , "\0\0\0\0voidT socketC::writeF( tinS& tinP , const strokeS* const psttP , const boolT bNoPrefixP )" ,
0x00000dc7 , "\0\0\0\0voidT socketC::readWoMultilineF( tinS& tinP , strokeS*& psttP , const strokeS* const psttDelimiterP , countT csttEstimateP )" ,
0x00000dc8 , "\0\0\0\0osTextT socketC::readWoLineF( tinS& tinP , strokeS*& psttP , const countT csttEstimateP , const osTextT* const postEscapeP )" ,
0x00000dc9 , "\0\0\0\0voidT socketC::myNameF( tinS& tinP , countT& idPortP , nicNameC& nicNameP )" ,
0x00000dca , "\0\0\0\0voidT socketC::peerNameF( tinS& tinP , countT& idPortP , nicNameC& nicNameP )" ,
0x00000dcb , "\0\0\0\0voidT socketC::etherF( tinS& tinP , etherC& etherP )" ,
0x00000dcc , "\0\0\0\0voidT socketC::readToNullLineF( tinS& tinP , strokeS*& psttP , countT csttEstimateP )" ,
0x00000dcd , "\0\0\0\0voidT socketC::readToNullLineF( tinS& tinP , osTextT*& postP , countT csttEstimateP )" ,
0x00000dce , "\0\0\0\0voidT socketC::writeMsgF( tinS& tinP , const byteT* const pbP , const countT cbP )" ,
0x00000dcf , "\0\0\0\0countT socketC::readMsgF( tinS& tinP , byteT*& pbP )" ,
0x00000dd0 , "\0\0\0\0voidT socketC::readMsgOkF( tinS& tinP )" ,
0x00000dd1 , "\0\0\0\0voidT socketC::readMsgNokF( tinS& tinP )" ,
0x00000dd2 , "\0\0\0\0socketC::operator countT( voidT )" ,
0x00000dd3 , "\0\0\0\0voidT socketC::writeF( tinS& tinP , const countT idPortP , const nicNameC nicNameP , const byteT* const pbP , const countT cbP )" ,
0x00000dd4 , "\0\0\0\0voidT socketC::readF( tinS& tinP , byteT*& pbP , countT& cbP , countT& idPortP , nicNameC& nicNameP , const countT time1P , const sCountT time2P )" ,
0x00000dd5 , "\0\0\0\0voidT socketC::writeF( tinS& tinP , const countT idPortP , const nicNameC nicNameP , const countT idTypeP )" ,
0x00000dd6 , "\0\0\0\0voidT socketC::readF( tinS& tinP , countT& idTypeP , countT& idPortP , nicNameC& nicNameP , const countT time1P , const sCountT time2P )" ,
0x00000dd7 , "\0\0\0\0voidT socketC::acceptF( tinS& tinP , socketC*& pSocketP , countT& idPortP , nicNameC& nicNameP , boolT& bRefuseP )" ,
0x00000dd8 , "\0\0\0\0voidT socketC::writeF( tinS& tinP , const countT idPortP , const nicNameC nicNameP , const countT* const pcP )" ,
0x00000dd9 , "\0\0\0\0voidT socketC::readF( tinS& tinP , soulC& soulP , countT& idPortP , nicNameC& nicNameP , const countT time1P , const sCountT time2P )" ,
0x00000dda , "\0\0\0\0voidT socketC::readF( tinS& tinP , soulC& soulP , const countT time1P , const sCountT time2P )" ,
0x00000ddb , "\0\0\0\0voidT socketC::writeF( tinS& tinP , const countT idPortP , const nicNameC nicNameP , soulC& soulP )" ,
0x00000ddc , "\0\0\0\0voidT socketC::writeF( tinS& tinP , soulC& soulP , const countT* const pczPillNameP , const boolT bPinP , countT idCmdTopSecretP )" ,
0x00000ddd , "\0\0\0\0voidT socketC::readF( tinS& tinP , countT& idTypeP , const flagsT flagsP , const countT time1P , const sCountT time2P )" ,
0x00000dde , "\0\0\0\0voidT socketC::writeF( tinS& tinP , countT cP )" ,
0x00000ddf , "\0\0\0\0etherC& socketC::etherF( tinS& tinP )" ,
0x00000de0 , "\0\0\0\0const handleC& socketC::handleF( tinS& tinP )" ,
0x00000de1 , "\0\0\0\0voidT socketC::cancelIfTimedOutF( tinS& tinP )" ,
0x00000de2 , "\0\0\0\0voidT socketC::nameF( tinS& tinP , const strokeS* const psttP )" ,
0x00000de3 , "\0\0\0\0voidT socketC::verifyReplyF( tinS& tinP , const countT rcP )" ,
0x00000de4 , "\0\0\0\0osTextT socketC::readWoLineF( tinS& tinP , countT& offP , osTextT* const postP , const countT costaP , const osTextT* const postEscapeP )" ,
0x00000de5 , "\0\0\0\0voidT socketC::shakeHandsF( tinS& tinP )" ,
0x00000de6 , "\0\0\0\0sCountC::~sCountC( voidT )" ,
0x00000de7 , "\0\0\0\0sCountC::sCountC( tinS& tinP , etherC& etherP )" ,
0x00000de8 , "\0\0\0\0sCountC::sCountC( const sCountC& cP )" ,
0x00000de9 , "\0\0\0\0sCountC::operator countT*( voidT )" ,
0x00000dea , "\0\0\0\0sCountC::operator sCountT*( voidT )" ,
0x00000deb , "\0\0\0\0sCountC::operator countT( voidT ) const" ,
0x00000dec , "\0\0\0\0sCountC& sCountC::operator ++( sCountT postfixP )" ,
0x00000ded , "\0\0\0\0sCountC& sCountC::operator --( sCountT postfixP )" ,
0x00000dee , "\0\0\0\0sCountC& sCountC::operator ++( voidT )" ,
0x00000def , "\0\0\0\0sCountC& sCountC::operator --( voidT )" ,
0x00000df0 , "\0\0\0\0sCountC& sCountC::operator +( voidT )" ,
0x00000df1 , "\0\0\0\0sCountC sCountC::operator -( voidT ) const" ,
0x00000df2 , "\0\0\0\0sCountC sCountC::operator !( voidT ) const" ,
0x00000df3 , "\0\0\0\0sCountC sCountC::operator ~( voidT ) const" ,
0x00000df4 , "\0\0\0\0sCountC sCountC::operator *( const sCountC& cP ) const" ,
0x00000df5 , "\0\0\0\0sCountT sCountC::operator %( const sCountT cP ) const" ,
0x00000df6 , "\0\0\0\0sCountC sCountC::operator +( const sCountC& cP ) const" ,
0x00000df7 , "\0\0\0\0sCountC sCountC::operator -( const sCountC& cP ) const" ,
0x00000df8 , "\0\0\0\0boolT sCountC::operator <( const sCountC& cP ) const" ,
0x00000df9 , "\0\0\0\0boolT sCountC::operator >( const sCountC& cP ) const" ,
0x00000dfa , "\0\0\0\0boolT sCountC::operator <=( const sCountC& cP ) const" ,
0x00000dfb , "\0\0\0\0boolT sCountC::operator >=( const sCountC& cP ) const" ,
0x00000dfc , "\0\0\0\0boolT sCountC::operator ==( const sCountC& cP ) const" ,
0x00000dfd , "\0\0\0\0boolT sCountC::operator !=( const sCountC& cP ) const" ,
0x00000dfe , "\0\0\0\0boolT sCountC::operator &&( const sCountC& cP ) const" ,
0x00000dff , "\0\0\0\0boolT sCountC::operator ||( const sCountC& cP ) const" ,
0x00000e00 , "\0\0\0\0sCountC& sCountC::operator =( const sCountC& cP )" ,
0x00000e01 , "\0\0\0\0sCountC& sCountC::operator =( const sCountT cP )" ,
0x00000e02 , "\0\0\0\0sCountC& sCountC::operator +=( const sCountC& cP )" ,
0x00000e03 , "\0\0\0\0sCountC& sCountC::operator -=( const sCountC& cP )" ,
0x00000e04 , "\0\0\0\0sCountC& sCountC::operator *=( const sCountC& cP )" ,
0x00000e05 , "\0\0\0\0sCountC& sCountC::operator %=( const sCountT cP )" ,
0x00000e06 , "\0\0\0\0boolT sCountC::bitF( tinS& tinP , const countT cP , const countT offP ) const" ,
0x00000e07 , "\0\0\0\0boolT sCountC::bitF( tinS& tinP , const countT* const pcP , const countT offP ) const" ,
0x00000e08 , "\0\0\0\0countT sCountC::cbitF( tinS& tinP , const sCountT cP )" ,
0x00000e09 , "\0\0\0\0countT sCountC::cbitF( tinS& tinP , const countT* const pcP , const countT cbitP )" ,
0x00000e0a , "\0\0\0\0boolT sCountC::fNegativeF( tinS& tinP ) const" ,
0x00000e0b , "\0\0\0\0voidT sCountC::growBitsToF( tinS& tinP , const countT cbitNewP )" ,
0x00000e0c , "\0\0\0\0voidT sCountC::onesComplementF( tinS& tinP )" ,
0x00000e0d , "\0\0\0\0voidT sCountC::setBitF( tinS& tinP , countT* const pcP , const countT offP , const boolT valueP ) const" ,
0x00000e0e , "\0\0\0\0voidT sCountC::setBitRangeF( tinS& tinP , countT* const pcP , const countT off1P , const countT off2P , const boolT valueP ) const" ,
0x00000e0f , "\0\0\0\0voidT sCountC::setCBitF( tinS& tinP )" ,
0x00000e10 , "\0\0\0\0sCountC sCountC::operator /( const sCountC& cP ) const" ,
0x00000e11 , "\0\0\0\0sCountC& sCountC::operator /=( const sCountC& cP )" ,
0x00000e12 , "\0\0\0\0sCountC& sCountC::operator /=( const sCountT cP )" ,
0x00000e13 , "\0\0\0\0sCountC sCountC::operator +( const sCountT cP ) const" ,
0x00000e14 , "\0\0\0\0sCountC sCountC::operator -( const sCountT cP ) const" ,
0x00000e15 , "\0\0\0\0sCountC sCountC::operator *( const sCountT cP ) const" ,
0x00000e16 , "\0\0\0\0sCountC sCountC::operator /( const sCountT cP ) const" ,
0x00000e17 , "\0\0\0\0sCountC& sCountC::operator +=( const sCountT cP )" ,
0x00000e18 , "\0\0\0\0sCountC& sCountC::operator -=( const sCountT cP )" ,
0x00000e19 , "\0\0\0\0sCountC& sCountC::operator *=( const sCountT cP )" ,
0x00000e1a , "\0\0\0\0sCountC::sCountC( tinS& tinP , etherC& etherP , const countT* pcP , const countT cbitP )" ,
0x00000e1b , "\0\0\0\0sCountC::sCountC( tinS& tinP , etherC& etherP , const sCountT cP )" ,
0x00000e1c , "\0\0\0\0boxC::boxC( tinS& tinP , etherC& etherP , const strokeS* const psttP , const countT idAccessP , const countT idOpenHowP , const countT idShareP , const countT cOpenTriesP , countT time1P , const sCountT time2P , const flagsT flagsOpenDetailsP )" ,
0x00000e1d , "\0\0\0\0boxC::~boxC( voidT )" ,
0x00000e1e , "\0\0\0\0countT boxC::cbFileF( tinS& tinP )" ,
0x00000e1f , "\0\0\0\0countT boxC::cbFileF( tinS& tinP , const strokeS* const psttP )" ,
0x00000e20 , "\0\0\0\0voidT boxC::getF( tinS& tinP , byteT*& pbP , countT& cbP , const flagsT flagsP , const osTextT* const postBodyP , countT costBodyP )" ,
0x00000e21 , "\0\0\0\0voidT boxC::putF( tinS& tinP , const byteT* const pbP , const countT cbP , const flagsT flagsP )" ,
0x00000e22 , "\0\0\0\0voidT boxC::putGenerationF( tinS& tinP , strokeS*& psttGeneratedNameP , const countT csttEstimateP , const byteT* const pbP , const countT cbP )" ,
0x00000e23 , "\0\0\0\0voidT boxC::stouGeneratedFileNameF( tinS& tinP , strokeS*& psttGeneratedP , const strokeS* const psttReplyP )" ,
0x00000e24 , "\0\0\0\0voidT boxC::timeF( tinS& tinP , countT& time1P , sCountT& time2P )" ,
0x00000e25 , "\0\0\0\0voidT boxC::timePrivateF( tinS& tinP , countT& time1P , sCountT& time2P )" ,
0x00000e26 , "\0\0\0\0voidT boxC::zapF( tinS& tinP , countT cTriesP , strokeS* psttP )" ,
0x00000e27 , "\0\0\0\0voidT boxC::readNicNameIdPortF( tinS& tinP , nicNameC& nicNameP , countT& idPortP , const strokeS* const psttP )" ,
0x00000e28 , "\0\0\0\0voidT boxC::verifyReplyF( tinS& tinP , const countT rcP )" ,
0x00000e29 , "\0\0\0\0countT boxC::menuF( tinS& tinP , soulC& soulP , grabC* pGrabP , const countT cMaxP )" ,
0x00000e2a , "\0\0\0\0voidT boxC::verifyReplyF( tinS& tinP )" ,
0x00000e2b , "\0\0\0\0voidT boxC::openNewClientF( tinS& tinP )" ,
0x00000e2c , "\0\0\0\0voidT boxC::closeNewClientF( tinS& tinP )" ,
0x00000e2d , "\0\0\0\0voidT boxC::isInF( tinS& tinP )" ,
0x00000e2e , "\0\0\0\0voidT boxC::isOutF( tinS& tinP )" ,
0x00000e2f , "\0\0\0\0voidT boxC::isErrorF( tinS& tinP )" ,
0x00000e30 , "\0\0\0\0voidT boxC::getF( tinS& tinP , soulC& soulP )" ,
0x00000e31 , "\0\0\0\0voidT boxC::putF( tinS& tinP , soulC& soulP )" ,
0x00000e32 , "\0\0\0\0batonC::batonC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const osTextT* const postP , const countT idGrabLayerP , const flagsT flagsP , byteT* const pbZombieP , const countT cbZombieP , const countT idMemorySpaceP )" ,
0x00000e33 , "\0\0\0\0batonC::~batonC( voidT )" ,
0x00000e34 , "\0\0\0\0boolT batonC::grabF( tinS& tinP , const countT idLineP , const countT idiFileP , const byteT* const pbBitsP , const flagsT flagsP )" ,
0x00000e35 , "\0\0\0\0countT batonC::ungrabF( tinS& tinP , const flagsT flagsP )" ,
0x00000e36 , "\0\0\0\0signC::~signC( voidT )" ,
0x00000e37 , "\0\0\0\0signC::signC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const osTextT* const postP , const countT idGroupP , byteT* const pbForNapkinP )" ,
0x00000e38 , "\0\0\0\0voidT signC::waitF( tinS& tinP , const flagsT flagsP )" ,
0x00000e39 , "\0\0\0\0voidT signC::giveF( tinS& tinP , const countT idModeP , const countT time1P , const sCountT time2P )" ,
0x00000e3a , "\0\0\0\0signC::operator countT( voidT )" ,
0x00000e3b , "\0\0\0\0mainS::mainS( tinS& tinP , etherC& etherP , etherC& etThreadP , handleC& hDllP , strokeS* psttDirectivesP ) :" ,
0x00000e3c , "\0\0\0\0mainS::~mainS( voidT )" ,
0x00000e3d , "\0\0\0\0peekS::peekS( tinS& tinP , etherC& etherP , strokeS* psttDirectivesP ) :" ,
0x00000e3e , "\0\0\0\0peekS::~peekS( voidT )" ,
0x00000e3f , "\0\0\0\0taskS::taskS( tinS& tinP , voidT* const tmFP , signC* pSgnDoneP , const countT cbStackP , const flagsT flagsP , countT c1P , countT c2P , countT c3P , countT c4P , countT c5P , countT c6P , countT c7P , countT c8P , countT c9P , countT caP , countT cbP , countT ccP , countT cdP , countT ceP , countT cfP , countT c01P )" ,
0x00000e40 , "\0\0\0\0taskS::~taskS( voidT )" ,
0x00000e41 , "\0\0\0\0ifFileNameC::ifFileNameC( tinS& tinP , thirdC& thirdP , const osTextT* const postP )" ,
0x00000e42 , "\0\0\0\0ifFileNameC::~ifFileNameC( voidT )" ,
0x00000e43 , "\0\0\0\0ifFileNameC::operator osTextT*( voidT )" ,
0x00000e44 , "\0\0\0\0osFileNameC::osFileNameC( tinS& tinP , thirdC& thirdP , const osTextT* const postP )" ,
0x00000e45 , "\0\0\0\0osFileNameC::~osFileNameC( voidT )" ,
0x00000e46 , "\0\0\0\0osFileNameC::operator osTextT*( voidT )" ,
0x00000e47 , "\0\0\0\0timeS::timeS( const countT time1P , const sCountT time2P ) :" ,
0x00000e48 , "\0\0\0\0timeS::operator boolT( voidT )" ,
0x00000e49 , "\0\0\0\0batonBoxC::batonBoxC( tinS& tinP , etherC& etherP , const strokeS* const psttP ) :" ,
0x00000e4a , "\0\0\0\0batonBoxC::~batonBoxC( voidT )" ,
0x00000e4b , "\0\0\0\0plateS::plateS( voidT )" ,
0x00000e4c , "\0\0\0\0stackC::stackC( tinS& tinP , thirdC& thirdP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const flagsT flagsP , const countT idTypeP , const countT idGrabLayerP , countT* pLeverLathRefP , const osTextT* const postFileP , cbFT pCbFP , const osTextT* const postNameP , batonC* const pBatonP )" ,
0x00000e4d , "\0\0\0\0stackC::~stackC( voidT )" ,
0x00000e4e , "\0\0\0\0stackC::operator countT ( voidT ) const" ,
0x00000e4f , "\0\0\0\0stackC& stackC::operator << ( const countT valueP )" ,
0x00000e50 , "\0\0\0\0stackC& stackC::operator << ( const strokeS* const psttP )" ,
0x00000e51 , "\0\0\0\0stackC& stackC::operator << ( const count2S* const pc2P )" ,
0x00000e52 , "\0\0\0\0stackC& stackC::operator >> ( countT& valueP )" ,
0x00000e53 , "\0\0\0\0stackC& stackC::operator >> ( strokeS*& psttP )" ,
0x00000e54 , "\0\0\0\0stackC& stackC::operator >> ( count2S*& pc2P )" ,
0x00000e55 , "\0\0\0\0countT& stackC::operator [] ( countT idP )" ,
0x00000e56 , "\0\0\0\0voidT stackC::sinkF( tinS& tinP , countT& idSlotP , const countT valueP , const flagsT flagsP , ifc4FT pSubtractFP , const countT subtractionParmP )" ,
0x00000e57 , "\0\0\0\0voidT stackC::sinkF( tinS& tinP , countT& idSlotP , const strokeS* const psttP , const flagsT flagsP , ifc4FT pSubtractFP , const countT subtractionParmP )" ,
0x00000e58 , "\0\0\0\0voidT stackC::sinkF( tinS& tinP , countT& idSlotP , const count2S* const pc2P , const flagsT flagsP , ifc4FT pSubtractFP , const countT subtractionParmP )" ,
0x00000e59 , "\0\0\0\0countT stackC::extractF( tinS& tinP , const countT idP )" ,
0x00000e5a , "\0\0\0\0countT& stackC::downF( tinS& tinP , handleC& handleP )" ,
0x00000e5b , "\0\0\0\0countT& stackC::upF( tinS& tinP , handleC& handleP )" ,
0x00000e5c , "\0\0\0\0stackC& stackC::operator << ( const count3S* const pc3P )" ,
0x00000e5d , "\0\0\0\0stackC& stackC::operator << ( const count4S* const pc4P )" ,
0x00000e5e , "\0\0\0\0stackC& stackC::operator << ( const count5S* const pc5P )" ,
0x00000e5f , "\0\0\0\0stackC& stackC::operator << ( const count6S* const pc6P )" ,
0x00000e60 , "\0\0\0\0stackC& stackC::operator << ( const count7S* const pc7P )" ,
0x00000e61 , "\0\0\0\0stackC& stackC::operator << ( const count8S* const pc8P )" ,
0x00000e62 , "\0\0\0\0stackC& stackC::operator >> ( count3S*& pc3P )" ,
0x00000e63 , "\0\0\0\0stackC& stackC::operator >> ( count4S*& pc4P )" ,
0x00000e64 , "\0\0\0\0stackC& stackC::operator >> ( count5S*& pc5P )" ,
0x00000e65 , "\0\0\0\0stackC& stackC::operator >> ( count6S*& pc6P )" ,
0x00000e66 , "\0\0\0\0stackC& stackC::operator >> ( count7S*& pc7P )" ,
0x00000e67 , "\0\0\0\0stackC& stackC::operator >> ( count8S*& pc8P )" ,
0x00000e68 , "\0\0\0\0voidT stackC::sinkF( tinS& tinP , countT& idSlotP , const count3S* const pc3P , const flagsT flagsP , ifc4FT pSubtractFP , const countT subtractionParmP )" ,
0x00000e69 , "\0\0\0\0voidT stackC::sinkF( tinS& tinP , countT& idSlotP , const count4S* const pc4P , const flagsT flagsP , ifc4FT pSubtractFP , const countT subtractionParmP )" ,
0x00000e6a , "\0\0\0\0voidT stackC::sinkF( tinS& tinP , countT& idSlotP , const count5S* const pc5P , const flagsT flagsP , ifc4FT pSubtractFP , const countT subtractionParmP )" ,
0x00000e6b , "\0\0\0\0voidT stackC::sinkF( tinS& tinP , countT& idSlotP , const count6S* const pc6P , const flagsT flagsP , ifc4FT pSubtractFP , const countT subtractionParmP )" ,
0x00000e6c , "\0\0\0\0voidT stackC::sinkF( tinS& tinP , countT& idSlotP , const count7S* const pc7P , const flagsT flagsP , ifc4FT pSubtractFP , const countT subtractionParmP )" ,
0x00000e6d , "\0\0\0\0voidT stackC::sinkF( tinS& tinP , countT& idSlotP , const count8S* const pc8P , const flagsT flagsP , ifc4FT pSubtractFP , const countT subtractionParmP )" ,
0x00000e6e , "\0\0\0\0voidT stackC::grabF( tinS& tinP , const countT idLineP , const countT idiFileP , const byteT* const pbBitsP )" ,
0x00000e6f , "\0\0\0\0countT stackC::ungrabF( tinS& tinP , const flagsT flagsP )" ,
0x00000e70 , "\0\0\0\0countT stackC::operator () ( const countT cP , ifc4FT pSubtractFP , const countT subtractionParmP )" ,
0x00000e71 , "\0\0\0\0voidT stackC::newPlateF( tinS& tinP , plateS*& ppNewP , const countT valueP )" ,
0x00000e72 , "\0\0\0\0countT stackC::operator () ( const strokeS* const psttP , ifc4FT pSubtractFP , const countT subtractionParmP )" ,
0x00000e73 , "\0\0\0\0countT stackC::operator () ( const count2S& c2P , ifc4FT pSubtractFP , const countT subtractionParmP )" ,
0x00000e74 , "\0\0\0\0countT stackC::operator () ( const count3S& c3P , ifc4FT pSubtractFP , const countT subtractionParmP )" ,
0x00000e75 , "\0\0\0\0countT stackC::operator () ( const count4S& c4P , ifc4FT pSubtractFP , const countT subtractionParmP )" ,
0x00000e76 , "\0\0\0\0countT stackC::operator () ( const count5S& c5P , ifc4FT pSubtractFP , const countT subtractionParmP )" ,
0x00000e77 , "\0\0\0\0countT stackC::operator () ( const count6S& c6P , ifc4FT pSubtractFP , const countT subtractionParmP )" ,
0x00000e78 , "\0\0\0\0countT stackC::operator () ( const count7S& c7P , ifc4FT pSubtractFP , const countT subtractionParmP )" ,
0x00000e79 , "\0\0\0\0countT stackC::operator () ( const count8S& c8P , ifc4FT pSubtractFP , const countT subtractionParmP )" ,
0x00000e7a , "\0\0\0\0countT& stackC::topF( tinS& tinP )" ,
0x00000e7b , "\0\0\0\0voidT stackC::waitF( tinS& tinP )" ,
0x00000e7c , "\0\0\0\0countT stackC::operator () ( const nicNameC& nicNameP , ifc4FT pSubtractFP , const countT subtractionParmP )" ,
0x00000e7d , "\0\0\0\0voidT stackC::sinkF( tinS& tinP , countT& idSlotP , const nicNameC* const pNicNameP , const flagsT flagsP , ifc4FT pSubtractFP , const countT subtractionParmP )" ,
0x00000e7e , "\0\0\0\0stackC& stackC::operator >> ( nicNameC*& pNicNameP )" ,
0x00000e7f , "\0\0\0\0stackC& stackC::operator << ( const nicNameC* const pNicNameP )" ,
0x00000e80 , "\0\0\0\0stackC& stackC::operator << ( const soulC* const pSoulP )" ,
0x00000e81 , "\0\0\0\0stackC& stackC::operator >> ( soulC*& pSoulP )" ,
0x00000e82 , "\0\0\0\0voidT stackC::sinkF( tinS& tinP , countT& idSlotP , const soulC* const pSoulP , const flagsT flagsP , ifc4FT pSubtractFP , const countT subtractionParmP )" ,
0x00000e83 , "\0\0\0\0countT stackC::operator () ( soulC& soulP , ifc4FT pSubtractFP , const countT subtractionParmP )" ,
0x00000e84 , "\0\0\0\0baseSoilXxxxC& stackC::operator >>( soulC& soulP )" ,
0x00000e85 , "\0\0\0\0const baseSoilXxxxC& stackC::operator >>( soulC& soulP ) const" ,
0x00000e86 , "\0\0\0\0voidT stackC::ctF( tinS& tinP , soulC* pSoulP )" ,
0x00000e87 , "\0\0\0\0stackC::stackC( tinS& tinP , thirdC& thirdP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , soulC& soulP , const countT idGrabLayerP , countT* pLeverLathRefP , const osTextT* const postNameP , batonC* const pBatonP )" ,
0x00000e88 , "\0\0\0\0stackC& stackC::operator << ( const byteT* const pbP )" ,
0x00000e89 , "\0\0\0\0voidT stackC::sinkF( tinS& tinP , countT& idSlotP , const byteT* const pbP , const flagsT flagsP , ifc4FT pSubtractFP , const countT subtractionParmP )" ,
0x00000e8a , "\0\0\0\0stackC& stackC::operator >> ( byteT*& pbP )" ,
0x00000e8b , "\0\0\0\0countT stackC::operator () ( const byteT* const pbP , ifc4FT pSubtractFP , const countT subtractionParmP )" ,
0x00000e8c , "\0\0\0\0voidT stackC::insertF( tinS& tinP , const countT valueP , const countT idTypeP , countT idP , const boolT bOtherWayP )" ,
0x00000e8d , "\0\0\0\0countT& stackC::downUndoF( tinS& tinP , handleC& handleP )" ,
0x00000e8e , "\0\0\0\0countT& stackC::randomF( tinS& tinP )" ,
0x00000e8f , "\0\0\0\0flagsT stackC::flagsF( tinS& tinP )" ,
0x00000e90 , "\0\0\0\0countT stackC::idTypeF( tinS& tinP )" ,
0x00000e91 , "\0\0\0\0stackC& stackC::operator << ( const nicNameC& nicNameP )" ,
0x00000e92 , "\0\0\0\0voidT stackC::sinkF( tinS& tinP , countT& idSlotP , const nicNameC& nicNameP , const flagsT flagsP , ifc4FT pSubtractFP , const countT subtractionParmP )" ,
0x00000e93 , "\0\0\0\0stackC& stackC::operator >> ( nicNameC& nicNameP )" ,
0x00000e94 , "\0\0\0\0voidT stackC::extractF( byteT* const pbP , tinS& tinP , countT idP )" ,
0x00000e95 , "\0\0\0\0voidT stackC::extractF( tinS& tinP , nicNameC& nicNameP , const countT idP )" ,
0x00000e96 , "\0\0\0\0voidT stackC::randomF( tinS& tinP , byteT*& pbP )" ,
0x00000e97 , "\0\0\0\0voidT stackC::randomF( tinS& tinP , nicNameC& nicNameP )" ,
0x00000e98 , "\0\0\0\0countT stackC::cbDataF( tinS& tinP )" ,
0x00000e99 , "\0\0\0\0voidT stackC::randomF( tinS& tinP , timeS& timeP )" ,
0x00000e9a , "\0\0\0\0voidT stackC::extractF( tinS& tinP , timeS& timeP , const countT idP )" ,
0x00000e9b , "\0\0\0\0stackC& stackC::operator >> ( timeS& timeP )" ,
0x00000e9c , "\0\0\0\0voidT stackC::sinkF( tinS& tinP , countT& idSlotP , const timeS& timeP , const flagsT flagsP , ifc4FT pSubtractFP , const countT subtractionParmP )" ,
0x00000e9d , "\0\0\0\0stackC& stackC::operator << ( const timeS& timeP )" ,
0x00000e9e , "\0\0\0\0countT stackC::operator () ( const timeS& timeP , ifc4FT pSubtractFP , const countT subtractionParmP )" ,
0x00000e9f , "\0\0\0\0voidT stackC::operator <<( soulC& soulP )" ,
0x00000ea0 , "\0\0\0\0voidT stackC::sinkF( tinS& tinP , soulC& soulP , const flagsT flagsP , ifc4FT pSubtractFP , const countT subtractionParmP )" ,
0x00000ea1 , "\0\0\0\0voidT stackC::purgeF( tinS& tinP , countT cPlatesRetainP )" ,
0x00000ea2 , "\0\0\0\0stackC& stackC::operator << ( const measureT mP )" ,
0x00000ea3 , "\0\0\0\0voidT stackC::sinkF( tinS& tinP , countT& idSlotP , const measureT mP , const flagsT flagsP , ifc4FT pSubtractFP , const countT subtractionParmP )" ,
0x00000ea4 , "\0\0\0\0stackC& stackC::operator >> ( measureT& mP )" ,
0x00000ea5 , "\0\0\0\0countT stackC::operator () ( const measureT mP , ifc4FT pSubtractFP , const countT subtractionParmP )" ,
0x00000ea6 , "\0\0\0\0voidT stackC::extractF( tinS& tinP , byteT*& pbP , countT& cbP , const countT idP )" ,
0x00000ea7 , "\0\0\0\0flagsT stackC::flagsStateF( tinS& tinP )" ,
0x00000ea8 , "\0\0\0\0voidT stackC::extractNullsF( tinS& tinP )" ,
0x00000ea9 , "\0\0\0\0boolT stackC::newTabsIfF( tinS& tinP , plateS* ppNewDelP , const boolT bDelP )" ,
0x00000eaa , "\0\0\0\0plateS* stackC::pPlateF( tinS& tinP , countT& idP )" ,
0x00000eab , "\0\0\0\0voidT stackC::validateF( tinS& tinP )" ,
0x00000eac , "\0\0\0\0boolT stackC::downF( tinS& tinP , const boolT bQueryP )" ,
0x00000ead , "\0\0\0\0boolT stackC::upF( tinS& tinP , const boolT bQueryP )" ,
0x00000eae , "\0\0\0\0voidT stackC::grabListF( tinS& tinP , countT**& ppcDownP , countT**& ppcUpP , countT& cDownP , countT& cUpP , const boolT bNoGrabP )" ,
0x00000eaf , "\0\0\0\0voidT stackC::operator ()( tinS& tinP , soulC& slP )" ,
0x00000eb0 , "\0\0\0\0stackC& stackC::operator >> ( countT*& pcP )" ,
0x00000eb1 , "\0\0\0\0stackC& stackC::operator << ( const countT* const pcP )" ,
0x00000eb2 , "\0\0\0\0voidT stackC::sinkF( tinS& tinP , countT& idSlotP , const countT* const pcP , const flagsT flagsP , ifc4FT pSubtractFP , const countT subtractionParmP )" ,
0x00000eb3 , "\0\0\0\0countT stackC::operator () ( const countT* const pcP , ifc4FT pSubtractFP , const countT subtractionParmP )" ,
0x00000eb4 , "\0\0\0\0boolT stackC::waitGrabF( tinS& tinP , const countT cPlatesLimitP , const boolT& bQuitP )" ,
0x00000eb5 , "\0\0\0\0voidT stackC::snapF( tinS& tinP , const boolT bRestoreP )" ,
0x00000eb6 , "\0\0\0\0voidT stackC::checkChainF( tinS& tinP )" ,
0x00000eb7 , "\0\0\0\0voidT stackC::setIdLathRefF( tinS& tinP )" ,
0x00000eb8 , "\0\0\0\0voidT stackC::adjustRefsF( tinS& tinP , countT idSlotTargetP , const countT idActionP , plateS* ppNewP )" ,
0x00000eb9 , "\0\0\0\0countT* stackC::pLeverLathRefF( tinS& tinP )" ,
0x00000eba , "\0\0\0\0countT stackC::recycleLever1F( tinS& tinP )" ,
0x00000ebb , "\0\0\0\0countT stackC::recycleLever2F( tinS& tinP )" ,
0x00000ebc , "\0\0\0\0voidT stackC::sinkF( tinS& tinP , countT& idSlotP , const plateC* const pPlateP , const flagsT flagsP , ifc4FT pSubtractFP , const countT subtractionParmP )" ,
0x00000ebd , "\0\0\0\0stackC& stackC::operator >> ( plateC*& pPlateP )" ,
0x00000ebe , "\0\0\0\0stackC& stackC::operator << ( const plateC* const pPlateP )" ,
0x00000ebf , "\0\0\0\0countT stackC::operator () ( const plateC* const pPlateP , ifc4FT pSubtractFP , const countT subtractionParmP )" ,
0x00000ec0 , "\0\0\0\0voidT stackC::sortF( tinS& tinP , const flagsT flagsP , ifc4FT pSubtractFP , const countT subtractionParmP )" ,
0x00000ec1 , "\0\0\0\0voidT stackC::sinkPrivateF( tinS& tinP , countT& idSlotP , const countT valueP , plateS*& ppValueP , const flagsT flagsP , ifc4FT pSubtractFP , const countT subtractionParmP )" ,
0x00000ec2 , "\0\0\0\0textIdFileC::textIdFileC( tinS& tinP , const osTextT* const postP )" ,
0x00000ec3 , "\0\0\0\0textIdFileC::textIdFileC( tinS& tinP , const strokeS* const psttP )" ,
0x00000ec4 , "\0\0\0\0maxC::maxC( tinS& tinP , etherC* pEtherP , ifc3FT pTrialFP , voidT* const pMemoryP )" ,
0x00000ec5 , "\0\0\0\0maxC::operator countT( voidT )" ,
0x00000ec6 , "\0\0\0\0voidT switchC::freeF( tinS& tinP )" ,
0x00000ec7 , "\0\0\0\0switchC::~switchC( voidT )" ,
0x00000ec8 , "\0\0\0\0switchC::operator countT&( voidT )" ,
0x00000ec9 , "\0\0\0\0switchC& switchC::operator =( const countT cP )" ,
0x00000eca , "\0\0\0\0countT switchC::cFlavorsF( tinS& tinP )" ,
0x00000ecb , "\0\0\0\0countT& switchC::operator []( const countT idP )" ,
0x00000ecc , "\0\0\0\0countT switchC::leverF( tinS& tinP , const countT idP )" ,
0x00000ecd , "\0\0\0\0countT switchC::idSlotOfLeverF( tinS& tinP , const countT leverP )" ,
0x00000ece , "\0\0\0\0voidT switchC::replaceLeverF( tinS& tinP , countT& leverP )" ,
0x00000ecf , "\0\0\0\0voidT switchC::replaceLeverF( tinS& tinP )" ,
0x00000ed0 , "\0\0\0\0countT& switchC::forIfcThreadF( tinS& tinP )" ,
0x00000ed1 , "\0\0\0\0boolT switchC::bHitF( tinS& tinP , const countT c1P  , const countT c2P )" ,
0x00000ed2 , "\0\0\0\0voidT switchC::grabF( tinS& tinP , const countT idLineP , const countT idiFileP , const byteT* const pbBitsP )" ,
0x00000ed3 , "\0\0\0\0voidT switchC::ungrabF( tinS& tinP )" ,
0x00000ed4 , "\0\0\0\0countT switchC::idLeverTypeF( tinS& tinP )" ,
0x00000ed5 , "\0\0\0\0byteT* switchC::pbLeverF( tinS& tinP )" ,
0x00000ed6 , "\0\0\0\0switchC::switchC( thirdC& thirdP , tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const flagsT flagsP , countT* pLeverLathRefP , const countT cbDataP , const countT idGrabLayerP , const osTextT* const postNameP )" ,
0x00000ed7 , "\0\0\0\0switchC::switchC( tinS& tinP , thirdC& thirdP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const flagsT flagsP , countT& cLeverP , countT* pLeverLathRefP , const countT cbDataP , const countT idGrabLayerP , const osTextT* const postNameP )" ,
0x00000ed8 , "\0\0\0\0switchC::switchC( tinS& tinP , thirdC& thirdP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const flagsT flagsP , nicNameC& nicNameP , countT* pLeverLathRefP , const countT cbDataP , const countT idGrabLayerP , const osTextT* const postNameP )" ,
0x00000ed9 , "\0\0\0\0switchC::switchC( tinS& tinP , thirdC& thirdP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const flagsT flagsP , const countT*& pczLeverP , countT* pLeverLathRefP , const countT cbDataP , const countT idGrabLayerP , const osTextT* const postNameP )" ,
0x00000eda , "\0\0\0\0switchC::switchC( tinS& tinP , thirdC& thirdP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const flagsT flagsP , strokeS*& psttLeverP , countT* pLeverLathRefP , const countT cbDataP , const countT idGrabLayerP , const osTextT* const postNameP )" ,
0x00000edb , "\0\0\0\0switchC::switchC( tinS& tinP , thirdC& thirdP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const flagsT flagsP , soulC& soulP , countT* pLeverLathRefP , const countT cbDataP , const countT idGrabLayerP , const osTextT* const postNameP ) :" ,
0x00000edc , "\0\0\0\0voidT switchC::freeAllF( tinS& tinP )" ,
0x00000edd , "\0\0\0\0switchC& switchC::operator ++( voidT )" ,
0x00000ede , "\0\0\0\0switchC& switchC::operator --( voidT )" ,
0x00000edf , "\0\0\0\0switchC& switchC::operator +=( const countT cP )" ,
0x00000ee0 , "\0\0\0\0switchC& switchC::operator -=( const countT cP )" ,
0x00000ee1 , "\0\0\0\0countT& switchC::operator () ( const countT& cP )" ,
0x00000ee2 , "\0\0\0\0voidT switchC::freeNullsF( tinS& tinP , const countT offcP )" ,
0x00000ee3 , "\0\0\0\0switchC::switchC( tinS& tinP , thirdC& thirdP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const flagsT flagsP , const byteT*& pbLeverP , const countT cbLeverP , countT* pLeverLathRefP , const countT cbDataP , const countT idGrabLayerP , const osTextT* const postNameP )" ,
0x00000ee4 , "\0\0\0\0boolT switchC::inF( tinS& tinP , const boolT bQueryP )" ,
0x00000ee5 , "\0\0\0\0boolT switchC::outF( tinS& tinP , const boolT bQueryP )" ,
0x00000ee6 , "\0\0\0\0voidT switchC::grabListF( tinS& tinP , countT**& ppcDownP , countT**& ppcUpP , countT& cDownP , countT& cUpP , const boolT bNoGrabP )" ,
0x00000ee7 , "\0\0\0\0countT switchC::sumF( tinS& tinP , const countT idFieldP )" ,
0x00000ee8 , "\0\0\0\0switchC::switchC( tinS& tinP , thirdC& thirdP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const flagsT flagsP , osTextT** ppostLeverP , countT* pLeverLathRefP , const countT cbDataP , const countT idGrabLayerP , const osTextT* const postNameP )" ,
0x00000ee9 , "\0\0\0\0voidT switchC::operator ()( tinS& tinP , soulC& slP )" ,
0x00000eea , "\0\0\0\0baseSoilXxxxC& switchC::operator <<( soulC& slP )" ,
0x00000eeb , "\0\0\0\0baseSoilXxxxC& switchC::operator >>( soulC& slP )" ,
0x00000eec , "\0\0\0\0countT* switchC::pLeverLathRefF( tinS& tinP )" ,
0x00000eed , "\0\0\0\0countT switchC::recycleLever1F( tinS& tinP )" ,
0x00000eee , "\0\0\0\0countT switchC::recycleLever2F( tinS& tinP )" ,
0x00000eef , "\0\0\0\0countT switchC::recycleLever3F( tinS& tinP )" ,
0x00000ef0 , "\0\0\0\0countT switchC::recycleLever4F( tinS& tinP )" ,
0x00000ef1 , "\0\0\0\0countT switchC::recycleLever5F( tinS& tinP )" ,
0x00000ef2 , "\0\0\0\0switchC::switchC( tinS& tinP , thirdC& thirdP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const flagsT flagsP , const strokeS**& ppsttzLeverP , countT* pLeverLathRefP , const countT cbDataP , const countT idGrabLayerP , const osTextT* const postNameP )" ,
0x00000ef3 , "\0\0\0\0switchC::switchC( tinS& tinP , thirdC& thirdP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const flagsT flagsP , plateC*& pPlateLeverP , countT* pLeverLathRefP , const countT cbDataP , const countT idGrabLayerP , const osTextT* const postNameP )" ,
0x00000ef4 , "\0\0\0\0voidT switchC::sortF( tinS& tinP , const flagsT flagsP , ifc4FT pSubtractFP , const countT subtractionParmP )" ,
0x00000ef5 , "\0\0\0\0const baseSoilXxxxC& switchC::operator >>( soulC& slP ) const" ,
0x00000ef6 , "\0\0\0\0switchStackC::~switchStackC( voidT )" ,
0x00000ef7 , "\0\0\0\0switchStackC::operator countT ( voidT )" ,
0x00000ef8 , "\0\0\0\0switchStackC& switchStackC::operator << ( const countT valueP )" ,
0x00000ef9 , "\0\0\0\0switchStackC& switchStackC::operator << ( const strokeS* const psttP )" ,
0x00000efa , "\0\0\0\0switchStackC& switchStackC::operator << ( const count2S* const pc2P )" ,
0x00000efb , "\0\0\0\0switchStackC& switchStackC::operator >> ( countT& valueP )" ,
0x00000efc , "\0\0\0\0switchStackC& switchStackC::operator >> ( strokeS*& psttP )" ,
0x00000efd , "\0\0\0\0switchStackC& switchStackC::operator >> ( count2S*& pc2P )" ,
0x00000efe , "\0\0\0\0countT& switchStackC::operator [] ( const countT idP )" ,
0x00000eff , "\0\0\0\0voidT switchStackC::sinkF( tinS& tinP , countT& idSlotP , const countT valueP , const flagsT flagsP , ifc4FT pSubtractFP , const countT subtractionParmP , const boolT bTinHasLeverP )" ,
0x00000f00 , "\0\0\0\0voidT switchStackC::sinkF( tinS& tinP , countT& idSlotP , const strokeS* const psttP , const flagsT flagsP , ifc4FT pSubtractFP , const countT subtractionParmP , const boolT bTinHasLeverP )" ,
0x00000f01 , "\0\0\0\0voidT switchStackC::sinkF( tinS& tinP , countT& idSlotP , const count2S* const pc2P , const flagsT flagsP , ifc4FT pSubtractFP , const countT subtractionParmP , const boolT bTinHasLeverP )" ,
0x00000f02 , "\0\0\0\0countT switchStackC::extractF( tinS& tinP , const countT idP , const boolT bTinHasLeverP )" ,
0x00000f03 , "\0\0\0\0countT switchStackC::cFlavorsF( tinS& tinP )" ,
0x00000f04 , "\0\0\0\0switchStackC& switchStackC::operator << ( const count3S* const pc3P )" ,
0x00000f05 , "\0\0\0\0switchStackC& switchStackC::operator << ( const count4S* const pc4P )" ,
0x00000f06 , "\0\0\0\0switchStackC& switchStackC::operator << ( const count5S* const pc5P )" ,
0x00000f07 , "\0\0\0\0switchStackC& switchStackC::operator << ( const count6S* const pc6P )" ,
0x00000f08 , "\0\0\0\0switchStackC& switchStackC::operator << ( const count7S* const pc7P )" ,
0x00000f09 , "\0\0\0\0switchStackC& switchStackC::operator << ( const count8S* const pc8P )" ,
0x00000f0a , "\0\0\0\0switchStackC& switchStackC::operator >> ( count3S*& pc3P )" ,
0x00000f0b , "\0\0\0\0switchStackC& switchStackC::operator >> ( count4S*& pc4P )" ,
0x00000f0c , "\0\0\0\0switchStackC& switchStackC::operator >> ( count5S*& pc5P )" ,
0x00000f0d , "\0\0\0\0switchStackC& switchStackC::operator >> ( count6S*& pc6P )" ,
0x00000f0e , "\0\0\0\0switchStackC& switchStackC::operator >> ( count7S*& pc7P )" ,
0x00000f0f , "\0\0\0\0switchStackC& switchStackC::operator >> ( count8S*& pc8P )" ,
0x00000f10 , "\0\0\0\0voidT switchStackC::sinkF( tinS& tinP , countT& idSlotP , const count3S* const pc3P , const flagsT flagsP , ifc4FT pSubtractFP , const countT subtractionParmP , const boolT bTinHasLeverP )" ,
0x00000f11 , "\0\0\0\0voidT switchStackC::sinkF( tinS& tinP , countT& idSlotP , const count4S* const pc4P , const flagsT flagsP , ifc4FT pSubtractFP , const countT subtractionParmP , const boolT bTinHasLeverP )" ,
0x00000f12 , "\0\0\0\0voidT switchStackC::sinkF( tinS& tinP , countT& idSlotP , const count5S* const pc5P , const flagsT flagsP , ifc4FT pSubtractFP , const countT subtractionParmP , const boolT bTinHasLeverP )" ,
0x00000f13 , "\0\0\0\0voidT switchStackC::sinkF( tinS& tinP , countT& idSlotP , const count6S* const pc6P , const flagsT flagsP , ifc4FT pSubtractFP , const countT subtractionParmP , const boolT bTinHasLeverP )" ,
0x00000f14 , "\0\0\0\0voidT switchStackC::sinkF( tinS& tinP , countT& idSlotP , const count7S* const pc7P , const flagsT flagsP , ifc4FT pSubtractFP , const countT subtractionParmP , const boolT bTinHasLeverP )" ,
0x00000f15 , "\0\0\0\0voidT switchStackC::sinkF( tinS& tinP , countT& idSlotP , const count8S* const pc8P , const flagsT flagsP , ifc4FT pSubtractFP , const countT subtractionParmP , const boolT bTinHasLeverP )" ,
0x00000f16 , "\0\0\0\0voidT switchStackC::grabF( tinS& tinP , const countT idLineP , const countT idiFileP , const byteT* const pbBitsP )" ,
0x00000f17 , "\0\0\0\0voidT switchStackC::ungrabF( tinS& tinP )" ,
0x00000f18 , "\0\0\0\0countT& switchStackC::downF( tinS& tinP , handleC& handleP , const boolT bTinHasLeverP )" ,
0x00000f19 , "\0\0\0\0countT& switchStackC::upF( tinS& tinP , handleC& handleP , const boolT bTinHasLeverP )" ,
0x00000f1a , "\0\0\0\0countT switchStackC::leverF( tinS& tinP , const countT idP )" ,
0x00000f1b , "\0\0\0\0countT switchStackC::operator () ( const countT cP , ifc4FT pSubtractFP , const countT subtractionParmP , const boolT bTinHasLeverP )" ,
0x00000f1c , "\0\0\0\0countT switchStackC::operator () ( const strokeS* const psttP , ifc4FT pSubtractFP , const countT subtractionParmP , const boolT bTinHasLeverP )" ,
0x00000f1d , "\0\0\0\0countT switchStackC::operator () ( count2S& c2P , ifc4FT pSubtractFP , const countT subtractionParmP , const boolT bTinHasLeverP )" ,
0x00000f1e , "\0\0\0\0countT switchStackC::operator () ( count3S& c3P , ifc4FT pSubtractFP , const countT subtractionParmP , const boolT bTinHasLeverP )" ,
0x00000f1f , "\0\0\0\0countT switchStackC::operator () ( count4S& c4P , ifc4FT pSubtractFP , const countT subtractionParmP , const boolT bTinHasLeverP )" ,
0x00000f20 , "\0\0\0\0countT switchStackC::operator () ( count5S& c5P , ifc4FT pSubtractFP , const countT subtractionParmP , const boolT bTinHasLeverP )" ,
0x00000f21 , "\0\0\0\0countT switchStackC::operator () ( count6S& c6P , ifc4FT pSubtractFP , const countT subtractionParmP , const boolT bTinHasLeverP )" ,
0x00000f22 , "\0\0\0\0countT switchStackC::operator () ( count7S& c7P , ifc4FT pSubtractFP , const countT subtractionParmP , const boolT bTinHasLeverP )" ,
0x00000f23 , "\0\0\0\0countT switchStackC::operator () ( count8S& c8P , ifc4FT pSubtractFP , const countT subtractionParmP , const boolT bTinHasLeverP )" ,
0x00000f24 , "\0\0\0\0voidT switchStackC::replaceLeverF( tinS& tinP , countT& leverP )" ,
0x00000f25 , "\0\0\0\0voidT switchStackC::replaceLeverF( tinS& tinP )" ,
0x00000f26 , "\0\0\0\0countT& switchStackC::topF( tinS& tinP , const boolT bTinHasLeverP )" ,
0x00000f27 , "\0\0\0\0countT switchStackC::cPlatesF( tinS& tinP , const boolT bTinHasLeverP )" ,
0x00000f28 , "\0\0\0\0countT& switchStackC::plateF( tinS& tinP , const countT idP , const boolT bTinHasLeverP )" ,
0x00000f29 , "\0\0\0\0switchStackC& switchStackC::pushF( tinS& tinP , const countT valueP , const boolT bTinHasLeverP )" ,
0x00000f2a , "\0\0\0\0switchStackC& switchStackC::pullF( tinS& tinP , countT& valueP , const boolT bTinHasLeverP )" ,
0x00000f2b , "\0\0\0\0switchStackC& switchStackC::pushF( tinS& tinP , const strokeS* const psttP , const boolT bTinHasLeverP )" ,
0x00000f2c , "\0\0\0\0switchStackC& switchStackC::pushF( tinS& tinP , const count2S* const pc2P , const boolT bTinHasLeverP )" ,
0x00000f2d , "\0\0\0\0switchStackC& switchStackC::pushF( tinS& tinP , const count3S* const pc3P , const boolT bTinHasLeverP )" ,
0x00000f2e , "\0\0\0\0switchStackC& switchStackC::pushF( tinS& tinP , const count4S* const pc4P , const boolT bTinHasLeverP )" ,
0x00000f2f , "\0\0\0\0switchStackC& switchStackC::pushF( tinS& tinP , const count5S* const pc5P , const boolT bTinHasLeverP )" ,
0x00000f30 , "\0\0\0\0switchStackC& switchStackC::pushF( tinS& tinP , const count6S* const pc6P , const boolT bTinHasLeverP )" ,
0x00000f31 , "\0\0\0\0switchStackC& switchStackC::pushF( tinS& tinP , const count7S* const pc7P , const boolT bTinHasLeverP )" ,
0x00000f32 , "\0\0\0\0switchStackC& switchStackC::pushF( tinS& tinP , const count8S* const pc8P , const boolT bTinHasLeverP )" ,
0x00000f33 , "\0\0\0\0switchStackC& switchStackC::pullF( tinS& tinP , strokeS*& psttP , const boolT bTinHasLeverP )" ,
0x00000f34 , "\0\0\0\0switchStackC& switchStackC::pullF( tinS& tinP , count2S*& pc2P , const boolT bTinHasLeverP )" ,
0x00000f35 , "\0\0\0\0switchStackC& switchStackC::pullF( tinS& tinP , count3S*& pc3P , const boolT bTinHasLeverP )" ,
0x00000f36 , "\0\0\0\0switchStackC& switchStackC::pullF( tinS& tinP , count4S*& pc4P , const boolT bTinHasLeverP )" ,
0x00000f37 , "\0\0\0\0switchStackC& switchStackC::pullF( tinS& tinP , count5S*& pc5P , const boolT bTinHasLeverP )" ,
0x00000f38 , "\0\0\0\0switchStackC& switchStackC::pullF( tinS& tinP , count6S*& pc6P , const boolT bTinHasLeverP )" ,
0x00000f39 , "\0\0\0\0switchStackC& switchStackC::pullF( tinS& tinP , count7S*& pc7P , const boolT bTinHasLeverP )" ,
0x00000f3a , "\0\0\0\0switchStackC& switchStackC::pullF( tinS& tinP , count8S*& pc8P , const boolT bTinHasLeverP )" ,
0x00000f3b , "\0\0\0\0switchStackC& switchStackC::operator << ( const nicNameC* const pNicNameP )" ,
0x00000f3c , "\0\0\0\0switchStackC& switchStackC::pushF( tinS& tinP , const nicNameC* const pNicNameP , const boolT bTinHasLeverP )" ,
0x00000f3d , "\0\0\0\0voidT switchStackC::sinkF( tinS& tinP , countT& idSlotP , const nicNameC* const pNicNameP , const flagsT flagsP , ifc4FT pSubtractFP , const countT subtractionParmP , const boolT bTinHasLeverP )" ,
0x00000f3e , "\0\0\0\0switchStackC& switchStackC::operator >> ( nicNameC*& pNicNameP )" ,
0x00000f3f , "\0\0\0\0switchStackC& switchStackC::pullF( tinS& tinP , nicNameC*& pNicNameP , const boolT bTinHasLeverP )" ,
0x00000f40 , "\0\0\0\0countT switchStackC::operator () ( nicNameC& nicNameP , ifc4FT pSubtractFP , const countT subtractionParmP , const boolT bTinHasLeverP )" ,
0x00000f41 , "\0\0\0\0countT switchStackC::cPlatesAllF( tinS& tinP )" ,
0x00000f42 , "\0\0\0\0countT switchStackC::idLeverTypeF( tinS& tinP )" ,
0x00000f43 , "\0\0\0\0stackC& switchStackC::stackF( tinS& tinP , const countT idP )" ,
0x00000f44 , "\0\0\0\0switchStackC::switchStackC( thirdC& thirdP , tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const flagsT flagsSwitchP , const flagsT flagsStackP , const countT idTypeP , const countT idGrabLayerP , countT* pLeverLathRefP , cbFT pCbFP )" ,
0x00000f45 , "\0\0\0\0switchStackC::switchStackC( tinS& tinP , thirdC& thirdP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const flagsT flagsSwitchP , const countT*& pczLeverP , const flagsT flagsStackP , const countT idTypeP , const countT idGrabLayerP , countT* pLeverLathRefP , cbFT pCbFP )" ,
0x00000f46 , "\0\0\0\0switchStackC::switchStackC( tinS& tinP , thirdC& thirdP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const flagsT flagsSwitchP , countT& cLeverP , const flagsT flagsStackP , const countT idTypeP , const countT idGrabLayerP , countT* pLeverLathRefP , cbFT pCbFP )" ,
0x00000f47 , "\0\0\0\0switchStackC& switchStackC::operator << ( const soulC* const pSoulP )" ,
0x00000f48 , "\0\0\0\0switchStackC& switchStackC::pushF( tinS& tinP , const soulC* const pSoulP , const boolT bTinHasLeverP )" ,
0x00000f49 , "\0\0\0\0voidT switchStackC::sinkF( tinS& tinP , countT& idSlotP , const soulC* const pSoulP , const flagsT flagsP , ifc4FT pSubtractFP , const countT subtractionParmP , const boolT bTinHasLeverP )" ,
0x00000f4a , "\0\0\0\0switchStackC& switchStackC::operator >> ( soulC*& pSoulP )" ,
0x00000f4b , "\0\0\0\0switchStackC& switchStackC::pullF( tinS& tinP , soulC*& pSoulP , const boolT bTinHasLeverP )" ,
0x00000f4c , "\0\0\0\0countT switchStackC::operator () ( soulC& soulP , ifc4FT pSubtractFP , const countT subtractionParmP , const boolT bTinHasLeverP )" ,
0x00000f4d , "\0\0\0\0voidT switchStackC::freeF( tinS& tinP , const boolT bRetainFlavorP )" ,
0x00000f4e , "\0\0\0\0voidT switchStackC::stackF( tinS& tinP , stackC& stackP )" ,
0x00000f4f , "\0\0\0\0voidT switchStackC::insertF( tinS& tinP , const countT valueP , const countT idTypeP , const countT idP , const boolT bOtherWayP , const boolT bTinHasLeverP )" ,
0x00000f50 , "\0\0\0\0switchStackC::switchStackC( tinS& tinP , thirdC& thirdP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const flagsT flagsSwitchP , nicNameC& nicNameP , const flagsT flagsStackP , const countT idTypeP , const countT idGrabLayerP , countT* pLeverLathRefP , cbFT pCbFP )" ,
0x00000f51 , "\0\0\0\0switchStackC& switchStackC::operator << ( const byteT* const pbP )" ,
0x00000f52 , "\0\0\0\0switchStackC& switchStackC::pushF( tinS& tinP , const byteT* const pbP , const boolT bTinHasLeverP )" ,
0x00000f53 , "\0\0\0\0voidT switchStackC::sinkF( tinS& tinP , countT& idSlotP , const byteT* const pbP , const flagsT flagsP , ifc4FT pSubtractFP , const countT subtractionParmP , const boolT bTinHasLeverP )" ,
0x00000f54 , "\0\0\0\0switchStackC& switchStackC::operator >> ( byteT*& pbP )" ,
0x00000f55 , "\0\0\0\0switchStackC& switchStackC::pullF( tinS& tinP , byteT*& pbP , const boolT bTinHasLeverP )" ,
0x00000f56 , "\0\0\0\0countT switchStackC::operator () ( const byteT* const pbP , ifc4FT pSubtractFP , const countT subtractionParmP , const boolT bTinHasLeverP )" ,
0x00000f57 , "\0\0\0\0switchStackC::switchStackC( tinS& tinP , thirdC& thirdP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const flagsT flagsSwitchP , strokeS*& psttLeverP , const flagsT flagsStackP , const countT idTypeP , const countT idGrabLayerP , countT* pLeverLathRefP , cbFT pCbFP )" ,
0x00000f58 , "\0\0\0\0switchStackC::switchStackC( tinS& tinP , thirdC& thirdP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const flagsT flagsSwitchP , soulC& soulP , const flagsT flagsStackP , const countT idTypeP , const countT idGrabLayerP , countT* pLeverLathRefP , cbFT pCbFP )" ,
0x00000f59 , "\0\0\0\0countT& switchStackC::randomF( tinS& tinP , const boolT bTinHasLeverP )" ,
0x00000f5a , "\0\0\0\0countT switchStackC::flagsStackF( tinS& tinP )" ,
0x00000f5b , "\0\0\0\0countT switchStackC::idTypeF( tinS& tinP )" ,
0x00000f5c , "\0\0\0\0switchStackC& switchStackC::operator << ( const nicNameC& nicNameP )" ,
0x00000f5d , "\0\0\0\0switchStackC& switchStackC::pushF( tinS& tinP , const nicNameC& nicNameP , const boolT bTinHasLeverP )" ,
0x00000f5e , "\0\0\0\0voidT switchStackC::sinkF( tinS& tinP , countT& idSlotP , const nicNameC& nicNameP , const flagsT flagsP , ifc4FT pSubtractFP , const countT subtractionParmP , const boolT bTinHasLeverP )" ,
0x00000f5f , "\0\0\0\0switchStackC& switchStackC::operator >> ( nicNameC& nicNameP )" ,
0x00000f60 , "\0\0\0\0switchStackC& switchStackC::pullF( tinS& tinP , nicNameC& nicNameP , const boolT bTinHasLeverP )" ,
0x00000f61 , "\0\0\0\0voidT switchStackC::randomF( tinS& tinP , nicNameC& nicNameP , const boolT bTinHasLeverP )" ,
0x00000f62 , "\0\0\0\0voidT switchStackC::extractF( tinS& tinP , nicNameC& nicNameP , const countT idP , const boolT bTinHasLeverP )" ,
0x00000f63 , "\0\0\0\0voidT switchStackC::extractF( tinS& tinP , timeS& timeP , const countT idP , const boolT bTinHasLeverP )" ,
0x00000f64 , "\0\0\0\0voidT switchStackC::randomF( tinS& tinP , timeS& timeP , const boolT bTinHasLeverP )" ,
0x00000f65 , "\0\0\0\0switchStackC& switchStackC::pullF( tinS& tinP , timeS& timeP , const boolT bTinHasLeverP )" ,
0x00000f66 , "\0\0\0\0switchStackC& switchStackC::operator >> ( timeS& timeP )" ,
0x00000f67 , "\0\0\0\0voidT switchStackC::sinkF( tinS& tinP , countT& idSlotP , const timeS& timeP , const flagsT flagsP , ifc4FT pSubtractFP , const countT subtractionParmP , const boolT bTinHasLeverP )" ,
0x00000f68 , "\0\0\0\0switchStackC& switchStackC::pushF( tinS& tinP , const timeS& timeP , const boolT bTinHasLeverP )" ,
0x00000f69 , "\0\0\0\0switchStackC& switchStackC::operator << ( const timeS& timeP )" ,
0x00000f6a , "\0\0\0\0countT switchStackC::operator () ( timeS& timeP , ifc4FT pSubtractFP , const countT subtractionParmP , const boolT bTinHasLeverP )" ,
0x00000f6b , "\0\0\0\0voidT switchStackC::ctF( tinS& tinP )" ,
0x00000f6c , "\0\0\0\0switchStackC::operator stackC& ( voidT )" ,
0x00000f6d , "\0\0\0\0switchStackC& switchStackC::operator << ( const measureT mP )" ,
0x00000f6e , "\0\0\0\0voidT switchStackC::sinkF( tinS& tinP , countT& idSlotP , const measureT mP , const flagsT flagsP , ifc4FT pSubtractFP , const countT subtractionParmP , const boolT bTinHasLeverP )" ,
0x00000f6f , "\0\0\0\0switchStackC& switchStackC::operator >> ( measureT& mP )" ,
0x00000f70 , "\0\0\0\0countT switchStackC::operator () ( const measureT mP , ifc4FT pSubtractFP , const countT subtractionParmP , const boolT bTinHasLeverP )" ,
0x00000f71 , "\0\0\0\0switchStackC& switchStackC::pushF( tinS& tinP , const measureT mP , const boolT bTinHasLeverP )" ,
0x00000f72 , "\0\0\0\0switchStackC& switchStackC::pullF( tinS& tinP , measureT& mP , const boolT bTinHasLeverP )" ,
0x00000f73 , "\0\0\0\0voidT switchStackC::extractF( tinS& tinP , byteT*& pbP , countT& cbP , const countT idP , const boolT bTinHasLeverP )" ,
0x00000f74 , "\0\0\0\0voidT switchStackC::extractF( byteT* const pbP , tinS& tinP , const countT idP , const boolT bTinHasLeverP )" ,
0x00000f75 , "\0\0\0\0voidT switchStackC::freeNullFlavorsF( tinS& tinP )" ,
0x00000f76 , "\0\0\0\0boolT switchStackC::downF( tinS& tinP , const boolT bQueryP , const boolT bTinHasLeverP )" ,
0x00000f77 , "\0\0\0\0boolT switchStackC::upF( tinS& tinP , const boolT bQueryP , const boolT bTinHasLeverP )" ,
0x00000f78 , "\0\0\0\0boolT switchStackC::inF( tinS& tinP , const boolT bQueryP )" ,
0x00000f79 , "\0\0\0\0boolT switchStackC::outF( tinS& tinP , const boolT bQueryP )" ,
0x00000f7a , "\0\0\0\0voidT switchStackC::grabListF( tinS& tinP , countT**& ppcDownP , countT**& ppcUpP , countT& cDownP , countT& cUpP , const boolT bSwitchP , const boolT bTinHasLeverP , const boolT bNoGrabP )" ,
0x00000f7b , "\0\0\0\0countT switchStackC::idSlotOfLeverF( tinS& tinP , const countT leverP )" ,
0x00000f7c , "\0\0\0\0switchStackC::switchStackC( tinS& tinP , thirdC& thirdP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const flagsT flagsSwitchP , const byteT*& pbLeverP , const countT cbLeverP , const flagsT flagsStackP , const countT idTypeP , const countT idGrabLayerP , countT* pLeverLathRefP , cbFT pCbFP )" ,
0x00000f7d , "\0\0\0\0voidT switchStackC::randomF( tinS& tinP , byteT*& pbP , const boolT bTinHasLeverP )" ,
0x00000f7e , "\0\0\0\0voidT switchStackC::purgeF( tinS& tinP , const boolT bTinHasLeverP )" ,
0x00000f7f , "\0\0\0\0voidT switchStackC::freeAllF( tinS& tinP )" ,
0x00000f80 , "\0\0\0\0countT switchStackC::operator () ( const countT* const pcP , ifc4FT pSubtractFP , const countT subtractionParmP , const boolT bTinHasLeverP )" ,
0x00000f81 , "\0\0\0\0voidT switchStackC::sinkF( tinS& tinP , countT& idSlotP , const countT* const pcP , const flagsT flagsP , ifc4FT pSubtractFP , const countT subtractionParmP , const boolT bTinHasLeverP )" ,
0x00000f82 , "\0\0\0\0voidT switchStackC::waitF( tinS& tinP , const boolT bTinHasLeverP )" ,
0x00000f83 , "\0\0\0\0boolT switchStackC::waitGrabF( tinS& tinP , const countT cPlatesLimitP , const boolT& bQuitP , const boolT bTinHasLeverP )" ,
0x00000f84 , "\0\0\0\0countT* switchStackC::pLeverLathRefF( tinS& tinP )" ,
0x00000f85 , "\0\0\0\0countT switchStackC::recycleLever1F( tinS& tinP )" ,
0x00000f86 , "\0\0\0\0countT switchStackC::recycleLever2F( tinS& tinP )" ,
0x00000f87 , "\0\0\0\0countT switchStackC::recycleLever3F( tinS& tinP )" ,
0x00000f88 , "\0\0\0\0countT switchStackC::recycleLever4F( tinS& tinP )" ,
0x00000f89 , "\0\0\0\0countT switchStackC::recycleLever5F( tinS& tinP )" ,
0x00000f8a , "\0\0\0\0countT switchStackC::recycleLever6F( tinS& tinP )" ,
0x00000f8b , "\0\0\0\0switchStackC& switchStackC::operator << ( const plateC* const pPlateP )" ,
0x00000f8c , "\0\0\0\0switchStackC& switchStackC::operator >> ( plateC*& pPlateP )" ,
0x00000f8d , "\0\0\0\0switchStackC& switchStackC::pushF( tinS& tinP , const plateC* const pPlateP , const boolT bTinHasLeverP )" ,
0x00000f8e , "\0\0\0\0voidT switchStackC::sinkF( tinS& tinP , countT& idSlotP , const plateC* const pPlateP , const flagsT flagsP , ifc4FT pSubtractFP , const countT subtractionParmP , const boolT bTinHasLeverP )" ,
0x00000f8f , "\0\0\0\0switchStackC& switchStackC::pullF( tinS& tinP , plateC*& pPlateP , const boolT bTinHasLeverP )" ,
0x00000f90 , "\0\0\0\0switchStackC::switchStackC( tinS& tinP , thirdC& thirdP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const flagsT flagsSwitchP , plateC*& pPlateLeverP , const flagsT flagsStackP , const countT idTypeP , const countT idGrabLayerP , countT* pLeverLathRefP , cbFT pCbFP )" ,
0x00000f91 , "\0\0\0\0voidT switchStackC::sortF( tinS& tinP , const flagsT flagsP , const boolT bTinHasLeverP , ifc4FT pSubtractFP , const countT subtractionParmP )" ,
0x00000f92 , "\0\0\0\0voidT switchStackC::sortFlavorsF( tinS& tinP , const flagsT flagsP , ifc4FT pSubtractFP , const countT subtractionParmP )" ,
0x00000f93 , "\0\0\0\0mapC::mapC( tinS& tinP , etherC& etherP )" ,
0x00000f94 , "\0\0\0\0mapC::~mapC( voidT )" ,
0x00000f95 , "\0\0\0\0countT mapC::operator []( const countT idP )" ,
0x00000f96 , "\0\0\0\0countT mapC::operator ()( const countT idP )" ,
0x00000f97 , "\0\0\0\0mapC::operator countT( voidT ) const" ,
0x00000f98 , "\0\0\0\0voidT mapC::operator !( voidT )" ,
0x00000f99 , "\0\0\0\0voidT mapC::sinkF( tinS& tinP , const countT c1P , const countT c2P )" ,
0x00000f9a , "\0\0\0\0count2S::count2S( const countT c1P , const countT c2P )" ,
0x00000f9b , "\0\0\0\0count2S::operator countT*( voidT )" ,
0x00000f9c , "\0\0\0\0count2S::operator byteT*( voidT )" ,
0x00000f9d , "\0\0\0\0voidT count2S::operator >>( soulC& slP )" ,
0x00000f9e , "\0\0\0\0voidT count2S::operator <<( soulC& slP )" ,
0x00000f9f , "\0\0\0\0count2S count2S::operator |( count2S& cP )" ,
0x00000fa0 , "\0\0\0\0count2S& count2S::operator |=( count2S& cP )" ,
0x00000fa1 , "\0\0\0\0count3S::count3S( const countT c1P , const countT c2P , const countT c3P )" ,
0x00000fa2 , "\0\0\0\0count3S count3S::operator |( count3S& cP )" ,
0x00000fa3 , "\0\0\0\0count4S::count4S( const countT c1P , const countT c2P , const countT c3P , const countT c4P )" ,
0x00000fa4 , "\0\0\0\0count4S count4S::operator |( count4S& cP )" ,
0x00000fa5 , "\0\0\0\0count5S::count5S( const countT c1P , const countT c2P , const countT c3P , const countT c4P , const countT c5P )" ,
0x00000fa6 , "\0\0\0\0count5S count5S::operator |( count5S& cP )" ,
0x00000fa7 , "\0\0\0\0count6S::count6S( const countT c1P , const countT c2P , const countT c3P , const countT c4P , const countT c5P , const countT c6P )" ,
0x00000fa8 , "\0\0\0\0count6S count6S::operator |( count6S& cP )" ,
0x00000fa9 , "\0\0\0\0count7S::count7S( const countT c1P , const countT c2P , const countT c3P , const countT c4P , const countT c5P , const countT c6P , const countT c7P )" ,
0x00000faa , "\0\0\0\0count7S count7S::operator |( count7S& cP )" ,
0x00000fab , "\0\0\0\0count8S::count8S( const countT c1P , const countT c2P , const countT c3P , const countT c4P , const countT c5P , const countT c6P , const countT c7P , const countT c8P )" ,
0x00000fac , "\0\0\0\0count8S count8S::operator |( count8S& cP )" ,
0x00000fad , "\0\0\0\0infoFileS::infoFileS( tinS& tinP )" ,
0x00000fae , "\0\0\0\0infoFileS::~infoFileS( voidT )" ,
0x00000faf , "\0\0\0\0infoDisk1bS::infoDisk1bS( voidT )" ,
0x00000fb0 , "\0\0\0\0infoDisk1S::~infoDisk1S( voidT )" ,
0x00000fb1 , "\0\0\0\0infoDisk1S::infoDisk1S( tinS& tinP , thirdC& thirdP )" ,
0x00000fb2 , "\0\0\0\0infoDisk1S& infoDisk1S::operator<<( infoDisk1aS& infoDisk1aP )" ,
0x00000fb3 , "\0\0\0\0infoDisk1S& infoDisk1S::operator<<( infoDisk1bS& infoDisk1bP )" ,
0x00000fb4 , "\0\0\0\0infoDisk1aS::infoDisk1aS( voidT )" ,
0x00000fb5 , "\0\0\0\0infoBoxGetPutS::infoBoxGetPutS( tinS& tinP , etherC& etherP , socketC& socketP , const countT msWaitP )" ,
0x00000fb6 , "\0\0\0\0infoBoxGetPutS::~infoBoxGetPutS( voidT )" ,
0x00000fb7 , "\0\0\0\0tinS::~tinS( voidT )" ,
0x00000fb8 , "\0\0\0\0tinS::tinS( tinS& tinSelfOrElderP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const countT idThreadP , tinS* const pTinDadP , const osTextT* const postThreadNameP , const flagsT flagsP , const countT idTinNamedP , byteT* const pbTlsP , const countT cbTlsP )" ,
0x00000fb9 , "\0\0\0\0voidT tinS::strFuseF( tinS& tinP , etherC& ether , strokeS*& psttP , const countT csttExtraP , const flagsT flagsInclude1P , const flagsT flagsInclude2P , const flagsT flagsExclude1P , const flagsT flagsExclude2P , countT idFormatP , const countT cIndentP )" ,
0x00000fba , "\0\0\0\0voidT tinS::zePointerFieldsF( tinS& tinP )" ,
0x00000fbb , "\0\0\0\0voidT tinS::levelModeF( const flagsT flagsModeP , sCountT cLevelsP , const sCountT offRelLevelP )" ,
0x00000fbc , "\0\0\0\0voidT tinS::get_pLFnest_F( tinS& tinP , countT* const pcP , const countT ccP )" ,
0x00000fbd , "\0\0\0\0tinS& tinS::rootF( voidT )" ,
0x00000fbe , "\0\0\0\0voidT tinS::walkF( tinS& tinRootP , tinWalkerFT tinWalkerFP , countT& cArgP )" ,
0x00000fbf , "\0\0\0\0voidT tinS::deregisterIfF( tinS& tinP )" ,
0x00000fc0 , "\0\0\0\0byteT* tinS::tlsNewF( const countT cbP , const osTextT* const postNameP , const osTextT* const postInGroupP )" ,
0x00000fc1 , "\0\0\0\0voidT tinS::tlsDelF( byteT*& pbMeP )" ,
0x00000fc2 , "\0\0\0\0byteT* tinS::pbF( countT idP )" ,
0x00000fc3 , "\0\0\0\0voidT tinS::get_pLFstep_F( tinS& tinP , countT* const pcP , const countT ccP )" ,
0x00000fc4 , "\0\0\0\0voidT tinS::get_pFlagsThreadLevelMode_F( tinS& tinP , countT* const pcP , const countT ccP )" ,
0x00000fc5 , "\0\0\0\0voidT tinS::get_pIdInNest_F( tinS& tinP , countT* const pcP , const countT ccP )" ,
0x00000fc6 , "\0\0\0\0voidT tinS::get_pEIPInNest_F( tinS& tinP , countT* const pcP , const countT ccP )" ,
0x00000fc7 , "\0\0\0\0voidT tinS::get_pIdProgressNest_F( tinS& tinP , countT* const pcP , const countT ccP )" ,
0x00000fc8 , "\0\0\0\0voidT tinS::unwatchedF( voidT )" ,
0x00000fc9 , "\0\0\0\0sqMatrixOldC::~sqMatrixOldC( voidT )" ,
0x00000fca , "\0\0\0\0sqMatrixOldC::sqMatrixOldC( sqMatrixOldC& sqmP )" ,
0x00000fcb , "\0\0\0\0sqMatrixOldC::sqMatrixOldC( tinS& tinP , etherC& etherP , const countT cSizeP )" ,
0x00000fcc , "\0\0\0\0sqMatrixOldC::operator measureT( voidT ) const" ,
0x00000fcd , "\0\0\0\0sqMatrixOldC& sqMatrixOldC::operator =( const sqMatrixOldC& sqmP )" ,
0x00000fce , "\0\0\0\0measureT& sqMatrixOldC::operator ()( const countT cRowP , const countT cColP )" ,
0x00000fcf , "\0\0\0\0sqMatrixOldC sqMatrixOldC::operator *( const sqMatrixOldC& sqmP ) const" ,
0x00000fd0 , "\0\0\0\0sqMatrixOldC sqMatrixOldC::transposeF( tinS& tinP ) const" ,
0x00000fd1 , "\0\0\0\0voidT sqMatrixOldC::sayF( tinS& tinP )" ,
0x00000fd2 , "\0\0\0\0measureT sqMatrixOldC::cofactorF( tinS& tinP , const countT idRowP , const countT idColP ) const" ,
0x00000fd3 , "\0\0\0\0sqMatrixOldC sqMatrixOldC::adjointF( tinS& tinP )" ,
0x00000fd4 , "\0\0\0\0sqMatrixOldC sqMatrixOldC::inverseF( tinS& tinP )" ,
0x00000fd5 , "\0\0\0\0vectorOldC sqMatrixOldC::operator *( const vectorOldC& vP ) const" ,
0x00000fd6 , "\0\0\0\0vectorOldC::~vectorOldC( voidT )" ,
0x00000fd7 , "\0\0\0\0vectorOldC::vectorOldC( const vectorOldC& vP )" ,
0x00000fd8 , "\0\0\0\0vectorOldC::vectorOldC( tinS& tinP , etherC& etherP , const countT cSizeP )" ,
0x00000fd9 , "\0\0\0\0vectorOldC::operator measureT( voidT ) const" ,
0x00000fda , "\0\0\0\0vectorOldC& vectorOldC::operator =( const vectorOldC& vP )" ,
0x00000fdb , "\0\0\0\0measureT& vectorOldC::operator ()( const countT idP ) const" ,
0x00000fdc , "\0\0\0\0voidT vectorOldC::sayF( tinS& tinP )" ,
0x00000fdd , "\0\0\0\0measureT vectorOldC::operator *( const vectorOldC& vP ) const" ,
0x00000fde , "\0\0\0\0tableC::~tableC( voidT )" ,
0x00000fdf , "\0\0\0\0tableC::tableC( tableC& tableP )" ,
0x00000fe0 , "\0\0\0\0tableC& tableC::operator = ( tableC& tableP )" ,
0x00000fe1 , "\0\0\0\0tableC::tableC( tinS& tinP , etherC& etherP , const strokeS* const psttP )" ,
0x00000fe2 , "\0\0\0\0voidT tableC::grabF( tinS& tinP , const countT idLineP , const countT idiFileP , const byteT* const pbBitsP )" ,
0x00000fe3 , "\0\0\0\0voidT tableC::ungrabF( tinS& tinP )" ,
0x00000fe4 , "\0\0\0\0voidT tableC::newColF( tinS& tinP , const strokeS* const psttNameP )" ,
0x00000fe5 , "\0\0\0\0voidT tableC::newEventF( tinS& tinP )" ,
0x00000fe6 , "\0\0\0\0voidT tableC::newObjectF( tinS& tinP , const countT cP )" ,
0x00000fe7 , "\0\0\0\0voidT tableC::newObjectF( tinS& tinP , const strokeS* const psttP )" ,
0x00000fe8 , "\0\0\0\0voidT tableC::newObjectF( tinS& tinP , stackC& stP )" ,
0x00000fe9 , "\0\0\0\0voidT tableC::newObjectF( tinS& tinP , const count2S& c2P , const flagsT flagsP )" ,
0x00000fea , "\0\0\0\0tableC tableC::operator * ( tableC& tableP )" ,
0x00000feb , "\0\0\0\0tableC tableC::operator & ( tableC& tableP )" ,
0x00000fec , "\0\0\0\0tableC tableC::operator << ( tableC& tableP )" ,
0x00000fed , "\0\0\0\0tableC tableC::calcF( stackC& stStacksToDeleteP , tableC& tableP )" ,
0x00000fee , "\0\0\0\0tableC tableC::compileF( stackC& stStacksToDeleteP , tableC& tableP )" ,
0x00000fef , "\0\0\0\0count2S& tableC::operator () ( const countT idrP , const countT idcP )" ,
0x00000ff0 , "\0\0\0\0countT& tableC::_CT1_04F( const countT idrP , const countT idcP )" ,
0x00000ff1 , "\0\0\0\0strokeS*& tableC::_CT1_07F( const countT idrP , const countT idcP )" ,
0x00000ff2 , "\0\0\0\0stackC& tableC::_CT2_3F( const countT idrP , const countT idcP )" ,
0x00000ff3 , "\0\0\0\0countT tableC::cColsF( tinS& tinP )" ,
0x00000ff4 , "\0\0\0\0countT tableC::cRowsF( tinS& tinP )" ,
0x00000ff5 , "\0\0\0\0voidT tableC::writeF( tinS& tinP , strokeS*& psttP , const countT csttEstimateP , const flagsT flagsP )" ,
0x00000ff6 , "\0\0\0\0countT tableC::idColF( tinS& tinP , const strokeS* const psttP )" ,
0x00000ff7 , "\0\0\0\0strokeS*& tableC::nameF( tinS& tinP , const strokeS* const psttP , const countT idcP )" ,
0x00000ff8 , "\0\0\0\0strokeS*& tableC::nameF( tinS& tinP , const countT idcP )" ,
0x00000ff9 , "\0\0\0\0voidT tableC::copyCellsF( tinS& tinP , tableC& tableP )" ,
0x00000ffa , "\0\0\0\0countT tableC::idOperatorF( tinS& tinP , const strokeS* const psttP )" ,
0x00000ffb , "\0\0\0\0voidT tableC::purgeF( tinS& tinP )" ,
0x00000ffc , "\0\0\0\0tableC& tableC::operator !( voidT )" ,
0x00000ffd , "\0\0\0\0voidT tableC::newObjectPrivateF( tinS& tinP , const countT idTypeP , const countT cP , const flagsT flagsP )" ,
0x00000ffe , "\0\0\0\0voidT tableC::newObjectF( tinS& tinP , const count3S& c3P )" ,
0x00000fff , "\0\0\0\0voidT tableC::newObjectF( tinS& tinP , const count4S& c4P )" ,
0x00001000 , "\0\0\0\0voidT tableC::newObjectF( tinS& tinP , const count5S& c5P )" ,
0x00001001 , "\0\0\0\0voidT tableC::newObjectF( tinS& tinP , const count6S& c6P )" ,
0x00001002 , "\0\0\0\0voidT tableC::newObjectF( tinS& tinP , const count7S& c7P )" ,
0x00001003 , "\0\0\0\0voidT tableC::newObjectF( tinS& tinP , const count8S& c8P )" ,
0x00001004 , "\0\0\0\0voidT tableC::newObjectF( tinS& tinP , const measureT mP )" ,
0x00001005 , "\0\0\0\0voidT tableC::newObjectF( tinS& tinP , const tableC& tblP )" ,
0x00001006 , "\0\0\0\0measureT& tableC::_CT1_06F( const countT idrP , const countT idcP )" ,
0x00001007 , "\0\0\0\0tableC& tableC::_CT1_01F( const countT idrP , const countT idcP )" ,
0x00001008 , "\0\0\0\0count2S& tableC::_CT1_08F( const countT idrP , const countT idcP )" ,
0x00001009 , "\0\0\0\0count3S& tableC::_CT1_09F( const countT idrP , const countT idcP )" ,
0x0000100a , "\0\0\0\0count4S& tableC::_CT1_0aF( const countT idrP , const countT idcP )" ,
0x0000100b , "\0\0\0\0count5S& tableC::_CT1_0bF( const countT idrP , const countT idcP )" ,
0x0000100c , "\0\0\0\0count6S& tableC::_CT1_0cF( const countT idrP , const countT idcP )" ,
0x0000100d , "\0\0\0\0count7S& tableC::_CT1_0dF( const countT idrP , const countT idcP )" ,
0x0000100e , "\0\0\0\0count8S& tableC::_CT1_0eF( const countT idrP , const countT idcP )" ,
0x0000100f , "\0\0\0\0voidT tableC::writeF( tinS& tinP , const handleC& handleP )" ,
0x00001010 , "\0\0\0\0voidT tableC::writeF( tinS& tinP , const strokeS* const psttP )" ,
0x00001011 , "\0\0\0\0voidT tableC::readF( tinS& tinP , stackC& stStringsOfBytesToDeleteP , stackC& stTablesToDeleteP , stackC& stStacksToDeleteP , const byteT*& pbcP , const byteT* const pbeP )" ,
0x00001012 , "\0\0\0\0countT tableC::readF( tinS& tinP , stackC& stStringsOfBytesToDeleteP , stackC& stTablesToDeleteP , stackC& stStacksToDeleteP , const strokeS* const psttP , const countT cTriesP )" ,
0x00001013 , "\0\0\0\0voidT tableC::newObjectF( tinS& tinP , const sCountT scP )" ,
0x00001014 , "\0\0\0\0sCountT& tableC::_CT1_05F( const countT idrP , const countT idcP )" ,
0x00001015 , "\0\0\0\0nicNameC& tableC::_CT1_0fF( const countT idrP , const countT idcP )" ,
0x00001016 , "\0\0\0\0voidT tableC::newObjectF( tinS& tinP , const nicNameC& nicNameP )" ,
0x00001017 , "\0\0\0\0busC::~busC( voidT )" ,
0x00001018 , "\0\0\0\0busC::busC( tinS& tinP , etherC& etherP , signC& sgn_cSubscribersP , signC& sgn_pbvP , const countT idBusP )" ,
0x00001019 , "\0\0\0\0countT busC::cSubscribersF( tinS& tinP )" ,
0x0000101a , "\0\0\0\0voidT busC::subscribeIfF( tinS& tinP )" ,
0x0000101b , "\0\0\0\0busC::operator countT( voidT )" ,
0x0000101c , "\0\0\0\0busC::operator byteT*( voidT )" ,
0x0000101d , "\0\0\0\0voidT busC::writeF( tinS& tinP , const byteT* const pbP , const countT cbP )" ,
0x0000101e , "\0\0\0\0carC::~carC( voidT )" ,
0x0000101f , "\0\0\0\0carC::carC( tinS& tinP , etherC& etherP , const countT idcHirerP )" ,
0x00001020 , "\0\0\0\0carC::carC( tinS& tinP , etherC& etherP , const byteT* const pbSoulP )" ,
0x00001021 , "\0\0\0\0countT carC::soulF( tinS& tinP , byteT*& pbP , const boolT bResetP )" ,
0x00001022 , "\0\0\0\0carC& carC::operator +=( carC& carP )" ,
0x00001023 , "\0\0\0\0voidT carC::strF( tinS& tinP , strokeS*& psttP )" ,
0x00001024 , "\0\0\0\0voidT carC::resetF( tinS& tinP )" ,
0x00001025 , "\0\0\0\0pricerC::~pricerC( voidT )" ,
0x00001026 , "\0\0\0\0pricerC::pricerC( tinS& tinP , etherC& etherP )" ,
0x00001027 , "\0\0\0\0measureT pricerC::priceF( tinS& tinP , const countT* const pcPartP , const countT qtyP )" ,
0x00001028 , "\0\0\0\0voidT pricerC::shareF( tinS& tinP , stackC& stShareP , const countT* const pcPartP )" ,
0x00001029 , "\0\0\0\0riverC::~riverC( voidT )" ,
0x0000102a , "\0\0\0\0riverC::riverC( tinS& tinP , etherC& etherP , const nicNameC nicNameP , const countT idPortP )" ,
0x0000102b , "\0\0\0\0voidT riverC::writeMsgF( tinS& tinP , const byteT* const pbP , const countT cbP )" ,
0x0000102c , "\0\0\0\0countTC::countTC( const countT cP )" ,
0x0000102d , "\0\0\0\0countTC::operator countT&( voidT )" ,
0x0000102e , "\0\0\0\0countTC::operator byteT*&( voidT )" ,
0x0000102f , "\0\0\0\0mainRefsS::mainRefsS( tinS& tinP , etherC& etherP , etherC*& pEtThreadP )" ,
0x00001030 , "\0\0\0\0windowOldC::~windowOldC( voidT )" ,
0x00001031 , "\0\0\0\0windowOldC::windowOldC( tinS& tinP , etherC& etherP , const countT cPapersP , const countT cTriesP , const boolT bNotVisibleP , const sCountT idColP , const sCountT idRowP , const countT cColP , const countT cRowP , const countT cColClientP , const countT cRowClientP , const boolT bRootP , paperToBackCBFT pPaperToBackCBFP , countT cPaperToBackArgP )" ,
0x00001032 , "\0\0\0\0windowOldC::operator const handleC&( voidT ) const" ,
0x00001033 , "\0\0\0\0windowOldC::windowOldC( tinS& tinP , etherC& etherP , const countT cPapersP , const windowOldC& windowP , const countT cTriesP , const boolT bNotVisibleP , const sCountT idColP , const sCountT idRowP , const countT cColP , const countT cRowP , const countT cColClientP , const countT cRowClientP , const boolT bRootP , paperToBackCBFT pPaperToBackCBFP , countT cPaperToBackArgP )" ,
0x00001034 , "\0\0\0\0voidT windowOldC::ctF( tinS& tinP , const windowOldC* const pWindowP , const sCountT idColP , const sCountT idRowP , const countT cColP , const countT cRowP , const countT cColClientP , const countT cRowClientP , const boolT bRootP , const boolT bNotVisibleP , const countT cTriesP , paperToBackCBFT pPaperToBackCBFP , countT cPaperToBackArgP )" ,
0x00001035 , "\0\0\0\0voidT windowOldC::backOldCtPaperF( tinS& tinP , pulpOldC& pulpP , paperOldC& paperP )" ,
0x00001036 , "\0\0\0\0countT windowOldC::backIdTypeF( voidT ) const" ,
0x00001037 , "\0\0\0\0voidT windowOldC::backPositionF( tinS& tinP , pulpOldC& pulpP , const measureT mIdColP , const measureT mIdRowP )" ,
0x00001038 , "\0\0\0\0voidT windowOldC::backFlushF( tinS& tinP , pulpOldC& pulpP , const measureT mIdColP , const measureT mIdRowP , const measureT mColsP , const measureT mRowsP )" ,
0x00001039 , "\0\0\0\0voidT windowOldC::backResetF( tinS& tinP , pulpOldC& pulpP )" ,
0x0000103a , "\0\0\0\0voidT windowOldC::backDtPaperF( tinS& tinP , pulpOldC& pulpP )" ,
0x0000103b , "\0\0\0\0voidT windowOldC::backSadamHighlightF( tinS& tinP , pulpOldC& pulpP , paperOldC& paperP , const countT rgbP , measureT mColFromP , measureT mRowFromP , measureT mColToP , measureT mRowToP , const measureT mShrinkP , const countT cSidesP )" ,
0x0000103c , "\0\0\0\0boolT windowOldC::backSuppressRefreshF( tinS& tinP , const paperOldC& paperP )" ,
0x0000103d , "\0\0\0\0voidT windowOldC::backFlushAsyncF( tinS& tinP , const measureT mIdColMinP , const measureT mIdRowMinP , const measureT mIdColMaxP , const measureT mIdRowMaxP )" ,
0x0000103e , "\0\0\0\0voidT windowOldC::backNotifyBeforeSadamF( tinS& tinP , pulpOldC& pulpP , const strokeS& sttP , const flagsT flagsP )" ,
0x0000103f , "\0\0\0\0boolT windowOldC::backAbsentF( voidT ) const" ,
0x00001040 , "\0\0\0\0voidT windowOldC::keyDownF( tinS& tinP , const countT idCmdP , const countT p1P , const countT p2P )" ,
0x00001041 , "\0\0\0\0voidT windowOldC::keyUpF( tinS& tinP , const countT p2P )" ,
0x00001042 , "\0\0\0\0voidT windowOldC::freshColRowInDadF( tinS& tinP , const measureT mIdColP , const measureT mIdRowP )" ,
0x00001043 , "\0\0\0\0voidT windowOldC::pushPaperDrawOverrideF( tinS& tinP , pulpOldC& pulpP , const countT idPaperP , const flagsT flagsP )" ,
0x00001044 , "\0\0\0\0voidT windowOldC::popPaperDrawOverrideF( tinS& tinP , pulpOldC& pulpP , const flagsT flagsP )" ,
0x00001045 , "\0\0\0\0voidT windowOldC::backDrawOnScratchDeviceF( tinS& tinP , pulpOldC& pulpP )" ,
0x00001046 , "\0\0\0\0voidT windowOldC::backScratchBitmapPushF( tinS& tinP , pulpOldC& pulpP , const countT cColsP , const countT cRowsP )" ,
0x00001047 , "\0\0\0\0voidT windowOldC::backScratchBitmapPopF( tinS& tinP , pulpOldC& pulpP , const boolT bAllP )" ,
0x00001048 , "\0\0\0\0voidT windowOldC::backDrawOnNormalDeviceF( tinS& tinP , pulpOldC& pulpP )" ,
0x00001049 , "\0\0\0\0voidT windowOldC::backDrawOnNullDeviceF( tinS& tinP , pulpOldC& pulpP )" ,
0x0000104a , "\0\0\0\0voidT windowOldC::backScratchBitmapMonochromePushF( tinS& tinP , pulpOldC& pulpP , const countT cColsP , const countT cRowsP )" ,
0x0000104b , "\0\0\0\0voidT windowOldC::renderF( tinS& tinP , pulpOldC& pulpP , const strokeS* const psttP , const handleC* const phCloneP )" ,
0x0000104c , "\0\0\0\0voidT windowOldC::pushF( tinS& tinP , staqC& staqP , const strokeS& sttP , const countT caseP , winPulpOldC& winPulpP )" ,
0x0000104d , "\0\0\0\0voidT windowOldC::popF( tinS& tinP , staqC& staqP , const countT caseP , const countT cbP , winPulpOldC& winPulpP )" ,
0x0000104e , "\0\0\0\0voidT windowOldC::duplicateF( tinS& tinP , staqC& staqP , const strokeS& sttP , const countT caseP , winPulpOldC& winPulpP )" ,
0x0000104f , "\0\0\0\0voidT windowOldC::moveOrLineTransformedF( tinS& tinP , winPulpOldC& winPulpP )" ,
0x00001050 , "\0\0\0\0voidT windowOldC::transformHotAngleF( tinS& tinP , measureT& colP , measureT& rowP , winPulpOldC& winPulpP )" ,
0x00001051 , "\0\0\0\0etherInitC::~etherInitC( voidT )" ,
0x00001052 , "\0\0\0\0etherInitC::etherInitC( tinS& tinP , countT c_pP )" ,
0x00001053 , "\0\0\0\0nicNameC::nicNameC( const countT c1P , const countT c2P , const countT c3P , const countT c4P )" ,
0x00001054 , "\0\0\0\0nicNameC& nicNameC::operator =( const countT c1P )" ,
0x00001055 , "\0\0\0\0boolT nicNameC::operator ==( const nicNameC& nicNameP ) const" ,
0x00001056 , "\0\0\0\0boolT nicNameC::operator ==( const countT nicNameP ) const" ,
0x00001057 , "\0\0\0\0nicNameC::operator boolT( voidT ) const" ,
0x00001058 , "\0\0\0\0boolT nicNameC::operator <( const nicNameC& nicNameP ) const" ,
0x00001059 , "\0\0\0\0boolT nicNameC::operator <=( const nicNameC& nicNameP ) const" ,
0x0000105a , "\0\0\0\0boolT nicNameC::operator >( const nicNameC& nicNameP ) const" ,
0x0000105b , "\0\0\0\0boolT nicNameC::operator >=( const nicNameC& nicNameP ) const" ,
0x0000105c , "\0\0\0\0nicNameC& nicNameC::operator ++( voidT )" ,
0x0000105d , "\0\0\0\0nicNameC::operator const countT*( voidT ) const" ,
0x0000105e , "\0\0\0\0nicNameC& nicNameC::operator =( nicNamesC& nicNamesP )" ,
0x0000105f , "\0\0\0\0boolT nicNameC::operator !=( const nicNameC& nicNameP ) const" ,
0x00001060 , "\0\0\0\0boolT nicNameC::operator !=( const countT nicNameP ) const" ,
0x00001061 , "\0\0\0\0voidT nicNameC::operator <<( soulC& slP )" ,
0x00001062 , "\0\0\0\0voidT nicNameC::operator >>( soulC& slP ) const" ,
0x00001063 , "\0\0\0\0boolT nicNameC::operator ~( voidT ) const" ,
0x00001064 , "\0\0\0\0boolT nicNameC::operator !( voidT ) const" ,
0x00001065 , "\0\0\0\0countT nicNameC::cFieldsF( tinS& tinP )" ,
0x00001066 , "\0\0\0\0nicNameC& nicNameC::fieldF( tinS& tinP , soulC& soulP , const countT idFieldStartP )" ,
0x00001067 , "\0\0\0\0voidT nicNameC::adjustF( tinS& tinP )" ,
0x00001068 , "\0\0\0\0recDirC::~recDirC( voidT )" ,
0x00001069 , "\0\0\0\0recDirC::recDirC( tinS& tinP , etherC& etherP , const countT idPortP , const nicNameC nicNameP , const flagsT flagsP , const strokeS* const psttNameP , const byteT* const pbBlobP , const countT cbBlobP )" ,
0x0000106a , "\0\0\0\0recDirC::recDirC( tinS& tinP , etherC& etherP , const byteT* const pbSoulP )" ,
0x0000106b , "\0\0\0\0voidT recDirC::soulF( tinS& tinP , byteT*& pbP )" ,
0x0000106c , "\0\0\0\0boolT recDirC::operator ==( const recDirC& drP ) const" ,
0x0000106d , "\0\0\0\0boolT recDirC::operator !=( const recDirC& drP ) const" ,
0x0000106e , "\0\0\0\0voidT recDirC::strokeF( tinS& tinP )" ,
0x0000106f , "\0\0\0\0sCountC recDirC::operator -( const recDirC& drP ) const" ,
0x00001070 , "\0\0\0\0recDirC::operator byteT*( voidT )" ,
0x00001071 , "\0\0\0\0voidT recDirC::ctF( tinS& tinP , const byteT* const pbSoulP )" ,
0x00001072 , "\0\0\0\0recDirC::recDirC( tinS& tinP , etherC& etherP , socketC& sockP )" ,
0x00001073 , "\0\0\0\0imageExeDllC::~imageExeDllC( voidT )" ,
0x00001074 , "\0\0\0\0imageExeDllC::imageExeDllC( tinS& tinP , thirdC& thirdP )" ,
0x00001075 , "\0\0\0\0masterOldC::~masterOldC( voidT )" ,
0x00001076 , "\0\0\0\0masterOldC::masterOldC( tinS& tinP , etherC& etherP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const countT cNameInspectP , const boolT bIgnoreSoulFileP )" ,
0x00001077 , "\0\0\0\0voidT masterOldC::ctF( tinS& tinP , const byteT* const pbSoulP , const countT cNameInspectP )" ,
0x00001078 , "\0\0\0\0voidT masterOldC::ctInspectF( tinS& tinP , const countT cNameInspectP )" ,
0x00001079 , "\0\0\0\0voidT masterOldC::soulF( tinS& tinP , byteT*& pbSoulP )" ,
0x0000107a , "\0\0\0\0voidT masterOldC::delNameIfF( tinS& tinP , const countT cNameP )" ,
0x0000107b , "\0\0\0\0voidT masterOldC::newNameF( tinS& tinP , const countT cNameP , stackC& stUsesP , const flagsT flagsP , const countT idCopyP )" ,
0x0000107c , "\0\0\0\0voidT masterOldC::newNameF( tinS& tinP , const countT cNameP , const countT* const pczUsesP , const flagsT flagsP , const countT idCopyP )" ,
0x0000107d , "\0\0\0\0voidT masterOldC::obsoleteF( tinS& tinP , const countT cNameP )" ,
0x0000107e , "\0\0\0\0voidT masterOldC::renumberObsoleteNamesF( tinS& tinP )" ,
0x0000107f , "\0\0\0\0voidT masterOldC::resetFlagObsoleteF( tinS& tinP )" ,
0x00001080 , "\0\0\0\0countT masterOldC::cNameF( tinS& tinP , const countT idCopyP )" ,
0x00001081 , "\0\0\0\0voidT masterOldC::strokeF( tinS& tinP )" ,
0x00001082 , "\0\0\0\0countT masterOldC::idCopyF( tinS& tinP , const countT cNameP )" ,
0x00001083 , "\0\0\0\0voidT masterOldC::idCopyF( tinS& tinP , switchC& swIdCopyP , countT& cLever_swIdCopyP , batonC& b_cLever_swIdCopyP )" ,
0x00001084 , "\0\0\0\0voidT masterOldC::listObsoleteNamesF( tinS& tinP , stackC& stP )" ,
0x00001085 , "\0\0\0\0ranUniC::~ranUniC( voidT )" ,
0x00001086 , "\0\0\0\0ranUniC::ranUniC( tinS& tinP , const measure04T mRangeP , const countT cSeedP )" ,
0x00001087 , "\0\0\0\0ranUniC::operator measure04T( voidT )" ,
0x00001088 , "\0\0\0\0voidT ranUniC::drawPrivateF( voidT )" ,
0x00001089 , "\0\0\0\0pczC::~pczC( voidT )" ,
0x0000108a , "\0\0\0\0pczC::pczC( countT cP , ... )" ,
0x0000108b , "\0\0\0\0pczC::operator countT*( voidT )" ,
0x0000108c , "\0\0\0\0soulC::~soulC( voidT )" ,
0x0000108d , "\0\0\0\0soulC::soulC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const flagsT flagsP , const osTextT* const postNameJotP , const countT cbJotDataBookP , const osTextT* const postNameP )" ,
0x0000108e , "\0\0\0\0soulC::soulC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const flagsT flagsP , const countT cP , const osTextT* const postNameJotP , const countT cbJotDataBookP , const osTextT* const postNameP )" ,
0x0000108f , "\0\0\0\0soulC::operator const byteT*( voidT )" ,
0x00001090 , "\0\0\0\0soulC& soulC::operator <<( const countT vP )" ,
0x00001091 , "\0\0\0\0soulC::soulC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const byteT* const pbP , const flagsT flagsP , const countT cbP , const flagsT flagsItemP , const flagsT flagsModeP , const osTextT* const postNameJotP , const countT cbJotDataBookP , const osTextT* const postNameP )" ,
0x00001092 , "\0\0\0\0baseSoilXxxxC& soulC::operator <<( soulC& slP )" ,
0x00001093 , "\0\0\0\0soulC::soulC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const flagsT flagsP , soulC& soulP , const osTextT* const postNameJotP , const countT cbJotDataBookP , const osTextT* const postNameP )" ,
0x00001094 , "\0\0\0\0soulC& soulC::shiftLeftF( tinS& tinP , const countT idTypeShiftP , const byteT* pbP , countT cbP , const flagsT flagsItemP , const flagsT flagsModeP , const countT* const pcIncludeP , const countT* const pcExcludeP )" ,
0x00001095 , "\0\0\0\0soulC& soulC::operator >>( countT& vP )" ,
0x00001096 , "\0\0\0\0baseSoilXxxxC& soulC::operator >>( soulC& slP )" ,
0x00001097 , "\0\0\0\0soulC& soulC::shiftRightF( tinS& tinP , byteT*& pbP , countT& cbP , const countT idTypeVerifyP )" ,
0x00001098 , "\0\0\0\0sCountT soulC::operator -( soulC& soulP )" ,
0x00001099 , "\0\0\0\0sCountT soulC::subtractF( tinS& tinP , soulC& soulP , const countT* pczIdFieldsP )" ,
0x0000109a , "\0\0\0\0sCountT soulC::subtractF( tinS& tinP , soulC& soulP , const countT idFieldP )" ,
0x0000109b , "\0\0\0\0soulC& soulC::operator <<( const byteT* const pbP )" ,
0x0000109c , "\0\0\0\0soulC& soulC::operator >>( byteT*& pbP )" ,
0x0000109d , "\0\0\0\0soulC::operator countT( voidT )" ,
0x0000109e , "\0\0\0\0countT soulC::cbF( tinS& tinP )" ,
0x0000109f , "\0\0\0\0voidT soulC::removeAllF( tinS& tinP )" ,
0x000010a0 , "\0\0\0\0byteT* soulC::pbFieldF( tinS& tinP , countT& idTypeP , flagsT& flagsP , countT& cbP , countT idFieldP )" ,
0x000010a1 , "\0\0\0\0soulC& soulC::operator <<( const countT* const pcP )" ,
0x000010a2 , "\0\0\0\0soulC& soulC::shiftLeftF( tinS& tinP , const countT idTypeShiftP , const countT* const pcP , const countT ccP , const boolT bOrderSignificanceIncreasingP )" ,
0x000010a3 , "\0\0\0\0soulC& soulC::shiftRightF( tinS& tinP , countT*& pcP , countT& ccP )" ,
0x000010a4 , "\0\0\0\0soulC& soulC::operator >>( countT*& pcP )" ,
0x000010a5 , "\0\0\0\0soulC::soulC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const flagsT flagsP , const countT* const pcP , const countT ccP , const boolT bOrderSignificanceIncreasingP , const osTextT* const postNameJotP , const countT cbJotDataBookP , const osTextT* const postNameP )" ,
0x000010a6 , "\0\0\0\0countT soulC::signatureF( tinS& tinP )" ,
0x000010a7 , "\0\0\0\0soulC::soulC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const flagsT flagsP , const strokeS* const psttP , const osTextT* const postNameJotP , const countT cbJotDataBookP , const osTextT* const postNameP )" ,
0x000010a8 , "\0\0\0\0soulC& soulC::operator <<( const strokeS* const psttP )" ,
0x000010a9 , "\0\0\0\0soulC& soulC::operator >>( strokeS*& psttP )" ,
0x000010aa , "\0\0\0\0countT& soulC::cFieldF( tinS& tinP , const countT idFieldP )" ,
0x000010ab , "\0\0\0\0soulC::soulC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const flagsT flagsP , const measureT mP , const osTextT* const postNameJotP , const countT cbJotDataBookP , const osTextT* const postNameP )" ,
0x000010ac , "\0\0\0\0soulC& soulC::operator <<( const measureT vP )" ,
0x000010ad , "\0\0\0\0soulC& soulC::operator >>( measureT& vP )" ,
0x000010ae , "\0\0\0\0soulC::soulC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const flagsT flagsP , const measure04T mP , const osTextT* const postNameJotP , const countT cbJotDataBookP , const osTextT* const postNameP )" ,
0x000010af , "\0\0\0\0soulC& soulC::operator <<( const measure04T vP )" ,
0x000010b0 , "\0\0\0\0soulC& soulC::operator >>( measure04T& vP )" ,
0x000010b1 , "\0\0\0\0boolT soulC::operator ==( soulC& soulP )" ,
0x000010b2 , "\0\0\0\0soulC& soulC::operator =( soulC& vP )" ,
0x000010b3 , "\0\0\0\0soulC::soulC( tinS& tinP , soulC& vP , const flagsT flagsP , const osTextT* const postNameJotP , const countT cbJotDataBookP , const osTextT* const postNameP ) :" ,
0x000010b4 , "\0\0\0\0soulC& soulC::operator <<( const count2S& cP )" ,
0x000010b5 , "\0\0\0\0soulC& soulC::operator <<( const count3S& cP )" ,
0x000010b6 , "\0\0\0\0soulC& soulC::operator <<( const count4S& cP )" ,
0x000010b7 , "\0\0\0\0soulC& soulC::operator <<( const count5S& cP )" ,
0x000010b8 , "\0\0\0\0soulC& soulC::operator <<( const count6S& cP )" ,
0x000010b9 , "\0\0\0\0soulC& soulC::operator <<( const count7S& cP )" ,
0x000010ba , "\0\0\0\0soulC& soulC::operator <<( const count8S& cP )" ,
0x000010bb , "\0\0\0\0soulC& soulC::operator <<( const count9S& cP )" ,
0x000010bc , "\0\0\0\0soulC& soulC::operator >>( count2S& vP )" ,
0x000010bd , "\0\0\0\0soulC& soulC::operator >>( count3S& vP )" ,
0x000010be , "\0\0\0\0soulC& soulC::operator >>( count4S& vP )" ,
0x000010bf , "\0\0\0\0soulC& soulC::operator >>( count5S& vP )" ,
0x000010c0 , "\0\0\0\0soulC& soulC::operator >>( count6S& vP )" ,
0x000010c1 , "\0\0\0\0soulC& soulC::operator >>( count7S& vP )" ,
0x000010c2 , "\0\0\0\0soulC& soulC::operator >>( count8S& vP )" ,
0x000010c3 , "\0\0\0\0soulC& soulC::operator >>( count9S& vP )" ,
0x000010c4 , "\0\0\0\0soulC& soulC::operator <<( baseSoilXxxxC* vP )" ,
0x000010c5 , "\0\0\0\0soulC& soulC::operator >>( baseSoilXxxxC*& vP )" ,
0x000010c6 , "\0\0\0\0soulC& soulC::playF( tinS& tinP , soulC& soulP )" ,
0x000010c7 , "\0\0\0\0voidT soulC::operator ()( tinS& tinP , soulC& slP )" ,
0x000010c8 , "\0\0\0\0soulC& soulC::operator <<( const baseSoilXxxxC& vP )" ,
0x000010c9 , "\0\0\0\0soulC& soulC::operator >>( baseSoilXxxxC& vP )" ,
0x000010ca , "\0\0\0\0soulC& soulC::operator <<( const byteT vP )" ,
0x000010cb , "\0\0\0\0soulC& soulC::operator <<( const strokeS vP )" ,
0x000010cc , "\0\0\0\0soulC& soulC::operator >>( byteT& vP )" ,
0x000010cd , "\0\0\0\0soulC& soulC::operator >>( strokeS& vP )" ,
0x000010ce , "\0\0\0\0countT soulC::bKidEmptyF( tinS& tinP , const countT idFieldP )" ,
0x000010cf , "\0\0\0\0byteT* soulC::pbFieldIF( tinS& tinP , countT& idTypeP , flagsT& flagsP , countT& cbP , countT idFieldP , const byteT* const pbsP )" ,
0x000010d0 , "\0\0\0\0voidT soulC::playPrivateF( tinS& tinP , byteT* pbP )" ,
0x000010d1 , "\0\0\0\0voidT soulC::traceF( tinS& tinP , const flagsT flagsP , const strokeS* const psttP )" ,
0x000010d2 , "\0\0\0\0voidT soulC::ctF( tinS& tinP , const byteT* const pbBitsCtP , const osTextT* const postNameJotP , const osTextT* const postNameP )" ,
0x000010d3 , "\0\0\0\0const baseSoilXxxxC& soulC::operator >>( soulC& slP ) const" ,
0x000010d4 , "\0\0\0\0soulC& soulC::operator >>( soulC*& vP )" ,
0x000010d5 , "\0\0\0\0soulC& soulC::operator >>( grabC*& vP )" ,
0x000010d6 , "\0\0\0\0soulC& soulC::operator <<( soulC* vP )" ,
0x000010d7 , "\0\0\0\0soulC& soulC::operator <<( grabC* vP )" ,
0x000010d8 , "\0\0\0\0soulC& soulC::operator >>( handleC*& vP )" ,
0x000010d9 , "\0\0\0\0soulC& soulC::operator >>( pbRefC*& vP )" ,
0x000010da , "\0\0\0\0soulC& soulC::operator <<( handleC* vP )" ,
0x000010db , "\0\0\0\0soulC& soulC::operator <<( pbRefC* vP )" ,
0x000010dc , "\0\0\0\0voidT soulC::pbSoulF( tinS& tinP , const byteT*& pbP , countT& cbP , handleC* pHandleP )" ,
0x000010dd , "\0\0\0\0soulC& soulC::operator >>( nicNameC& vP )" ,
0x000010de , "\0\0\0\0soulC& soulC::operator <<( const nicNameC& cP )" ,
0x000010df , "\0\0\0\0soulC::soulC( tinS& tinP , etherC& etherP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const flagsT flagsP , const osTextT* const postNameJotP , const countT cbJotDataBookP , const osTextT* const postNameP )" ,
0x000010e0 , "\0\0\0\0count9S::count9S( const countT c1P , const countT c2P , const countT c3P , const countT c4P , const countT c5P , const countT c6P , const countT c7P , const countT c8P , const countT c9P )" ,
0x000010e1 , "\0\0\0\0count9S count9S::operator |( count9S& cP )" ,
0x000010e2 , "\0\0\0\0netC::~netC( voidT )" ,
0x000010e3 , "\0\0\0\0netC::netC( tinS& tinP , thirdC& thirdP , const countT idPortP )" ,
0x000010e4 , "\0\0\0\0voidT netC::writeF( tinS& tinP , const nicNameC& nicNameP , soulC& soulP , const countT idPortP )" ,
0x000010e5 , "\0\0\0\0voidT netC::readF( tinS& tinP , stackC& stP )" ,
0x000010e6 , "\0\0\0\0countT netC::writeF( tinS& tinP , soulC& soulP , const countT idPortP )" ,
0x000010e7 , "\0\0\0\0voidT netC::parseF( tinS& tinP , soulC& soulSmallP , nicNameC& nicNameP , countT& idDiskP , countT& idGramP , soulC& soulBigP )" ,
0x000010e8 , "\0\0\0\0thirdInitC::~thirdInitC( voidT )" ,
0x000010e9 , "\0\0\0\0thirdInitC::thirdInitC( tinS& tinP , countT c_pP )" ,
0x000010ea , "\0\0\0\0arrayC::~arrayC( voidT )" ,
0x000010eb , "\0\0\0\0arrayC::arrayC( tinS& tinP , const countT cbeP , const countT ceP )" ,
0x000010ec , "\0\0\0\0byteT& arrayC::operator []( const countT offP )" ,
0x000010ed , "\0\0\0\0voidT arrayC::trimF( tinS& tinP , const countT ceP )" ,
0x000010ee , "\0\0\0\0voidT arrayC::snapF( tinS& tinP , soulC& slP )" ,
0x000010ef , "\0\0\0\0voidT arrayC::restoreF( tinS& tinP , soulC& slP )" ,
0x000010f0 , "\0\0\0\0arrayC& arrayC::operator =( const arrayC& aP )" ,
0x000010f1 , "\0\0\0\0countT arrayC::operator ()( const byteT* const pbTestP ) const" ,
0x000010f2 , "\0\0\0\0countT arrayC::operator ()( const countT cTestP ) const" ,
0x000010f3 , "\0\0\0\0postOldC::postOldC( tinS& tinP , thirdC& third , const osTextT* const postP )" ,
0x000010f4 , "\0\0\0\0postOldC::operator osTextT*( voidT )" ,
0x000010f5 , "\0\0\0\0postOldC::postOldC( tinS& tinP , etherC& ether , const strokeS* const psttP , const flagsT flagsP , const countT cbPrefixExtraP )" ,
0x000010f6 , "\0\0\0\0psttOldC::psttOldC( tinS& tinP , etherC& ether , const strokeS* const psttP )" ,
0x000010f7 , "\0\0\0\0psttOldC::operator strokeS*( voidT )" ,
0x000010f8 , "\0\0\0\0napkinC::~napkinC( voidT )" ,
0x000010f9 , "\0\0\0\0napkinC::napkinC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const osTextT* const postP , const handleC* const phFileP , countT cbP , const countT idHowP , const flagsT flagsP , countT cTriesP , countT idMemorySpaceP )" ,
0x000010fa , "\0\0\0\0voidT napkinC::formattingIsDoneF( tinS& tinP )" ,
0x000010fb , "\0\0\0\0boolT napkinC::dieF( tinS& tinP )" ,
0x000010fc , "\0\0\0\0voidT napkinC::flushF( tinS& tinP )" ,
0x000010fd , "\0\0\0\0napkinC::operator byteT*( voidT )" ,
0x000010fe , "\0\0\0\0processGlobalBeginC::~processGlobalBeginC( voidT )" ,
0x000010ff , "\0\0\0\0processGlobalBeginC::processGlobalBeginC( tinS& tinP )" ,
0x00001100 , "\0\0\0\0dnsResourceMiddleS::dnsResourceMiddleS( voidT ) :" ,
0x00001101 , "\0\0\0\0voidT dnsResourceMiddleS::logF( tinS& tinP )" ,
0x00001102 , "\0\0\0\0voidT dnsResourceMiddleS::swabF( voidT )" ,
0x00001103 , "\0\0\0\0dnsMsgHeaderS::dnsMsgHeaderS( tinS& tinP )" ,
0x00001104 , "\0\0\0\0voidT dnsMsgHeaderS::logF( tinS& tinP )" ,
0x00001105 , "\0\0\0\0voidT dnsMsgHeaderS::swabF( voidT )" ,
0x00001106 , "\0\0\0\0voidT dnsMsgHeaderS::nameF( tinS& tinP , etherC& etThread , stackC& st_psttP , const byteT*& pbP , const countT cbP )" ,
0x00001107 , "\0\0\0\0voidT dnsMsgHeaderS::nameF( tinS& tinP , etherC& etThread , strokeS*& psttP , const byteT*& pbP , const countT cbP )" ,
0x00001108 , "\0\0\0\0nicNamesC::nicNamesC( tinS& tinP , thirdC& thirdP )" ,
0x00001109 , "\0\0\0\0nicNamesC& nicNamesC::operator <<( nicNameC nicNameP )" ,
0x0000110a , "\0\0\0\0nicNamesC& nicNamesC::operator >>( nicNameC& nicNameP )" ,
0x0000110b , "\0\0\0\0nicNamesC::operator nicNameC( voidT )" ,
0x0000110c , "\0\0\0\0nicNamesC::operator countT( voidT )" ,
0x0000110d , "\0\0\0\0newsKnowS::newsKnowS( tinS& tinP )" ,
0x0000110e , "\0\0\0\0tinTallyS::tinTallyS( tinS& tinP )" ,
0x0000110f , "\0\0\0\0voidT tinTallyS::resetF( tinS& tinP )" ,
0x00001110 , "\0\0\0\0voidT tinTallyS::flushF( tinS& tinP , etherC& etThread )" ,
0x00001111 , "\0\0\0\0voidT tinTallyS::nowF( tinS& tinP , etherC& etThread )" ,
0x00001112 , "\0\0\0\0monitorReplyOldS::monitorReplyOldS( voidT ) :" ,
0x00001113 , "\0\0\0\0strokeModeS::strokeModeS( voidT )" ,
0x00001114 , "\0\0\0\0cryC::~cryC( voidT )" ,
0x00001115 , "\0\0\0\0cryC::cryC( const countT vvP ) :" ,
0x00001116 , "\0\0\0\0bufferC::~bufferC( voidT )" ,
0x00001117 , "\0\0\0\0bufferC::bufferC( tinS& tinP ) :" ,
0x00001118 , "\0\0\0\0boolT bufferC::operator <<( const osTextT* const postP )" ,
0x00001119 , "\0\0\0\0bufferC::operator byteT*( voidT )" ,
0x0000111a , "\0\0\0\0voidT bufferC::freezeF( tinS& tinP , boolT cRefusedP )" ,
0x0000111b , "\0\0\0\0boolT bufferC::pushF( tinS& tinP , const byteT* const pbP , const countT cbP )" ,
0x0000111c , "\0\0\0\0grabNotesS::grabNotesS( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP )" ,
0x0000111d , "\0\0\0\0countT grabNotesS::idNextF( tinS& tinP )" ,
0x0000111e , "\0\0\0\0voidT grabNotesS::formatF( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP )" ,
0x0000111f , "\0\0\0\0grabAnnotatedS::grabAnnotatedS( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , flagsT flagsP , const countT idGrabLayerP ) :" ,
0x00001120 , "\0\0\0\0voidT grabAnnotatedS::formatF( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , flagsT flagsP , const countT idGrabLayerP )" ,
0x00001121 , "\0\0\0\0upDnC::~upDnC( voidT )" ,
0x00001122 , "\0\0\0\0upDnC::upDnC( tinS& tinP , countT idLineUseP , countT idiFileUseP , const byteT* const pbBitsUseP , countT idFileUseP , etherC& etherUseP ) :" ,
0x00001123 , "\0\0\0\0voidT upDnC::dnF( tinS& tinP )" ,
0x00001124 , "\0\0\0\0voidT upDnC::upF( tinS& tinP , countT idLineUseP , countT idiFileUseP , const byteT* const pbBitsUseP )" ,
0x00001125 , "\0\0\0\0tellC::~tellC( voidT )" ,
0x00001126 , "\0\0\0\0tellC::tellC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const countT idTypeP , const byteT* const pbP , const countT cbP , byteT* const pbZombieP , const countT cbZombieP , const boolT bSynchP , const countT ebpP ) :" ,
0x00001127 , "\0\0\0\0tellC::operator byteT*( voidT ) const" ,
0x00001128 , "\0\0\0\0tellC::operator countT( voidT ) const" ,
0x00001129 , "\0\0\0\0countT tellC::idTypeF( tinS& tinP ) const" ,
0x0000112a , "\0\0\0\0sleepC::~sleepC( voidT )" ,
0x0000112b , "\0\0\0\0sleepC::sleepC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const boolT bOsCallP ) :" ,
0x0000112c , "\0\0\0\0voidT sleepC::operator ++( voidT )" ,
0x0000112d , "\0\0\0\0serverInfo1S::serverInfo1S( byteT** ppbdVaryingP , batonC* pBat_pbdVaryingP , boolT& bHandedOffP , signC& sgnIdPortReplacedP , voidT* const tmFP , countT& idPortP , const countT& bQuitP , countT& time1idleTimeoutReadP , countT& time1idleTimeoutWriteP ) :" ,
0x0000112e , "\0\0\0\0serverInfo2S::~serverInfo2S( voidT )" ,
0x0000112f , "\0\0\0\0serverInfo2S::serverInfo2S( const countT idPortHintP , const strokeS* const psttNameP , countT cSessionMaxP , const countT cArgP , countT time1graceP , const boolT bStateP , const countT cbdVaryingP , translateStateFT translateStateFP , const strokeS* const psttSuffixP , stateFT stateBeginFP , stateFT stateEndFP , sessionsC* const pSessionsP ) :" ,
0x00001130 , "\0\0\0\0monQueryReplyS::monQueryReplyS( tinS& tinP , countT idTypeP )" ,
0x00001131 , "\0\0\0\0voidT monQueryReplyS::formatF( tinS& tinP , countT idTypeP )" ,
0x00001132 , "\0\0\0\0handleC::~handleC( voidT )" ,
0x00001133 , "\0\0\0\0handleC::handleC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const countT idTypeP , const flagsT flagsP , const osTextT* const postNameP ) :" ,
0x00001134 , "\0\0\0\0voidT handleC::resetF( voidT )" ,
0x00001135 , "\0\0\0\0voidT handleC::closeIfF( voidT )" ,
0x00001136 , "\0\0\0\0boolT handleC::operator !( voidT ) const" ,
0x00001137 , "\0\0\0\0countT handleC::osF( const countT idTypeVerifyP ) const" ,
0x00001138 , "\0\0\0\0voidT handleC::osF( const countT idTypeVerifyP , const countT oshP , const countT osPidOwnerP , const countT cNoteP )" ,
0x00001139 , "\0\0\0\0boolT handleC::operator ==( const handleC& oshP ) const" ,
0x0000113a , "\0\0\0\0voidT handleC::operator =( const handleC& oshP )" ,
0x0000113b , "\0\0\0\0voidT handleC::operator <<( handleC& oshP )" ,
0x0000113c , "\0\0\0\0voidT handleC::cloneF( const handleC& oshP , const countT osPidOwnerToP , const handleC& hProcessToP , const handleC& hProcessFromP )" ,
0x0000113d , "\0\0\0\0boolT handleC::operator !=( const handleC& oshP ) const" ,
0x0000113e , "\0\0\0\0countT& handleC::cNoteF( voidT )" ,
0x0000113f , "\0\0\0\0voidT handleC::operator =( const countT cP )" ,
0x00001140 , "\0\0\0\0handleC::handleC( const handleC& oshP , const osTextT* const postNameP ) :" ,
0x00001141 , "\0\0\0\0boolT handleC::operator ~( voidT ) const" ,
0x00001142 , "\0\0\0\0voidT handleC::operator ()( tinS& tinP , soulC& slP )" ,
0x00001143 , "\0\0\0\0baseSoilXxxxC& handleC::operator <<( soulC& slP )" ,
0x00001144 , "\0\0\0\0baseSoilXxxxC& handleC::operator >>( soulC& slP )" ,
0x00001145 , "\0\0\0\0const baseSoilXxxxC& handleC::operator >>( soulC& slP ) const" ,
0x00001146 , "\0\0\0\0fileOpenS::~fileOpenS( voidT )" ,
0x00001147 , "\0\0\0\0fileOpenS::fileOpenS( tinS& tinP , thirdC& thirdP , const osTextT* const postNameP , const osTextT* const postNameTagP , const countT idAccessP , const countT idShareP , const flagsT flagsDetailsP , const countT idHowP , const flagsT flagsAttributeP , const countT cbP , handleC& hTagP ) :" ,
0x00001148 , "\0\0\0\0hoodC::hoodC( tinS& tinP , const osTextT* const postP , const countT cbDatumP , const countT cThugsP ) :" ,
0x00001149 , "\0\0\0\0hoodC::operator thugC&( voidT )" ,
0x0000114a , "\0\0\0\0thugC* hoodC::operator []( const countT oThugP )" ,
0x0000114b , "\0\0\0\0thugC::thugC( voidT ) :" ,
0x0000114c , "\0\0\0\0voidT thugC::grabF( voidT )" ,
0x0000114d , "\0\0\0\0voidT thugC::ungrabF( voidT )" ,
0x0000114e , "\0\0\0\0voidT thugC::grabDadF( thugC& thugRootP )" ,
0x0000114f , "\0\0\0\0voidT thugC::freeF( hoodC& hoodP , countT& idThugRootP , boolT& bGrabbedP )" ,
0x00001150 , "\0\0\0\0voidT thugC::operator <<( thugC& thugP )" ,
0x00001151 , "\0\0\0\0thugC::operator byteT*( voidT )" ,
0x00001152 , "\0\0\0\0thugC* thugC::pDadF( voidT )" ,
0x00001153 , "\0\0\0\0thugC* thugC::pKidF( voidT )" ,
0x00001154 , "\0\0\0\0grabUniverseC::~grabUniverseC( voidT )" ,
0x00001155 , "\0\0\0\0grabUniverseC::grabUniverseC( tinS& tinP , const countT idGroupP , const countT idMemorySpaceP ) :" ,
0x00001156 , "\0\0\0\0voidT grabUniverseC::grabF( tinS& tinP , const countT idLineP , const countT idiFileP , const byteT* const pbBitsP )" ,
0x00001157 , "\0\0\0\0voidT grabUniverseC::ungrabF( tinS& tinP )" ,
0x00001158 , "\0\0\0\0tlsStackFrameS::~tlsStackFrameS( voidT )" ,
0x00001159 , "\0\0\0\0tlsStackFrameS::tlsStackFrameS( const countT idTypeP , const osTextT* const postP , const countT cArgP ) :" ,
0x0000115a , "\0\0\0\0homeS::~homeS( voidT )" ,
0x0000115b , "\0\0\0\0homeS::homeS( tinS& tinP ) :" ,
0x0000115c , "\0\0\0\0homeS& homeS::homeIF( voidT )" ,
0x0000115d , "\0\0\0\0voidT homeS::superRandomIF( tinS& tinP , countT*& pcP , countT& ccP , const flagsT flagsP )" ,
0x0000115e , "\0\0\0\0tlsStackFrameLocationS::~tlsStackFrameLocationS( voidT )" ,
0x0000115f , "\0\0\0\0tlsStackFrameLocationS::tlsStackFrameLocationS( voidT ) :" ,
0x00001160 , "\0\0\0\0grabWantS::grabWantS( tinS& tinP ) :" ,
0x00001161 , "\0\0\0\0grabC::~grabC( voidT )" ,
0x00001162 , "\0\0\0\0grabC::grabC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , flagsT flagsP , countT idGrabLayerP )" ,
0x00001163 , "\0\0\0\0voidT grabC::formatF( tinS& tinP , flagsT flagsP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , countT idGrabLayerP )" ,
0x00001164 , "\0\0\0\0boolT grabC::grabF( tinS& tinP , const countT idLineP , const countT idiFileP , const byteT* const pbBitsP , const flagsT flagsP )" ,
0x00001165 , "\0\0\0\0countT grabC::ungrabF( tinS& tinP , const flagsT flagsP )" ,
0x00001166 , "\0\0\0\0restartC::~restartC( voidT )" ,
0x00001167 , "\0\0\0\0restartC::restartC( tinS& tinP , countT idTypeEventAcceptP , bAcceptEventFT pbAcceptEventFP , countT* const pcArgP ) :" ,
0x00001168 , "\0\0\0\0restartC::restartC( restartC*& prTopP , countT idTypeEventAcceptP , bAcceptEventFT pbAcceptEventFP , countT* const pcArgP ) :" ,
0x00001169 , "\0\0\0\0restartC::operator countT( voidT )" ,
0x0000116a , "\0\0\0\0boolT restartC::bAcceptF( tinS* const pTinP , tellInfoExceptionS& infoP )" ,
0x0000116b , "\0\0\0\0gloSecurityGC::~gloSecurityGC( voidT )" ,
0x0000116c , "\0\0\0\0gloSecurityGC::gloSecurityGC( countT nuP )" ,
0x0000116d , "\0\0\0\0testWaterC::~testWaterC( voidT )" ,
0x0000116e , "\0\0\0\0testWaterC::testWaterC( tinS& tinP ) :" ,
0x0000116f , "\0\0\0\0rCacheS::~rCacheS( voidT )" ,
0x00001170 , "\0\0\0\0rCacheS::rCacheS( voidT )" ,
0x00001171 , "\0\0\0\0rCacheS& rCacheS::operator =( const rCacheS& rCacheP )" ,
0x00001172 , "\0\0\0\0rCacheS& rCacheS::operator <<( soulC& sP )" ,
0x00001173 , "\0\0\0\0rCacheS& rCacheS::operator >>( soulC& sP )" ,
0x00001174 , "\0\0\0\0branchHeaderOldS::branchHeaderOldS( branchHeaderOldS* pDadP ) :" ,
0x00001175 , "\0\0\0\0branchDataOldS::~branchDataOldS( voidT )" ,
0x00001176 , "\0\0\0\0branchDataOldS::branchDataOldS( strokeS* psttP ) :" ,
0x00001177 , "\0\0\0\0treeOldC::~treeOldC( voidT )" ,
0x00001178 , "\0\0\0\0treeOldC::treeOldC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , countT& cLeverCursorP , treeOldCBFT pBranchDefinitionCBFP , const countT cbDataP , flagsT flagsSwitchP , flagsT flagsStackP ) :" ,
0x00001179 , "\0\0\0\0voidT treeOldC::newKidF( tinS& tinP , const strokeS* const psttP , soulC* pSoulP , const boolT bLeftP )" ,
0x0000117a , "\0\0\0\0voidT treeOldC::wifeF( tinS& tinP , const strokeS* const psttP )" ,
0x0000117b , "\0\0\0\0treeOldC::operator countT&( voidT )" ,
0x0000117c , "\0\0\0\0voidT treeOldC::nearbyF( tinS& tinP , branchesOldS& branchesP )" ,
0x0000117d , "\0\0\0\0voidT treeOldC::walkF( tinS& tinP , handleC& handleP , const boolT& bQuitP , countT& idLevelP , treeOldCBFT pCallBackFP , countT& cArgP , const flagsT flagsP )" ,
0x0000117e , "\0\0\0\0countT treeOldC::upF( tinS& tinP , const boolT bQueryP , const countT cRepeatP )" ,
0x0000117f , "\0\0\0\0countT treeOldC::downF( tinS& tinP , const boolT bQueryP )" ,
0x00001180 , "\0\0\0\0boolT treeOldC::leftF( tinS& tinP , const boolT bQueryP )" ,
0x00001181 , "\0\0\0\0boolT treeOldC::rightF( tinS& tinP , const boolT bQueryP )" ,
0x00001182 , "\0\0\0\0boolT treeOldC::inF( tinS& tinP , const boolT bQueryP )" ,
0x00001183 , "\0\0\0\0boolT treeOldC::outF( tinS& tinP , const boolT bQueryP )" ,
0x00001184 , "\0\0\0\0voidT treeOldC::nearbyCloseF( tinS& tinP )" ,
0x00001185 , "\0\0\0\0voidT treeOldC::delF( tinS& tinP )" ,
0x00001186 , "\0\0\0\0voidT treeOldC::writeF( tinS& tinP , soulC& soulP , const strokeS* const psttP )" ,
0x00001187 , "\0\0\0\0countT treeOldC::readF( tinS& tinP , soulC& soulP , const boolT& bQuitP , const poopC* pPoopP , boolT bLeftP )" ,
0x00001188 , "\0\0\0\0boolT treeOldC::hugKidF( tinS& tinP , const countT idP )" ,
0x00001189 , "\0\0\0\0voidT treeOldC::grabF( tinS& tinP , const countT idLineP , const countT idiFileP , const byteT* const pbBitsP )" ,
0x0000118a , "\0\0\0\0voidT treeOldC::ungrabF( tinS& tinP )" ,
0x0000118b , "\0\0\0\0boolT treeOldC::bEmptyF( tinS& tinP )" ,
0x0000118c , "\0\0\0\0treeOldC::operator branchDataOldS*( voidT )" ,
0x0000118d , "\0\0\0\0countT* treeOldC::pLeverLathRefF( tinS& tinP )" ,
0x0000118e , "\0\0\0\0voidT treeOldC::hugKidF( tinS& tinP , branchHeaderOldS* const pHeaderP )" ,
0x0000118f , "\0\0\0\0voidT treeOldC::jumpF( tinS& tinP , const handleC& handleP )" ,
0x00001190 , "\0\0\0\0branchesOldS::~branchesOldS( voidT )" ,
0x00001191 , "\0\0\0\0branchesOldS::branchesOldS( voidT ) :" ,
0x00001192 , "\0\0\0\0zapC::~zapC( voidT )" ,
0x00001193 , "\0\0\0\0zapC::zapC( byteT* const pbDoomedP , const countT cbDoomedP, const flagsT flagsP ) :" ,
0x00001194 , "\0\0\0\0threadCheckC::~threadCheckC( voidT )" ,
0x00001195 , "\0\0\0\0threadCheckC::threadCheckC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP ) :" ,
0x00001196 , "\0\0\0\0argS::argS( etherC& etherP , const strokeS* const psttUniqueP , const strokeS* const psttExeP ) :" ,
0x00001197 , "\0\0\0\0baseSoilXxxxC::~baseSoilXxxxC( voidT )" ,
0x00001198 , "\0\0\0\0baseSoilXxxxC::baseSoilXxxxC( const osTextT* const & postOldClassNameIP , const osTextT* const & postNameP ) :" ,
0x00001199 , "\0\0\0\0const osTextT* const & baseSoilXxxxC::postOldClassNameIF( tinS& tinP )" ,
0x0000119a , "\0\0\0\0const osTextT* const& baseSoilXxxxC::postNameF( tinS& tinP )" ,
0x0000119b , "\0\0\0\0baseSoilXxxxC& baseSoilXxxxC::operator >>( soulC& slP )" ,
0x0000119c , "\0\0\0\0const baseSoilXxxxC& baseSoilXxxxC::operator >>( soulC& slP ) const" ,
0x0000119d , "\0\0\0\0lexC::lexC( tinS& tinP , etherC& etherP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const osTextT* const postNameP ) :" ,
0x0000119e , "\0\0\0\0voidT lexC::operator ()( tinS& tinP , soulC& slP )" ,
0x0000119f , "\0\0\0\0baseSoilXxxxC& lexC::operator <<( soulC& slP )" ,
0x000011a0 , "\0\0\0\0baseSoilXxxxC& lexC::operator >>( soulC& slP )" ,
0x000011a1 , "\0\0\0\0const baseSoilXxxxC& lexC::operator >>( soulC& slP ) const" ,
0x000011a2 , "\0\0\0\0rootWordC::~rootWordC( voidT )" ,
0x000011a3 , "\0\0\0\0rootWordC::rootWordC( tinS& tinP , etherC& etherP , const osTextT* const postNameP ) :" ,
0x000011a4 , "\0\0\0\0voidT rootWordC::operator ()( tinS& tinP , soulC& slP )" ,
0x000011a5 , "\0\0\0\0baseSoilXxxxC& rootWordC::operator <<( soulC& slP )" ,
0x000011a6 , "\0\0\0\0baseSoilXxxxC& rootWordC::operator >>( soulC& slP )" ,
0x000011a7 , "\0\0\0\0const baseSoilXxxxC& rootWordC::operator >>( soulC& slP ) const" ,
0x000011a8 , "\0\0\0\0genSoixlOldWordDefs, genSoixlOldWordProtos (included) part 1" ,
0x000011a9 , "\0\0\0\0genSoixlOldWordDefs, genSoixlOldWordProtos (included) part 2" ,
0x000011aa , "\0\0\0\0genSoixlOldWordDefs, genSoixlOldWordProtos (included) part 3" ,
0x000011ab , "\0\0\0\0genSoixlOldWordDefs, genSoixlOldWordProtos (included) part 4" ,
0x000011ac , "\0\0\0\0soixlOldSpaceC::~soixlOldSpaceC( voidT )" ,
0x000011ad , "\0\0\0\0soixlOldSpaceC::soixlOldSpaceC( tinS& tinP , etherC& etherP , const strokeS* const psttNameP ) :" ,
0x000011ae , "\0\0\0\0voidT soixlOldSpaceC::operator ()( tinS& tinP , soulC& slP )" ,
0x000011af , "\0\0\0\0boolT soixlOldSpaceC::operator <<( const strokeS* const psttP )" ,
0x000011b0 , "\0\0\0\0baseSoilXxxxC& soixlOldSpaceC::operator <<( soulC& slP )" ,
0x000011b1 , "\0\0\0\0baseSoilXxxxC& soixlOldSpaceC::operator >>( soulC& slP )" ,
0x000011b2 , "\0\0\0\0const baseSoilXxxxC& soixlOldSpaceC::operator >>( soulC& slP ) const" ,
0x000011b3 , "\0\0\0\0idPortC::idPortC( voidT ) :" ,
0x000011b4 , "\0\0\0\0idPortC::idPortC( const countT idPortP ) :" ,
0x000011b5 , "\0\0\0\0voidT idPortC::operator >>( soulC& slP ) const" ,
0x000011b6 , "\0\0\0\0voidT idPortC::operator <<( soulC& slP )" ,
0x000011b7 , "\0\0\0\0idPortC::operator countT&( voidT ) " ,
0x000011b8 , "\0\0\0\0idPortC::operator nicNameC&( voidT ) " ,
0x000011b9 , "\0\0\0\0boolT idPortC::operator ==( const nicNameC& nnP ) const" ,
0x000011ba , "\0\0\0\0boolT idPortC::operator !=( const nicNameC& nnP ) const" ,
0x000011bb , "\0\0\0\0boolT idPortC::operator ==( const countT idPortP ) const" ,
0x000011bc , "\0\0\0\0boolT idPortC::operator !=( const countT idPortP ) const" ,
0x000011bd , "\0\0\0\0idPortC::operator countT( voidT ) const" ,
0x000011be , "\0\0\0\0idPortC::operator nicNameC( voidT ) const" ,
0x000011bf , "\0\0\0\0boolT idPortC::operator <( const idPortC& idPortP ) const" ,
0x000011c0 , "\0\0\0\0boolT idPortC::operator <=( const idPortC& idPortP ) const" ,
0x000011c1 , "\0\0\0\0boolT idPortC::operator >=( const idPortC& idPortP ) const" ,
0x000011c2 , "\0\0\0\0boolT idPortC::operator >( const idPortC& idPortP ) const " ,
0x000011c3 , "\0\0\0\0boolT idPortC::operator ==( const idPortC& idPortP ) const" ,
0x000011c4 , "\0\0\0\0boolT idPortC::operator !=( const idPortC& idPortP ) const" ,
0x000011c5 , "\0\0\0\0voidT idPortC::operator =( const countT idPortP )" ,
0x000011c6 , "\0\0\0\0voidT idPortC::operator =( const nicNameC& nnP )" ,
0x000011c7 , "\0\0\0\0sCountT idPortC::operator -( const idPortC& idPortP ) const" ,
0x000011c8 , "\0\0\0\0countT idPortC::cFieldsF( tinS& tinP )" ,
0x000011c9 , "\0\0\0\0idPortC idPortC::fieldF( tinS& tinP , soulC& soulP , const countT idFieldStartP )" ,
0x000011ca , "\0\0\0\0idPortTimeC::idPortTimeC( voidT )" ,
0x000011cb , "\0\0\0\0idPortTimeC& idPortTimeC::operator >>( soulC& soulP )" ,
0x000011cc , "\0\0\0\0idPortTimeC& idPortTimeC::operator <<( soulC& soulP )" ,
0x000011cd , "\0\0\0\0voidT idPortTimeC::timeStampIfF( tinS& tinP , etherC& etThread )" ,
0x000011ce , "\0\0\0\0idPortTimeC& idPortTimeC::operator =( const idPortC& idpP )" ,
0x000011cf , "\0\0\0\0idPortTimeC& idPortTimeC::operator =( const idPortTimeC& idptP )" ,
0x000011d0 , "\0\0\0\0idPortTimeC& idPortTimeC::operator =( const countT idPortP )" ,
0x000011d1 , "\0\0\0\0boolT idPortTimeC::operator ==( const idPortTimeC& idptP ) const" ,
0x000011d2 , "\0\0\0\0boolT idPortTimeC::operator !=( const idPortTimeC& idptP ) const" ,
0x000011d3 , "\0\0\0\0sCountT idPortTimeC::operator -( const idPortTimeC& idptP ) const" ,
0x000011d4 , "\0\0\0\0idPortTimeC::operator countT( voidT ) const" ,
0x000011d5 , "\0\0\0\0idPortTimeC idPortTimeC::fieldF( tinS& tinP , soulC& soulP , const countT idFieldStartP )" ,
0x000011d6 , "\0\0\0\0countT idPortTimeC::cFieldsF( tinS& tinP )" ,
0x000011d7 , "\0\0\0\0idPortTimeC& idPortTimeC::operator =( const nicNameC& nnP )" ,
0x000011d8 , "\0\0\0\0idPortTimeC::operator const timeS&( voidT ) const" ,
0x000011d9 , "\0\0\0\0idPortTimeC& idPortTimeC::operator =( const sCountT idPortP )" ,
0x000011da , "\0\0\0\0relayC::relayC( tinS& tinP , etherC& etThread , boolT& bReadyP )" ,
0x000011db , "\0\0\0\0spouseC::spouseC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP ) :" ,
0x000011dc , "\0\0\0\0etherC& spouseC::etherF( tinS& tinP )" ,
0x000011dd , "\0\0\0\0voidT spouseC::etherF( tinS& tinP , etherC& etherP )" ,
0x000011de , "\0\0\0\0voidT spouseC::refresh_ppbFrame_F( byteT* const pbFrameNewP )" ,
0x000011df , "\0\0\0\0voidT spouseC::rememberF( tinS& tinP , const byteT bP )" ,
0x000011e0 , "\0\0\0\0momC::momC( tinS& tinP , etherC& etherP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP ) :" ,
0x000011e1 , "\0\0\0\0count01T momC::operator ()( tinS& tinP , const byteT bP )" ,
0x000011e2 , "\0\0\0\0voidT momC::operator ()( tinS& tinP , count01T*& pcP , countT& ccP , const byteT* pbP , countT cbP , const countT* const pczNameP , const boolT bPinP )" ,
0x000011e3 , "\0\0\0\0dadC::dadC( tinS& tinP , etherC& etherP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP ) :" ,
0x000011e4 , "\0\0\0\0byteT dadC::operator ()( tinS& tinP , const count01T cP )" ,
0x000011e5 , "\0\0\0\0voidT dadC::operator ()( tinS& tinP , byteT*& pbP , countT& cbP , const count01T* const pcP , countT ccP , const boolT bSilentFailP )" ,
0x000011e6 , "\0\0\0\0bitsC::~bitsC( voidT )" ,
0x000011e7 , "\0\0\0\0bitsC::bitsC( tinS& tinP , const countT cBitsP , const byteT* const pbP , const countT idSetP ) :" ,
0x000011e8 , "\0\0\0\0bitsC::bitsC( tinS& tinP , const countT cBitsP , const byteT* const pbP , const countT* pcIdSetP ) :" ,
0x000011e9 , "\0\0\0\0voidT bitsC::ctF( tinS& tinP , const byteT* const pbP , const countT* pcIdSetP )" ,
0x000011ea , "\0\0\0\0bitsC::operator byteT*( voidT )" ,
0x000011eb , "\0\0\0\0bitsC::bitsC( const countT cBitsP , const byteT* const pbP , const countT idSetP ) :" ,
0x000011ec , "\0\0\0\0bitsC::bitsC( const countT cBitsP , const byteT* const pbP , const countT* pcIdSetP ) :" ,
0x000011ed , "\0\0\0\0boolT bitsC::bitAndF( const countT cBitsP , const byteT* const pbBitsP , const countT* pcIdP )" ,
0x000011ee , "\0\0\0\0tlsStackFrameNoTlsS::~tlsStackFrameNoTlsS( voidT )" ,
0x000011ef , "\0\0\0\0tlsStackFrameNoTlsS::tlsStackFrameNoTlsS( const countT idTypeP , const osTextT* const postP , const countT cArgP ) :" ,
0x000011f0 , "\0\0\0\0staticC::~staticC( voidT )" ,
0x000011f1 , "\0\0\0\0staticC::staticC( tinS& tinP , const osTextT* const postNameP , const osTextT* const postGroupP , const countT cbP , const countT idTypeP ) :" ,
0x000011f2 , "\0\0\0\0staticC::operator byteT&( voidT )" ,
0x000011f3 , "\0\0\0\0staticC::operator byteT*( voidT )" ,
0x000011f4 , "\0\0\0\0staticC::operator countT&( voidT )" ,
0x000011f5 , "\0\0\0\0staticC::operator countT*( voidT )" ,
0x000011f6 , "\0\0\0\0staticC::operator measureT&( voidT )" ,
0x000011f7 , "\0\0\0\0staticC::operator measureT*( voidT )" ,
0x000011f8 , "\0\0\0\0countT staticC::cbF( voidT )" ,
0x000011f9 , "\0\0\0\0processGlobalEndC::~processGlobalEndC( voidT )" ,
0x000011fa , "\0\0\0\0processGlobalEndC::processGlobalEndC( tinS& tinP )" ,
0x000011fb , "\0\0\0\0parameterC::parameterC( osTextT* postToP , countT costaToP , const osTextT* postKeyP )" ,
0x000011fc , "\0\0\0\0sCountFromPostC::sCountFromPostC( sCountT& scToP , const osTextT* postFromP , const sCountT maxP , const sCountT minP , const boolT bUnsignedP , const sCountT* const pscOkP , countT cscOkP , const sCountT* const pscNotOkP , countT cscNotOkP )" ,
0x000011fd , "\0\0\0\0tellInfoLifiS::~tellInfoLifiS( voidT )" ,
0x000011fe , "\0\0\0\0tellInfoLifiS::tellInfoLifiS( voidT ) :" ,
0x000011ff , "\0\0\0\0tellInfoNapkinS::~tellInfoNapkinS( voidT )" ,
0x00001200 , "\0\0\0\0tellInfoNapkinS::tellInfoNapkinS( voidT ) :" ,
0x00001201 , "\0\0\0\0tellInfoExceptionS::~tellInfoExceptionS( voidT )" ,
0x00001202 , "\0\0\0\0tellInfoExceptionS::tellInfoExceptionS( voidT ) :" ,
0x00001203 , "\0\0\0\0tellInfoTinS::~tellInfoTinS( voidT )" ,
0x00001204 , "\0\0\0\0tellInfoTinS::tellInfoTinS( voidT ) :" ,
0x00001205 , "\0\0\0\0sharedMemInfoS::~sharedMemInfoS( voidT )" ,
0x00001206 , "\0\0\0\0sharedMemInfoS::sharedMemInfoS( voidT ) :" ,
0x00001207 , "\0\0\0\0osTextC::~osTextC( voidT )" ,
0x00001208 , "\0\0\0\0osTextC::osTextC( const countT cbFootP , const osTextT* const postP , byteT* const pbaFootP , const countT cbaFootP ) :" ,
0x00001209 , "\0\0\0\0osTextC::operator const osTextT*( voidT ) const" ,
0x0000120a , "\0\0\0\0const osTextT* osTextC::operator ()( const osTextT* postP , countT costaP , const boolT bNoTerminatorP )" ,
0x0000120b , "\0\0\0\0countT osTextC::costF( voidT ) const" ,
0x0000120c , "\0\0\0\0const osTextT* osTextC::operator +( sCountT offP ) const" ,
0x0000120d , "\0\0\0\0const osTextT* osTextC::operator +( countT offP ) const" ,
0x0000120e , "\0\0\0\0const osTextT* osTextC::operator ()( const osTextC& ostoP , countT costaP )" ,
0x0000120f , "\0\0\0\0const osTextT& osTextC::operator []( sCountT offP ) const" ,
0x00001210 , "\0\0\0\0voidT osTextC::truncateF( const countT costMaxP )" ,
0x00001211 , "\0\0\0\0footC::~footC( voidT )" ,
0x00001212 , "\0\0\0\0footC::footC( const countT cbFootP , byteT* const pbaFootP , const countT cbaFootP ) :" ,
0x00001213 , "\0\0\0\0tallyC::~tallyC( voidT )" ,
0x00001214 , "\0\0\0\0tallyC::tallyC( countT* pcTallyP , const boolT bNoIncrementP ) :" ,
0x00001215 , "\0\0\0\0voidT tallyC::setF( countT* pcTallyP )" ,
0x00001216 , "\0\0\0\0poopC::~poopC( voidT )" ,
0x00001217 , "\0\0\0\0poopC::poopC( const flagsT flagsP ) :" ,
0x00001218 , "\0\0\0\0poopC::operator const countT&( voidT ) const" ,
0x00001219 , "\0\0\0\0voidT poopC::gruntF( tinS& tinP , const countT idLineP , const countT idiFileP , const byteT* const pbBitsP , const countT idSubTypeP , const countT idTypeP )" ,
0x0000121a , "\0\0\0\0voidT poopC::resetF( voidT )" ,
0x0000121b , "\0\0\0\0voidT poopC::chatterF( tinS& tinP , const countT idLineP , const countT idiFileP ) const" ,
0x0000121c , "\0\0\0\0scoopC::~scoopC( voidT )" ,
0x0000121d , "\0\0\0\0scoopC::scoopC( tinS& tinP , const poopC& poopP , flagsT flagsP ) :" ,
0x0000121e , "\0\0\0\0scoopC::scoopC( tinS& tinP ) :" ,
0x0000121f , "\0\0\0\0mapCTC::mapCTC( const mapCTS* const pListP , const countT cEntriesP , const boolT bLenghPrefixedP ) :" ,
0x00001220 , "\0\0\0\0const osTextT* mapCTC::operator()( const countT idP )" ,
0x00001221 , "\0\0\0\0countT mapCTC::operator()( const osTextT* const postP )" ,
0x00001222 , "\0\0\0\0countT mapCTC::costMaxF( voidT ) const" ,
0x00001223 , "\0\0\0\0pauseC::~pauseC( voidT )" ,
0x00001224 , "\0\0\0\0pauseC::pauseC( const boolT& bGoIP )" ,
0x00001225 , "\0\0\0\0strokeS::strokeS( const strokeS& sP )" ,
0x00001226 , "\0\0\0\0strokeS& strokeS::operator =( const strokeS& sP )" ,
0x00001227 , "\0\0\0\0countT strokeS::idToolF( tinS& tinP ) const" ,
0x00001228 , "\0\0\0\0strokeS::strokeS( const countT idAdamP , const countT idCasteP )" ,
0x00001229 , "\0\0\0\0strokeS::strokeS( const countT fingerprintP , soulC*& pSoulP )" ,
0x0000122a , "\0\0\0\0voidT strokeS::deregisterF( voidT ) const" ,
0x0000122b , "\0\0\0\0voidT strokeS::registerF( soulC** ppSoulP ) const" ,
0x0000122c , "\0\0\0\0voidT strokeS::featuresF( tinS& tinP , soulC*& psFeaturesP ) const" ,
0x0000122d , "\0\0\0\0strokingFrameS::strokingFrameS( const flagsT flagsP , const countT cStrokingFramesPadRightP , const countT cStrokingFramesPadUpP , const measureT mIdColP , const measureT mIdRowP , const measureT mColsP , const measureT mRowsP ) :" ,
0x0000122e , "\0\0\0\0voidT strokingFrameS::newWaterF( const measureT mIdColP , const measureT mIdRowP , const countT cRipplesP )" ,
0x0000122f , "\0\0\0\0strokingFrameS& strokingFrameS::operator <<( soulC& sP )" ,
0x00001230 , "\0\0\0\0strokingFrameS& strokingFrameS::operator >>( soulC& sP )" ,
0x00001231 , "\0\0\0\0xrayC::~xrayC( voidT )" ,
0x00001232 , "\0\0\0\0xrayC::xrayC( tinS& tinP , const flagsT flagsP , const countT cbElementP , const countT cxRetainP ) :" ,
0x00001233 , "\0\0\0\0xrayC::operator countT( voidT ) const" ,
0x00001234 , "\0\0\0\0voidT xrayC::offxsrF( countT& offxP , countT& offsrP , countT offSlotP ) const" ,
0x00001235 , "\0\0\0\0countT xrayC::offxF( countT offSlotP ) const" ,
0x00001236 , "\0\0\0\0countT xrayC::offsrF( countT offSlotP ) const" ,
0x00001237 , "\0\0\0\0countT xrayC::csaxF( countT offxP ) const //I AM NOT USED FOR FIFO XRAYS" ,
0x00001238 , "\0\0\0\0countT xrayC::freeF( tinS& tinP , const boolT bFifoLathP )" ,
0x00001239 , "\0\0\0\0countT& xrayC::operator []( sCountT idP )" ,
0x0000123a , "\0\0\0\0voidT xrayC::allocF( tinS& tinP , const countT cNewP )" ,
0x0000123b , "\0\0\0\0voidT xrayC::freeAllF( tinS& tinP )" ,
0x0000123c , "\0\0\0\0earDropC::~earDropC( voidT )" ,
0x0000123d , "\0\0\0\0earDropC::earDropC( tinS& tinP , const flagsT flagsP , const countT cbHeaderP ) :" ,
0x0000123e , "\0\0\0\0earDropC::operator byteT*( voidT )" ,
0x0000123f , "\0\0\0\0countT earDropC::cbF( voidT )" ,
0x00001240 , "\0\0\0\0voidT earDropC::prependF( tinS& tinP , const byteT* const pbP , countT cbP )" ,
0x00001241 , "\0\0\0\0voidT earDropC::appendF( tinS& tinP , const byteT* const pbP , countT cbP )" ,
0x00001242 , "\0\0\0\0countT earDropC::freePrefixF( countT cbP )" ,
0x00001243 , "\0\0\0\0countT earDropC::freeSuffixF( countT cbP )" ,
0x00001244 , "\0\0\0\0vTextC::~vTextC( voidT )" ,
0x00001245 , "\0\0\0\0vTextC::vTextC( tinS& tinP , const osTextT* const postOldCommentP , const strokeS* const psttP , countT csttReserveP , soulC* const psFeaturesP , sadamCBFT pSadamCBFP , const countT cArgP , const countT idToolFilterListP ) :" ,
0x00001246 , "\0\0\0\0voidT vTextC::setF( tinS& tinP , const strokeS* const psttP , const flagsT flagsP , const countT csttMinP )" ,
0x00001247 , "\0\0\0\0vTextC& vTextC::operator <<( vTextC& vtP )" ,
0x00001248 , "\0\0\0\0voidT vTextC::getF( tinS& tinP , strokeS*& psttP )" ,
0x00001249 , "\0\0\0\0countT vTextC::idAdamF( tinS& tinP )" ,
0x0000124a , "\0\0\0\0boolT vTextC::bPendingF( tinS& tinP )" ,
0x0000124b , "\0\0\0\0staqC::staqC( tinS& tinP , const countT cbeP , const countT ceP ) :" ,
0x0000124c , "\0\0\0\0staqC& staqC::operator <<( const byteT* const pbP )" ,
0x0000124d , "\0\0\0\0staqC& staqC::operator >>( byteT* const pbP )" ,
0x0000124e , "\0\0\0\0tcButtonC::~tcButtonC( voidT )" ,
0x0000124f , "\0\0\0\0tcButtonC::tcButtonC( tinS& tinP , const osTextT* const postOldCommentP , tcStateCBFT pTcStateCBFP , const countT cArgP , const flagsT flFeaturesP , flagsT* const pFlagsTcFeatureDisableP , const strokeS* const psttP , countT csttReserveP , const countT rgbFrameP , const countT cFrameNestDownP , const countT cFrameNestLeftP , const countT cFrameNestUpP , const countT cFrameNestRightP , const countT idTabClassP , const countT idTabP , soulC* const psFeaturesP , const countT idToolFilterListP ) :" ,
0x00001250 , "\0\0\0\0paperOldC::~paperOldC( voidT )" ,
0x00001251 , "\0\0\0\0paperOldC::paperOldC( tinS& tinP , etherC& etherP , const countT cArgP , backOldC& backP , paperToBackCBFT pPaperToBackCBFP , countT cPaperToBackArgP ) :" ,
0x00001252 , "\0\0\0\0voidT paperOldC::sadamHighlightF( tinS& tinP , sadamC& sadamP , flagsT flagsP )" ,
0x00001253 , "\0\0\0\0voidT paperOldC::moveGlyphF( tinS& tinP , sadamC& sadamP , const handleC* const phCloneP )" ,
0x00001254 , "\0\0\0\0voidT paperOldC::flushF( tinS& tinP )" ,
0x00001255 , "\0\0\0\0voidT paperOldC::renderVolatilesF( tinS& tinP , sadamC& sadamP , const handleC* const phCloneP , const flagsT flagsP , vBodyS* const pvbP )" ,
0x00001256 , "\0\0\0\0voidT paperOldC::eraseGlyphF( tinS& tinP , sadamC& sadamP , const countT idEventP , const handleC* const phCloneP )" ,
0x00001257 , "\0\0\0\0const countT& paperOldC::hotKeyF( tinS& tinP , strokeS* const psttlBodyP )" ,
0x00001258 , "\0\0\0\0boolT paperOldC::bHotKeyExistsF( tinS& tinP , const strokeS* const psttlBodyP )" ,
0x00001259 , "\0\0\0\0countT paperOldC::assignHotKeyF( tinS& tinP , strokeS* const psttlBodyP , const boolT bBigitP )" ,
0x0000125a , "\0\0\0\0voidT paperOldC::makeFramedSadamBodyF( tinS& tinP , strokeS*& psttFramedP , sadamC& sadamP , const strokeS* const psttBodyP , const countT cFrameNestDownP , const countT cFrameNestLeftP , const countT cFrameNestUpP , const countT cFrameNestRightP )" ,
0x0000125b , "\0\0\0\0const strokingFrameS& paperOldC::sfF( tinS& tinP , const boolT bDadP )" ,
0x0000125c , "\0\0\0\0boolT paperOldC::bShowF( tinS& tinP ) const" ,
0x0000125d , "\0\0\0\0voidT paperOldC::renderVolatileF( tinS& tinP , vBodyS& vbP , const mColRowMinMaxS& crmmP , const flagsT flagsP , const handleC* const phCloneP )" ,
0x0000125e , "\0\0\0\0voidT paperOldC::purgeF( tinS& tinP , const flagsT flagsP )" ,
0x0000125f , "\0\0\0\0boolT paperOldC::bAnimatedF( tinS& tinP )" ,
0x00001260 , "\0\0\0\0tcPromptC::~tcPromptC( voidT )" ,
0x00001261 , "\0\0\0\0tcPromptC::tcPromptC( tinS& tinP , etherC& etherP , const osTextT* const postOldCommentP , strokeS*& psttValueP , const strokeS* const psttPromptP , batonC* const pBatonP , signC* const pSignP , const flagsT flFeaturesP , countT csttReserveP , tcStateCBFT pTcStateCBFP , const countT cArgP , flagsT* const pFlagsTcFeatureDisableP , const countT cFramesPadRightP , const countT cFramesPadUpP , const countT rgbFrameP , const countT idTabClassP , const countT idTabP , soulC* const psFeaturesP , const countT idToolFilterListP ) :" ,
0x00001262 , "\0\0\0\0voidT tcPromptC::freshF( tinS& tinP , const strokeS* const psttPromptP )" ,
0x00001263 , "\0\0\0\0tcSliderC::~tcSliderC( voidT )" ,
0x00001264 , "\0\0\0\0tcSliderC::tcSliderC( tinS& tinP , etherC& etherP , const osTextT* const postOldCommentP  , measureT& mValueP , batonC& batonP , signC& signP , countT csttReserveP , const countT cTickMarksP , const strokeS** const ppsttLabelP , const flagsT flFeaturesP , tcStateCBFT pTcStateCBFP , const countT cArgP , flagsT* const pFlagsTcFeatureDisableP , const countT rgbFrameP , const countT idTabClassP , const countT idTabP , soulC* const psFeaturesP , const countT idToolFilterListP ) :" ,
0x00001265 , "\0\0\0\0voidT tcSliderC::freshF( tinS& tinP )" ,
0x00001266 , "\0\0\0\0voidT tcSliderC::drawF( tinS& tinP )" ,
0x00001267 , "\0\0\0\0tcButtonQuitC::~tcButtonQuitC( voidT )" ,
0x00001268 , "\0\0\0\0tcButtonQuitC::tcButtonQuitC( tinS& tinP , const osTextT* const postOldCommentP , const flagsT flFeaturesP , const countT idToolFilterListP ) :" ,
0x00001269 , "\0\0\0\0blobC::blobC( tinS& tinP , byteT* pbAllP , const countT cbAllP ) :" ,
0x0000126a , "\0\0\0\0const byteT* blobC::operator []( const countT idP ) //DEPARTS FROM CODING CONVENTION FOR MAX SPEED" ,
0x0000126b , "\0\0\0\0boolT blobC::appendF( tinS& tinP , const byteT* const pbP , const countT cbP )" ,
0x0000126c , "\0\0\0\0eyeStateOldS::eyeStateOldS( tinS& tinP , etherC& etherP ) :" ,
0x0000126d , "\0\0\0\0eyeOldC::~eyeOldC( voidT )" ,
0x0000126e , "\0\0\0\0eyeOldC::eyeOldC( tinS& tinP , etherC& etherP , const countT cPapersP , paperToBackCBFT pPaperToBackCBFP , countT cPaperToBackArgP ) :" ,
0x0000126f , "\0\0\0\0voidT eyeOldC::freshHullF( tinS& tinP )" ,
0x00001270 , "\0\0\0\0voidT eyeOldC::freshPodF( tinS& tinP )" ,
0x00001271 , "\0\0\0\0voidT eyeOldC::podFromAbsF( tinS& tinP , vectorOldC& vToP , vectorOldC& vFromP )" ,
0x00001272 , "\0\0\0\0voidT eyeOldC::setHullLocationF( tinS& tinP , const measureT xP , const measureT yP , const measureT zP )" ,
0x00001273 , "\0\0\0\0voidT eyeOldC::setHullAimTiltF( tinS& tinP , const measureT anghP , const measureT angvP , const measureT angtP )" ,
0x00001274 , "\0\0\0\0voidT eyeOldC::freshPodAbsF( tinS& tinP )" ,
0x00001275 , "\0\0\0\0boolT eyeOldC::obeyToolActionF( tinS& tinP , etherC& etherP , const countT idTypeCallP , const countT* const pcNotesP , sadamC& sadamP )" ,
0x00001276 , "\0\0\0\0voidT eyeOldC::grabF( tinS& tinP , const countT idLineP , const countT idiFileP , const byteT* const pbBitsP )" ,
0x00001277 , "\0\0\0\0voidT eyeOldC::ungrabF( tinS& tinP )" ,
0x00001278 , "\0\0\0\0voidT eyeOldC::backOldCtPaperF( tinS& tinP , pulpOldC& pulpP , paperOldC& paperP )" ,
0x00001279 , "\0\0\0\0countT eyeOldC::backIdTypeF( voidT ) const" ,
0x0000127a , "\0\0\0\0voidT eyeOldC::backPositionF( tinS& tinP , pulpOldC& pulpP , const measureT mIdColP , const measureT mIdRowP )" ,
0x0000127b , "\0\0\0\0voidT eyeOldC::backFlushF( tinS& tinP , pulpOldC& pulpP , const measureT mIdColP , const measureT mIdRowP , const measureT mColsP , const measureT mRowsP )" ,
0x0000127c , "\0\0\0\0voidT eyeOldC::backResetF( tinS& tinP , pulpOldC& pulpP )" ,
0x0000127d , "\0\0\0\0voidT eyeOldC::backDtPaperF( tinS& tinP , pulpOldC& pulpP )" ,
0x0000127e , "\0\0\0\0voidT eyeOldC::backSadamHighlightF( tinS& tinP , pulpOldC& pulpP , paperOldC& paperP , const countT rgbP , measureT mColFromP , measureT mRowFromP , measureT mColToP , measureT mRowToP , const measureT mShrinkP , const countT cSidesP )" ,
0x0000127f , "\0\0\0\0boolT eyeOldC::backSuppressRefreshF( tinS& tinP , const paperOldC& paperP )" ,
0x00001280 , "\0\0\0\0voidT eyeOldC::b ackFlushAsyncF( tinS& tinP , const measureT mIdColMinP , const measureT mIdRowMinP , const measureT mIdColMaxP , const measureT mIdRowMaxP )" ,
0x00001281 , "\0\0\0\0voidT eyeOldC::backNotifyBeforeSadamF( tinS& tinP , pulpOldC& pulpP , const strokeS& sttP , const flagsT flagsP )" ,
0x00001282 , "\0\0\0\0boolT eyeOldC::backAbsentF( voidT ) const" ,
0x00001283 , "\0\0\0\0voidT eyeOldC::setFlagsF( tinS& tinP , const flagsT flagsOnP , const flagsT flagsOffP )" ,
0x00001284 , "\0\0\0\0voidT eyeOldC::pushPaperDrawOverrideF( tinS& tinP , pulpOldC& pulpP , const countT idPaperP , const flagsT flagsP )" ,
0x00001285 , "\0\0\0\0voidT eyeOldC::popPaperDrawOverrideF( tinS& tinP , pulpOldC& pulpP , const flagsT flagsP )" ,
0x00001286 , "\0\0\0\0voidT eyeOldC::anglesToSpecF( tinS& tinP , flagsT& flagsP , measureT& hAngleP , measureT& vAngleP , measureT& vAngleAftP , measureT xxP , measureT yyP , measureT zzP , vectorOldC& vSpecPodLagP )" ,
0x00001287 , "\0\0\0\0voidT eyeOldC::backDrawOnScratchDeviceF( tinS& tinP , pulpOldC& pulpP )" ,
0x00001288 , "\0\0\0\0voidT eyeOldC::backScratchBitmapPushF( tinS& tinP , pulpOldC& pulpP , const countT cColsP , const countT cRowsP )" ,
0x00001289 , "\0\0\0\0voidT eyeOldC::backScratchBitmapPopF( tinS& tinP , pulpOldC& pulpP , const boolT bAllP )" ,
0x0000128a , "\0\0\0\0voidT eyeOldC::backDrawOnNormalDeviceF( tinS& tinP , pulpOldC& pulpP )" ,
0x0000128b , "\0\0\0\0voidT eyeOldC::backDrawOnNullDeviceF( tinS& tinP , pulpOldC& pulpP )" ,
0x0000128c , "\0\0\0\0voidT eyeOldC::backScratchBitmapMonochromePushF( tinS& tinP , pulpOldC& pulpP , const countT cColsP , const countT cRowsP )" ,
0x0000128d , "\0\0\0\0voidT eyeOldC::renderF( tinS& tinP , pulpOldC& pulpP , const strokeS* const psttP , const handleC* const phCloneP )" ,
0x0000128e , "\0\0\0\0voidT eyeOldC::flushPendingF( tinS& tinP )" ,
0x0000128f , "\0\0\0\0voidT eyeOldC::operator>>( vTextC& vtP )" ,
0x00001290 , "\0\0\0\0backOldC::~backOldC( voidT )" ,
0x00001291 , "\0\0\0\0pulpOldC::~pulpOldC( voidT )" ,
0x00001292 , "\0\0\0\0pulpOldC::pulpOldC( tinS& tinP , etherC& etherP , paperOldC& paperP , backOldC& backP , paperToBackCBFT pPaperToBackCBFP , countT cPaperToBackArgP ) :" ,
0x00001293 , "\0\0\0\0voidT pulpOldC::overrideF( tinS& tinP , strokeS& sttP )" ,
0x00001294 , "\0\0\0\0voidT pulpOldC::positionPaperBackF( tinS& tinP )" ,
0x00001295 , "\0\0\0\0voidT pulpOldC::newWaterF( const measureT mIdColP , const measureT mIdRowP )" ,
0x00001296 , "\0\0\0\0voidT pulpOldC::mColRowF( measureT& mColToP , measureT& mRowToP , const countT idCasteP , const countT idCasteBaseP , strokeS& sttP )" ,
0x00001297 , "\0\0\0\0voidT pulpOldC::snapBaseF( tinS& tinP , etherC& etherP , const boolT bRestoreP , countT* const pczIdAdamP )" ,
0x00001298 , "\0\0\0\0voidT pulpOldC::purgeBaseF( tinS& tinP , etherC& etherP , const flagsT flagsP )" ,
0x00001299 , "\0\0\0\0voidT pulpOldC::logStrokeF( tinS& tinP , const strokeS& sttP )" ,
0x0000129a , "\0\0\0\0countT pulpOldC::boundingRectF( tinS& tinP , measureT& mIdColMinP , measureT& mIdRowMinP , measureT& mColsP , measureT& mRowsP , const strokeS* const psttP , const handleC* const phCloneP , const countT* pczIdAdamSnapP , const flagsT flagsP )" ,
0x0000129b , "\0\0\0\0backOldC::backOldC( tinS& tinP , etherC& etherP , const countT cPapersP , const measureT mColsP , const measureT mRowsP , const countT cArgP , paperToBackCBFT pPaperToBackCBFP , countT cPaperToBackArgP ) :" ,
0x0000129c , "\0\0\0\0voidT backOldC::ctSuffixF( tinS& tinP , const countT cArgP , paperToBackCBFT pPaperToBackCBFP , countT cPaperToBackArgP )" ,
0x0000129d , "\0\0\0\0voidT backOldC::strokeAllPapersF( tinS& tinP , const strokeS* const psttP )" ,
0x0000129e , "\0\0\0\0voidT backOldC::freshToolsAllFlagOnDownF( tinS& tinP )" ,
0x0000129f , "\0\0\0\0voidT backOldC::freshToolsMousePositionF( tinS& tinP )" ,
0x000012a0 , "\0\0\0\0voidT backOldC::dtPrefixF( tinS& tinP )" ,
0x000012a1 , "\0\0\0\0voidT backOldC::freshToolsMouseButtonsNotPresentF( tinS& tinP )" ,
0x000012a2 , "\0\0\0\0boolT backOldC::bToolFilterAllowsF( tinS& tinP , const countT idToolP , const countT idActionP , const countT idAdamP , const countT idListP )" ,
0x000012a3 , "\0\0\0\0voidT backOldC::filterGrabMouseF( tinS& tinP , const countT idAdamP , const boolT bFilterP )" ,
0x000012a4 , "\0\0\0\0voidT backOldC::pushPaperDrawOverrideProtectedF( tinS& tinP , const countT idPaperP )" ,
0x000012a5 , "\0\0\0\0voidT backOldC::popPaperDrawOverrideProtectedF( tinS& tinP )" ,
0x000012a6 , "\0\0\0\0voidT backOldC::setModeFlagsF( tinS& tinP , const flagsT flagsOnP , const flagsT flagsOffP )" ,
0x000012a7 , "\0\0\0\0countT backOldC::wrapRenderF( tinS& tinP , const strokeS* const psttP , const handleC* const phCloneP , const countT* pczIdAdamSnapP )" ,
0x000012a8 , "\0\0\0\0voidT backOldC::wrapRenderOverrideF( tinS& tinP , const strokeS* const psttP , const handleC* const phCloneP , const countT* pczIdAdamSnapP , const flagsT flagsModeOnP , const flagsT flagsModeOffP )" ,
0x000012a9 , "\0\0\0\0paperOldC& backOldC::selectPaperF( tinS& tinP , const countT idCmdP , countT idPaperP )" ,
0x000012aa , "\0\0\0\0voidT backOldC::filterKeepNormalKeysF( tinS& tinP , const countT idAdamP , const boolT bFilterP )" ,
0x000012ab , "\0\0\0\0voidT backOldC::mColsRowsF( tinS& tinP , const measureT mColsP , const measureT mRowsP )" ,
0x000012ac , "\0\0\0\0voidT backOldC::setToolFlagsF( tinS& tinP , const countT idToolP , const flagsT flagsOnP , const flagsT flagsOffP )" ,
0x000012ad , "\0\0\0\0voidT backOldC::resetAllF( tinS& tinP )" ,
0x000012ae , "\0\0\0\0voidT backOldC::resetToolMousePositionFlagsF( tinS& tinP )" ,
0x000012af , "\0\0\0\0winPulpOldC::~winPulpOldC( voidT )" ,
0x000012b0 , "\0\0\0\0winPulpOldC::winPulpOldC( tinS& tinP , etherC& etherP , paperOldC& paperP , backOldC& backP , handleC& hDrawWindowP , paperToBackCBFT pPaperToBackCBFP , countT cPaperToBackArgP ) :" ,
0x000012b1 , "\0\0\0\0voidT winPulpOldC::snapF( tinS& tinP , etherC& etherP , const boolT bRestoreP , countT* const pczIdAdamP )" ,
0x000012b2 , "\0\0\0\0voidT winPulpOldC::purgeF( tinS& tinP , etherC& etherP , const flagsT flagsP )" ,
0x000012b3 , "\0\0\0\0voidT winPulpOldC::cacheF( tinS& tinP , const countT idCasteP )" ,
0x000012b4 , "\0\0\0\0voidT winPulpOldC::positionStrokingFrameIfF( tinS& tinP )" ,
0x000012b5 , "\0\0\0\0eyePulpOldC::~eyePulpOldC( voidT )" ,
0x000012b6 , "\0\0\0\0eyePulpOldC::eyePulpOldC( tinS& tinP , etherC& etherP , paperOldC& paperP , backOldC& backP , paperToBackCBFT pPaperToBackCBFP , countT cPaperToBackArgP ) :" ,
0x000012b7 , "\0\0\0\0voidT eyePulpOldC::snapF( tinS& tinP , etherC& etherP , const boolT bRestoreP , countT* const pczIdAdamP )" ,
0x000012b8 , "\0\0\0\0voidT eyePulpOldC::purgeF( tinS& tinP , etherC& etherP , const flagsT flagsP )" ,
0x000012b9 , "\0\0\0\0frPaperC::frPaperC( tinS& tinP ) :" ,
0x000012ba , "\0\0\0\0bitmapOldC::bitmapOldC( tinS& tinP , etherC& etherP , const handleC& hDrawWindowP , const countT colsP , const countT rowsP ) :" ,
0x000012bb , "\0\0\0\0bitmapOldC::bitmapOldC( tinS& tinP , etherC& etherP , const countT colsP , const countT rowsP ) :" ,
0x000012bc , "\0\0\0\0vBodyS::~vBodyS( voidT )" ,
0x000012bd , "\0\0\0\0vBodyS::vBodyS( voidT ) :" ,
0x000012be , "\0\0\0\0vBodyS& vBodyS::operator =( vBodyS& vbP )" ,
0x000012bf , "\0\0\0\0voidT vBodyS::operator <<( soulC& sP )" ,
0x000012c0 , "\0\0\0\0voidT vBodyS::operator >>( soulC& sP )" ,
0x000012c1 , "\0\0\0\0papersOldC::papersOldC( tinS& tinP , etherC& etherP , backOldC& backP , const countT cPapersP , const countT cArgP , paperToBackCBFT pPaperToBackCBFP , countT cPaperToBackArgP ) :" ,
0x000012c2 , "\0\0\0\0voidT papersOldC::ctSuffixF( tinS& tinP , etherC& etherP , const countT cArgP , paperToBackCBFT pPaperToBackCBFP , countT cPaperToBackArgP )" ,
0x000012c3 , "\0\0\0\0voidT papersOldC::dtPrefixF( tinS& tinP )" ,
0x000012c4 , "\0\0\0\0paperOldC& papersOldC::selectF( tinS& tinP , const countT idCmdP , countT idPaperP )" ,
0x000012c5 , "\0\0\0\0countT papersOldC::idPaperF( const paperOldC& paperP )" ,
0x000012c6 , "\0\0\0\0papersOldC::operator countT( voidT )" ,
0x000012c7 , "\0\0\0\0paperOldC* papersOldC::operator ()( tinS& tinP , const countT idP )" ,
0x000012c8 , "\0\0\0\0voidT papersOldC::pushRenderF( tinS& tinP , const countT idPaperP )" ,
0x000012c9 , "\0\0\0\0voidT papersOldC::popRenderF( tinS& tinP )" ,
0x000012ca , "\0\0\0\0threadC::~threadC( voidT )" ,
0x000012cb , "\0\0\0\0threadC::threadC( tinS& tinP , etherC& etThread , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , voidT* const tmFP , countT& cArgP , const flagsT flagsP ) :" ,
0x000012cc , "\0\0\0\0httpServerC::~httpServerC( voidT )" ,
0x000012cd , "\0\0\0\0httpServerC::httpServerC( tinS& tinP , httpServerC_arg1S& arg1P , httpServerC_arg2S& arg2P ) :" ,
0x000012ce , "\0\0\0\0voidT httpServerC::ct1F( tinS& tinP )" ,
0x000012cf , "\0\0\0\0voidT httpServerC::ct2F( tinS& tinP )" ,
0x000012d0 , "\0\0\0\0voidT httpServerC::ct3F( tinS& tinP )" ,
0x000012d1 , "\0\0\0\0voidT httpServerC::ct4F( tinS& tinP )" ,
0x000012d2 , "\0\0\0\0osTextT httpServerC::readRequestF( tinS& tinP , strokeS*& psttNameP , switchC& swKVP , strokeS*& psttLeverKVP , strokeS*& psttAgentP , osTextT*& postBodyP , boolT& bCloseP , socketC* psoP , const osTextT* const postEscapeP )" ,
0x000012d3 , "\0\0\0\0voidT httpServerC::storeReplyF( tinS& tinP , const countT idFormP , const strokeS* const psttUrlP , httpReplySrefC** ppRefOverrideP , const countT idSnipHttpPrefixP , const strokeS* const psttsTitleP , const strokeS* const psttsDescriptionP , const strokeS* const psttsMetaDescriptionP , const strokeS* const psttsSloganP , const strokeS* const psttsPageHelpP , const strokeS* const psttsKeywordsP , voidT* pCBFP , const strokeS* const psttP , const byteT* const pbP , const countT cbP , const countT idSnipHttpLocationP )" ,
0x000012d4 , "\0\0\0\0voidT httpServerC::getSnipF( tinS& tinP , pbRefC*& prP , const countT idSnipP )" ,
0x000012d5 , "\0\0\0\0voidT httpServerC::getReplyF( tinS& tinP , httpReplySrefC*& prP , const strokeS* const psttUrlP )" ,
0x000012d6 , "\0\0\0\0voidT httpServerC::storeReplyPrivateF( tinS& tinP , storeReplyPrivateF_argS& argP )" ,
0x000012d7 , "\0\0\0\0voidT httpServerC::storeSnipPrivateF( tinS& tinP , const countT idSnipP , const pbRefC* const prPostsP )" ,
0x000012d8 , "\0\0\0\0voidT httpServerC::storeSnipF( tinS& tinP , const countT idSnipP , const strokeS* const psttP )" ,
0x000012d9 , "\0\0\0\0voidT httpServerC::sayFieldEditF( tinS& tinP , stackC& stBodyP , countT& idBoxLathP , textC& tLabelP , textC& tKeyP , const flagsT flagsP , const countT idHelpLabelP , const countT idHelpMoreP , const strokeS* const psttValueP , const strokeS* const psttOldCol2P )" ,
0x000012da , "\0\0\0\0voidT httpServerC::sayFieldF( tinS& tinP , stackC& stBodyP , const strokeS* const psttTitleP , const strokeS* const psttP )" ,
0x000012db , "\0\0\0\0voidT httpServerC::pushSnipF( tinS& tinP , stackC& stBodyP , const countT idSnipP )" ,
0x000012dc , "\0\0\0\0voidT httpServerC::pushSnipF( tinS& tinP , stackC& stBodyP , const strokeS* const psttP ) const" ,
0x000012dd , "\0\0\0\0voidT httpServerC::pushSnipF( tinS& tinP , stackC& stBodyP , const pbRefC& rP ) const" ,
0x000012de , "\0\0\0\0voidT httpServerC::storeSnipF( tinS& tinP , const strokeS* const psttNameSnipP , const strokeS* const psttP )" ,
0x000012df , "\0\0\0\0voidT httpServerC::storeSnipPrivateF( tinS& tinP , const strokeS* const psttNameSnipP , const pbRefC* const prPostsP )" ,
0x000012e0 , "\0\0\0\0voidT httpServerC::getSnipF( tinS& tinP , pbRefC*& prP , const strokeS* const psttNameSnipP )" ,
0x000012e1 , "\0\0\0\0voidT httpServerC::pushSnipNamedF( tinS& tinP , stackC& stBodyP , const strokeS* const psttNameSnipP )" ,
0x000012e2 , "\0\0\0\0voidT httpServerC::storeSnipF( tinS& tinP , const countT idSnipP , const osTextT*& postsP )" ,
0x000012e3 , "\0\0\0\0voidT httpServerC::storeSnipF( tinS& tinP , const strokeS* const psttNameSnipP , const osTextT*& postsP )" ,
0x000012e4 , "\0\0\0\0voidT httpServerC::storeSnipF( tinS& tinP , const countT idSnipP , const textC& tP )" ,
0x000012e5 , "\0\0\0\0voidT httpServerC::storeSnipF( tinS& tinP , const strokeS* const psttNameSnipP , const textC& tP )" ,
0x000012e6 , "\0\0\0\0httpServerC_arg1S::~httpServerC_arg1S( voidT )" ,
0x000012e7 , "\0\0\0\0httpServerC_arg1S::httpServerC_arg1S( const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , etherC& etherP , const countT idPortP , countT& cArgAppP , const strokeS* const psttNameP ) :" ,
0x000012e8 , "\0\0\0\0httpServerC_arg2S::httpServerC_arg2S( voidT ) :" ,
0x000012e9 , "\0\0\0\0sessionsC::~sessionsC( voidT )" ,
0x000012ea , "\0\0\0\0sessionsC::sessionsC( tinS& tinP , etherC& etherP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP ) :" ,
0x000012eb , "\0\0\0\0sessionC& sessionsC::registerConnectionF( tinS& tinP , const nicNameC& nnPeerP , const strokeS* const psttPeerP , const strokeS* const psttUserP , const boolT bFlushP )" ,
0x000012ec , "\0\0\0\0voidT sessionsC::unregisterConnectionF( tinS& tinP , const nicNameC& nnPeerP )" ,
0x000012ed , "\0\0\0\0sessionC& sessionsC::operator ()( tinS& tinP , const nicNameC& nnPeerP , const strokeS* const psttPeerP )" ,
0x000012ee , "\0\0\0\0sessionC::~sessionC( voidT )" ,
0x000012ef , "\0\0\0\0sessionC::sessionC( tinS& tinP , etherC& etherP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , sessionsC& sessionsP , countT& idSessionLathP , const nicNameC nnPeerP , const strokeS* const psttPeerP , const strokeS* const psttUserP ) :" ,
0x000012f0 , "\0\0\0\0sessionC::operator countT( voidT ) const" ,
0x000012f1 , "\0\0\0\0voidT sessionC::touchF( tinS& tinP , const strokeS* const psttUrlP )" ,
0x000012f2 , "\0\0\0\0timeS sessionC::ageF( tinS& tinP )" ,
0x000012f3 , "\0\0\0\0timeS sessionC::idleF( tinS& tinP )" ,
0x000012f4 , "\0\0\0\0voidT sessionC::operator >>( soulC& sP )" ,
0x000012f5 , "\0\0\0\0voidT sessionC::privilegesF( tinS& tinP , const flagsT flagsP )" ,
0x000012f6 , "\0\0\0\0flagsT sessionC::privilegesF( tinS& tinP ) const" ,
0x000012f7 , "\0\0\0\0countT sessionC::cTouchF( tinS& tinP )" ,
0x000012f8 , "\0\0\0\0countT sessionC::dispenseIdF( tinS& tinP , const countT cLeverP , const boolT bPriorP )" ,
0x000012f9 , "\0\0\0\0sessionC::operator byteT*&( voidT )" ,
0x000012fa , "\0\0\0\0voidT sessionC::setEmailF( tinS& tinP , const strokeS* const psttP )" ,
0x000012fb , "\0\0\0\0voidT sessionC::getEmailF( tinS& tinP , strokeS*& psttP )" ,
0x000012fc , "\0\0\0\0voidT sessionC::setIdAccountF( tinS& tinP , const countT idAccountP )" ,
0x000012fd , "\0\0\0\0countT sessionC::getIdAccountF( tinS& tinP )" ,
0x000012fe , "\0\0\0\0voidT sessionC::setIdHeadFlavorOverrideF( tinS& tinP , const countT idP )" ,
0x000012ff , "\0\0\0\0countT sessionC::getIdHeadFlavorOverrideF( tinS& tinP )" ,
0x00001300 , "\0\0\0\0voidT sessionC::setIdAccountCommissionF( tinS& tinP , const countT idAccountP )" ,
0x00001301 , "\0\0\0\0countT sessionC::getIdAccountCommissionF( tinS& tinP )" ,
0x00001302 , "\0\0\0\0voidT sessionC::setFlagsUtilityF( tinS& tinP , const flagsT flagsP )" ,
0x00001303 , "\0\0\0\0flagsT sessionC::getFlagsUtilityF( tinS& tinP ) const" ,
0x00001304 , "\0\0\0\0plateC::~plateC( voidT )" ,
0x00001305 , "\0\0\0\0plateC& plateC::operator +=( stackC& stP )" ,
0x00001306 , "\0\0\0\0plateC& plateC::operator +=( plateC& plateP )" ,
0x00001307 , "\0\0\0\0httpReplyS::~httpReplyS( voidT )" ,
0x00001308 , "\0\0\0\0httpReplyS::httpReplyS( httpReplySrefC** ppRefOverrideP , const countT idFormP , pbRefC*& prPostBodyP , voidT* pCBFP , const countT idSnipHttpPrefixP , pbRefC*& prPostUrlP , pbRefC*& prPostTitleP , pbRefC*& prPostDescriptionP , pbRefC*& prPostMetaDescriptionP , pbRefC*& prPostSloganP , pbRefC*& prPostPageHelpP , pbRefC*& prPostKeywordsP , const countT idSnipHttpLocationP ) :" ,
0x00001309 , "\0\0\0\0httpReplySrefC httpReplyS::overrideF( tinS& tinP )" ,
0x0000130a , "\0\0\0\0adamGlobal1S::~adamGlobal1S( voidT )" ,
0x0000130b , "\0\0\0\0adamGlobal1S::adamGlobal1S( voidT ) :" ,
0x0000130c , "\0\0\0\0voidT adamGlobal1S::setIdAdamF( const countT idAdamP )" ,
0x0000130d , "\0\0\0\0voidT adamGlobal1S::registerHeartF( voidT )" ,
0x0000130e , "\0\0\0\0voidT adamGlobal1S::deregisterHeartF( voidT )" ,
0x0000130f , "\0\0\0\0sourceC::sourceC( voidT ) :" ,
0x00001310 , "\0\0\0\0const countT* sourceC::pcFileF( voidT ) const" ,
0x00001311 , "\0\0\0\0countT sourceC::idFileImmutableF( tinS& tinP , const countT idFileP ) const" ,
0x00001312 , "\0\0\0\0const dictionaryFileTitleS* sourceC::pIdTitleF( voidT ) const" ,
0x00001313 , "\0\0\0\0const osTextT* sourceC::postFileTitleF( tinS& tinP , const countT idFileP ) const" ,
0x00001314 , "\0\0\0\0countT sourceC::idFileRankF( tinS& tinP , const countT idFileImmutableP ) const" ,
0x00001315 , "\0\0\0\0countT sourceC::idFileF( tinS& tinP , const osTextT* const postFileP ) const" ,
0x00001316 , "\0\0\0\0sourceC& sourceC::sourceIF( voidT )" ,
0x00001317 , "\0\0\0\0processGlobal1S::~processGlobal1S( voidT )" ,
0x00001318 , "\0\0\0\0processGlobal1S::processGlobal1S( voidT ) :" ,
0x00001319 , "\0\0\0\0processGlobal2S::processGlobal2S( voidT )" ,
0x0000131a , "\0\0\0\0adamGlobal2S::adamGlobal2S( voidT ) " ,
0x0000131b , "\0\0\0\0adamGlobal3S::adamGlobal3S( tinS& tinP ) :" ,
0x0000131c , "\0\0\0\0ag1_backOldC_C::ag1_backOldC_C( voidT ) " ,
0x0000131d , "\0\0\0\0ag1_bitsC_C::ag1_bitsC_C( voidT ) :" ,
0x0000131e , "\0\0\0\0ag1_etherC_C::ag1_etherC_C( voidT ) :" ,
0x0000131f , "\0\0\0\0ag1_grabNotesS_C::ag1_grabNotesS_C( voidT ) :" ,
0x00001320 , "\0\0\0\0ag1_grabC_C::ag1_grabC_C( voidT ) " ,
0x00001321 , "\0\0\0\0ag1_lexC_C::ag1_lexC_C( voidT ) " ,
0x00001322 , "\0\0\0\0ag1_masterOldC_C::ag1_masterOldC_C( voidT ) :" ,
0x00001323 , "\0\0\0\0ag1_neverUsedC_C::ag1_neverUsedC_C( voidT ) " ,
0x00001324 , "\0\0\0\0ag1_paperOldC_C::ag1_paperOldC_C( voidT ) :" ,
0x00001325 , "\0\0\0\0ag1_pulpOldC_C::ag1_pulpOldC_C( voidT ) :" ,
0x00001326 , "\0\0\0\0ag1_relayC_C::ag1_relayC_C( voidT ) " ,
0x00001327 , "\0\0\0\0ag1_rootWordC_C::ag1_rootWordC_C( voidT ) " ,
0x00001328 , "\0\0\0\0ag1_socketC_C::ag1_socketC_C( voidT ) :" ,
0x00001329 , "\0\0\0\0ag3_socketC_C::ag3_socketC_C( tinS& tinP ) :" ,
0x0000132a , "\0\0\0\0ag1_soulC_C::ag1_soulC_C( voidT ) :" ,
0x0000132b , "\0\0\0\0ag1_soixlOldSpaceC_C::ag1_soixlOldSpaceC_C( voidT ) " ,
0x0000132c , "\0\0\0\0ag1_stackC_C::ag1_stackC_C( voidT ) " ,
0x0000132d , "\0\0\0\0ag1_strokeS_C::ag1_strokeS_C( voidT ) :" ,
0x0000132e , "\0\0\0\0ag1_switchC_C::ag1_switchC_C( voidT ) " ,
0x0000132f , "\0\0\0\0ag1_tableC_C::ag1_tableC_C( voidT ) :" ,
0x00001330 , "\0\0\0\0ag1_thirdC_C::ag1_thirdC_C( voidT ) :" ,
0x00001331 , "\0\0\0\0ag1_thugC_C::ag1_thugC_C( voidT ) " ,
0x00001332 , "\0\0\0\0ag1_windowOldC_C::ag1_windowOldC_C( voidT ) :" ,
0x00001333 , "\0\0\0\0adamGlobal4S::adamGlobal4S( voidT ) :" ,
0x00001334 , "\0\0\0\0adamGlobal5S::adamGlobal5S( voidT ) :" ,
0x00001335 , "\0\0\0\0processGlobal3S::~processGlobal3S( voidT )" ,
0x00001336 , "\0\0\0\0processGlobal3S::processGlobal3S( voidT ) :" ,
0x00001337 , "\0\0\0\0processGlobal4S::processGlobal4S( tinS& tinP ) :" ,
0x00001338 , "\0\0\0\0processGlobal5S::processGlobal5S( voidT ) :" ,
0x00001339 , "\0\0\0\0processGlobal6S::processGlobal6S( voidT ) :" ,
0x0000133a , "\0\0\0\0processGlobal7S::processGlobal7S( voidT ) :" ,
0x0000133b , "\0\0\0\0adamGlobal6S::adamGlobal6S( tinS& tinP ) :" ,
0x0000133c , "\0\0\0\0adamGlobal6S::~adamGlobal6S( voidT )" ,
0x0000133d , "\0\0\0\0backGrabUniverseC::~backGrabUniverseC( voidT )" ,
0x0000133e , "\0\0\0\0backGrabUniverseC::backGrabUniverseC( tinS& tinP , const countT idGroupP ) :" ,
0x0000133f , "\0\0\0\0marketC::~marketC( voidT )" ,
0x00001340 , "\0\0\0\0marketC::marketC( tinS& tinP , napkinC& napBackP , const countT idGoodP ) :" ,
0x00001341 , "\0\0\0\0voidT marketC::adjustPriceF( tinS& tinP , etherC& etherP )" ,
0x00001342 , "\0\0\0\0boolT marketC::equilibriumF( tinS& tinP , measure04T& epP , measure04T& eqP , const measure04T s1pP , const measure04T s1qP , const measure04T s2pP , const measure04T s2qP , const measure04T d1pP , const measure04T d1qP , const measure04T d2pP , const measure04T d2qP )" ,
0x00001343 , "\0\0\0\0measure04T marketC::priceF( tinS& tinP , etherC& etherP )" ,
0x00001344 , "\0\0\0\0voidT marketC::sellF( tinS& tinP , etherC& etherP , measure04T& mMoneyP , measure04T& mQuantityP , const flagsT flagsP , const measure04T mPriceMinP , const measure04T mPriceMaxP )" ,
0x00001345 , "\0\0\0\0voidT marketC::buyF( tinS& tinP , etherC& etherP , measure04T& mMoneyP , measure04T& mQuantityP , const flagsT flagsP , const measure04T mPriceMinP , const measure04T mPriceMaxP )" ,
0x00001346 , "\0\0\0\0voidT marketC::mannaF( tinS& tinP , const measure04T mMannaP )" ,
0x00001347 , "\0\0\0\0adamC::~adamC( voidT )" ,
0x00001348 , "\0\0\0\0adamC::adamC( tinS& tinP , etherC& etherP ) :" ,
0x00001349 , "\0\0\0\0marketC& adamC::marketF( tinS& tinP , const countT idGoodP )" ,
0x0000134a , "\0\0\0\0measure04T adamC::priceF( tinS& tinP , const countT idGoodP )" ,
0x0000134b , "\0\0\0\0voidT adamC::sellF( tinS& tinP , const countT idGoodP , measure04T& mQuantityP , const flagsT flagsP , const measure04T mPriceMinP , const measure04T mPriceMaxP )" ,
0x0000134c , "\0\0\0\0voidT adamC::buyF( tinS& tinP , const countT idGoodP , measure04T& mQuantityP , const flagsT flagsP , const measure04T mPriceMinP , const measure04T mPriceMaxP )" ,
0x0000134d , "\0\0\0\0voidT adamC::mannaF( tinS& tinP , const measure04T mMannaP )" ,
0x0000134e , "\0\0\0\0x0SwitchStackC::~x0SwitchStackC( voidT )" ,
0x0000134f , "\0\0\0\0x0SwitchStackC::x0SwitchStackC( tinS& tinP , napkinC& napBackP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const flagsT flagsSwitchP , const flagsT flagsStackP , const countT idTypeP )" ,
0x00001350 , "\0\0\0\0countT& x0SwitchStackC::leverF( tinS& tinP )" ,
0x00001351 , "\0\0\0\0x0SwitchStackC::operator switchStackC&( voidT )" ,
0x00001352 , "\0\0\0\0xSwitchStackC::xSwitchStackC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const strokeS* const psttP , const flagsT flagsSwitchP , const flagsT flagsStackP , const countT idTypeP ) :" ,
0x00001353 , "\0\0\0\0countT& xSwitchStackC::leverF( tinS& tinP )" ,
0x00001354 , "\0\0\0\0xSwitchStackC::operator switchStackC&( voidT )" ,
0x00001355 , "\0\0\0\0rangeC::rangeC( tinS& tinP , countT* const pcQueuedP , const flagsT flagsP ) :" ,
0x00001356 , "\0\0\0\0const countT& rangeC::offOpenF( tinS& tinP ) const" ,
0x00001357 , "\0\0\0\0voidT rangeC::pOffOpenPeerF( tinS& tinP , const countT* const pOffOpenPeerP )" ,
0x00001358 , "\0\0\0\0countT rangeC::openF( tinS& tinP , boolT& bAbortedP , const boolT& bQuitP , const countT cSlotsMinusWoP )" ,
0x00001359 , "\0\0\0\0voidT rangeC::closeF( tinS& tinP , const countT offBeginP , const countT cSlotsMinusWoP , countT cQueuedP )" ,
0x0000135a , "\0\0\0\0puseC::~puseC( voidT )" ,
0x0000135b , "\0\0\0\0puseC::puseC( tinS& tinP , const osTextT* const postNameP , const flagsT flagsP , const countT idStateSpaceP , const countT expCbSlotMinP , const countT expCbSlotMaxP , const countT* const pczHintPreallocationP , const countT idMemorySpaceP ) :" ,
0x0000135c , "\0\0\0\0puseC::puseC( tinS& tinP , const countT idPoolP ) :" ,
0x0000135d , "\0\0\0\0puseC::puseC( puseC& puseP ) :" ,
0x0000135e , "\0\0\0\0puseC::operator poolC&( voidT )" ,
0x0000135f , "\0\0\0\0puseC::puseC( voidT ) :" ,
0x00001360 , "\0\0\0\0puseC::puseC( tinS& tinP , poolC& poolP ) :" ,
0x00001361 , "\0\0\0\0aptC::aptC( tinS& tinP , const byteT* const pbP ) :" ,
0x00001362 , "\0\0\0\0aptC::aptC( const countT idAptP ) :" ,
0x00001363 , "\0\0\0\0aptC::operator countT( voidT ) const" ,
0x00001364 , "\0\0\0\0aptC::operator byteT*( voidT ) const" ,
0x00001365 , "\0\0\0\0voidT aptC::operator =( byteT* const pbAptP )" ,
0x00001366 , "\0\0\0\0aptC::aptC( tinS& tinP , const listingC* const pAptP ) :" ,
0x00001367 , "\0\0\0\0aptC::operator countT&( voidT )" ,
0x00001368 , "\0\0\0\0voidT aptC::operator =( listingC* const plAptP )" ,
0x00001369 , "\0\0\0\0aptNameOldS::aptNameOldS( tinS& tinP , etherC& etherP , const osTextT* const postTitleP , const osTextT* const postDescriptionP , const countT idTypeP , const countT idSubtypeP , const countT idSerialP ) :" ,
0x0000136a , "\0\0\0\0tellS::tellS( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const countT idTypeP , const countT cbNoteP ) :" ,
0x0000136b , "\0\0\0\0ipMapPortS::ipMapPortS( voidT ) :" ,
0x0000136c , "\0\0\0\0ipMapHomeS::ipMapHomeS( tinS& tinP ) :" ,
0x0000136d , "\0\0\0\0genSoixlOldWordDefs, genSoixlOldWordProtos (included) part 4" ,
0x0000136e , "\0\0\0\0sexHeadS::~sexHeadS( voidT )" ,
0x0000136f , "\0\0\0\0sexHeadS::sexHeadS( tinS& tinP , const countT expCbSlotP , const countT expSlotsP , const osTextT* const postP , const flagsT flagsCtP ) :" ,
0x00001370 , "\0\0\0\0voidT sexHeadS::glassF( tinS& tinP , strokeS*& psttP ) const" ,
0x00001371 , "\0\0\0\0voidT sexHeadS::traceF( tinS& tinP ) const" ,
0x00001372 , "\0\0\0\0sexC::~sexC( voidT )" ,
0x00001373 , "\0\0\0\0sexC::sexC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const countT idLineNewP , const countT idiFileNewP , const osTextT* const postNameP , const countT expCbSlotP , const countT expSlotsP , const flagsT flagsP , const countT idStateSpaceP , countT idMemorySpaceP , poolC* const pPoolContainsMeP ) :" ,
0x00001374 , "\0\0\0\0byteT* sexC::newF( tinS& tinP , const countT idLineP , const countT idiFileP )" ,
0x00001375 , "\0\0\0\0voidT sexC::operator ()( tinS& tinP , byteT*& pbP )" ,
0x00001376 , "\0\0\0\0boolT sexC::operator !( voidT ) const" ,
0x00001377 , "\0\0\0\0dropNoteS* sexC::pDropNoteF( tinS& tinP , const byteT* const pbP ) const" ,
0x00001378 , "\0\0\0\0byteT* sexC::operator []( const countT offP ) const" ,
0x00001379 , "\0\0\0\0countT sexC::operator []( const byteT* pbP ) const" ,
0x0000137a , "\0\0\0\0voidT sexC::peekF( tinS& tinP , const sexHeadS*& pzMetaHeadP , const byteT*& pbzMetaBitsOwnedP , const dropNoteS*& pzMetaNotesP , const byteT*& pbDataP ) const" ,
0x0000137b , "\0\0\0\0voidT sexC::ctFilesF( tinS& tinP , const osTextT* const postNameP , const countT expCbSlotP , const countT expSlotsP , const countT idStateSpaceP )" ,
0x0000137c , "\0\0\0\0voidT sexC::flushF( tinS& tinP )" ,
0x0000137d , "\0\0\0\0slotsC::~slotsC( voidT )" ,
0x0000137e , "\0\0\0\0slotsC::slotsC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const countT idLineNewP , const countT idiFileNewP , const osTextT* const postNameP , const countT poolC_cBitsExpCbSlotP , const countT expCbSlotP , const flagsT flagsP , const countT idStateSpaceP , countT idMemorySpaceP , poolC* const pPoolContainsMeP ) :" ,
0x0000137f , "\0\0\0\0slotsC::operator byteT*( voidT )" ,
0x00001380 , "\0\0\0\0voidT slotsC::operator ()( tinS& tinP , byteT*& pbP )" ,
0x00001381 , "\0\0\0\0boolT slotsC::operator !( voidT )" ,
0x00001382 , "\0\0\0\0dropNoteS* slotsC::pDropNoteF( tinS& tinP , const byteT* const pbP )" ,
0x00001383 , "\0\0\0\0countT slotsC::operator []( const byteT* pbP )" ,
0x00001384 , "\0\0\0\0byteT* slotsC::operator []( const countT offP )" ,
0x00001385 , "\0\0\0\0voidT slotsC::walkF( tinS& tinP , slotsWalkCBFT pSlotsWalkCBFP , countT& cArgP )" ,
0x00001386 , "\0\0\0\0voidT slotsC::flushF( tinS& tinP )" ,
0x00001387 , "\0\0\0\0voidT slotsC::glassF( tinS& tinP , strokeS*& psttP ) const" ,
0x00001388 , "\0\0\0\0voidT slotsC::deleteEmptiesIfF( tinS& tinP )" ,
0x00001389 , "\0\0\0\0byteT* slotsC::newF( tinS& tinP , const countT idLineP , const countT idiFileP , const flagsT flagsP )" ,
0x0000138a , "\0\0\0\0countT slotsC::deleteTopSexF( tinS& tinP )" ,
0x0000138b , "\0\0\0\0voidT slotsC::makeSexF( tinS& tinP , const countT expSlotsP )" ,
0x0000138c , "\0\0\0\0poolC::~poolC( voidT )" ,
0x0000138d , "\0\0\0\0poolC::poolC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const osTextT* const postNameP , const flagsT flagsP , const countT idStateSpaceP , const countT expCbSlotMinP , const countT expCbSlotMaxP , const countT* pczHintPreallocationP , countT idMemorySpaceP ) :" ,
0x0000138e , "\0\0\0\0voidT poolC::newF( tinS& tinP , const countT idLineP , const countT idiFileP , byteT*& pbP , const countT cbP , const flagsT flagsP )" ,
0x0000138f , "\0\0\0\0voidT poolC::operator ()( tinS& tinP , byteT*& pbP )" ,
0x00001390 , "\0\0\0\0boolT poolC::operator !( voidT ) const" ,
0x00001391 , "\0\0\0\0dropNoteS* poolC::pDropNoteF( tinS& tinP , const byteT* const pbP )" ,
0x00001392 , "\0\0\0\0countT poolC::operator []( const byteT* pbP )" ,
0x00001393 , "\0\0\0\0byteT* poolC::operator []( const countT idAptP )" ,
0x00001394 , "\0\0\0\0const osTextT* poolC::postNameF( tinS& tinP ) const" ,
0x00001395 , "\0\0\0\0voidT poolC::walkF( tinS& tinP , slotsWalkCBFT pSlotsWalkCBFP , countT& cArgP )" ,
0x00001396 , "\0\0\0\0voidT poolC::ctFaceF( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const countT idStateSpaceP )" ,
0x00001397 , "\0\0\0\0voidT poolC::ctFilesF( tinS& tinP , const osTextT* const postNameP , const countT idStateSpaceP )" ,
0x00001398 , "\0\0\0\0voidT poolC::reportF( tinS& tinP , soulC& soulP )" ,
0x00001399 , "\0\0\0\0voidT poolC::flushF( tinS& tinP )" ,
0x0000139a , "\0\0\0\0voidT poolC::reportF( tinS& tinP , const countT*& pczLeverP , switchC& swTallyP )" ,
0x0000139b , "\0\0\0\0voidT poolC::reportF( tinS& tinP )" ,
0x0000139c , "\0\0\0\0voidT poolC::glassF( tinS& tinP , strokeS*& psttP ) const" ,
0x0000139d , "\0\0\0\0voidT poolC::deleteEmptiesIfF( tinS& tinP )" ,
0x0000139e , "\0\0\0\0fileC::~fileC( voidT )" ,
0x0000139f , "\0\0\0\0voidT fileC::ctF( tinS& tinP , const osTextT* const postP , const countT idAccessP , const countT idShareP , const flagsT flagsDetailsP , const countT idHowP , const flagsT flagsAttributeP , const countT cTriesP )" ,
0x000013a0 , "\0\0\0\0fileC::fileC( tinS& tinP , const osTextT* const postP , const countT idAccessP , const countT idShareP , const flagsT flagsDetailsP , const countT idHowP , const flagsT flagsAttributeP , const flagsT flagsP , const countT cTriesP , const osTextT* const postZipP ) :" ,
0x000013a1 , "\0\0\0\0fileC::fileC( tinS& tinP , const strokeS* const psttP , const countT idAccessP , const countT idShareP , const flagsT flagsDetailsP , const countT idHowP , const flagsT flagsAttributeP , const flagsT flagsP , const countT cTriesP , const osTextT* const postZipP ) :" ,
0x000013a2 , "\0\0\0\0countT fileC::idOpenResultF( tinS& tinP  )" ,
0x000013a3 , "\0\0\0\0fileC::operator const handleC&( voidT )" ,
0x000013a4 , "\0\0\0\0fileC::operator const handleC*( voidT )" ,
0x000013a5 , "\0\0\0\0grabitC::~grabitC( voidT )" ,
0x000013a6 , "\0\0\0\0grabitC::grabitC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , byteT*    pbP             , const countT  ifcIdBitP , grabitC& grabitNUP , countT* const pcKeyP , countT* const pcGrabberOsTidP , countT* const pcGrabberRecurseP , const flagsT flagsP , const countT msNapP , const countT idGrabLayerP ) :" ,
0x000013a7 , "\0\0\0\0grabitC::grabitC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , byteT&    bP              , const countT  ifcIdBitP , grabitC& grabitNUP , countT* const pcKeyP , countT* const pcGrabberOsTidP , countT* const pcGrabberRecurseP , const flagsT flagsP , const countT msNapP , const countT idGrabLayerP ) :" ,
0x000013a8 , "\0\0\0\0grabitC::grabitC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , countT&   cP              , const countT  ifcIdBitP , grabitC& grabitNUP , countT* const pcKeyP , countT* const pcGrabberOsTidP , countT* const pcGrabberRecurseP , const flagsT flagsP , const countT msNapP , const countT idGrabLayerP ) :" ,
0x000013a9 , "\0\0\0\0voidT grabitC::grabF( tinS& tinP , const countT idLineP , const countT idiFileP , const byteT* const pbBitsP )" ,
0x000013aa , "\0\0\0\0voidT grabitC::ungrabF( tinS& tinP )" ,
0x000013ab , "\0\0\0\0grabitC::grabitC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , listingC& aptP                                      , grabitC& grabitNUP , countT* const pcKeyP , countT* const pcGrabberOsTidP , countT* const pcGrabberRecurseP , const flagsT flagsP , const countT msNapP , const countT idGrabLayerP ) :" ,
0x000013ac , "\0\0\0\0grabitC::operator byteT&( voidT )" ,
0x000013ad , "\0\0\0\0voidT grabitC::aimF( tinS& tinP , flagsT flagsMaskP , byteT* const pbP , const countT ifcIdBitP , countT* const pcGrabberOsTidP , countT* const pcGrabberRecurseP )" ,
0x000013ae , "\0\0\0\0voidT grabitC::resetF( tinS& tinP )" ,
0x000013af , "\0\0\0\0voidT grabitC::ctCheckF( voidT )" ,
0x000013b0 , "\0\0\0\0listingC::~listingC( voidT )" ,
0x000013b1 , "\0\0\0\0listingC::listingC( tinS& tinP , const listC& listDadP , const flagsT flagsP ) :" ,
0x000013b2 , "\0\0\0\0voidT listingC::openF( tinS& tinP , handleC& hListP , const countT* const pczNameDadP , countT idGrabLayerP )" ,
0x000013b3 , "\0\0\0\0sCountT listingC::operator -( const listingC& lP ) const" ,
0x000013b4 , "\0\0\0\0countT listingC::cRefDatumF( voidT ) const" ,
0x000013b5 , "\0\0\0\0listingC::listingC( tinS& tinP , const flagsT flagsP ) :" ,
0x000013b6 , "\0\0\0\0countT listingC::nameF( sCountT idP ) const" ,
0x000013b7 , "\0\0\0\0countT listingC::nameF( tinS& tinP , countT*& pczNameP ) const" ,
0x000013b8 , "\0\0\0\0listC::~listC( voidT )" ,
0x000013b9 , "\0\0\0\0listC::listC( tinS& tinP , const listC& listDadP , const countT idNameP , const flagsT flagsP ) :" ,
0x000013ba , "\0\0\0\0flagsT listC::walkF( tinS& tinP , const countT idGrabLayerP )" ,
0x000013bb , "\0\0\0\0listC::listC( tinS& tinP , const countT idNameP , const flagsT flagsP ) :" ,
0x000013bc , "\0\0\0\0countT listC::nameF( sCountT idP ) const" ,
0x000013bd , "\0\0\0\0countT listC::nameF( tinS& tinP , countT*& pczNameP ) const" ,
0x000013be , "\0\0\0\0flagsT listC::resetIndexBitsIF( tinS& tinP , handleC& hListP , const flagsT flagsP , const countT idGrabLayerP )" ,
0x000013bf , "\0\0\0\0datumC::datumC( byteT& flagsiP , byteT& idTypeP , const byteT idTypeDerivedP , const listingC& listingP )" ,
0x000013c0 , "\0\0\0\0voidT datumC::indexF( tinS& tinP )" ,
0x000013c1 , "\0\0\0\0voidT datumC::unIndexF( tinS& tinP , const flagsT flagsP )" ,
0x000013c2 , "\0\0\0\0datum_countT_C::~datum_countT_C( voidT )" ,
0x000013c3 , "\0\0\0\0datum_countT_C::datum_countT_C( tinS& tinP , byteT& flagsiP , byteT& idTypeP , const countT valueP , const listingC& listingP ) :" ,
0x000013c4 , "\0\0\0\0datum_countT_C::operator countT*( voidT ) const" ,
0x000013c5 , "\0\0\0\0listing_countT_C::~listing_countT_C( voidT )" ,
0x000013c6 , "\0\0\0\0listing_countT_C::listing_countT_C( tinS& tinP , const listC& listDadP , const countT valueP ) :" ,
0x000013c7 , "\0\0\0\0datum_blob_C::~datum_blob_C( voidT )" ,
0x000013c8 , "\0\0\0\0datum_blob_C::datum_blob_C( tinS& tinP , byteT& flagsiP , byteT& idTypeP , const byteT* const pbP , const countT cbP , const listingC& listingP , const countT idLineNewP , const countT idiFileNewP ) :" ,
0x000013c9 , "\0\0\0\0datum_blob_C::operator byteT*( voidT ) const" ,
0x000013ca , "\0\0\0\0voidT datum_blob_C::assignF( tinS& tinP , const byteT* const pbP , const countT cbP )" ,
0x000013cb , "\0\0\0\0listing_blob_C::~listing_blob_C( voidT )" ,
0x000013cc , "\0\0\0\0listing_blob_C::listing_blob_C( tinS& tinP , const listC& listDadP , const countT idLineNewP , const countT idiFileNewP , const byteT* const pbP , const countT cbP ) :" ,
0x000013cd , "\0\0\0\0voidT listing_blob_C::assignF( tinS& tinP , const byteT* const pbP , const countT cbP )" ,
0x000013ce , "\0\0\0\0list_countT_C::~list_countT_C( voidT )" ,
0x000013cf , "\0\0\0\0list_countT_C::list_countT_C( tinS& tinP , const listC& listDadP , const countT idNameP , const countT valueP ) :" ,
0x000013d0 , "\0\0\0\0list_blob_C::~list_blob_C( voidT )" ,
0x000013d1 , "\0\0\0\0list_blob_C::list_blob_C( tinS& tinP , const listC& listDadP , const countT idNameP , const countT idLineNewP , const countT idiFileNewP , const byteT* const pbP , const countT cbP ) :" ,
0x000013d2 , "\0\0\0\0voidT list_blob_C::assignF( tinS& tinP , const byteT* const pbP , const countT cbP )" ,
0x000013d3 , "\0\0\0\0listWalkArgOldS::listWalkArgOldS( tinS& tinP ) :" ,
0x000013d4 , "\0\0\0\0baseGrabC::~baseGrabC( voidT )" ,
0x000013d5 , "\0\0\0\0baseGrabC::baseGrabC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const countT idTypeP , const flagsT flagsP , const countT idGrabLayerP )" ,
0x000013d6 , "\0\0\0\0voidT baseGrabC::formatF( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const countT idTypeP , const flagsT flagsP , const countT idGrabLayerP )" ,
0x000013d7 , "\0\0\0\0voidT baseGrabC::registerBegunF( tinS& tinP , const countT idLineP , const countT idiFileP , const flagsT flagsP )" ,
0x000013d8 , "\0\0\0\0voidT baseGrabC::registerDoneF( tinS& tinP , const countT idLineP , const countT idiFileP )" ,
0x000013d9 , "\0\0\0\0voidT baseGrabC::unregisterF( tinS& tinP )" ,
0x000013da , "\0\0\0\0boolT baseGrabC::isRegisteredF( tinS& tinP )" ,
0x000013db , "\0\0\0\0tellInfoAdamFiredS::~tellInfoAdamFiredS( voidT )" ,
0x000013dc , "\0\0\0\0tellInfoAdamFiredS::tellInfoAdamFiredS( voidT ) :" ,
0x000013dd , "\0\0\0\0subaccountS::~subaccountS( voidT )" ,
0x000013de , "\0\0\0\0subaccountS::subaccountS( tinS& tinP , etherC& etherP , const countT idAccP , countT& idSubP , flagsT flagsP ) :" ,
0x000013df , "\0\0\0\0subaccountS::subaccountS( tinS& tinP , etherC& etherP , const countT idAccP , countT& idSubP , const strokeS* const psttTitleP , const strokeS* const psttNameInP , const strokeS* const psttNameOutP , const flagsT flagsModeP , const countT idModeP , const flagsT flagsMemberOfP ) :" ,
0x000013e0 , "\0\0\0\0accountS::~accountS( voidT )" ,
0x000013e1 , "\0\0\0\0accountS::accountS( tinS& tinP , etherC& etherP , const countT idAccP , flagsT flagsThis1P , flagsT flagsThis2P ) :" ,
0x000013e2 , "\0\0\0\0accountS::accountS( tinS& tinP , etherC& etherP , const countT idAccP , const flagsT flagsModeP , const strokeS* const psttAddressNameP , const strokeS* const psttAddressStreetP , const strokeS* const psttAddressCityP , const strokeS* const psttAddressStateP , const strokeS* const psttAddressCountryCodeP , const strokeS* const psttAddressZipP , const strokeS* const psttAddressCountryP , const strokeS* const psttAddressStatusP , const strokeS* const psttFirstNameP , const strokeS* const psttLastNameP , const strokeS* const psttResidenceCountryP , const strokeS* const psttZipAtP , const strokeS* const psttCharsetP , const strokeS* const psttPaypalPayerEmailP , const strokeS* const psttPaypalPayerIdP , const strokeS* const psttPaypalPayerStatusP , const strokeS* const psttPaypalProtectionEligibilityP , const strokeS* const psttDirectoryGreetingP , const strokeS* const psttHelloGreetingP ) :" ,
0x000013e3 , "\0\0\0\0depositS::~depositS( voidT )" ,
0x000013e4 , "\0\0\0\0depositS::depositS( tinS& tinP , countT idAccBucketOwnerP , countT idBucketP , countT idProductP , countT idAccDepositorP , countT* pczNoteP , countT timeT1P , sCountT timeT2P , countT idDepositP , countT idAccCommissionP , countT moneyT1P , sCountT moneyT2P ) :" ,
0x000013e5 , "\0\0\0\0stkIdSubC::stkIdSubC( tinS& tinP , const countT idAccP ) :" ,
0x000013e6 , "\0\0\0\0bucketTotalC::bucketTotalC( tinS& tinP , countT idAccBucketOwnerP , countT idBucketP , countT idProductP , countT idAccDepositorP , countT* pczNoteP , countT timeT1P , sCountT timeT2P , countT idAccCommissionP ) :" ,
0x000013e7 , "\0\0\0\0bucketDetailC::~bucketDetailC( voidT )" ,
0x000013e8 , "\0\0\0\0bucketDetailC::bucketDetailC( tinS& tinP , countT idAccBucketOwnerP , countT idBucketP , countT idProductP , countT idAccDepositorP , countT* pczNoteP , countT timeT1P , sCountT timeT2P , countT idAccCommissionP ) :" ,
0x000013e9 , "\0\0\0\0depositDetailS::~depositDetailS( voidT )" ,
0x000013ea , "\0\0\0\0depositDetailS::depositDetailS( tinS& tinP )" ,
0x000013eb , "\0\0\0\0voidT depositDetailS::psttF( tinS& tinP , etherC& etherP , strokeS*& psttP )" ,
0x000013ec , "\0\0\0\0bookHeadS::bookHeadS( const countT cbBodyP , flagsT flagsP ) :" ,
0x000013ed , "\0\0\0\0book0C::book0C( tinS& tinP , byteT* const pbP , const countT cbP , const flagsT flagsP , const byteT bFillP ) :" ,
0x000013ee , "\0\0\0\0voidT book0C::provisionF( tinS& tinP , byteT* const pbP , const countT cbP , const flagsT flagsP , const byteT bFillP )" ,
0x000013ef , "\0\0\0\0countT book0C::writeF( tinS& tinP , flagsT& flagsResultP , const byteT* const pb1P , countT& cb1P , const byteT* const pb2P , countT& cb2P , const flagsT flagsP , countT* const pcOffWroteP )" ,
0x000013f0 , "\0\0\0\0book0C::operator bookHeadS&( voidT )" ,
0x000013f1 , "\0\0\0\0voidT book0C::readF( tinS& tinP , const byteT*& pbP , countT& cbP , countT& offP ) const" ,
0x000013f2 , "\0\0\0\0voidT book0C::purgeF( tinS& tinP )" ,
0x000013f3 , "\0\0\0\0voidT book0C::setF( tinS& tinP , const byteT bFillP )" ,
0x000013f4 , "\0\0\0\0bookC::~bookC( voidT )" ,
0x000013f5 , "\0\0\0\0bookC::bookC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const osTextT* const postP , const countT idStateSpaceP , const flagsT flagsP , countT cbP , const byteT bFillP , const countT idMemorySpaceP ) :" ,
0x000013f6 , "\0\0\0\0voidT bookC::ctFileF( tinS& tinP , const osTextT* const postNameP , const countT idStateSpaceP , countT idMemorySpaceP )" ,
0x000013f7 , "\0\0\0\0booksC::~booksC( voidT )" ,
0x000013f8 , "\0\0\0\0booksC::booksC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const osTextT* const postP , const countT idStateSpaceP , const flagsT flagsP , const countT cbP , const countT cKeepInactiveP , const byteT bFillP , byteT* const pbBooksNoPuseBackP , const countT cbBooksNoPuseBackP , const countT idMemorySpaceP , const boolT* pbQuitP ) :" ,
0x000013f9 , "\0\0\0\0monitorS::monitorS( tinS& tinP , const countT idThreadP ) :" ,
0x000013fa , "\0\0\0\0countT booksC::writeF( tinS& tinP , const byteT* pb1P , countT cb1P , const byteT* pb2P , countT cb2P , const flagsT flagsP , handleC* const phWroteP /*U::, countT** ppcpIdAptP*/ )" ,
0x000013fb , "\0\0\0\0boolT booksC::readF( tinS& tinP , const byteT*& pbP , countT& cbP , handleC& handleP , const flagsT flagsP , const boolT* pbQuitP , handleC* const phCursorP , const countT idCursorP )" ,
0x000013fc , "\0\0\0\0countT booksC::writeF( tinS& tinP , handle0111C& hJotP , const byteT* const pb1P , const countT cb1P , const byteT* const pb2P , const countT cb2P , const flagsT flagsP )" ,
0x000013fd , "\0\0\0\0boolT booksC::readF( tinS& tinP , const byteT*& pbP , countT& cbP , handle0111C& hJotP , const flagsT flagsP , const boolT* pbQuitP , handleC* const phCursorP , const countT idCursorP )" ,
0x000013fe , "\0\0\0\0countT booksC::writeF( tinS& tinP , handle0011C& hJotP , const byteT* const pb1P , const countT cb1P , const byteT* const pb2P , const countT cb2P , const flagsT flagsP )" ,
0x000013ff , "\0\0\0\0boolT booksC::readF( tinS& tinP , const byteT*& pbP , countT& cbP , handle0011C& hJotP , const flagsT flagsP , const boolT* pbQuitP , handleC* const phCursorP , const countT idCursorP )" ,
0x00001400 , "\0\0\0\0voidT booksC::setBookNameIdF( tinS& tinP , const flagsT flagsP , const countT* const pcpIdBookWantP , const boolT* pbQuitP )" ,
0x00001401 , "\0\0\0\0voidT booksC::selectBookF( tinS& tinP , const flagsT flagsP , const countT* const pcpIdBookWantP , const boolT* pbQuitP )" ,
0x00001402 , "\0\0\0\0voidT booksC::cbEachBookF( tinS& tinP , countT*& pcpIdBookSizePairsP )" ,
0x00001403 , "\0\0\0\0voidT booksC::readF( tinS& tinP , pageC& pageP , handleC& handleP , const flagsT flagsP , const boolT* pbQuitP , handleC* const phCursorP , const countT idCursorP )" ,
0x00001404 , "\0\0\0\0voidT booksC::readF( tinS& tinP , pageC& pageP , handle0111C& hJotP , const flagsT flagsP , const boolT* pbQuitP , handleC* const phCursorP , const countT idCursorP )" ,
0x00001405 , "\0\0\0\0voidT booksC::readF( tinS& tinP , pageC& pageP , handle0011C& hJotP , const flagsT flagsP , const boolT* pbQuitP , handleC* const phCursorP , const countT idCursorP )" ,
0x00001406 , "\0\0\0\0voidT booksC::setF( tinS& tinP , const byteT bFillP )" ,
0x00001407 , "\0\0\0\0voidT booksC::idBookMinMaxF( tinS& tinP , countT*& pcpIdBookMinP , countT*& pcpIdBookMaxP , const flagsT flagsP , const boolT* pbQuitP )" ,
0x00001408 , "\0\0\0\0voidT booksC::setPcpIdBookWantF( tinS& tinP , const flagsT flagsP , const countT* const pcpIdBookWantP , const boolT* pbQuitP )" ,
0x00001409 , "\0\0\0\0voidT booksC::touchAllBooksF( tinS& tinP , const boolT* pbQuitP )" ,
0x0000140a , "\0\0\0\0doC::~doC( voidT )" ,
0x0000140b , "\0\0\0\0doC::doC( const countT idDoP , const countT cArgP ) :" ,
0x0000140c , "\0\0\0\0tinArgS::tinArgS( tinS& tinP )" ,
0x0000140d , "\0\0\0\0voidT tinArgS::clearF( tinS& tinP , boolT bAllP )" ,
0x0000140e , "\0\0\0\0voidT tinArgS::saveF( tinS& tinP , byteT* pbP , countT cbP ) const" ,
0x0000140f , "\0\0\0\0voidT tinArgS::restoreF( tinS& tinP , byteT* pbP , countT cbP )" ,
0x00001410 , "\0\0\0\0datum_countTstrz_C::~datum_countTstrz_C( voidT )" ,
0x00001411 , "\0\0\0\0datum_countTstrz_C::datum_countTstrz_C( tinS& tinP , byteT& flagsiP , byteT& idTypeP , const countT* const pcP , const listingC& listingP ) :" ,
0x00001412 , "\0\0\0\0datum_countTstrz_C::operator countT*( voidT ) const" ,
0x00001413 , "\0\0\0\0voidT datum_countTstrz_C::operator =( const countT* const pcP )" ,
0x00001414 , "\0\0\0\0list_countTstrz_C::~list_countTstrz_C( voidT )" ,
0x00001415 , "\0\0\0\0list_countTstrz_C::list_countTstrz_C( tinS& tinP , const listC& listDadP , const countT idNameP , const countT* const pczP ) :" ,
0x00001416 , "\0\0\0\0voidT list_countTstrz_C::operator =( const countT* const pcP )" ,
0x00001417 , "\0\0\0\0listing_countTstrz_C::~listing_countTstrz_C( voidT )" ,
0x00001418 , "\0\0\0\0listing_countTstrz_C::listing_countTstrz_C( tinS& tinP , const listC& listDadP , const countT* const pczP ) :" ,
0x00001419 , "\0\0\0\0voidT listing_countTstrz_C::operator =( const countT* const postP )" ,
0x0000141a , "\0\0\0\0datum_listingVSP_C::~datum_listingVSP_C( voidT )" ,
0x0000141b , "\0\0\0\0datum_listingVSP_C::datum_listingVSP_C( tinS& tinP , byteT& flagsiP , byteT& idTypeP , const listingC& listingRefP , const listingC& listingP ) :" ,
0x0000141c , "\0\0\0\0datum_listingVSP_C::operator listingVSP( voidT ) const" ,
0x0000141d , "\0\0\0\0listing_listingVSP_C::~listing_listingVSP_C( voidT )" ,
0x0000141e , "\0\0\0\0listing_listingVSP_C::listing_listingVSP_C( tinS& tinP , const listC& listDadP , const listingC& listingP ) :" ,
0x0000141f , "\0\0\0\0list_listingVSP_C::~list_listingVSP_C( voidT )" ,
0x00001420 , "\0\0\0\0list_listingVSP_C::list_listingVSP_C( tinS& tinP , const listC& listDadP , const countT idNameP , const listingC& listingP ) :" ,
0x00001421 , "\0\0\0\0datumS::~datumS( voidT )" ,
0x00001422 , "\0\0\0\0datumS::datumS( tinS& tinP , const countT cValueP ) :" ,
0x00001423 , "\0\0\0\0datumS::datumS( tinS& tinP , const osTextT* const postValueP ) :" ,
0x00001424 , "\0\0\0\0datumS::datumS( tinS& tinP , const countT* const pczValueP ) :" ,
0x00001425 , "\0\0\0\0recordC::~recordC( voidT )" ,
0x00001426 , "\0\0\0\0recordC::recordC( tinS& tinP , const countT* const pczNameP , const flagsT flagsP ) :" ,
0x00001427 , "\0\0\0\0flagsT recordC::fieldOpenFlagsF( tinS& tinP , const flagsT flagsP )" ,
0x00001428 , "\0\0\0\0recordC& recordC::operator <<( const countT cNameP )" ,
0x00001429 , "\0\0\0\0recordC& recordC::operator <<( const fieldEditParamInC& inP )" ,
0x0000142a , "\0\0\0\0recordC& recordC::operator >>( fieldEditParamOutC*& pOutP )" ,
0x0000142b , "\0\0\0\0flagsT recordC::chatterF( tinS& tinP , flagsT flagsP )" ,
0x0000142c , "\0\0\0\0flagsT recordC::walkF( tinS& tinP )" ,
0x0000142d , "\0\0\0\0selectC::~selectC( voidT )" ,
0x0000142e , "\0\0\0\0selectC::selectC( voidT ) :" ,
0x0000142f , "\0\0\0\0selectC::selectC( tinS& tinP , const countT cFieldNameP , const countT valueP , const countT cNetP ) :" ,
0x00001430 , "\0\0\0\0selectC::selectC( const selectC& selectP ) :" ,
0x00001431 , "\0\0\0\0selectC selectC::operator |( const selectC& selectP )" ,
0x00001432 , "\0\0\0\0selectC selectC::operator &( const selectC& selectP )" ,
0x00001433 , "\0\0\0\0selectC& selectC::operator =( const selectC& selectP )" ,
0x00001434 , "\0\0\0\0voidT selectC::walkF( tinS& tinP , selectWalkCBFT pSelectWalkCBFP )" ,
0x00001435 , "\0\0\0\0boolT selectC::isListedF( tinS& tinP , const listingC& listingP )" ,
0x00001436 , "\0\0\0\0selectC& selectC::operator <<( const selectC& selectP )" ,
0x00001437 , "\0\0\0\0selectC::selectC( tinS& tinP , const countT cFieldNameP , const osTextT* const valueP , const countT cNetP ) :" ,
0x00001438 , "\0\0\0\0selectC::selectC( tinS& tinP , const countT cFieldNameP , const countT* const valueP , const countT cNetP ) :" ,
0x00001439 , "\0\0\0\0grabotC::~grabotC( voidT )" ,
0x0000143a , "\0\0\0\0grabotC::grabotC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , flagsT flagsP , const countT msNapP , const countT idGrabLayerP ) :" ,
0x0000143b , "\0\0\0\0grabotC::grabotC( voidT ) :" ,
0x0000143c , "\0\0\0\0linkedC::~linkedC( voidT )" ,
0x0000143d , "\0\0\0\0WAKEsHOWtEXT( \"scratch\" )" ,
0x0000143e , "\0\0\0\0linkedC::linkedC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , linkedC& rootP ) :" ,
0x0000143f , "\0\0\0\0voidT linkedC::openKidF( tinS& tinP , handleC& hP )" ,
0x00001440 , "\0\0\0\0linkedC& linkedC::getLinkIF( tinS& tinP , handleC& hP )" ,
0x00001441 , "\0\0\0\0voidT linkedC::nextIF( tinS& tinP , handleC& hP )" ,
0x00001442 , "\0\0\0\0parm_tmAdamMainF_S::~parm_tmAdamMainF_S( voidT )" ,
0x00001443 , "\0\0\0\0parm_tmAdamMainF_S::parm_tmAdamMainF_S( tinS& tinP , countT idAdamP ) :" ,
0x00001444 , "\0\0\0\0slabS::~slabS( voidT )" ,
0x00001445 , "\0\0\0\0slabS::slabS( voidT ) :" ,
0x00001446 , "\0\0\0\0slabS& slabS::slabF( voidT )" ,
0x00001447 , "\0\0\0\0cleanC::~cleanC( voidT )" ,
0x00001448 , "\0\0\0\0cleanC::cleanC( tinS& tinP ) :" ,
0x00001449 , "\0\0\0\0topC::~topC( voidT )" ,
0x0000144a , "\0\0\0\0topC::topC( countT* pToP , countT vNewP , flagsT flagsP ) :" ,
0x0000144b , "\0\0\0\0voidT topC::doF( voidT )" ,
0x0000144c , "\0\0\0\0voidT topC::undoF( voidT )" ,
0x0000144d , "\0\0\0\0whereS::whereS( tinS& tinP )" ,
0x0000144e , "\0\0\0\0featuresS::~featuresS( voidT )" ,
0x0000144f , "\0\0\0\0featuresS::featuresS( tinS& tinP , const countT idAdamP , soulC*& psFeaturesP ) :" ,
0x00001450 , "\0\0\0\0featuresS::featuresS( featuresS& fP ) :" ,
0x00001451 , "\0\0\0\0strikeS::strikeS( tinS& tinP ) :" ,
0x00001452 , "\0\0\0\0strikeS::strikeS( strikeS& sP ) :" ,
0x00001453 , "\0\0\0\0sadamC::~sadamC( voidT )" ,
0x00001454 , "\0\0\0\0sadamC::sadamC( tinS& tinP , const countT idAdamP , soulC*& psFeaturesP ) :" ,
0x00001455 , "\0\0\0\0sadamC::sadamC( sadamC& sP ) :" ,
0x00001456 , "\0\0\0\0boolT sadamC::doF( tinS& tinP , etherC& etherP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const handleC* const phCloneP )" ,
0x00001457 , "\0\0\0\0boolT sadamC::bAwakePresentF( tinS& tinP )" ,
0x00001458 , "\0\0\0\0sadamsC::~sadamsC( voidT )" ,
0x00001459 , "\0\0\0\0sadamsC::sadamsC( tinS& tinP , etherC& etherP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP ) :" ,
0x0000145a , "\0\0\0\0sadamC& sadamsC::operator ()( tinS& tinP , const countT idAdamP , const handleC* const phCloneP , soulC** ppsFeaturesP )" ,
0x0000145b , "\0\0\0\0voidT sadamsC::freezeF( tinS& tinP , handleC& hCloneP , const handleC* const phCloneP )" ,
0x0000145c , "\0\0\0\0voidT sadamsC::unlockF( tinS& tinP , handleC& hCloneP )" ,
0x0000145d , "\0\0\0\0voidT sadamsC::getF( tinS& tinP , stackC*& pStk_pSadam_P , const flagsT flagsP )" ,
0x0000145e , "\0\0\0\0voidT sadamsC::highlightIfF( tinS& tinP )" ,
0x0000145f , "\0\0\0\0voidT sadamsC::rptF( tinS& tinP , const osTextT* const postP )" ,
0x00001460 , "\0\0\0\0voidT sadamsC::deregisterF( tinS& tinP , const countT idAdamP )" ,
0x00001461 , "\0\0\0\0voidT sadamsC::tabFreshF( tinS& tinP , etherC& etherP , const countT idTypeP , const sadamC* const pSadamJumpToP )" ,
0x00001462 , "\0\0\0\0voidT sadamsC::tabJumpF( tinS& tinP , etherC& etherP , const countT idAdamP )" ,
0x00001463 , "\0\0\0\0sadamC* sadamsC::pSadamF( tinS& tinP , const countT idAdamP , const handleC* const phCloneP )" ,
0x00001464 , "\0\0\0\0featuresS::fCopyableS::fCopyableS( const countT idAdamP ) :" ,
0x00001465 , "\0\0\0\0displayC::~displayC( voidT )" ,
0x00001466 , "\0\0\0\0displayC::displayC( tinS& tinP , etherC& etherP , const measureT surfaceErrorLimitP , deviceCBFT pDeviceCBFP , const countT cArgP , const flagsT flagsP ) :" ,
0x00001467 , "\0\0\0\0voidT displayC::liveF( tinS& tinP )" ,
0x00001468 , "\0\0\0\0voidT displayC::positionF( tinS& tinP , const flagsT flagsP , const countT cColP , const countT cRowP , const countT offColP , const countT offRowP )" ,
0x00001469 , "\0\0\0\0boolT displayC::hearGossipF( tinS& tinP , associateC& originP , const countT idTypeP , const countT idMsgP , const countT cArgP )" ,
0x0000146a , "\0\0\0\0voidT displayC::invalidateF( tinS& tinP )" ,
0x0000146b , "\0\0\0\0displayArgS::displayArgS( tinS& tinP , displayC& displayP ) :" ,
0x0000146c , "\0\0\0\0eyeC::eyeC( tinS& tinP , etherC& etherP ) :" ,
0x0000146d , "\0\0\0\0voidT eyeC::whereF( vectorOldC& vAtP , measureT& aHeadingP , measureT& aElevationP , measureT& aBankP ) const" ,
0x0000146e , "\0\0\0\0vectorOldC eyeC::behindF( tinS& tinP , vectorOldC& e1P , vectorOldC& e2P ) const" ,
0x0000146f , "\0\0\0\0boolT eyeC::directionF( tinS& tinP , measureT& aHeadingP , measureT& aElevationP , const vectorOldC& eP , const flagsT flagsP ) const" ,
0x00001470 , "\0\0\0\0boolT eyeC::directionF( tinS& tinP , measureT& aHeadingP , measureT& aElevationP , vectorOldC& vTweakP , const vectorOldC& vTowardP , const flagsT flagsP ) const" ,
0x00001471 , "\0\0\0\0vectorOldC eyeC::aboveOrBelowF( tinS& tinP , vectorOldC& e1P , vectorOldC& e2P ) const" ,
0x00001472 , "\0\0\0\0voidT eyeC::moveF( tinS& tinP , const vectorOldC& vDeltaAtP , const measureT deltaHeadingP , const measureT deltaElevationP , const measureT deltaBankP )" ,
0x00001473 , "\0\0\0\0boolT eyeC::hearGossipF( tinS& tinP , associateC& originP , const countT idTypeP , const countT idMsgP , const countT cArgP )" ,
0x00001474 , "\0\0\0\0voidT eyeC::sayCheeseF( tinS& tinP , byteT* const pbaViewP , countT cbaViewP , associateC& viewerP )" ,
0x00001475 , "\0\0\0\0gridS::gridS( countT offColP , countT offRowP , countT cColP , countT cRowP , flagsT flagsP ) :" ,
0x00001476 , "\0\0\0\0gridS::gridS( const gridS& gridP              , countT cColP , countT cRowP , flagsT flagsP ) :" ,
0x00001477 , "\0\0\0\0voidT gridS::highWaterF( cPoint2S& ptP )" ,
0x00001478 , "\0\0\0\0voidT gridS::advanceGridIfF( gridS& gridDadP , const countT idCasteP , cPoint2S& ptLathP )" ,
0x00001479 , "\0\0\0\0paperS::~paperS( voidT )" ,
0x0000147a , "\0\0\0\0paperS::paperS( tinS& tinP , const countT cGlyphP , const countT cPointP ) :" ,
0x0000147b , "\0\0\0\0paperC::~paperC( voidT )" ,
0x0000147c , "\0\0\0\0paperC::paperC( tinS& tinP , etherC& etherP , const countT cColP , const countT cRowP ) :" ,
0x0000147d , "\0\0\0\0voidT paperC::strokeF( tinS& tinP , const strokeS* const psttP )" ,
0x0000147e , "\0\0\0\0voidT paperC::spaceF( tinS& tinP , spaceC*& pSpaceP , surfC& surfP , const measureT m01StepP )" ,
0x0000147f , "\0\0\0\0voidT paperC::validateF( tinS& tinP )" ,
0x00001480 , "\0\0\0\0voidT paperC::pelF( tinS& tinP , pelC*& pPelP , const deviceC& deviceP )" ,
0x00001481 , "\0\0\0\0paperC::paperC( tinS& tinP , etherC& etherP , const deviceC& deviceP ) :" ,
0x00001482 , "\0\0\0\0voidT paperC::sayCheeseF( tinS& tinP , byteT* const pbaViewP , countT cbaViewP , associateC& viewerP )" ,
0x00001483 , "\0\0\0\0boolT paperC::hearGossipF( tinS& tinP , associateC& originP , const countT idTypeP , const countT idMsgP , const countT cArgP )" ,
0x00001484 , "\0\0\0\0pelC::~pelC( voidT )" ,
0x00001485 , "\0\0\0\0pelC::pelC( tinS& tinP , etherC& etherP , const deviceC& deviceP , const associateC& vieweeP ) :" ,
0x00001486 , "\0\0\0\0const pelS& pelC::operator []( countT rgbP )" ,
0x00001487 , "\0\0\0\0voidT pelC::writeF( tinS& tinP )" ,
0x00001488 , "\0\0\0\0pelS::~pelS( voidT )" ,
0x00001489 , "\0\0\0\0pelS::pelS( tinS& tinP , const countT cGlyphP , const countT cPointP ) :" ,
0x0000148a , "\0\0\0\0pelS::pelS( tinS& tinP , const paperS& paperP , const countT cColP , const countT cRowP , const deviceC& deviceP ) :" ,
0x0000148b , "\0\0\0\0spaceC::~spaceC( voidT )" ,
0x0000148c , "\0\0\0\0spaceC::spaceC( tinS& tinP , etherC& etherP , const associateC& vieweeP ) :" ,
0x0000148d , "\0\0\0\0voidT spaceC::pelF( tinS& tinP , pelC*& pPelP , deviceC& deviceP )" ,
0x0000148e , "\0\0\0\0const spaceS& spaceC::operator []( countT rgbP )" ,
0x0000148f , "\0\0\0\0spaceS::~spaceS( voidT )" ,
0x00001490 , "\0\0\0\0spaceS::spaceS( tinS& tinP , const countT cGlyphP , const countT cPointP ) :" ,
0x00001491 , "\0\0\0\0deviceC::~deviceC( voidT )" ,
0x00001492 , "\0\0\0\0deviceC::deviceC( tinS& tinP , etherC& etherP , const measureT surfaceErrorLimitP , deviceCBFT pDeviceCBFP , const countT cArgP , const flagsT flagsP ) :" ,
0x00001493 , "\0\0\0\0voidT deviceC::ctBitmapF( tinS& tinP )" ,
0x00001494 , "\0\0\0\0voidT deviceC::dtBitmapF( tinS& tinP )" ,
0x00001495 , "\0\0\0\0boolT deviceC::hearGossipF( tinS& tinP , associateC& originP , const countT idTypeP , const countT idMsgP , const countT cArgP )" ,
0x00001496 , "\0\0\0\0voidT deviceC::quitDrawingF( tinS& tinP )" ,
0x00001497 , "\0\0\0\0surfC::~surfC( voidT )" ,
0x00001498 , "\0\0\0\0surfC::surfC( tinS& tinP , etherC& etherP , const measureT surfaceErrorLimitP , surfaceCBFT pSurfaceCBFP , const countT cArgP , spaceFromPaperPrologCBFT pSpaceFromPaperPrologCBFP , spaceFromPaperEpilogCBFT pSpaceFromPaperEpilogCBFP , const flagsT flagsP ) :" ,
0x00001499 , "\0\0\0\0countT surfC::spaceF( tinS& tinP , spaceS* const pSpaceP , glyphTallyS* const pTallyP , const paperS& paperP , const countT rgbP , const flagsT flagsP , const measureT m01StepP ) const" ,
0x0000149a , "\0\0\0\0voidT surfC::sayCheeseF( tinS& tinP , byteT* const pbaViewP , countT cbaViewP , associateC& viewerP )" ,
0x0000149b , "\0\0\0\0boolT surfC::hearGossipF( tinS& tinP , associateC& originP , const countT idTypeP , const countT idMsgP , const countT cArgP )" ,
0x0000149c , "\0\0\0\0associateC::~associateC( voidT )" ,
0x0000149d , "\0\0\0\0associateC::associateC( tinS& tinP , etherC& etherP , const countT idGroupP , const countT cbViewP ) :" ,
0x0000149e , "\0\0\0\0voidT associateC::operator +=( associateC& assP )" ,
0x0000149f , "\0\0\0\0voidT associateC::operator -=( associateC& assP )" ,
0x000014a0 , "\0\0\0\0associateC::operator countT( voidT ) const" ,
0x000014a1 , "\0\0\0\0associateC& associateC::operator []( countT idP )" ,
0x000014a2 , "\0\0\0\0boolT associateC::walkF( tinS& tinP , associateCBFT pAssociateCBFP , countT cArgP , const flagsT flagsP , const countT* const pczIncludeP , const countT* const pczExcludeP , staqC* const pStqWalkerP )" ,
0x000014a3 , "\0\0\0\0voidT associateC::moonThePhotographersF( tinS& tinP )" ,
0x000014a4 , "\0\0\0\0voidT associateC::takeMyPictureF( tinS& tinP , associateC& vieweeP )" ,
0x000014a5 , "\0\0\0\0voidT associateC::sayCheeseF( tinS& tinP , byteT* const pbaViewP , countT cbaViewP , associateC& viewerP )" ,
0x000014a6 , "\0\0\0\0boolT associateC::hearGossipF( tinS& tinP , associateC& originP , const countT idTypeP , const countT idMsgP , const countT cArgP )" ,
0x000014a7 , "\0\0\0\0boolT associateC::gossipF( tinS& tinP , const countT idMsgP , const countT cArgP , const countT idTypeP , const countT* const pczIncludeP , const countT* const pczExcludeP )" ,
0x000014a8 , "\0\0\0\0assViewStqS::assViewStqS( tinS& tinP , const associateC& vieweeP , countT ceP ) :" ,
0x000014a9 , "\0\0\0\0assViewEyeS::~assViewEyeS( voidT )" ,
0x000014aa , "\0\0\0\0assViewEyeS::assViewEyeS( tinS& tinP , const eyeC& eyeP , countT ceP ) :" ,
0x000014ab , "\0\0\0\0branchS::~branchS( voidT )" ,
0x000014ac , "\0\0\0\0branchS::branchS( const countT valueP , const countT idTypeP ) :" ,
0x000014ad , "\0\0\0\0voidT branchS::loadIF( tinS& tinP , etherC& etherP , const boolT& bQuitP , jotC& jotP , countT& csttTrimmedP , soulC& soulLinesP , const flagsT flagsP , soulC* pSoulLinkP )" ,
0x000014ae , "\0\0\0\0countT branchS::cDepthIF( tinS& tinP , etherC& etherP , const countT jMeP , const countT cDepthMaxP , const countT idEditionP )" ,
0x000014af , "\0\0\0\0voidT branchS::putFileIF( tinS& tinP , etherC& etherP , const boolT& bQuitP , countT& cPendingP , stackC& st_putFileJob_P , putFileS& pP , const countT offLevelP , const countT jMeP , const countT jDadP , const countT jGrandDadP , countT& cLeverBranchP , switchC& swFileP , countT cNestP , const countT idEditionP , const strokeS* const psttTimeStampP , const strokeS* const psttBanner1P , const strokeS* const psttBanner2P , const strokeS* const psttNameSpaceP )" ,
0x000014b0 , "\0\0\0\0voidT branchS::putFileIF( tinS& tinP , etherC& etherP , const boolT& bQuitP , putFileS& pP , jotC& jotP , const countT idSequenceJotP , const strokeS* const psttTimeStampP , const strokeS* const psttBanner1P , const strokeS* const psttBanner2P , const strokeS* const psttNameSpaceP , const osTextT* const postSourceP , const countT costSourceP )" ,
0x000014b1 , "\0\0\0\0voidT branchS::hashF( tinS& tinP , const countT jbrMeP , barryC& barryHashP , stackC& stHashCollisionsP )" ,
0x000014b2 , "\0\0\0\0countT branchS::bEditionIF( tinS& tinP , etherC& etherP , const countT jMeP , const countT idEditionP )" ,
0x000014b3 , "\0\0\0\0_1S::~_1S( voidT )" ,
0x000014b4 , "\0\0\0\0_1S::_1S( tinS& tinP , etherC& ether , _1S*& p1RootP ) :" ,
0x000014b5 , "\0\0\0\0link189S::~link189S( voidT )" ,
0x000014b6 , "\0\0\0\0link189S::link189S( etherC& etherP , link189S*& p1RootP ) :" ,
0x000014b7 , "\0\0\0\0tallyHoC::tallyHoC( voidT ) :" ,
0x000014b8 , "\0\0\0\0inOutFrameC::~inOutFrameC( voidT )" ,
0x000014b9 , "\0\0\0\0inOutFrameC::inOutFrameC( tinS& tinP , const countT idLineP , const countT idiFileP , const countT idFileRankP , const boolT bClassP ) :" ,
0x000014ba , "\0\0\0\0jotC::~jotC( voidT )" ,
0x000014bb , "\0\0\0\0jotC::jotC( tinS& tinP , const osTextT* const postNameP , const flagsT flagsP , const countT cbDataBookP , const countT cIndexEntriesBookP , const countT cKeepInactiveP , countT idGrabLayerP , flagsT flagsGrabP , countT idMemorySpaceP ) :" ,
0x000014bc , "\0\0\0\0countT jotC::writeF( tinS& tinP , const byteT* const pb1P , const countT cb1P , const byteT* const pb2P , const countT cb2P , const flagsT flagsP )" ,
0x000014bd , "\0\0\0\0pageC jotC::readF( tinS& tinP , countT idP )" ,
0x000014be , "\0\0\0\0pageC jotC::operator []( countT idP )" ,
0x000014bf , "\0\0\0\0jotC::operator pageC( voidT )" ,
0x000014c0 , "\0\0\0\0countT jotC::peekIdBookF( tinS& tinP , countT idP )" ,
0x000014c1 , "\0\0\0\0barryC::~barryC( voidT )" ,
0x000014c2 , "\0\0\0\0barryC::barryC( tinS& tinP , const countT expBitsPerFieldP , countT cBitsIndexP , countT expBytesPerBookP ) :" ,
0x000014c3 , "\0\0\0\0countT& barryC::operator ()( tinS& tinP , const countT offP , countT& maskP , countT& offBitP )" ,
0x000014c4 , "\0\0\0\0voidT dropNoteS::glassF( tinS& tinP , strokeS*& psttP ) const" ,
0x000014c5 , "\0\0\0\0poolRegistrationS::poolRegistrationS( tinS& tinP ) :" ,
0x000014c6 , "\0\0\0\0voidT poolRegistrationS::resetF( tinS& tinP )" ,
0x000014c7 , "\0\0\0\0putFileS::putFileS( tinS& tinP , etherC& etherP , const countT idModeP ) :" ,
0x000014c8 , "\0\0\0\0putFileS::putFileS( tinS& tinP , etherC& etherP , strokeS*& psttLeverP , switchC& swUrlReferencedP , const countT cNestMaxP , const strokeS* const psttFileP , const countT idModeP , const flagsT flagsP ) :" ,
0x000014c9 , "\0\0\0\0voidT putFileS::ctF( tinS& tinP , etherC& etherP , const countT idModeP )" ,
0x000014ca , "\0\0\0\0pageC::~pageC( voidT )" ,
0x000014cb , "\0\0\0\0pageC::pageC( tinS& tinP , booksC& booksP , const countT cbzP ) :" ,
0x000014cc , "\0\0\0\0pageC::pageC( tinS& tinP , booksC& booksP , countT* pcRefP , const byteT* const pbzP , const countT cbzP , const flagsT flagsP ) :" ,
0x000014cd , "\0\0\0\0pageC::pageC( const pageC& pageP ) :" ,
0x000014ce , "\0\0\0\0pageC& pageC::operator =( const pageC& pageP )" ,
0x000014cf , "\0\0\0\0voidT pageC::setF( tinS& tinP , booksC& booksP , countT* pcRefP , const byteT* const pbzP , countT cbzP , flagsT flagsP )" ,
0x000014d0 , "\0\0\0\0voidT pageC::resetF( tinS& tinP )" ,
0x000014d1 , "\0\0\0\0branchPageC::branchPageC( tinS& tinP , const countT jP ) :" ,
0x000014d2 , "\0\0\0\0pageReleaseC::~pageReleaseC( voidT )" ,
0x000014d3 , "\0\0\0\0pageReleaseC::pageReleaseC( tinS& tinP , const byteT* const pbP ) :" ,
0x000014d4 , "\0\0\0\0hasherC::hasherC( tinS& tinP , etherC& etherP ) :" ,
0x000014d5 , "\0\0\0\0cloudInfoS::cloudInfoS( tinS& tinP , const countT idCloudP ) :" ,
0x000014d6 , "\0\0\0\0cloudC::cloudOpenScratchS::cloudOpenScratchS( tinS& tinP , const countT idCloudP , const strokeS* const psttBuildingP ) :" ,
0x000014d7 , "\0\0\0\0cloudC::~cloudC( voidT )" ,
0x000014d8 , "\0\0\0\0cloudC::cloudC( tinS& tinP , const strokeS* const psttNameP , const countT idDoIfDifferP , const flagsT flagsP , const countT idCloudP , const strokeS* const psttBuildingP , const strokeS* const psttUserP , const strokeS* const psttPasswordP , const strokeS* const psttCloudContainerP , const strokeS* const psttLocalContainerP , const strokeS* const psttLikeP , const countT cbMinP , const countT cbMaxP , const countT cTriesWhenDeletingLocalP , cloudUpdateCBFT pCloudUpdateCBFP , countT* const pcArgUpdateP , cloudNixCBFT pCloudNixCBFP , countT* const pcArgNixP , const strokeS* const psttPourLocalAfterContainerP , const strokeS* const psttAdamHireAfterP ) :" ,
0x000014d9 , "\0\0\0\0voidT cloudC::openF( tinS& tinP , const countT idCloudP , const strokeS* const psttBuildingP , const strokeS* const psttUserP , const strokeS* const psttKeyP )" ,
0x000014da , "\0\0\0\0voidT cloudC::getCloudInfoF( tinS& tinP )" ,
0x000014db , "\0\0\0\0voidT cloudC::wordF( tinS& tinP , cloudOpenScratchS& scrP , stackC& stPathP , const strokeS* const psttP )" ,
0x000014dc , "\0\0\0\0voidT cloudC::pairF( tinS& tinP , cloudOpenScratchS& scrP , stackC& stPathP , const strokeS* const psttP )" ,
0x000014dd , "\0\0\0\0voidT cloudC::valueF( tinS& tinP , cloudOpenScratchS& scrP , stackC& stPathP , const strokeS* const psttP )" ,
0x000014de , "\0\0\0\0voidT cloudC::itemF( tinS& tinP , cloudOpenScratchS& scrP , stackC& stPathP , const strokeS* const psttP )" ,
0x000014df , "\0\0\0\0voidT cloudC::listF( tinS& tinP , cloudOpenScratchS& scrP , stackC& stPathP , const strokeS* const psttP )" ,
0x000014e0 , "\0\0\0\0voidT cloudC::keyF( tinS& tinP , cloudOpenScratchS& scrP , stackC& stPathP , const strokeS* const psttP )" ,
0x000014e1 , "\0\0\0\0countT cloudC::listFilesF( tinS& tinP , const strokeS* const psttCloudContainerP , textC& tMarkerP , const strokeS* const psttLikeP , const countT cbMinP , const countT cbMaxP )" ,
0x000014e2 , "\0\0\0\0voidT cloudC::pushFileF( tinS& tinP , batonC& batConnectP , const strokeS* const psttCloudContainerP , const strokeS* const psttShortP , const strokeS* const psttLocalContainerP )" ,
0x000014e3 , "\0\0\0\0voidT cloudC::deleteRemoteFileF( tinS& tinP , const strokeS* const psttCloudContainerP , const strokeS* const psttShortP )" ,
0x000014e4 , "\0\0\0\0voidT cloudC::queryRemoteFileF( tinS& tinP , countT& cbLoP , countT& cbHiP , strokeS*& psttHashP , const strokeS* const psttCloudContainerP , const strokeS* const psttShortP )" ,
0x000014e5 , "\0\0\0\0voidT cloudC::pullFileF( tinS& tinP , byteT*& pbP , countT& cbP , const strokeS* const psttCloudContainerP , const strokeS* const psttShortP , const countT cTriesP )" ,
0x000014e6 , "\0\0\0\0voidT cloudC::pushFileF( tinS& tinP , const strokeS* const psttCloudContainerP , const strokeS* const psttShortP , const byteT* const pbP , countT cbP )" ,
0x000014e7 , "\0\0\0\0voidT cloudC::pullFileF( tinS& tinP , soulC& sRenameP , const strokeS* const psttFileP , const strokeS* const psttCloudContainerP , const strokeS* const psttShortP )" ,
0x000014e8 , "\0\0\0\0voidT cloudC::deleteRemoteFilesF( tinS& tinP , const strokeS* const psttCloudContainerP , soulC& sDoomedFileNamesP )" ,
0x000014e9 , "\0\0\0\0napkinsC::~napkinsC( voidT )" ,
0x000014ea , "\0\0\0\0napkinsC::napkinsC( tinS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const osTextT* const postP , countT expCbPerNapkinP , countT expCbPerItemP , const countT idStateSpaceP , const flagsT flagsP , const countT idMemorySpaceP ) :" ,
0x000014eb , "\0\0\0\0byteT* napkinsC::operator []( const countT offElementP )" ,
0x000014ec , "\0\0\0\0voidT napkinsC::ctFileNameIF( tinS& tinP , textC& tP , const osTextT* const postNameP )" ,
0x000014ed , "\0\0\0\0voidT napkinsC::ctFileF( tinS& tinP , const countT offDockP , const osTextT* const postNameP )" ,
0x000014ee , "\0\0\0\0voidT* bitNodeS::operator new( countT cbP , napkinsC& napkinsP , countT& offElementP )" ,
0x000014ef , "\0\0\0\0voidT* bitNodeS::operator new( countT cbP , byteT* const pbP )" ,
0x000014f0 , "\0\0\0\0voidT bitNodeS::traceF( tinS& tinP , countT& cNestP , napkinsC* pNapkinsP )" ,
0x000014f1 , "\0\0\0\0voidT bitNodeS::walkF( tinS& tinP , byteT* pbBufferP , countT cbBufferP , countT& cNestP , napkinsC* pNapkinsP , ifcFT pCBFP , countT* pcArgP )" ,
0x000014f2 , "\0\0\0\0bitTreeC::~bitTreeC( voidT )" ,
0x000014f3 , "\0\0\0\0bitTreeC::bitTreeC( tinS& tinP , const osTextT* const postP , const flagsT flagsP , const countT idStateSpaceP , const countT expNodesPerNapkinP , const countT cNodeMaxP , const countT idMemorySpaceP ) :" ,
0x000014f4 , "\0\0\0\0voidT bitTreeC::newF( tinS& tinP , const countT idLineP , const countT idiFileP , const byteT* pbBitsP , countT offBitP , countT cBitsP , countT* const pcDatumP )" ,
0x000014f5 , "\0\0\0\0boolT bitTreeC::newStepF( tinS& tinP )" ,
0x000014f6 , "\0\0\0\0voidT bitTreeC::traceF( tinS& tinP , countT& cNestP )" ,
0x000014f7 , "\0\0\0\0voidT bitTreeC::walkF( tinS& tinP , stackC& stThisP , stackC& stKidsDoneP , byteT* pbBufferP , countT cbBufferP , countT& cNestP , ifc2FT pCBFP , countT* pcArgP , const boolT* const pQuitP , bitNodeS* pRootP )" ,
0x000014f8 , "\0\0\0\0bitNodeS* bitTreeC::queryF( tinS& tinP , const byteT* pbBitsP , countT offBitP , countT cBitsP , countT* const pcDatumP )" ,
0x000014f9 , "\0\0\0\0boolT bitTreeC::queryStepF( tinS& tinP )" ,
0x000014fa , "\0\0\0\0bitNodeS* bitTreeC::newNodeF( tinS& tinP )" ,
0x000014fb , "\0\0\0\0boolT bitTreeC::walkStepF( tinS& tinP )" ,
0x000014fc , "\0\0\0\0voidT bitTreeC::ctF( tinS& tinP )" ,
0x000014fd , "\0\0\0\0voidT bitTreeC::dtF( tinS& tinP )" ,
0x000014fe , "\0\0\0\0voidT bitTreeC::purgeF( tinS& tinP )" ,
0x000014ff , "\0\0\0\0keyValuePairsC::~keyValuePairsC( voidT )" ,
0x00001500 , "\0\0\0\0keyValuePairsC::keyValuePairsC( tinS& tinP , const osTextT* const postNameP , const flagsT flagsP , const countT idStateSpaceP , const countT expNodesPerNapkinP , const countT cNodeMaxP , const countT cbDataBookP , const countT cIndexEntriesBookP , const countT cKeepInactiveP , const countT idMemorySpaceP ) :" ,
0x00001501 , "\0\0\0\0voidT keyValuePairsC::newF( tinS& tinP , const countT idLineP , const countT idiFileP , const byteT* pbBitsP , countT offBitP , countT cBitsP , const byteT* const pbP , const countT cbP )" ,
0x00001502 , "\0\0\0\0voidT keyValuePairsC::newF( tinS& tinP , const countT idLineP , const countT idiFileP , const byteT* pbBitsP , const byteT* const pbP , const countT cbP )" ,
0x00001503 , "\0\0\0\0pageC keyValuePairsC::operator ()( tinS& tinP , const byteT* pbBitsP , countT offBitP , countT cBitsP )" ,
0x00001504 , "\0\0\0\0pageC keyValuePairsC::operator ()( tinS& tinP , const byteT* pbBitsP )" ,
0x00001505 , "\0\0\0\0voidT keyValuePairsC::walkF( tinS& tinP , stackC& stThisP , stackC& stKidsDoneP , byteT* pbBufferP , countT cbBufferP , countT& cNestP , ifc2FT pCBFP , countT* pcArgP , const boolT* const pQuitP )" ,
0x00001506 , "\0\0\0\0voidT keyValuePairsC::purgeF( tinS& tinP )" ,
0x00001507 , "\0\0\0\0boolT keyValuePairsC::queryF( tinS& tinP , const byteT* pbBitsP , countT offBitP , countT cBitsP , pageC* const pPageP )" ,
0x00001508 , "\0\0\0\0boolT keyValuePairsC::queryF( tinS& tinP , const byteT* pbBitsP , pageC* const pPageP )" ,
0x00001509 , "\0\0\0\0fileWindowC::~fileWindowC( voidT )" ,
0x0000150a , "\0\0\0\0fileWindowC::fileWindowC( tinS& tinP , etherC& etherP , const handleC& hFileP , countT offLoP , countT offHiP , countT cbP , const flagsT flagsP ) :" ,
0x0000150b , "\0\0\0\0fileWindowC::operator byteT*( voidT ) const" ,
0x0000150c , "\0\0\0\0baseC::~baseC( voidT )" ,
0x0000150d , "\0\0\0\0baseC::baseC( countT idLineCtP , countT idiFileCtP , countT idTypeBaseP ) :" ,
0x0000150e , "\0\0\0\0tellInfoSexS::~tellInfoSexS( voidT )" ,
0x0000150f , "\0\0\0\0tellInfoSexS::tellInfoSexS( voidT ) :" ,
0x00001510 , "\0\0\0\0tellInfoProcessGlobal1S::~tellInfoProcessGlobal1S( voidT )" ,
0x00001511 , "\0\0\0\0tellInfoProcessGlobal1S::tellInfoProcessGlobal1S( voidT ) :" ,
0x00001512 , "\0\0\0\0heapC::~heapC( voidT )" ,
0x00001513 , "\0\0\0\0heapC::heapC( tinS& tinP ) :" ,
0x00001514 , "\0\0\0\0voidT heapC::combineF( tinS& tinP )" ,
0x00001515 , "\0\0\0\0voidT heapC::delF( tinS& tinP , byteT*& pbP )" ,
0x00001516 , "\0\0\0\0byteT* heapC::newF( tinS& tinP , const countT idLineP , const countT idiFileP , const countT cbP )" ,
0x00001517 , "\0\0\0\0voidT heapC::testF( tinS& tinP , const osTextT* const postP )" ,
0x00001518 , "\0\0\0\0voidT heapC::dumpF( tinS& tinP , const osTextT* const post1P , const osTextT* const post2P )" ,
0x00001519 , "\0\0\0\0processGlobal0S::~processGlobal0S( voidT )" ,
0x0000151a , "\0\0\0\0processGlobal0S::processGlobal0S( voidT ) :" ,
0x0000151b , "\0\0\0\0fileWindowsC::~fileWindowsC( voidT )" ,
0x0000151c , "\0\0\0\0fileWindowsC::fileWindowsC( tinS& tinP , etherC& etherP , const strokeS* const psttFileP , const flagsT flagsP , const countT cTriesP ) :" ,
0x0000151d , "\0\0\0\0voidT fileWindowsC::getF( tinS& tinP , byteT*& pbP , countT& cbP , const countT cbWantP )" ,
0x0000151e , "\0\0\0\0hoverC::~hoverC( voidT )" ,
0x0000151f , "\0\0\0\0hoverC::hoverC( tinS& tinP , etherC& etherP , const strokeS* const psttFolderP ) :" ,
0x00001520 , "\0\0\0\0patternC::~patternC( voidT )" ,
0x00001521 , "\0\0\0\0patternC::patternC( tinS& tinP , etherC& etherP , const strokeS* const psttP , const countT idTypeP ) :" ,
0x00001522 , "\0\0\0\0fileNameC::~fileNameC( voidT )" ,
0x00001523 , "\0\0\0\0fileNameC::fileNameC( tinS& tinP , etherC& etherP , const strokeS* const psttP ) :" ,
0x00001524 , "\0\0\0\0citizen gui driver" ,
0x00001525 , "\0\0\0\0citizen detached process driver" ,
0x00001526 , "\0\0\0\0citizen gui driver"